{
    "key": "cassioml-langchain-hotels-app",
    "tags": [
        "vector",
        "astradb",
        "python",
        "cassio",
        "langchain"
    ],
    "urls": {
        "github": "https://github.com/cassioml/langchain-hotels-app",
        "heroimage": "https://raw.githubusercontent.com/cassioml/langchain-hotels-app/main/hotels_animated.gif"
    },
    "last_modified": "Thu, 25 Jan 2024 01:16:51 GMT",
    "forks_count": 1,
    "stargazers_count": 4,
    "name": "Hotels LLM Demo",
    "description": "A full demo app (API + front-end) to search and review hotels, powered by GenAI, LLMs and embedding vectors.",
    "duration": "2 hours",
    "skilllevel": "Intermediate",
    "priority": 1,
    "readme": "<h1>Hotels LLM Demo with LangChain, CassIO and Astra DB</h1>\n<h2>What</h2>\n<p>A full demo app (API + front-end) to search and review hotels, powered by<br />\nGenAI, LLMs and embedding vectors.</p>\n<p><img src=\"images/hotels_animated.gif\" alt=\"App screenshot\" /></p>\n<p>The demo features:</p>\n<ul>\n<li>LLM-processed user profile;</li>\n<li>vector-search-powered hotel review search;</li>\n<li>LLM-generated hotel summaries based on reviews + user profile (to maximize relevance);</li>\n<li>caching of prompt/response LLM interactions.</li>\n</ul>\n<p>Tech stack:</p>\n<ul>\n<li><a href=\"https://docs.datastax.com/en/astra-serverless/docs/vector-search/overview.html\">Astra DB</a> as the vector database;</li>\n<li>OpenAI for the LLM and the embeddings;</li>\n<li>React+Typescript for the client;</li>\n<li>FastAPI, LangChain and <a href=\"https://cassio.org\">CassIO</a> for the API.</li>\n</ul>\n<p><em>Note that at the time of writing, pending a PR to LangChain, a custom fork of the repo will be installed.</em></p>\n<h2>Prerequisites</h2>\n<p>You need:</p>\n<ul>\n<li>an <a href=\"https://astra.datastax.com\">Astra</a> Vector Database (free tier is fine!). <strong>You'll be asked to supply a <a href=\"https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure\">Database Administrator token</a></strong>, the string starting with <code>AstraCS:...</code>;</li>\n<li>likewise, get your <a href=\"https://awesome-astra.github.io/docs/pages/astra/faq/#where-should-i-find-a-database-identifier\">Database ID</a> ready, you will have to enter it;</li>\n<li>an <strong>OpenAI API Key</strong>. (More info <a href=\"https://cassio.org/start_here/#llm-access\">here</a>, note that out-of-the-box this demo supports OpenAI unless you tinker with the code.)</li>\n</ul>\n<details><summary><i>Note:</i> If you have switched Astra to the <b>New Vector Developer Experience UI</b>, click here for instructions on the DB credentials.\n</summary>\n<p>Go to your database dashboard and click on the &quot;Connection Details&quot; button on the right. A dialog will open with instructions for connecting. You'll do two things:</p>\n<ul>\n<li>click &quot;Generate Token&quot; and copy the <code>AstraCS:...</code> string in its entirety once that appears on the dialog;</li>\n<li>locate the <code>api_endpoint=...</code> line in the Python code example. The database ID is the sequence after <code>https://</code> and before the dash + region name (e.g. <code>-us-east1</code>) in the definition of the endpoint. It looks like <code>01234567-89ab-cdef-0123-456789abcdef</code> (and has always this length).</li>\n</ul>\n<p><img src=\"images/new_vector_ui.png\" alt=\"DB credentials in the Vector Developer Experience\" /></p>\n</details>\n<h2>How-to (Gitpod)</h2>\n<p>Click this button, confirm opening of the workspace<br />\n(you might need to do a Gitpod login in the process) and wait 3-4 minutes for the full setup to complete:<br />\ninstructions will show up in the console below, where you'll have<br />\nto provide connection details and OpenAI key when prompted.</p>\n<p>In the meantime, the app will open in the top panel.</p>\n<p><a href=\"https://gitpod.io/#https://github.com/cassioml/langchain-hotels-app\"><img src=\"images/open_in_gitpod.svg\" /></a></p>\n<h2>How-to (local run)</h2>\n<h3>Setup (API)</h3>\n<p>Create a <code>python3.8+</code> virtualenv and <code>pip install -r requirements.txt</code>.</p>\n<blockquote>\n<p><em>Note</em>: this demo has been tested with Python versions 3.8, 3.9 and 3.10. Please stick to these Python versions, otherwise you'll likely be unable to install all required dependencies (until newer wheels for them are published).</p>\n</blockquote>\n<p>Copy <code>.env.template</code> to <code>.env</code> and fill the values (see Prerequisites above).</p>\n<h3>Prepare database</h3>\n<p>There are a few scripts to run in sequence which create the necessary tables<br />\non the database and fill them with data. Simply launch the following scripts<br />\none after the other (the script names make it clear what part of the setup they do):</p>\n<pre><code>python -m setup.2-populate-review-vector-table\npython -m setup.3-populate-hotels-and-cities-table\npython -m setup.4-create-users-table\npython -m setup.5-populate-reviews-table\n</code></pre>\n<p><strong>Note</strong>: the repo comes with a dataset ready for ingestion in the DB, i.e.<br />\nalready cleaned and made into the correct format (including the embedding calculation!).<br />\nIf you are curious about<br />\nhow <em>that</em> was prepared, we have included the scripts for that - which<br />\nyou <em>do not need to run</em>, to be clear.</p>\n<details><summary>Show me the dataset preprocessing steps, I'm curious</summary>\n<h4>Download the dataset</h4>\n<p>Download <code>Datafiniti_Hotel_Reviews_Jun19.csv</code> from <a href=\"https://www.kaggle.com/datasets/datafiniti/hotel-reviews?select=Datafiniti_Hotel_Reviews_Jun19.csv\">here</a><br />\n(unzip if necessary) and put it into <code>setup/original</code>.</p>\n<h4>Clean the input CSV</h4>\n<p>Refi",
    "readme_markdown": "# Hotels LLM Demo with LangChain, CassIO and Astra DB\n\n## What\n\nA full demo app (API + front-end) to search and review hotels, powered by\nGenAI, LLMs and embedding vectors.\n\n![App screenshot](images/hotels_animated.gif)\n\nThe demo features:\n\n- LLM-processed user profile;\n- vector-search-powered hotel review search;\n- LLM-generated hotel summaries based on reviews + user profile (to maximize relevance);\n- caching of prompt/response LLM interactions.\n\nTech stack:\n\n- [Astra DB](https://docs.datastax.com/en/astra-serverless/docs/vector-search/overview.html) as the vector database;\n- OpenAI for the LLM and the embeddings;\n- React+Typescript for the client;\n- FastAPI, LangChain and [CassIO](https://cassio.org) for the API.\n\n_Note that at the time of writing, pending a PR to LangChain, a custom fork of the repo will be installed._\n\n## Prerequisites\n\nYou need:\n\n- an [Astra](https://astra.datastax.com) Vector Database (free tier is fine!). **You'll be asked to supply a [Database Administrator token](https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure)**, the string starting with `AstraCS:...`;\n- likewise, get your [Database ID](https://awesome-astra.github.io/docs/pages/astra/faq/#where-should-i-find-a-database-identifier) ready, you will have to enter it;\n- an **OpenAI API Key**. (More info [here](https://cassio.org/start_here/#llm-access), note that out-of-the-box this demo supports OpenAI unless you tinker with the code.)\n\n<details><summary><i>Note:</i> If you have switched Astra to the <b>New Vector Developer Experience UI</b>, click here for instructions on the DB credentials.\n</summary>\n\nGo to your database dashboard and click on the \"Connection Details\" button on the right. A dialog will open with instructions for connecting. You'll do two things:\n\n- click \"Generate Token\" and copy the `AstraCS:...` string in its entirety once that appears on the dialog;\n- locate the `api_endpoint=...` line in the Python code example. The database ID is the sequence after `https://` and before the dash + region name (e.g. `-us-east1`) in the definition of the endpoint. It looks like `01234567-89ab-cdef-0123-456789abcdef` (and has always this length).\n\n![DB credentials in the Vector Developer Experience](images/new_vector_ui.png)\n\n</details>\n\n\n## How-to (Gitpod)\n\nClick this button, confirm opening of the workspace\n(you might need to do a Gitpod login in the process) and wait 3-4 minutes for the full setup to complete:\ninstructions will show up in the console below, where you'll have\nto provide connection details and OpenAI key when prompted.\n\nIn the meantime, the app will open in the top panel.\n\n<a href=\"https://gitpod.io/#https://github.com/cassioml/langchain-hotels-app\"><img src=\"images/open_in_gitpod.svg\" /></a>\n\n\n## How-to (local run)\n\n### Setup (API)\n\nCreate a `python3.8+` virtualenv and `pip install -r requirements.txt`.\n\n> _Note_: this demo has been tested with Python versions 3.8, 3.9 and 3.10. Please stick to these Python versions, otherwise you'll likely be unable to install all required dependencies (until newer wheels for them are published).\n\nCopy `.env.template` to `.env` and fill the values (see Prerequisites above).\n\n### Prepare database\n\nThere are a few scripts to run in sequence which create the necessary tables\non the database and fill them with data. Simply launch the following scripts\none after the other (the script names make it clear what part of the setup they do):\n\n```\npython -m setup.2-populate-review-vector-table\npython -m setup.3-populate-hotels-and-cities-table\npython -m setup.4-create-users-table\npython -m setup.5-populate-reviews-table\n```\n\n**Note**: the repo comes with a dataset ready for ingestion in the DB, i.e.\nalready cleaned and made into the correct format (including the embedding calculation!).\nIf you are curious about\nhow _that_ was prepared, we have included the scripts for that - which\nyou _do not need to run_, to be clear.\n\n<details><summary>Show me the dataset preprocessing steps, I'm curious</summary>\n\n#### Download the dataset\n\nDownload `Datafiniti_Hotel_Reviews_Jun19.csv` from [here](https://www.kaggle.com/datasets/datafiniti/hotel-reviews?select=Datafiniti_Hotel_Reviews_Jun19.csv)\n(unzip if necessary) and put it into `setup/original`.\n\n#### Clean the input CSV\n\nRefine the original CSV into its \"cleaned\" version for later use:\n\n```\npython -m setup.0-clean-csv\n```\n\n#### Calculate embeddings (takes time and some OpenAI calls!)\n\nThis script calculates embedding vectors for all reviews\n(it actually combines review title and body in a certain way, and the\nresulting string is what is sent to the embedding OpenAI service):\n\n```\npython -m setup.1-augment-with-embeddings\n```\n\n_Note_: this step is time-consuming and makes use of several calls of your\nOpenAI account. This is why, to save time and (your) money, the script stores\nthe resulting vectors in a `precalculated_embeddings.json` file (which uses\na custom compression scheme, see the code!),\nso that the \"populate r",
    "_id": "cassioml-langchain-hotels-app"
}
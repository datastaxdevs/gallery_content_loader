{
  "key": "mukundha-term-search-playground",
  "tags": ["vector", "python", "cassandra"],
  "urls": {
    "github": "https://github.com/mukundha/term-search-playground/tree/main",
    "heroimage": "https://raw.githubusercontent.com/mukundha/term-search-playground/main/images/ss1.png"
  },
  "last_modified": "Tue, 03 Oct 2023 01:26:20 GMT",
  "forks_count": 0,
  "stargazers_count": 1,
  "name": "Term-based search with Astra",
  "description": "Playground WebApp that allows to use variations of term search lookups introduced in SAI",
  "duration": "20m",
  "skilllevel": "Intermediate",
  "priority": 1,
  "readme": "<h3>Term-based search with Astra</h3>\n<h4>Quickstart</h4>\n<pre><code>mvn package\nmvn spring-boot:run\n</code></pre>\n<p>Access the app at <code>http://localhost:8080</code></p>\n<h4>What is it?</h4>\n<p>Datastax Astra recently added support for <code>term</code> based search for <code>text</code> columns!</p>\n<p>Now, one can index <code>text</code> columns using <a href=\"https://docs.datastax.com/en/cql/astra/docs/developing/indexing/sai/sai-concepts.html\">SAI</a> with Lucene based <a href=\"https://lucene.apache.org/core/8_0_0/core/org/apache/lucene/analysis/Analyzer.html\">Analyzers</a></p>\n<p>for example,</p>\n<pre><code>CREATE TABLE test.table1 (id text PRIMARY KEY, val text);\n\nCREATE CUSTOM INDEX ON test.table1(val) USING 'org.apache.cassandra.index.sai.StorageAttachedIndex' WITH OPTIONS = { 'index_analyzer': 'standard'};\n</code></pre>\n<p>The above index allows to query based on <code>term(s)</code> in the text column <code>val</code></p>\n<p>for example,</p>\n<pre><code>SELECT * FROM test.table1 WHERE val : 'hello';\n</code></pre>\n<p>There are several <a href=\"https://github.com/apache/lucene/tree/main/lucene/analysis/common/src/java/org/apache/lucene/analysis\">built-in Analyzers</a> available</p>\n<p>Goal of this project is to help with understanding how Analyzers work, so one can understand how the text columns are indexed and queried.</p>\n<p>At a high level, Analyzer has a Tokenizer (to split the text into tokens) and a list of Filters (to apply any required transformation on the tokens)</p>\n<p><img src=\"images/ss.png\" alt=\"image\" /></p>\n<p>When run, this project allows users to choose a Token and a list of Filters and see the effect of Analyzer on the given text,</p>\n<p>for example,</p>\n<p><img src=\"images/ss1.png\" alt=\"image\" /></p>\n<p>Have fun!</p>\n",
  "readme_markdown": "### Term-based search with Astra\n\n#### Quickstart\n\n```\nmvn package\nmvn spring-boot:run\n```\n\nAccess the app at `http://localhost:8080`\n\n#### What is it? \nDatastax Astra recently added support for `term` based search for `text` columns!\n\nNow, one can index `text` columns using [SAI](https://docs.datastax.com/en/cql/astra/docs/developing/indexing/sai/sai-concepts.html) with Lucene based [Analyzers](https://lucene.apache.org/core/8_0_0/core/org/apache/lucene/analysis/Analyzer.html) \n\nfor example,\n```\nCREATE TABLE test.table1 (id text PRIMARY KEY, val text);\n\nCREATE CUSTOM INDEX ON test.table1(val) USING 'org.apache.cassandra.index.sai.StorageAttachedIndex' WITH OPTIONS = { 'index_analyzer': 'standard'};\n```\n\nThe above index allows to query based on `term(s)` in the text column `val`\n\nfor example, \n```\nSELECT * FROM test.table1 WHERE val : 'hello';\n```\nThere are several [built-in Analyzers](https://github.com/apache/lucene/tree/main/lucene/analysis/common/src/java/org/apache/lucene/analysis) available\n\nGoal of this project is to help with understanding how Analyzers work, so one can understand how the text columns are indexed and queried.\n\nAt a high level, Analyzer has a Tokenizer (to split the text into tokens) and a list of Filters (to apply any required transformation on the tokens)\n\n![image](images/ss.png)\n\nWhen run, this project allows users to choose a Token and a list of Filters and see the effect of Analyzer on the given text,\n\nfor example,\n\n![image](images/ss1.png)\n\nHave fun!",
  "_id": "mukundha-term-search-playground"
}

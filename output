Starting
Building service
Getting sample application links
Got sample application links
Getting sample application items
Got sample application items
Getting workshop links
Got workshop links
Getting workshop items
Got workshop items
Getting information for SparkBuildExamples
Getting information for datastax-examples-template
Getting information for how-to-create-an-example
Getting information for paging-graph-results-java
Getting information for getting-started-with-astra-csharp
Getting information for getting-started-with-astra-ui
Getting information for kafka-connector-sink-json
Getting information for getting-started-with-astra-java
Getting information for getting-started-with-astra-python
Getting information for azure-functions-nodejs
Getting information for aws-lambda-nodejs
Getting information for google-cloud-functions-nodejs
Getting information for kafka-connector-sink-avro
Getting information for cassandra-reactive-demo-java
Getting information for gremlin-reference-guides
Getting information for switch-connection-nodejs
Getting information for concurrent-requests-python
Getting information for forward-paging-restui-java
Getting information for graph-traversal-builder-java
Getting information for concurrent-requests-csharp
Getting information for intro-dsegraphframes
Getting information for tuples-nodejs
Getting information for blobs-java
Getting information for concurrent-requests-nodejs
Getting information for concurrent-requests-java
Getting information for object-mapper-nodejs
Getting information for random-paging-restui-java
Getting information for graphql-example-java
Getting information for switch-connection-csharp
Getting information for spark-kafka-streaming
Getting information for dsegraphframes-spark-filtering
Getting information for switch-connection-java
Getting information for prepared-statements-nodejs
Getting information for object-mapper-java
Getting information for dsbulk-to-astra
Getting information for object-mapper-csharp
Getting information for linq-csharp
Getting information for cluster-topology-java
Getting information for metrics-to-prometheus-java
Getting information for quickstart-java
Getting information for quickstart-python
Getting information for quickstart-nodejs
Getting information for quickstart-csharp
Getting information for quickstart-c
Getting information for ex_bestpractices
Getting information for kong-charts
Getting information for iot-demo-java
Getting information for killrvideo-developerapis
Getting information for banking-iot-demo
Getting information for taxi-iot-demo
Getting information for geospatial-demo
Getting information for dc-latency-checker
Getting information for ticker-demo-python
Getting information for spring-k8s-cassandra-microservices
Getting information for astra-gatsbyjs-starter
Getting information for query-diagnostics
Getting information for astra-next.js-starter
Getting information for object-mapper-jvm
Getting information for java-framework-compare
Getting information for all_astra_apis
Getting information for Astra101Java
Getting information for astra-spark-migration
Getting information for sai-demo
Getting information for crud-with-python-and-node
Getting information for astra-nodejs-starter
Getting information for doom-patrol
Getting information for sample-app-template
Getting information for astradb-spring-rest
Getting information for astra-loom
Getting information for glitch-astra-starter
Getting information for fastsite-console
Getting information for nf-data-explorer
Getting information for todo-native-mobile
Getting information for django-cassandra-blog
Getting information for telco-billing-app
Getting information for astra-nextjs-tutorial
Getting information for astra-nuxtjs-nestjs
Getting information for python-website-scraper
Getting information for betterreads-webapp
Getting information for cassandra-cicd-example
Getting information for ai-as-an-api
Getting information for astra-samples-java-sdk
Getting information for astra-samples-java
Getting information for astra-ide-plugin
Getting information for rpg-astra
Getting information for spark-dsegf-identity-resolution
Getting information for dscryptocommerce-astradb
Getting information for spring-data-cassandra-dse
Getting information for grpc-drivers-demo-java
Getting information for weatherapp
Setting up to skip astra spring boot starter
Setting up to skip Spring Data Astra DB REST API
Setting up to skip Reactive PetClinic, using Spring WebFlux and Astra DB
Setting up to skip Better Reads (Spring)
Setting up to skip Getting Started with Java + Spring + Astra DB
Setting up to skip BetterReads Spring App
Setting up to skip astra-httpie
Setting up to skip Social Media App using React, JAMStack and Astra DB
Setting up to skip Netflix Clone using GraphQL and Astra DB
Setting up to skip ToDo App using JAMStack, Netlify, and Astra DB
Setting up to skip BattleStax, a JamStack + Astra DB Workshop
Setting up to skip Kiillrvideo NodeJS
Setting up to skip ToDo App using JAMStack, Netlify, and AstraDB
Setting up to skip TikTok clone using React, JAMStack and AstraDB
Setting up to skip Cassandra + Azure Functions + Astra using Node.js
Setting up to skip Cassandra + AWS Lambda + Astra using Node.js
Setting up to skip Google Cloud Functions + Astra DB using Node.js
Setting up to skip Astra DB and Gatsby.js Starter
Setting up to skip Next.js and Astra DB Starter
Setting up to skip Astra + NodeJS Starter
Setting up to skip Doom Patrol, an Astra + Kepler.gl App
Setting up to skip Glitch and Astra DB Starter
Setting up to skip FastSite
Setting up to skip Netflix Data Explorer
Setting up to skip React Native Todo List, an Astra DB + Netlify Workshop
Setting up to skip Telco Billing App
Setting up to skip NextJS Fullstack Tutorial
Setting up to skip NuxtJS + NestJS Fullstack Tutorial
Setting up to skip Build an Astra DB RPG
Setting up to skip Using Stargate Documents API to build a TimeSeries DB API
Skipping Social Media App using React, JAMStack and Astra DB
Skipping Netflix Clone using GraphQL and Astra DB
Skipping ToDo App using JAMStack, Netlify, and Astra DB
Skipping BattleStax, a JamStack + Astra DB Workshop
Skipping Telco Billing App
Skipping Build an Astra DB RPG
Skipping Social Media App using React, JAMStack and Astra DB
Skipping ToDo App using JAMStack, Netlify, and Astra DB
Skipping BattleStax, a JamStack + Astra DB Workshop
Skipping TikTok clone using React, JAMStack and AstraDB
Skipping FastSite
Skipping Social Media App using React, JAMStack and Astra DB
Skipping Netflix Clone using GraphQL and Astra DB
Skipping ToDo App using JAMStack, Netlify, and Astra DB
Skipping BattleStax, a JamStack + Astra DB Workshop
Skipping Reactive PetClinic, using Spring WebFlux and Astra DB
Skipping ToDo App using JAMStack, Netlify, and AstraDB
Setting up to skip Getting Started with Cassandra + C# + Astra
Skipping Getting Started with Java + Spring + Astra DB
Setting up to skip Getting Started with Python + Astra DB
Setting up to skip Astra + Java 101
Skipping Doom Patrol, an Astra + Kepler.gl App
Setting up to skip Astra DB Loom
Skipping FastSite
Skipping React Native Todo List, an Astra DB + Netlify Workshop
Setting up to skip Build a Blog With Django and Astra DB
Skipping Telco Billing App
Skipping NextJS Fullstack Tutorial
Skipping NuxtJS + NestJS Fullstack Tutorial
Setting up to skip Build a Website Scraper with Astra DB + Python
Skipping BetterReads Spring App
Setting up to skip AI as an API
Skipping Build an Astra DB RPG
Skipping Using Stargate Documents API to build a TimeSeries DB API
Skipping Netflix Clone using GraphQL and Astra DB
Setting up to skip Introduction to GraphQL
Skipping Astra DB and Gatsby.js Starter
Skipping BattleStax, a JamStack + Astra DB Workshop
Setting up to skip Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals
Setting up to skip Cassandra Data Modelling
Setting up to skip Drivers and App Development
Setting up to skip Api and microservices
Setting up to skip Storage Attached Index (SAI)
Setting up to skip Introduction to Machine Learning with Apache Spark and Apache Cassandra
Setting up to skip Benchmark your database with NoSQLBench
Setting up to skip Kubernetes, K8ssandra
Setting up to skip BattleStax
Setting up to skip Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification
Setting up to skip Cassandra in the cloud
Setting up to skip From SQL to NoSQL
Skipping ToDo App using JAMStack, Netlify, and AstraDB
Skipping TikTok clone using React, JAMStack and AstraDB
Setting up to skip Netflix Application
Setting up to skip React Native
Setting up to skip VueJS and TypeScript
Skipping Introduction to GraphQL
Setting up to skip Introduction to NoSQL
Setting up to skip Pulsar and Astra Streaming
Setting up to skip Cassandra and Quarkus
Setting up to skip Todo Application (Spring Data)
Setting up to skip eCommerce Application
Setting up to skip Stargate Wheel App (Spring Data)
Setting up to skip PetClinic App (Spring, Reactive)
Setting up to skip NLP as an API - Text classification using Keras, FastAPI and NoSQL
Setting up to skip Build a Multiplayer Real-time Game with Astra Streaming
Skipping Better Reads (Spring)
Setting up to skip Introduction to Streaming and CDC
Setting up to skip Real-Time Data pipelines
Setting up to skip Swift, IOS and Document API
Setting up to skip Quine and Astra DBIn progress 10/19
Setting up to skip Quarkus Spring and Micronaut
Skipping React Native Todo List, an Astra DB + Netlify Workshop
Skipping Spring Data Astra DB REST API
Skipping Reactive PetClinic, using Spring WebFlux and Astra DB
Setting up to skip Killrvideo Java
Setting up to skip From driver 3x to 4x
Skipping Drivers and App Development
Skipping eCommerce Application
Skipping Getting Started with Java + Spring + Astra DB
Skipping Astra + Java 101
Skipping BetterReads Spring App
Setting up to skip JetBrains Astra DB Plugin
Skipping Spring Data Astra DB REST API
Skipping Cassandra + Azure Functions + Astra using Node.js
Skipping Cassandra + AWS Lambda + Astra using Node.js
Skipping Google Cloud Functions + Astra DB using Node.js
Skipping Astra DB and Gatsby.js Starter
Skipping Next.js and Astra DB Starter
Skipping Astra + NodeJS Starter
Skipping Glitch and Astra DB Starter
Skipping Reactive PetClinic, using Spring WebFlux and Astra DB
Skipping Getting Started with Cassandra + C# + Astra
Skipping Getting Started with Java + Spring + Astra DB
Skipping Getting Started with Python + Astra DB
Skipping Cassandra + Azure Functions + Astra using Node.js
Skipping Cassandra + AWS Lambda + Astra using Node.js
Setting up to skip Loading Data into Astra DB with DataStax Bulk Loader
Skipping Astra + Java 101
Setting up to skip Spark Migration Tool for Astra DB
Skipping Doom Patrol, an Astra + Kepler.gl App
Skipping Astra DB Loom
Setting up to skip Datastax Bulk Loader Demo
Skipping Killrvideo Java
Setting up to skip Killrvideo Python
Setting up to skip Killrvideo CSharp
Skipping Kiillrvideo NodeJS
Skipping Killrvideo Python
Skipping Getting Started with Python + Astra DB
Skipping Doom Patrol, an Astra + Kepler.gl App
Skipping Build a Blog With Django and Astra DB
Skipping Build a Website Scraper with Astra DB + Python
Skipping AI as an API
Skipping Killrvideo CSharp
Setting up to skip AstraDB Loom
Skipping Astra DB Loom
Skipping Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals
Skipping Cassandra Data Modelling
Skipping Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals
Skipping Cassandra Data Modelling
Skipping Loading Data into Astra DB with DataStax Bulk Loader
Skipping Cassandra Data Modelling
Skipping Storage Attached Index (SAI)
Skipping Introduction to Machine Learning with Apache Spark and Apache Cassandra
Skipping Benchmark your database with NoSQLBench
Skipping Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification
Skipping From SQL to NoSQL
Skipping ToDo App using JAMStack, Netlify, and AstraDB
Skipping Next.js and Astra DB Starter
Skipping Glitch and Astra DB Starter
Skipping Introduction to NoSQL
Skipping NLP as an API - Text classification using Keras, FastAPI and NoSQL
Skipping Build a Multiplayer Real-time Game with Astra Streaming
Skipping Introduction to Streaming and CDC
Skipping Quine and Astra DBIn progress 10/19
Skipping Getting Started with Cassandra + C# + Astra
Skipping Getting Started with Python + Astra DB
Skipping Google Cloud Functions + Astra DB using Node.js
Skipping Loading Data into Astra DB with DataStax Bulk Loader
Skipping Loading Data into Astra DB with DataStax Bulk Loader
Skipping Spark Migration Tool for Astra DB
Skipping Netflix Data Explorer
Skipping JetBrains Astra DB Plugin
Skipping Spark Migration Tool for Astra DB
Skipping Astra + NodeJS Starter
Skipping Build a Blog With Django and Astra DB
Skipping Build a Blog With Django and Astra DB
Skipping Build a Website Scraper with Astra DB + Python
Skipping AI as an API
Skipping Telco Billing App
Skipping Build an Astra DB RPG
Skipping NextJS Fullstack Tutorial
Skipping NuxtJS + NestJS Fullstack Tutorial
Skipping NuxtJS + NestJS Fullstack Tutorial
Skipping Build a Website Scraper with Astra DB + Python
Skipping AI as an API
Skipping JetBrains Astra DB Plugin
Skipping Using Stargate Documents API to build a TimeSeries DB API
Skipping Using Stargate Documents API to build a TimeSeries DB API
SUCCESS
{
    "apps": [
        {
            "name": "astra spring boot starter",
            "summary": "Helper to initialize astra sdk client in spring boot and spring data",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/datastax/astra-sdk-java/tree/main/astra-spring-boot-starter"
                ]
            },
            "language": [
                ""
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "N/A",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "spring"
            ]
        },
        {
            "name": "Spring Data Astra DB REST API",
            "summary": "REST API with Spring data and spring-mvc",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-data-starter/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-data-starter"
                ],
                "gitpod": [
                    "https://dtsx.io/2QjoULs"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "starters"
            ],
            "description": "This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Spring Data Cassandra REST API</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">Start Building</a></em></p>\n<p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Run a REST API that connects to DataStax Astra DB</li>\n</ul>\n<h2>How this works</h2>\n<p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">https://github.com/DataStax-Examples/spring-data-starter</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running Spring Data Cassandra REST API</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38HWu73\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/spring-data-starter\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>\n<p>Click the 'Open in Gitpod' link:\n<a href=\"https://dtsx.io/2QjoULs\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</li>\n<li>\n<p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png\" /></p>\n</li>\n<li>\n<p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png\" /></p>\n</li>\n<li>\n<p>You've successfully build a Spring Data Cassandra application!\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n</li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Reactive PetClinic, using Spring WebFlux and Astra DB",
            "summary": "Clone of Petclinic with spring webflux, java drivers connected to Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-petclinic-reactive"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-webflux"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "labs",
                "apps"
            ],
            "description": "This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Reactive Implementation of \ud83d\udc08 Spring PetClinic \ud83d\udc15</h1>\n<p><em>15 minutes, Intermediate, <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites\">Start Building</a></em></p>\n<p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png\" /></p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite\">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p>\n<!--- STARTEXCLUDE --->\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38yYuif\">DataStax Astra DB account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"GITHUB_URL\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a>\n  - <a href=\"#deploying-to-vercel\">Deploying to Vercel</a>\n  - <a href=\"#deploying-to-netlify\">Deploying to Netlify</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>Click the 'Open in Gitpod' link:\n<a href=\"https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W028",
            "name": "Better Reads (Spring)",
            "tags": [
                "spring",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1W2u_Wdrs7aqBQ3dfkLEE0Mygu18-QuWU"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-betterreads"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973089"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "java",
                "spring",
                "apps"
            ],
            "name": "Getting Started with Java + Spring + Astra DB",
            "description": "This provides an example REST backend built in Java using Spring Boot for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/betterreads-webapp"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/betterreads-webapp/master/hero.jpeg"
            },
            "tags": [
                "java",
                "spring",
                "apps"
            ],
            "name": "BetterReads Spring App",
            "description": "Companion code for the Java Brains \"code with me\" series that reads data from DataStax Astra DB.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "name": "astra-httpie",
            "summary": "Helper to interact with Astra Api and Httpie cli to do HTTP Calls",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/synedra/httpie-astra"
                ]
            },
            "language": [
                ""
            ],
            "stack": [
                "Httpie"
            ],
            "usecases": "N/A",
            "owner": "Kirsten Hunter",
            "apis": [
                "DATA",
                "DOC",
                "DB",
                "IAM"
            ],
            "tags": [
                "httpie"
            ]
        },
        {
            "name": "Social Media App using React, JAMStack and Astra DB",
            "summary": "React demo connecting document Api in Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ],
                "badge": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Social Network",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "A simple Tik-Tok clone running on Astra DB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n\n<h1>Social Media App using React, JAMStack and Astra DB</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart\">Start Building</a></em></p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n\n<ul>\n<li><a href=\"https://dtsx.io/2WMxoBQ\">Signup for DataStax Astra</a>, or login to your already existing account.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<!--- STARTEXCLUDE --->\n<h3>Video Content:</h3>\n<ul>\n<li><a href=\"https://youtu.be/IATOicvih5A\">https://youtu.be/IATOicvih5A</a></li>\n<li>(00:00) Introduction</li>\n<li>(03:05) Creating our Database on DataStax</li>\n<li>(06:52) Setting up our App</li>\n<li>(12:37) Routing Pages</li>\n<li>(18:02) Creating Components</li>\n<li>(28:32) Introduction to Data with Netlify and Stargate</li>\n<li>(30:10) Introduction to using the astrajs/collections</li>\n<li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li>\n<li>(34:01) Adding authorization to access our Database</li>\n<li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li>\n<li>(50: 32) Viewing all our Data</li>\n<li>(51:56) Rendering components based on our Data</li>\n<li>(01:17:01) Editing our Data (following/unfollowing a user)</li>\n<li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li>\n</ul>\n<h3>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>\n<ul>\n<li>Twitter: https://twitter.com/ania_kubow</li>\n<li>YouTube: https://youtube.com/aniakubow</li>\n<li>Instagram: https://instagram.com/aniakubow</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Netflix Clone using GraphQL and Astra DB",
            "summary": "React demo connecting graph Api in Astra with paging",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-netflix"
                ],
                "demo": [
                    "https://sag-astra-netflix.netlify.app"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\nGraphQL"
            ],
            "usecases": "Digital Library",
            "owner": "Chris Whilhite",
            "apis": [
                "GQL"
            ],
            "tags": [
                "javascript",
                "react",
                "graphql api",
                "apps"
            ],
            "description": "Let's code a Netflix Clone with GraphQL Pagination!",
            "duration": "2 hours",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Netflix Clone using Astra DB and GraphQL</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/astra-netflix#quick-start\">Start Building</a>, <a href=\"https://sag-astra-netflix.netlify.app\">View Demo</a></em></p>\n<p>Let's code a Netflix Clone with GraphQL Pagination! </p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<ul>\n<li><a href=\"https://dtsx.io/3sYwYUL\">Signup for DataStax Astra</a>, or login to your already existing account. </li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<h2>Objectives</h2>\n<ul>\n<li>Build a Netflix clone using GraphQL</li>\n</ul>\n<h2>How this works</h2>\n<p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href=\"https://sag-astra-netflix.netlify.app\">here</a>.</p>\n<p>Follow along with Ania's <a href=\"https://www.youtube.com/watch?v=g8COh40v2jU\">walkthrough video</a>. </p>\n<p>Additionally, there is a workshop repository for this sample app <a href=\"https://github.com/datastaxdevs/appdev-week3-graphql\">located here</a>.</p>"
        },
        {
            "name": "ToDo App using JAMStack, Netlify, and Astra DB",
            "summary": "React demo using Netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify"
            ],
            "usecases": "TodoList",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "This is an example React To-Do application using a DataStax Astra DB free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>JAMStack + Netlify + Astra DB + Cassandra</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://dtsx.io/2Yhvqtv\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<p>0) <a href=\"https://dtsx.io/2Yhvqtv\">Signup for DataStax Astra</a>, or login to your already existing account. </p>\n<!--- ENDEXCLUDE --->\n<p>1) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> or use an existing one.\n2) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.\n3) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.\n4) Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a>\n5) Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.\n6) Start the example by running <code>npm run dev</code> in the Gitpod console.</p>\n<h2>Objectives</h2>\n<ul>\n<li>Provide a fullstack development example using Astra DB as the storage backend</li>\n</ul>\n<h2>How this works</h2>\n<p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>"
        },
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Kiillrvideo NodeJS",
            "summary": "Clone of youtube using DSE and nodeJS drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-nodejs"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "javascript",
                "grpc"
            ]
        },
        {
            "code": "W013",
            "name": "ToDo App using JAMStack, Netlify, and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "rest api",
                "apps"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ASQIUFRBY1PduuImqh88kn4V2ahIMvKl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/appdev-week1-todolist"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973103"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "description": "This is an example React To-Do application using a DataStax Astra free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>TODO + Astra + Cassandra \ud83d\udcd2</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://astra.dev/9-9\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT\" /></p>\n<h2>\ud83c\udfaf Objectives</h2>\n<ul>\n<li>Create a \"from scratch\" <strong>React</strong> app using NPX</li>\n<li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li>\n<li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li>\n<li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API </li>\n<li>Leverage Netlify and DataStax Astra DB</li>\n</ul>\n<h2>\u2139\ufe0f Frequently asked questions \u2139\ufe0f</h2>\n<ul>\n<li><em>Can I run the workshop on my computer?</em></li>\n</ul>\n<blockquote>\n<p>There is nothing preventing you from running the workshop on your own machine.\nIf you do so, you will need\n* git installed on your local system\n* <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/\">node 15 and npm 7 or later</a></p>\n<p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p>\n</blockquote>\n<ul>\n<li>\n<p><em>What other prerequisites are there?</em></p>\n<blockquote>\n<ul>\n<li>You will need a github account</li>\n<li>You will also need an Astra DB account, but we'll work through that in the exercises</li>\n<li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Do I need to pay for anything for this workshop?</em></p>\n<blockquote>\n<ul>\n<li><strong>No.</strong> All tools and services we provide here are FREE.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Will I get a certificate if I attend this workshop?</em></p>\n</li>\n</ul>\n<blockquote>\n<p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p>\n</blockquote>\n<h2>Materials for the Session</h2>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n</ul>\n<h2>Homework</h2>\n<p><img src=\"https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below.</li>\n<li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href=\"https://github.com/datastaxdevs/react-basics\">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li>\n<li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li>\n<li>Submit your homework <a href=\"https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E\">here</a>. Note:\n<em>never share your Astra DB tokens!</em></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>Let's start</h1>\n<h2>Table of contents</h2>\n<ol>\n<li><a href=\"#1-login-or-register-to-astradb-and-create-database\">Login or Register to AstraDB and create database</a></li>\n<li><a href=\"#2-create-a-security-token\">Create a security token</a></li>\n<li><a href=\"#3-create-a-table-with-rest-api-using-swagger\">Create a table with REST API using Swagger</a></li>\n<li><a href=\"#4-insert-data-in-the-table-with-the-rest-api-using-swagger\">Insert data in the Table with the REST API using Swagger</a></li>\n<li><a href=\"#5-retrieving-values\">Retrieving values</a></li>\n<li><a href=\"#6-launch-gitpod-ide\">Launch GitPod IDE</a></li>\n<li><a href=\"#7-launch-the-todo-app\">Launch the TODO app</a></li>\n</ol>\n<h2>An introduction to web development</h2>\n<h3>CodePen starter examples</h3>\n<ul>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/WNjrXXp\">HTML</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/QWvyOOv\">CSS</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/mdmVRwy\">Javascript</a></li>\n</ul>\n<h2>1. Login or Register to AstraDB and create database</h2>\n<p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.  </p>\n<h3>\u2705 Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>\n<p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p>\n<p><a href=\"https://astra.dev/9-9\"><img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true\" /></a>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true\" />\n</details></p>\n<p><strong>Use the following values when creating the database</strong>\n|Field| Value|\n|---|---|\n|<strong>database name</strong>| <code>todos_workshop_db</code> |\n|<strong>keypace</strong>| <code>todos</code> |\n|<strong>Cloud Provider</strong>| <em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em> |</p>\n<p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p>\n<p>You will see your new database <code>pending</code> in the Dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true\" /></p>\n<p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>2. Create a security token</h2>\n<p>\u2705  <strong>Step 2a:</strong>  <a href=\"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\">Create a token for your app</a> to use in the settings screen. Use \"Database Administrator\" permission.</p>\n<p>\u2705  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p>\n<p><strong>\ud83d\udc41\ufe0f Expected output</strong>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true\" />\n</details></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>3. Create a table with REST API using Swagger</h2>\n<p>\u2705  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by \n1. Click on your active database\n2. Click <code>Connect</code> TAB\n3. Click <code>REST API</code>\n4. Clik link to your swagger endpoint.</p>\n<p><em>As shown on the picture below.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p>\n<ol>\n<li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true\" /></p>\n<ol>\n<li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section. </li>\n<li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>. </li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true\" /></p>\n<ol>\n<li>Click the \"Try it out\" button</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true\" /></p>\n<ol>\n<li>\n<p>Finally, copy the create table statement using the code below into the <strong>body</strong> field\n<code>json\n{\n  \"name\": \"restfromreadme_by_id\",\n  \"ifNotExists\": true,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"id\",\n      \"typeDefinition\": \"uuid\",\n      \"static\": false\n    },\n    {\n      \"name\": \"text\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"key\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"completed\",\n          \"typeDefinition\": \"boolean\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"id\"\n    ]\n  }\n}</code></p>\n</li>\n<li>\n<p>And click <strong>execute</strong> to apply the command and create the table</p>\n</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true\" /></p>\n<p>You should see a <strong>201</strong> response telling you it correctly created the \"restfromreadme_by_id\" table.</p>\n<p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>4. Insert data in the Table with the REST API using Swagger</h2>\n<p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p>\n<p>\u2705  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p>\n<ol>\n<li>Scroll down and navigate to the <strong>data</strong> section</li>\n<li>Then find <strong>Add row</strong> and click it to open the section</li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 4b:</strong> FIll in values and add a row</p>\n<ol>\n<li>Add your Astra token</li>\n<li>Add the keyspaceName <code>todos</code></li>\n<li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true\" /></p>\n<ol>\n<li>Copy the following JSON into the <strong>body</strong></li>\n</ol>\n<p><code>json\n{\"id\":\"57dbd260-d905-11eb-b985-c522859819b9\",\"completed\":false,\"text\":\"TODO FROM README\",\"key\":\"none\"}</code></p>\n<ol>\n<li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li>\n</ol>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>5. Retrieving values</h2>\n<p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p>\n<p>\u2705  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p>\n<ol>\n<li>Scroll up within the <strong>data</strong> section</li>\n<li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li>\n<li>Take note this is using a <strong>GET</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 5b:</strong> Execute the command to display the data</p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n<li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true\" /></p>\n<ol>\n<li>Click <strong>Execute</strong></li>\n<li>View the end result data that should be exactly what we created in the previous step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>6. Launch GitPod IDE</h2>\n<ul>\n<li>Click the button to launch the GitPod IDE.</li>\n</ul>\n<p><a href=\"https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<h1>Need a refresher on React Basics?</h1>\n<details><summary>Take me to the React stuff</summary>\n  We've created a separate repo going over the Basics of React. To get there, click the link below.\n\n  [GOTO React-Basics](https://github.com/datastaxdevs/react-basics)\n\n  When you're done, just click on the \"Back to Main\" breadcrumb to come back here.\n</details>\n\n<h2>7. Launch the TODO app</h2>\n<p>\u2705  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p>\n<p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href=\"#2-create-a-security-token\">the instructions above</a></p>\n<p>\u2705  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p>\n<ol>\n<li>Create <code>.env</code> file</li>\n</ol>\n<p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.\n<code>bash\nnpm exec astra-setup todos_workshop_db todos</code></p>\n<ol>\n<li>\ud83d\udc69\u200d\ud83d\udcbb  Install all the packages</li>\n</ol>\n<p><code>bash\nnpm install -g netlify-cli</code></p>\n<p>\u2705  <strong>Step 7c:</strong> Launch your app\n  * Run the application \n  <code>netlify dev</code>\n  * The application should automatically launch in the GitPod preview pane</p>\n<h3>Things to Note:</h3>\n<ul>\n<li>The contents of this repo are based on <a href=\"https://github.com/tjake/todo-astra-react-serverless/\">Jake's port</a> of the <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/react\">TodoMVC code</a> originally written by <a href=\"https://github.com/petehunt\">Pete Hunt</a>.</li>\n<li>The example is modified from https://github.com/huksley/todo-react-ssr-serverless.</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W014",
            "name": "TikTok clone using React, JAMStack and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "doc api"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1SP0VbYkO0QQP5Ur4_H62ALPYtgfc5GfD"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-social-media-tiktok"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134131"
                ],
                "demo": [
                    "https://fanciful-licorice-ea1437.netlify.app/"
                ]
            },
            "description": "A simple Tik-Tok clone running on AstraDB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Astra DB TikTok Clone Workshop</h1>\n<p><a href=\"https://github.com/datastaxdevs/workshop-social-media-tiktok\"><img alt=\"Gitpod ready-to-code\" src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\" /></a> \n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\"><img alt=\"License Apache2\" src=\"https://img.shields.io/hexpm/l/plug.svg\" /></a>\n<a href=\"https://discord.com/widget?id=685554030159593522&amp;theme=dark\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/685554030159593522\" /></a></p>\n<p>\u23f2\ufe0f <strong>Duration :</strong> 2 hours</p>\n<p>\ud83c\udf93 <strong>Level</strong> Beginner to Intermediate</p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href=\"https://fanciful-licorice-ea1437.netlify.app\">here</a></p>\n<p><img alt=\"image\" src=\"./screenshot.jpg\" /></p>\n<blockquote>\n<p><a href=\"#-start-hands-on\">\ud83d\udd16 Accessing HANDS-ON</a></p>\n</blockquote>\n<h2>\ud83d\udccb Table of contents</h2>\n<ul>\n<li><strong>HouseKeeping</strong></li>\n<li><a href=\"#1---objectives\">1. Objectives</a></li>\n<li><a href=\"#2---frequently-asked-questions\">2. Frequently asked questions</a></li>\n<li><a href=\"#3---materials-for-the-session\">3. Materials for the Session</a></li>\n<li><a href=\"#4---homework\">4. Homework</a></li>\n<li><strong><a href=\"#lab-1---getting-started-with-database\">LAB 1 - Getting Started with Database</a></strong></li>\n<li><a href=\"#11---getting-started-with-database\">1.1 - Create Astra Account</a></li>\n<li><a href=\"#11---getting-started-with-database\">1.2 - Create Astra Database</a></li>\n<li><strong><a href=\"#lab-2---document-api\">LAB 2 - Document API</a></strong></li>\n<li><a href=\"#21-using-document-api\">2.1 - Using Document API</a></li>\n<li><a href=\"#22---create-astra-credentials\">2.2 - Create Astra Credentials</a></li>\n<li><strong><a href=\"#lab-3---ide-setup\">LAB 3 - IDE Setup</a></strong>  </li>\n<li><a href=\"#31---netlify-site-setup\">3.1 - Netlify site setup</a></li>\n<li><a href=\"#32---launch-gitpod\">3.2 - Launch GitPod</a></li>\n<li><a href=\"#33---astra-cli-setup\">3.3 - Astra CLI Setup</a></li>\n<li><a href=\"#34---netlify-cli-setup\">3.4 - Netlify CLI Setup</a></li>\n<li><a href=\"#35-launch-your-app\">3.5 - Launch the application</a></li>\n<li><strong><a href=\"#lab-4---coding-against-db\">LAB 4 - Coding Against DB</a></strong></li>\n<li><a href=\"#41---document-api\">4.1 - Document API</a></li>\n<li><a href=\"#42---astrajs-client\">4.2 - AstraJS Client</a></li>\n<li><a href=\"#43---serverless-configuration\">4.3 - Serverless configuration</a></li>\n<li><a href=\"#44---react-component\">4.4 - React Component</a></li>\n<li><strong><a href=\"#lab-5---netlify-deployments\">LAB 5 - Netlify Deployments</a></strong></li>\n<li><a href=\"#51---connect-netlify-to-your-site\">5.1 - Connect Netlify to your site</a></li>\n<li><a href=\"#52---deploy-to-production\">5.2 - Deploy to production</a></li>\n</ul>\n<h2>Housekeeping</h2>\n<h3>1 - Objectives</h3>\n<ul>\n<li>\n<p>\ud83c\udfaf How to build a frontend application using React Components</p>\n</li>\n<li>\n<p>\ud83c\udfaf How to build a backend with Javascript without Express.</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn what is gitpod and how you can use it in your projects</p>\n</li>\n</ul>\n<h3>2 - Frequently asked questions</h3>\n<p/>\n<details>\n<summary><b> 1\ufe0f\u20e3 Can I run this workshop on my computer?</b></summary>\n<hr>\n<p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:\n<ol>\n<li><b>git installed on your local system</b>\n<li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b>\n</ol>\n</p>\nIn this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.\n</details>\n<p/>\n<details>\n<summary><b> 2\ufe0f\u20e3 What other prerequisites are there?</b></summary>\n<hr>\n<ul>\n<li>You will need an <b>Github account</b>\n<li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop\n<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)\n\n</ul>\n</p>\n</details>\n<p/>\n<details>\n<summary><b> 3\ufe0f\u20e3 Do I need to pay for anything for this workshop?</b></summary>\n<hr>\n<b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.\n</details>\n<p/>\n<details>\n<summary><b> 4\ufe0f\u20e3 Will I get a certificate if I attend this workshop?</b></summary>\n<hr>\nAttending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*\n</details>\n<p/>\n\n<h3>3 - Materials for the Session</h3>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides/slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n<li><a href=\"jamstack.md\">What is JamStack?</a></li>\n<li><a href=\"#video-tutorial-with-ania-kubow\">Video tutorial with Ania Kubow</a></li>\n</ul>\n<h3>4 - Homework</h3>\n<p><img src=\"tutorial/images/tiktok-badge.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li>\n<li>(Optional extra credit) Watch the 2 hour Ania video <a href=\"#video-tutorial-with-ania-kubow\">HERE</a>, build the app yourself, and show us the completed app.</li>\n<li>Submit your homework <a href=\"https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys\">here</a></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>\ud83c\udfc1 Start Hands-on</h1>\n<h2>LAB 1 - Getting Started with Database</h2>\n<h3>1.1 - Getting Started with Database</h3>\n<p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p>\n<h4><code>\u2705.1.1.a</code>- Create Astra Account</h4>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://astra.dev/yt-12-14\"><img alt=\"image\" src=\"./tutorial/images/create_astra_db.png?raw=true\" /></a></p>\n</blockquote>\n<h4><code>\u2705.1.1.b</code>- Create Astra Database</h4>\n<ul>\n<li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-button.png?raw=true\" /></p>\n<ul>\n<li>Use the following values when creating the database:</li>\n</ul>\n<p>| #  | Field Name         | Field Value                     |\n|----|--------------------|---------------------------------|\n| 1  | <strong>Database Name</strong>    | <code>workshops</code>                     |\n| 2  | <strong>Keyspace Name</strong>  | <code>tiktok_keyspace</code>               |\n| 3  | <strong>Cloud Provider</strong> | <code>Google Cloud Plaform</code>          |\n| 4  | <strong>Area</strong>   | <code>North America</code>                 |\n| 5  | <strong>Region</strong> | <code>Moncks Corner, South Carolina</code> |</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Now click <code>[Create Database button]</code> that became blue.</li>\n<li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-pending.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Click <code>[Go to Database]</code></li>\n</ul>\n<h4><code>\u2705.1.1.c</code>- Database was already existing</h4>\n<p>Here are some special situations you might encounter.</p>\n<blockquote>\n<p>\u2139\ufe0f <strong>Hibernated Database:</strong></p>\n<p>If the DB workshops already exists but is hibernated (you have not use it for a while):<br />\n- Click the <code>[Resume Database]</code> button on the top right-hand corner.</p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-resume.png?raw=true\" /> </p>\n<p>\u2139\ufe0f <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p>\n<p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p>\n<ul>\n<li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li>\n<li>Provide the keyspace name <code>tiktok_keyspace</code></li>\n<li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-keyspace.png?raw=true\" /></p>\n</blockquote>\n<h2>LAB 2 - Document API</h2>\n<h3>2.1 Using Document API</h3>\n<h4><code>\u2705.2.1.a</code>- Open Swagger User Interface</h4>\n<ul>\n<li>(1) -  Select your database in the left panel (if needed)</li>\n<li>(2) -  Select the tab <code>Connect</code></li>\n<li>(3) -  Select the <code>Document API</code> bloc</li>\n<li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/access-swagger.png?raw=true\" /></p>\n<ul>\n<li>You should access this screen</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Swagger UI</code></p>\n<p><img alt=\"image\" src=\"tutorial/images/show-swagger.png?raw=true\" /></p>\n</blockquote>\n<h4><code>\u2705.2.1.b</code>- Lists Collections</h4>\n<ul>\n<li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-1.png?raw=true\" /></p>\n<ul>\n<li>(2) - Click the <code>[Try It Out]</code> button</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-2.png?raw=true\" /></p>\n<ul>\n<li>(3) - Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |</p>\n<ul>\n<li>(4) - Click on <code>[Execute]</code> button</li>\n</ul>\n<p>The output is empty (expected):</p>\n<p><code>json\n[]</code></p>\n<h4><code>\u2705.2.1.c</code>- Create Collection <code>story</code></h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>body</strong>| <code>{\"name\":\"story\"}</code> |</p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You can see the output with <code>201</code> (created) code</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/create-collection-1.png?raw=true\" /></p>\n<ul>\n<li>(6) - Following the steps in previous section list collections again, you should get </li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": [\n   {\n     \"name\": \"story\",\n     \"upgradeAvailable\": false\n   }\n ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.d</code>- Create a first document</h4>\n<p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |</p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"Mo Farooq\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"documentId\": \"8aa07632-4ffb-46e5-9d78-b32e21847221\"\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.e</code>- Search documents in a collections</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>where</strong>|  <code>{\"username\": {\"$eq\": \"mofarooq32\"}}</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": {\n   \"8aa07632-4ffb-46e5-9d78-b32e21847221\": {\n     \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n     \"button_visible\": true,\n     \"caption\": \"These ducks are MEGA cute\",\n     \"comments\": 2,\n     \"is_followed\": true,\n     \"likes\": 10,\n     \"name\": \"Mo Farooq\",\n     \"username\": \"mofarooq32\",\n     \"video\": \"https://i.imgur.com/FTBP02Y.mp4\"\n   }\n }\n}</code>\n</p>\n</blockquote>\n<h4><code>\u2705.2.1.f</code>- Update a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"New Name\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get an updated document</p>\n</li>\n</ul>\n<h4><code>\u2705.2.1.g</code>- Delete a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> _ Delete a document_</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result code of <code>204</code></p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>Code 204\naccess-control-allow-credentials: true \naccess-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com \naccess-control-expose-headers: Date \ndate: Mon,12 Dec 2022 18:12:43 GMT \nvary: Origin</code></p>\n</blockquote>\n<h3>2.2 - Create Astra Credentials</h3>\n<p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token. </p>\n<h4><code>\u2705.2.2.a</code>- Create Astra Credentials</h4>\n<blockquote>\n<p>\u2139\ufe0f <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p>\n</blockquote>\n<ul>\n<li>(1) - Go the <code>Organization Settings</code></li>\n<li>(2) - Go to <code>Token Management</code></li>\n<li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li>\n<li>(4) - Click <code>Generate token</code></li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-create-token.gif?raw=true\" /></p>\n<h4><code>\u2705.2.2.b</code>- Download Astra Credentials</h4>\n<ul>\n<li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-token.png?raw=true\" /></p>\n<blockquote>\n<p><strong>\u26a0\ufe0f Important</strong>\n<code>The instructor will show you on screen how to create a token \nbut will have to destroy to token immediately for security reasons.</code></p>\n</blockquote>\n<p>Notice the clipboard icon at the end of each value.\n- <code>Client ID:</code> We will <em>not</em> use this during this workshop\n- <code>Client Secret:</code> We will <em>not</em> use this during this workshop\n- <code>Token:</code> <strong><em>This is your token!</em></strong> We will use it as a api Key to interact with APIS</p>\n<h2>LAB 3 - IDE Setup</h2>\n<h3>3.1 - Netlify Site Setup</h3>\n<ul>\n<li>(1) Click the button to deploy.</li>\n</ul>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok\"><img alt=\"Deploy to Netlify\" src=\"https://www.netlify.com/img/deploy/button.svg\" /></a></p>\n</blockquote>\n<ul>\n<li>\n<p>(2) - Authenticate with your github Account</p>\n</li>\n<li>\n<p>(3) - Select an account and the github repository where to clone</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/deploy-to-netlify.gif?raw=true\" /></p>\n<ul>\n<li>(4) - In netlify user interface click on <code>Site deploy in progress</code> </li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-1.png\" /></p>\n</blockquote>\n<ul>\n<li>(5) - Click the top deploy link to see the build process.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-2.png\" /></p>\n</blockquote>\n<ul>\n<li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-3.png\" /></p>\n</blockquote>\n<ul>\n<li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-4.png\" /></p>\n</blockquote>\n<ul>\n<li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-5.png\" /></p>\n</blockquote>\n<h3>3.2 - Launch GitPod</h3>\n<h4><code>\u2705.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>\n<ul>\n<li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li>\n</ul>\n<h4>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>\n<p><img alt=\"correct notcorrect\" src=\"tutorial/images/correct-not-correct.png?raw=true\" /></p>\n<p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href=\"#3-clone-your-github-repository\">step3</a> to get to your repo.</p>\n<h4><code>\u2705.3.2.b</code>- Open Gitpod IDE</h4>\n<blockquote>\n<p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</blockquote>\n<h4><code>\u2705.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>\n<ul>\n<li>From your GitPod terminal execute the following command</li>\n</ul>\n<p><code>bash\ngit remote -v</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)\norigin  https://github.com/clun/workshop-astra-tik-tok.git (push)\nIf the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code>\n</p>\n</blockquote>\n<h3>3.3 - Astra CLI Setup</h3>\n<h4><code>\u2705.3.3.a</code>- Save your token</h4>\n<p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p>\n<p><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></p>\n<h4><code>\u2705.3.3.b</code>- Validate your configuration</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra user list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list\n+--------------------------------------+-----------------------------+---------------------+\n| User Id                              | User Email                  | Status              |\n+--------------------------------------+-----------------------------+---------------------+\n| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |\n+--------------------------------------+-----------------------------+---------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.c</code>- List Database to see  <code>workshops</code></h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>+---------------------+--------------------------------------+---------------------+----------------+\n| Name                | id                                   | Default Region      | Status         |\n+---------------------+--------------------------------------+---------------------+----------------+\n| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         |\n| workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |\n+---------------------+--------------------------------------+---------------------+----------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.d</code>- Get db details</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db get workshops</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops\n+------------------------+-----------------------------------------+\n| Attribute              | Value                                   |\n+------------------------+-----------------------------------------+\n| Name                   | workshops                               |\n| id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    |\n| Status                 | ACTIVE                                  |\n| Default Cloud Provider | GCP                                     |\n| Default Region         | us-east1                                |\n| Default Keyspace       | tiktok_keyspace                         |\n| Creation Time          | 2022-12-12T11:14:58Z                    |\n|                        |                                         |\n| Keyspaces              | [0] tiktok_keyspace                     |\n|                        |                                         |\n|                        |                                         |\n| Regions                | [0] us-east1                            |\n|                        |                                         |\n+------------------------+-----------------------------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.e</code>- Create configuration file</h4>\n<ul>\n<li>Create <code>.env</code> file</li>\n</ul>\n<p><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></p>\n<ul>\n<li>Show content</li>\n</ul>\n<p><code>cat .env</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>ASTRA_DB_APPLICATION_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZTvaCp......\"\nASTRA_DB_GRAPHQL_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace\"\nASTRA_DB_GRAPHQL_URL_ADMIN=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin\"\nASTRA_DB_GRAPHQL_URL_PLAYGROUND=\"https://.....-us-east1.apps.astra.datastax.com/api/playground\"\nASTRA_DB_GRAPHQL_URL_SCHEMA=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema\"\nASTRA_DB_ID=\".....\"\nASTRA_DB_KEYSPACE=\"tiktok_keyspace\"\nASTRA_DB_REGION=\"us-east1\"\nASTRA_DB_REST_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/rest\"\nASTRA_DB_REST_URL_SWAGGER=\"https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/\"\nASTRA_DB_SECURE_BUNDLE_PATH=\"/home/gitpod/.astra/scb/scb_....._us-east1.zip\"\nASTRA_DB_SECURE_BUNDLE_URL=\"secured_url\"\nASTRA_ORG_ID=\"f9460f14-9879-4ebe-83f2-48d3f3dce13c\"\nASTRA_ORG_NAME=\"cedrick.lunven@datastax.com\"\nASTRA_ORG_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZT.....\"</code></p>\n</blockquote>\n<h3>3.4 - Netlify CLI Setup</h3>\n<h4><code>\u2705.3.4.a</code>- Install the package</h4>\n<p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p>\n<p><code>npm install -g netlify-cli</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img src=\"tutorial/images/netlify-install-cli.png?raw=true\" /></p>\n</blockquote>\n<h3>3.5 Launch your app</h3>\n<h4><code>\u2705.3.5.a</code>- Start application</h4>\n<p><code>netlify dev</code></p>\n<p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n</blockquote>\n<p>```\n\u25c8 Netlify Dev \u25c8\n\u25c8 Ignored general context env var: LANG (defined in process)\n\u25c8 Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA\n\u25c8 Injected .env file env var: ASTRA_DB_ID\n\u25c8 Injected .env file env var: ASTRA_DB_KEYSPACE\n\u25c8 Injected .env file env var: ASTRA_DB_REGION\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL\n\u25c8 Injected .env file env var: ASTRA_ORG_ID\n\u25c8 Injected .env file env var: ASTRA_ORG_NAME\n\u25c8 Injected .env file env var: ASTRA_ORG_TOKEN\n\u25c8 Loaded function add http://localhost:8888/.netlify/functions/add.\n\u25c8 Loaded function addData http://localhost:8888/.netlify/functions/addData.\n\u25c8 Loaded function edit http://localhost:8888/.netlify/functions/edit.\n\u25c8 Loaded function posts http://localhost:8888/.netlify/functions/posts.\n\u25c8 Functions server is listening on 36661\n\u25c8 Setting up local development server</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Netlify Build                                               <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u276f Version\n  @netlify/build 28.4.5</p>\n<p>\u276f Flags\n  {}</p>\n<p>\u276f Current directory\n  /workspace/workshop-astra-tik-tok</p>\n<p>\u276f Config file\n  /workspace/workshop-astra-tik-tok/netlify.toml</p>\n<p>\u276f Context\n  dev</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  1. Run command for local development                        <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u25c8 Starting Netlify Dev with Create React App</p>\n<blockquote>\n<p>tik-tok-stargate@0.1.0 start\nreact-scripts start</p>\n</blockquote>\n<p>\u2139 \uff62wds\uff63: Project is running at http://10.0.5.2/\n\u2139 \uff62wds\uff63: webpack output is served from \n\u2139 \uff62wds\uff63: Content not from webpack is served from /workspace/workshop-astra-tik-tok/public\n\u2139 \uff62wds\uff63: 404s will fallback to /\nStarting the development server...</p>\n<p>Compiled successfully!</p>\n<p>You can now view tik-tok-stargate in the browser.</p>\n<p>Local:            http://localhost:3000\n  On Your Network:  http://10.0.5.2:3000</p>\n<p>Note that the development build is not optimized.\nTo create a production build, use npm run build.</p>\n<p>\u2714 Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml</p>\n<p>(dev.command completed in 9.4s)</p>\n<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502                                                 \u2502\n   \u2502   \u25c8 Server now ready on http://localhost:8888   \u2502\n   \u2502                                                 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>\n<p>\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData\n\u2827 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts\n\u2819 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.\n\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.\n\u2714 Setting up the Edge Functions environment. This may take a couple of minutes.\n```</p>\n<p><img alt=\"start\" src=\"./tutorial/images/netlify-start.png?raw=true\" /></p>\n<h2>LAB 4 - Coding Against DB</h2>\n<h3>4.1 - Document API</h3>\n<p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p>\n<h4><code>\u2705.4.1.a</code>- Reopen Swagger</h4>\n<p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href=\"astra.datastax.com\">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p>\n<p><img alt=\"db_connect\" src=\"./tutorial/images/db_connect.png?raw=true\" /></p>\n<p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_link.png?raw=true\" /></p>\n<h4><code>\u2705.4.1.a</code>- List Collections</h4>\n<p>Open up the first section labelled \"List collections in namespace\" and click the button \"Try it out\".</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_listcollections_02.png?raw=true\" /></p>\n<ul>\n<li>Execture with <code>[Execute]</code> button</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"data\": [\n    {\n      \"name\": \"story\",\n      \"upgradeAvailable\": false\n    },\n    {\n      \"name\": \"tktkposts\",\n      \"upgradeAvailable\": false\n    }\n  ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.4.1.b</code>- List Documents of <code>tktkposts</code></h4>\n<ul>\n<li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li>\n</ul>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_02.png?raw=true\" /></p>\n<ul>\n<li>Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>tktkposts</code> |</p>\n<p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_04.png?raw=true\" /></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"pageState\": \"ATIA8H_____wf____w==\",\n  \"data\": {\n    \"0\": {\n      \"avatar\": \"https://i.imgur.com/jONHmE5.png\",\n      \"button_visible\": true,\n      \"caption\": \"Art is for everyone\",\n      \"comments\": 20,\n      \"id\": 0,\n      \"is_followed\": true,\n      \"likes\": 231,\n      \"name\": \"Lana Del Mont\",\n      \"timestamp\": \"2020-09-10T09:08:31.020Z\",\n      \"username\": \"lana_del_away\",\n      \"video\": \"https://i.imgur.com/H9UX0Jm.mp4\"\n    },\n    \"2\": {\n      \"avatar\": \"https://i.imgur.com/eX3hkoc.png\",\n      \"button_visible\": true,\n      \"caption\": \"Happiest of Birthdays my Angel\",\n      \"comments\": 4,\n      \"id\": 2,\n      \"is_followed\": true,\n      \"likes\": 2,\n      \"name\": \"Angela Lee\",\n      \"timestamp\": \"2020-04-10T09:08:31.020Z\",\n      \"username\": \"angiecakes\",\n      \"video\": \"https://i.imgur.com/al6MLay.mp4\"\n    },\n    \"3\": {\n      \"avatar\": \"https://i.imgur.com/IigY4Hm.png\",\n      \"button_visible\": true,\n      \"caption\": \"The new normal\",\n      \"comments\": 2,\n      \"id\": 3,\n      \"is_followed\": false,\n      \"likes\": 10,\n      \"name\": \"Nina Xen\",\n      \"timestamp\": \"2020-05-10T09:08:31.020Z\",\n      \"username\": \"nina_lina\",\n      \"video\": \"https://i.imgur.com/Kzvbeup.mp4\"\n    }\n  }\n}</code></p>\n</blockquote>\n<h3>4.2 - AstraJS Client</h3>\n<h4><code>\u2705.4.2.1</code> - Initialization</h4>\n<p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>. </p>\n<p>(See: <a href=\"./functions/utils/astraClient.js\">functions/utils/astraClient.js</a>)</p>\n<p>```javascript\nconst { createClient } = require(\"@astrajs/collections\");</p>\n<p>let astraClient = null;</p>\n<p>const getAstraClient = async () =&gt; {\n  if (astraClient === null) {\n    astraClient = await createClient(\n      {\n        astraDatabaseId: process.env.ASTRA_DB_ID,\n        astraDatabaseRegion: process.env.ASTRA_DB_REGION,\n        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,\n      },\n      30000\n    );\n  }\n  return astraClient;\n};\n```</p>\n<p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p>\n<ul>\n<li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li>\n<li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li>\n<li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li>\n</ul>\n<p>Then we return the <code>astraClient</code> we can then use in our API calls.</p>\n<p>We also need to create a document collection to store our data.</p>\n<p><code>javascript\nconst getCollection = async () =&gt; {\n  const documentClient = await getAstraClient();\n  return documentClient\n    .namespace(process.env.ASTRA_DB_KEYSPACE)\n    .collection(\"tktkposts\");\n};</code></p>\n<p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p>\n<ul>\n<li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li>\n</ul>\n<p>We will call the collection <strong>tktkposts</strong>.</p>\n<h4><code>\u2705.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>\n<p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p>\n<p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href=\"https://docs.datastax.com/en/astra/docs/astra-collection-client.html\">AstraJS Collections</a></p>\n<p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p>\n<p><code>javascript\nconst users = await getCollection();</code></p>\n<p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p>\n<p><code>javascript\ntry {\n    const user = await users.create(id, event.body);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(user),\n    };\n}</code></p>\n<h4><code>\u2705.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>\n<p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p>\n<p><code>javascript\ntry {\n    users.update(body.userId, body.data);\n    return {\n      statusCode: 200,\n    };\n  }</code></p>\n<h4><code>\u2705.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>\n<p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p>\n<p><code>javascript\ntry {\n    const res = await users.find({});\n    return {\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),\n    };\n  }</code></p>\n<p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p>\n<h3>4.3 - Serverless configuration</h3>\n<p>Take a look at <code>netlify.toml</code>.</p>\n<p><code>init\n[build]\ncommand = \"npm run build\"\nfunctions = \"functions\"\npublish = \"build\"</code></p>\n<p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p>\n<p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p>\n<p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href=\"./functions/posts.js\">/.netlify/functions/posts</a></p>\n<p>```javascript\n// Declaring 'getCollection'\nconst { getCollection } = require(\"./utils/astraClient\");</p>\n<p>// Function exported as a REST API\nexports.handler = async function () {\n  // Accessing the collection tkt\n  const tktkpostsCollection = await getCollection();\n  try {\n    // Access POST\n    const res = await tktkpostsCollection.find({});\n    return {\n      // Return POSTS in the body\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),</p>\n<p>[...]\n```</p>\n<p>\u2705 We can see these functions in our Netlify account.\n- Go to netlify.com and sign in.\n- Select your site from the list.\n- Select the \"Functions\" tab at the top.</p>\n<p><img alt=\"netlify_functions\" src=\"./tutorial/images/netlify_functions_tab.gif\" /></p>\n<p>From here we can see all our functions and get direct links as well as watch real time logs.</p>\n<p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/netlify_endpoint_nav.gif\" /></p>\n<h3>4.4 - React Component</h3>\n<p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p>\n<h4><code>\u2705.4.4.a</code> - React Router</h4>\n<p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href=\"./src/index.js\">index.js</a></p>\n<p><code>xml\n&lt;Switch&gt;\n  &lt;Route path= \"/upload\" component={Upload}/&gt;\n  &lt;Route path= \"/\" component={Home}/&gt;\n&lt;/Switch&gt;</code></p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/pages-all.png\" /></p>\n<h4><code>\u2705.4.4.b</code> - Upload Page</h4>\n<p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/page-upload.png\" /></p>\n<p>As you can see <a href=\"./src/pages/Upload.js\">Upload.js</a> there are no component used.</p>\n<p>```html</p>\n<form onSubmit={handleSubmit}>\n    <div className='section'>\n<!-- rest is omitted --> \n```\n\n- Function to post to backend\n\n```javascript\n const handleSubmit = async (e) => {\n e.preventDefault()\n // Create payload\n const data =  {\n        id: id,\n        name: name,\n        username: username,\n        avatar: avatar,\n        is_followed: false,\n        video: video,\n        caption: caption,\n        likes: 0,\n        comments: 0,\n        timestamp: timestamp,\n        button_visible: false  \n  }\n  // Post Payload to Netlify functions\n  axios.post('/.netlify/functions/add', data)\n       .then((response) => { console.log(response)})\n       .catch((err) => { console.error(err)})\n```\n\n#### `\u2705.4.4.b` - Home Page\n\nThe page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.\n\n![netlify_endpoint](./tutorial/images/react-components.png)\n\nMore on [Home.js](./src/pages/Home.js).\n\n## LAB 5 - Netlify Deployments\n\n### 5.1 - Connect Netlify to your site\n\nExecute each of the commands below to link your code to your Netlify deployment.\n  * First thing, we'll need to **STOP** the `netlify dev` command we issued a moment ago. In the terminal where you executed the netlify command issue a `CTRL-C` (control key + the C key) in order to stop the process.\n  * Then continue with the following commands\n  * This will pop up a browser to authenticate with netlify\n\n#### `\u2705.5.1.a` - Authenticate in Netlify\n\n```\nnetlify login\n```\n\n_Note, when using GitPod the preview pane will not display this properly. You must click the \"open in a new window\" button in the very top right of the preview pane._\n\n![swaggerui_link](./tutorial/images/netlify_login.png)\n\n> \ud83d\udda5\ufe0f `Output`\n> \n> ```bash\n> Logging into your Netlify account...\n> Opening https://app.netlify.com/authorize?response_type=ticket&ticket=774701161c326912e718b3a86096f375\n> You are now logged into your Netlify account!\n> Run netlify status for account details\n> To see all available commands run: netlify help\n> ```\n\n- Link your workspace to the associated site with the command Below\n\n```\nnetlify link\n```\n\n- It will display a MENU where you can move UP and DOWN with arrows. Pick first choice\n\n```\n> Use current git remote origin (https://github ...`\n```\n\n![swaggerui_link](./tutorial/images/netlify-link.png?raw=true)\n\n> \ud83d\udda5\ufe0f `Output`\n> ```bash\n> netlify link will connect this folder to a site on Netlify\n> ? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)\n> Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...\n> Directory Linked\n> Admin url: https://app.netlify.com/sites/fanciful-licorice-ea1437\n> Site url:  https://fanciful-licorice-ea1437.netlify.app\n> You can now run other `netlify` cli commands in this directory\n>```\n\n#### `\u2705.5.1.b` - Import configuration in site\n\n* This will take the `.env` file created by astra-setup and upload it to netlify\n\n```\nnetlify env:import .env\n```\n\n### 5.2 - Deploy to production\n\nNow that you've hooked everything up, time to deploy to production.\n\n* Run\n\n```\nnetlify build\n```\n\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build                                                 \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> \u276f Version\n>   @netlify/build 28.4.5\n>\n> \u276f Flags\n>   dry: false\n>   offline: false\n>\n> \u276f Current directory\n>   /workspace/workshop-astra-tik-tok\n>\n> \u276f Config file\n>   /workspace/workshop-astra-tik-tok/netlify.toml\n>\n> \u276f Context\n>   production\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   1. build.command from netlify.toml                            \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> $ npm run build\n> \n> tik-tok-stargate@0.1.0 build\n> react-scripts build\n>\n> Creating an optimized production build...\n> Compiled successfully.\n>\n> File sizes after gzip:\n>\n>   616.87 KB  build/static/js/2.82b8325c.chunk.js\n>   2.32 KB    build/static/js/main.fd7c93f3.chunk.js\n>   966 B      build/static/css/main.9d8c5499.chunk.css\n>   780 B      build/static/js/runtime-main.f09b770f.js\n>\n> The project was built assuming it is hosted at /.\n> You can control this with the homepage field in your package.json.\n> \n> The build folder is ready to be deployed.\n> You may serve it with a static server:\n>\n>  npm install -g serve\n>  serve -s build\n>\n> Find out more about deployment here:\n>\n>   https://cra.link/deployment\n>\n>\n> (build.command completed in 35.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   2. Functions bundling                                         \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> Packaging Functions from functions directory:\n>  - add.js\n>  - addData.js\n>  - edit.js\n>  - posts.js\n>\n>\n> (Functions bundling completed in 6.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build Complete                                        \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> (Netlify Build completed in 41.3s)\n> ```\n\n- Then run\n\n```\nnetlify deploy --prod\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Deploy path:        /workspace/workshop-astra-tik-tok/build\n> Functions path:     /workspace/workshop-astra-tik-tok/functions\n> Configuration path: /workspace/workshop-astra-tik-tok/netlify.toml\n> Deploying to main site URL...\n> \u2714 Deploying functions from cache (use --skip-functions-cache to override)\n> \u2714 Finished hashing 17 files and 4 functions\n> \u2714 CDN requesting 0 files and 4 functions\n> \u2714 Finished uploading 4 assets\n> \u2714 Deploy is live!\n>\n> Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455\n> Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.app\n> Website URL:       https://fanciful-licorice-ea1437.netlify.app\n> gitpod /workspace/workshop-astra-tik-tok (master) $ \n```\n\n- Then finally run\n\n```\nnetlify open:site\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Opening \"fanciful-licorice-ea1437\" site url:\n> https://fanciful-licorice-ea1437.netlify.app\n> ```\n\n## Extra Resources\n\n#### Video tutorial with Ania Kubow\n\nThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.\n\nWhile we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.\n\n#### Running Astra DB Tik-Tok\nWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).\n\nFollow the instructions below to get started.\n\n#### If you did like this video, please hit the Like and Subscribe button so I know to make more!\n- Twitter: https://twitter.com/ania_kubow\n- YouTube: https://youtube.com/aniakubow\n- Instagram: https://instagram.com/aniakubow"
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + Azure Functions + Astra using Node.js",
            "description": "This example shows how to use Azure Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + AWS Lambda + Astra using Node.js",
            "description": "This example shows how to use AWS Lambda with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "javascript",
                "nodejs driver",
                "starters"
            ],
            "name": "Google Cloud Functions + Astra DB using Node.js",
            "description": "This example shows how to use Google Cloud Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/3iX75yf"
                ],
                "netlify": [
                    "https://dtsx.io/3aZJLxa"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-gatsbyjs-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "graphql api",
                "starters"
            ],
            "name": "Astra DB and Gatsby.js Starter",
            "description": "Create a React.js, Gatsby application that reads data from DataStax Astra DB using GraphQL.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/2YtXWVU"
                ],
                "vercel": [
                    "https://dtsx.io/3aUg00p"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-next.js-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Next.js and Astra DB Starter",
            "description": "A sample Next.js + DataStax Astra DB starter app that integrates Astra DB with Next.js.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nodejs-starter"
                ]
            },
            "tags": [
                "javascript",
                "nodejs",
                "starters"
            ],
            "name": "Astra + NodeJS Starter",
            "description": "Bootstrap your next NodeJS app with an Astra integration.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "python",
                "javascript",
                "apps"
            ],
            "name": "Doom Patrol, an Astra + Kepler.gl App",
            "description": "Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/glitch-astra-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Glitch and Astra DB Starter",
            "description": "Jumpstart your next React/Express prototype with this starter!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/fastsite-console"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/fastsite-console"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/fastsite-console/master/hero.png"
            },
            "tags": [
                "javascript",
                "doc api",
                "apps"
            ],
            "name": "FastSite",
            "description": "FastSite is a no-code tool to generate content-driven websites. It leverages the power of modern JAMStack and cloud-native technologies.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/nf-data-explorer/master/hero.png"
            },
            "tags": [
                "javascript",
                "tools"
            ],
            "name": "Netflix Data Explorer",
            "description": "Launch Netlfix's Open Source Data Explorer in Gitpod and connect to your Astra DB instance!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/todo-native-mobile"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-native-mobile/master/hero.png"
            },
            "tags": [
                "javascript",
                "workshop",
                "apps"
            ],
            "name": "React Native Todo List, an Astra DB + Netlify Workshop",
            "description": "A workshop where you build a React Native Todo application using DataStax Astra DB.",
            "duration": "40 minutes",
            "skilllevel": "Intermediate",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"
                ],
                "demo": [
                    "https://sag-telco-billing-app.netlify.app/"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Telco Billing App",
            "description": "An example of a telcom app dashboard, built with React and Netlify.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nextjs-tutorial/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nextjs-tutorial"
                ]
            },
            "tags": [
                "javascript",
                "nextjs",
                "apps"
            ],
            "name": "NextJS Fullstack Tutorial",
            "description": "Create a fullstack NextJS app while following along with the tutorial video and blogpost from Eddie Jaoude.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"
                ]
            },
            "tags": [
                "javascript",
                "nuxtjs",
                "nestjs",
                "apps"
            ],
            "name": "NuxtJS + NestJS Fullstack Tutorial",
            "description": "Create a fullstack NuxtJS + NestJS app while following along with the tutorial video from Eddie Jaoude.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Build an Astra DB RPG",
            "description": "This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/weatherapp/master/hero.png"
            },
            "tags": [
                "javascript",
                "stargate documents api",
                "timeseries db",
                "apps"
            ],
            "name": "Using Stargate Documents API to build a TimeSeries DB API",
            "description": "A sample app that shows how the Stargate Documents API can be used to build a TimeSeries DB Abstraction on top of AstraDB",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "c#",
                "apps"
            ],
            "name": "Getting Started with Cassandra + C# + Astra",
            "description": "This provides an example REST backend built in C# using .NET Core 2.1 for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "python",
                "python driver",
                "apps"
            ],
            "name": "Getting Started with Python + Astra DB",
            "description": "This sample Python backend provides a REST API service that is used with the Getting Started with Astra UI to show a simple example of how to connect to and query DataStax Astra DBs.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "java",
                "apps"
            ],
            "name": "Astra + Java 101",
            "description": "Minimal code sample to work ASTRA in Java.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io#https://github.com/DataStax-Examples/astra-loom"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-loom/master/hero.png"
            },
            "tags": [
                "labs",
                "elixir",
                "apps"
            ],
            "name": "Astra DB Loom",
            "description": "Loom is a thread based chat server, where users can send messages to one or more threads via hashtags (ex. I'm heading to the park at noon #family #friends #frisbee_club ).",
            "duration": "60 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"
                ]
            },
            "tags": [
                "python",
                "django",
                "video",
                "apps"
            ],
            "name": "Build a Blog With Django and Astra DB",
            "description": "Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg"
            },
            "tags": [
                "python",
                "selenium",
                "video",
                "apps"
            ],
            "name": "Build a Website Scraper with Astra DB + Python",
            "description": "Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, & FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg"
            },
            "tags": [
                "python",
                "machine-learning",
                "video",
                "apps"
            ],
            "name": "AI as an API",
            "description": "Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "code": "W018",
            "name": "Introduction to GraphQL",
            "tags": [
                "graphql api",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1UEgbHHRPu5W79E5N6FO2emK424r3BSkH"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-graphql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1768638"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=0yLysXQNJ1g"
                ]
            }
        },
        {
            "code": "W001",
            "name": "Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals",
            "tags": [
                "apache cassandra",
                "cql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/140-5Cz21Z897ArtF63crXbJY3ypcHyXa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-cassandra",
                    "https://github.com/datastaxdevs/workshop-cassandra-fundamentals"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134126"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1VZDIS6L_K4w9X8oOitzBStV1xVRPbQXtin6aWB7jqt8/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=EVpeqOnsDnU"
                ]
            }
        },
        {
            "code": "W002",
            "name": "Cassandra Data Modelling",
            "tags": [
                "apache cassandra",
                "cql",
                "data modeling",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/104L7gBEzpgzrXg472D0q-85PnDU0xBMl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-data-modeling"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/764223"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1pkpY6IDkYuHguer7kXJB3vgqvX2OjVTGswvAwUsSHtU/edit#"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=xrDfE74QnSE"
                ]
            }
        },
        {
            "code": "W003",
            "name": "Drivers and App Development",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ONw8hG0_oh7bXEv4vMk9Biuq1qQqdzP4"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-application-development"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973141"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1Jd0nISIBIAnmp7yHDS8Ot0X6RXIuaQiy6eCnW_WezMc/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jCq0Eg0RnLU"
                ]
            }
        },
        {
            "code": "W004",
            "name": "Api and microservices",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/U_i7NpP4R269yyq1w50MDg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/U_i7NpP4R269yyq1w50MDg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1a511qG28gu_SNZg8PsBuWqqfGDsbmsXI"
                ],
                "github": [
                    "https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973113"
                ]
            }
        },
        {
            "code": "W005",
            "name": "Storage Attached Index (SAI)",
            "tags": [
                "astra db",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1eXCZkejddut_BaMr8fTVc-D5iwggJqkM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-storage-attached-indexes"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973142"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1fTrT1BTX6ORKunBze3l88ptonCZg7x0VIGfWP5fvRLE/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=GLJc1Uz9dqw"
                ]
            }
        },
        {
            "code": "W006",
            "name": "Introduction to Machine Learning with Apache Spark and Apache Cassandra",
            "tags": [
                "ml",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png"
                ],
                "heroimage": "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1iuZ2d3TduHL4q0pRgI-UP_SB6lNRAarM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-machine-learning"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1829591"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1YGHay-6x3XEF0BZhohrEFe4KXgm84etBB6hNu1ke_ws/edit#slide=id.g14709f5edc7_0_3213"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=KLccQKxWZ4Y"
                ]
            }
        },
        {
            "code": "W007",
            "name": "Benchmark your database with NoSQLBench",
            "tags": [
                "performance testing",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Y7izOZOwcQfXvt-OJTwZtqdEO1vDDghe"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-nosqlbench"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973143"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1QBqlmG5K5s7i28iX_Wagnwfr1pCoTvpjJAeEGqG7EII/edit#slide=id.p"
                ]
            }
        },
        {
            "code": "W008",
            "name": "Kubernetes, K8ssandra",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/EzPmO6Q6T7WJpN0rIkGHzQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/EzPmO6Q6T7WJpN0rIkGHzQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Nm7Ji_gHAcyUpzUAk_Vy-Wro91jutYr1"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-k8ssandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/597905"
                ]
            }
        },
        {
            "code": "W009",
            "name": "BattleStax",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/16zspYMQgxbnt-XN34loeQIcOaUbiJ6hi"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-battlestax"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134146"
                ]
            }
        },
        {
            "code": "W010",
            "name": "Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification",
            "tags": [
                "certification",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1E_s-doK5RXO3MvL8tc-v-dj5u0asUD9b"
                ],
                "github": [
                    "https://github.com/DataStax-Academy/workshop-cassandra-certification",
                    "https://github.com/DataStax-Academy/workshop-k8ssandra-certification"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973145"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1bVGQ85jz70uh4L7arkmwTWG_rRWPqOMbTlHXMY7wg-M/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=ZA-NBczakqk",
                    "https://www.youtube.com/watch?v=JT1Dljbfmz8"
                ]
            }
        },
        {
            "code": "W011",
            "name": "Cassandra in the cloud",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1UE_ooWhnRf1trfuKhAy2eQg9lB8LUjH-"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-your-k8s-to-cloud"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973130"
                ]
            }
        },
        {
            "code": "W012",
            "name": "From SQL to NoSQL",
            "tags": [
                "nosql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1KP6ltv8AwRBQNroaOTfMXv-o_NM8GJYa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-sql-to-nosql-migration"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973105"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1C1lJpj_gkUsRtueL2JrY1S2M4fNdGSBe1M23l6Mlnjg/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=tNvBjY8izSk"
                ]
            }
        },
        {
            "code": "W015",
            "name": "Netflix Application",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/d3rt3TUlQw-GBb1ethVnzg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/d3rt3TUlQw-GBb1ethVnzg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1neLRpSiNxqQs_vEoDJ7l05KOVWJzu1CU"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-graphql-netflix"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134150"
                ]
            }
        },
        {
            "code": "W016",
            "name": "React Native",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7tNZR8zwQkS3gXVi0jLJ0w/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7tNZR8zwQkS3gXVi0jLJ0w/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1QXerOGOImq-U_2nxwXuiBVMMOYS8Xe_n"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-todo-native-mobile"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973146"
                ]
            }
        },
        {
            "code": "W017",
            "name": "VueJS and TypeScript",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6-MkoHDYS1erN3aLT8n7gg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6-MkoHDYS1erN3aLT8n7gg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1o-SeO00oyszgjWrMpjQ-DK4OpewTkaFQ"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-vuejs"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973147"
                ]
            }
        },
        {
            "code": "W019",
            "name": "Introduction to NoSQL",
            "tags": [
                "cassandra",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1XpYXADz39jP0NUwN4aq1_yyFqYCA12hq"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-nosql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1710373"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1B2sEsHrQcjj7TxR9reNZLoJ0LI7NBgeMk1IpgVvF2jM/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=rhzUrejsA4A"
                ]
            }
        },
        {
            "code": "W020",
            "name": "Pulsar and Astra Streaming",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/XHV8YAGkSGSZdVIB4ojv5A/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/XHV8YAGkSGSZdVIB4ojv5A/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/13_d2AvKotYkIkTQTJrta_cTcE9y-JE3m"
                ],
                "github": [
                    "#gid=1827917007"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973117"
                ]
            }
        },
        {
            "code": "W021",
            "name": "Cassandra and Quarkus",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://badgr.com/public/assertions/O_7Dcl7ySCiWJasmtnJaNw"
                ],
                "heroimage": "https://badgr.com/public/assertions/O_7Dcl7ySCiWJasmtnJaNw",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1wD15nv9KwwjtIVPrQ2YmejajcxLOilRj"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-quarkus-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1397809"
                ]
            }
        },
        {
            "code": "W022",
            "name": "Todo Application (Spring Data)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6WpOvdPQR4CF5jcJf5tjEg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6WpOvdPQR4CF5jcJf5tjEg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/167Mf0WSRTEhcD8tywONFZqWGd_-RQH-e"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-data-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973108"
                ]
            }
        },
        {
            "code": "W023",
            "name": "eCommerce Application",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1qRm2k12ugxH0H4ZnMKWYAARALcc-voch"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ecommerce-app"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1495817"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1MgVCGoe31OjFrQkg0VaiQnTPPj6h0mPqlnanBHvPe0s/edit?usp=sharing"
                ]
            }
        },
        {
            "code": "W024",
            "name": "Stargate Wheel App (Spring Data)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/badge.png?raw=true"
                ],
                "heroimage": "https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/badge.png?raw=true",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1-wAY_jtez3eNDKElovTPy_pCv6LIXeb1"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-stargate"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973138"
                ]
            }
        },
        {
            "code": "W025",
            "name": "PetClinic App (Spring, Reactive)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/QNo4Nsq5QAyo7NJsgRY1Bg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/QNo4Nsq5QAyo7NJsgRY1Bg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1VzvQ2vbJQVoPU75E41NT2VnJliN4v3Or"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-reactive"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973087"
                ]
            }
        },
        {
            "code": "W026",
            "name": "NLP as an API - Text classification using Keras, FastAPI and NoSQL",
            "tags": [
                "ai",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1bOYZsmF6l7M_qmgjizXRBrUhsSa-Fk2Z"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ai-as-api"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1585505"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1ZzK86Zw7izsn5sgq1-n7tSVveqV0HPAuKtyQtwDGKrg/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=3LQBJP3JL6A"
                ]
            }
        },
        {
            "code": "W027",
            "name": "Build a Multiplayer Real-time Game with Astra Streaming",
            "tags": [
                "streaming",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/11BMPKnpCnEpTa5PCpNLbOuapP5X5Ze_P"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-game"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1432915"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/17_D6IFIxgkzvCb59pdeI2zoMphKCNF45BwAdlAvoBo0/edit#slide=id.p"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jfOBPlcd9eA"
                ]
            }
        },
        {
            "code": "W029",
            "name": "Introduction to Streaming and CDC",
            "tags": [
                "change data capture",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Ynj_SX6PS6p9XyUbIXnB03GYuRnjcNFM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-streaming-and-cdc"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973152"
                ]
            }
        },
        {
            "code": "W030",
            "name": "Real-Time Data pipelines",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ZpDnGf53rvCDovVOZMVf8UyphZTdTJhR"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-realtime-data-pipelines"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1858607"
                ]
            }
        },
        {
            "code": "W031",
            "name": "Swift, IOS and Document API",
            "tags": [
                "workshop"
            ],
            "urls": {
                "slides": [
                    "https://drive.google.com/drive/folders/1K6XtDFET9ujOzQKMHzK-RYNP2-ZSsjbF?usp=sharing"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-IOS-Swift-Astra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1807858"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1KHysoOwoohnHnA8Qz5yMmk20cNZvupZr3Rh_DbUyXvw/edit#"
                ]
            }
        },
        {
            "code": "W032",
            "name": "Quine and Astra DBIn progress 10/19",
            "tags": [
                "graph",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-graph-quine"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1884439"
                ]
            }
        },
        {
            "code": "W033",
            "name": "Quarkus Spring and Micronaut",
            "tags": [
                "workshop"
            ],
            "urls": {
                "slides": [
                    "https://drive.google.com/drive/u/0/folders/1tm2ynxcNv22TmhhbvXUpL4I4514WGgar"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-quarkus-micronaut-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973120"
                ]
            }
        },
        {
            "name": "Killrvideo Java",
            "summary": "Clone of youtube using DSE and java drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-java"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "grpc",
                " spring",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "Cedrick Lunven",
            "apis": [],
            "tags": [
                "java",
                "grpc"
            ]
        },
        {
            "name": "From driver 3x to 4x",
            "summary": "Sample codes to illustrate part of java drivers and migrations",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/DataStax-Examples/java-cassandra-driver-from3x-to4x"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                ""
            ],
            "usecases": "N/A",
            "owner": "Cedrick Lunven",
            "apis": [],
            "tags": [
                "java"
            ]
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-ide-plugin/master/hero.jpeg"
            },
            "tags": [
                "jetbrains",
                "java",
                "tools"
            ],
            "name": "JetBrains Astra DB Plugin",
            "description": "A Jetbrains plugin that allows you to connect and explore your data on Astra DB or any Apache Cassandra cluster running with Stargate.",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "cql",
                "ds-bulk",
                "tools"
            ],
            "name": "Loading Data into Astra DB with DataStax Bulk Loader",
            "description": "If you're trying to load data into Astra from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the DataStax Bulk Loader.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-spark-migration/master/hero.png"
            },
            "tags": [
                "labs",
                "scala",
                "tools"
            ],
            "name": "Spark Migration Tool for Astra DB",
            "description": "Migrate data from an existing Cassandra cluster to Astra DB using a Spark application.",
            "duration": "40 minutes",
            "skilllevel": "Expert",
            "priority": 2
        },
        {
            "name": "Datastax Bulk Loader Demo",
            "summary": "",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo"
            },
            "language": [
                ""
            ],
            "stack": [
                "Spark"
            ],
            "usecases": "N/A",
            "owner": "Chris Whilhite",
            "apis": [],
            "tags": [
                "spark"
            ]
        },
        {
            "name": "Killrvideo Python",
            "summary": "Clone of youtube using DSE and python drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-python"
                ]
            },
            "language": [
                "Python"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "python",
                "grpc"
            ]
        },
        {
            "name": "Killrvideo CSharp",
            "summary": "Clone of youtube using DSE and csharp drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-csharp"
                ]
            },
            "language": [
                "CSharp"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "csharp",
                "grpc"
            ]
        },
        {
            "name": "AstraDB Loom",
            "summary": "",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo"
            },
            "language": [
                "Elixir"
            ],
            "stack": [
                ""
            ],
            "usecases": "Chat Server",
            "owner": "Chris Wilhite",
            "apis": [],
            "tags": [
                "elixir"
            ]
        }
    ],
    "count": 76
}
{'documentId': 'all'}
SUCCESS
{
    "name": "spring",
    "apps": [
        {
            "name": "astra spring boot starter",
            "summary": "Helper to initialize astra sdk client in spring boot and spring data",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/datastax/astra-sdk-java/tree/main/astra-spring-boot-starter"
                ]
            },
            "language": [
                ""
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "N/A",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "spring"
            ]
        },
        {
            "name": "Spring Data Astra DB REST API",
            "summary": "REST API with Spring data and spring-mvc",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-data-starter/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-data-starter"
                ],
                "gitpod": [
                    "https://dtsx.io/2QjoULs"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "starters"
            ],
            "description": "This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Spring Data Cassandra REST API</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">Start Building</a></em></p>\n<p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Run a REST API that connects to DataStax Astra DB</li>\n</ul>\n<h2>How this works</h2>\n<p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">https://github.com/DataStax-Examples/spring-data-starter</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running Spring Data Cassandra REST API</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38HWu73\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/spring-data-starter\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>\n<p>Click the 'Open in Gitpod' link:\n<a href=\"https://dtsx.io/2QjoULs\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</li>\n<li>\n<p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png\" /></p>\n</li>\n<li>\n<p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png\" /></p>\n</li>\n<li>\n<p>You've successfully build a Spring Data Cassandra application!\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n</li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Reactive PetClinic, using Spring WebFlux and Astra DB",
            "summary": "Clone of Petclinic with spring webflux, java drivers connected to Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-petclinic-reactive"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-webflux"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "labs",
                "apps"
            ],
            "description": "This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Reactive Implementation of \ud83d\udc08 Spring PetClinic \ud83d\udc15</h1>\n<p><em>15 minutes, Intermediate, <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites\">Start Building</a></em></p>\n<p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png\" /></p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite\">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p>\n<!--- STARTEXCLUDE --->\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38yYuif\">DataStax Astra DB account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"GITHUB_URL\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a>\n  - <a href=\"#deploying-to-vercel\">Deploying to Vercel</a>\n  - <a href=\"#deploying-to-netlify\">Deploying to Netlify</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>Click the 'Open in Gitpod' link:\n<a href=\"https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W028",
            "name": "Better Reads (Spring)",
            "tags": [
                "spring",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1W2u_Wdrs7aqBQ3dfkLEE0Mygu18-QuWU"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-betterreads"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973089"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "java",
                "spring",
                "apps"
            ],
            "name": "Getting Started with Java + Spring + Astra DB",
            "description": "This provides an example REST backend built in Java using Spring Boot for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/betterreads-webapp"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/betterreads-webapp/master/hero.jpeg"
            },
            "tags": [
                "java",
                "spring",
                "apps"
            ],
            "name": "BetterReads Spring App",
            "description": "Companion code for the Java Brains \"code with me\" series that reads data from DataStax Astra DB.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        }
    ],
    "count": 6
}
{'documentId': 'spring'}
SUCCESS
{
    "name": "httpie",
    "apps": [
        {
            "name": "astra-httpie",
            "summary": "Helper to interact with Astra Api and Httpie cli to do HTTP Calls",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/synedra/httpie-astra"
                ]
            },
            "language": [
                ""
            ],
            "stack": [
                "Httpie"
            ],
            "usecases": "N/A",
            "owner": "Kirsten Hunter",
            "apis": [
                "DATA",
                "DOC",
                "DB",
                "IAM"
            ],
            "tags": [
                "httpie"
            ]
        }
    ],
    "count": 1
}
{'documentId': 'httpie'}
SUCCESS
{
    "name": "javascript",
    "apps": [
        {
            "name": "Social Media App using React, JAMStack and Astra DB",
            "summary": "React demo connecting document Api in Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ],
                "badge": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Social Network",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "A simple Tik-Tok clone running on Astra DB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n\n<h1>Social Media App using React, JAMStack and Astra DB</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart\">Start Building</a></em></p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n\n<ul>\n<li><a href=\"https://dtsx.io/2WMxoBQ\">Signup for DataStax Astra</a>, or login to your already existing account.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<!--- STARTEXCLUDE --->\n<h3>Video Content:</h3>\n<ul>\n<li><a href=\"https://youtu.be/IATOicvih5A\">https://youtu.be/IATOicvih5A</a></li>\n<li>(00:00) Introduction</li>\n<li>(03:05) Creating our Database on DataStax</li>\n<li>(06:52) Setting up our App</li>\n<li>(12:37) Routing Pages</li>\n<li>(18:02) Creating Components</li>\n<li>(28:32) Introduction to Data with Netlify and Stargate</li>\n<li>(30:10) Introduction to using the astrajs/collections</li>\n<li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li>\n<li>(34:01) Adding authorization to access our Database</li>\n<li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li>\n<li>(50: 32) Viewing all our Data</li>\n<li>(51:56) Rendering components based on our Data</li>\n<li>(01:17:01) Editing our Data (following/unfollowing a user)</li>\n<li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li>\n</ul>\n<h3>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>\n<ul>\n<li>Twitter: https://twitter.com/ania_kubow</li>\n<li>YouTube: https://youtube.com/aniakubow</li>\n<li>Instagram: https://instagram.com/aniakubow</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Netflix Clone using GraphQL and Astra DB",
            "summary": "React demo connecting graph Api in Astra with paging",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-netflix"
                ],
                "demo": [
                    "https://sag-astra-netflix.netlify.app"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\nGraphQL"
            ],
            "usecases": "Digital Library",
            "owner": "Chris Whilhite",
            "apis": [
                "GQL"
            ],
            "tags": [
                "javascript",
                "react",
                "graphql api",
                "apps"
            ],
            "description": "Let's code a Netflix Clone with GraphQL Pagination!",
            "duration": "2 hours",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Netflix Clone using Astra DB and GraphQL</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/astra-netflix#quick-start\">Start Building</a>, <a href=\"https://sag-astra-netflix.netlify.app\">View Demo</a></em></p>\n<p>Let's code a Netflix Clone with GraphQL Pagination! </p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<ul>\n<li><a href=\"https://dtsx.io/3sYwYUL\">Signup for DataStax Astra</a>, or login to your already existing account. </li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<h2>Objectives</h2>\n<ul>\n<li>Build a Netflix clone using GraphQL</li>\n</ul>\n<h2>How this works</h2>\n<p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href=\"https://sag-astra-netflix.netlify.app\">here</a>.</p>\n<p>Follow along with Ania's <a href=\"https://www.youtube.com/watch?v=g8COh40v2jU\">walkthrough video</a>. </p>\n<p>Additionally, there is a workshop repository for this sample app <a href=\"https://github.com/datastaxdevs/appdev-week3-graphql\">located here</a>.</p>"
        },
        {
            "name": "ToDo App using JAMStack, Netlify, and Astra DB",
            "summary": "React demo using Netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify"
            ],
            "usecases": "TodoList",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "This is an example React To-Do application using a DataStax Astra DB free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>JAMStack + Netlify + Astra DB + Cassandra</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://dtsx.io/2Yhvqtv\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<p>0) <a href=\"https://dtsx.io/2Yhvqtv\">Signup for DataStax Astra</a>, or login to your already existing account. </p>\n<!--- ENDEXCLUDE --->\n<p>1) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> or use an existing one.\n2) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.\n3) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.\n4) Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a>\n5) Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.\n6) Start the example by running <code>npm run dev</code> in the Gitpod console.</p>\n<h2>Objectives</h2>\n<ul>\n<li>Provide a fullstack development example using Astra DB as the storage backend</li>\n</ul>\n<h2>How this works</h2>\n<p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>"
        },
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Kiillrvideo NodeJS",
            "summary": "Clone of youtube using DSE and nodeJS drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-nodejs"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "javascript",
                "grpc"
            ]
        },
        {
            "code": "W013",
            "name": "ToDo App using JAMStack, Netlify, and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "rest api",
                "apps"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ASQIUFRBY1PduuImqh88kn4V2ahIMvKl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/appdev-week1-todolist"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973103"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "description": "This is an example React To-Do application using a DataStax Astra free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>TODO + Astra + Cassandra \ud83d\udcd2</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://astra.dev/9-9\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT\" /></p>\n<h2>\ud83c\udfaf Objectives</h2>\n<ul>\n<li>Create a \"from scratch\" <strong>React</strong> app using NPX</li>\n<li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li>\n<li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li>\n<li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API </li>\n<li>Leverage Netlify and DataStax Astra DB</li>\n</ul>\n<h2>\u2139\ufe0f Frequently asked questions \u2139\ufe0f</h2>\n<ul>\n<li><em>Can I run the workshop on my computer?</em></li>\n</ul>\n<blockquote>\n<p>There is nothing preventing you from running the workshop on your own machine.\nIf you do so, you will need\n* git installed on your local system\n* <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/\">node 15 and npm 7 or later</a></p>\n<p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p>\n</blockquote>\n<ul>\n<li>\n<p><em>What other prerequisites are there?</em></p>\n<blockquote>\n<ul>\n<li>You will need a github account</li>\n<li>You will also need an Astra DB account, but we'll work through that in the exercises</li>\n<li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Do I need to pay for anything for this workshop?</em></p>\n<blockquote>\n<ul>\n<li><strong>No.</strong> All tools and services we provide here are FREE.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Will I get a certificate if I attend this workshop?</em></p>\n</li>\n</ul>\n<blockquote>\n<p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p>\n</blockquote>\n<h2>Materials for the Session</h2>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n</ul>\n<h2>Homework</h2>\n<p><img src=\"https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below.</li>\n<li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href=\"https://github.com/datastaxdevs/react-basics\">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li>\n<li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li>\n<li>Submit your homework <a href=\"https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E\">here</a>. Note:\n<em>never share your Astra DB tokens!</em></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>Let's start</h1>\n<h2>Table of contents</h2>\n<ol>\n<li><a href=\"#1-login-or-register-to-astradb-and-create-database\">Login or Register to AstraDB and create database</a></li>\n<li><a href=\"#2-create-a-security-token\">Create a security token</a></li>\n<li><a href=\"#3-create-a-table-with-rest-api-using-swagger\">Create a table with REST API using Swagger</a></li>\n<li><a href=\"#4-insert-data-in-the-table-with-the-rest-api-using-swagger\">Insert data in the Table with the REST API using Swagger</a></li>\n<li><a href=\"#5-retrieving-values\">Retrieving values</a></li>\n<li><a href=\"#6-launch-gitpod-ide\">Launch GitPod IDE</a></li>\n<li><a href=\"#7-launch-the-todo-app\">Launch the TODO app</a></li>\n</ol>\n<h2>An introduction to web development</h2>\n<h3>CodePen starter examples</h3>\n<ul>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/WNjrXXp\">HTML</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/QWvyOOv\">CSS</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/mdmVRwy\">Javascript</a></li>\n</ul>\n<h2>1. Login or Register to AstraDB and create database</h2>\n<p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.  </p>\n<h3>\u2705 Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>\n<p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p>\n<p><a href=\"https://astra.dev/9-9\"><img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true\" /></a>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true\" />\n</details></p>\n<p><strong>Use the following values when creating the database</strong>\n|Field| Value|\n|---|---|\n|<strong>database name</strong>| <code>todos_workshop_db</code> |\n|<strong>keypace</strong>| <code>todos</code> |\n|<strong>Cloud Provider</strong>| <em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em> |</p>\n<p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p>\n<p>You will see your new database <code>pending</code> in the Dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true\" /></p>\n<p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>2. Create a security token</h2>\n<p>\u2705  <strong>Step 2a:</strong>  <a href=\"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\">Create a token for your app</a> to use in the settings screen. Use \"Database Administrator\" permission.</p>\n<p>\u2705  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p>\n<p><strong>\ud83d\udc41\ufe0f Expected output</strong>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true\" />\n</details></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>3. Create a table with REST API using Swagger</h2>\n<p>\u2705  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by \n1. Click on your active database\n2. Click <code>Connect</code> TAB\n3. Click <code>REST API</code>\n4. Clik link to your swagger endpoint.</p>\n<p><em>As shown on the picture below.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p>\n<ol>\n<li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true\" /></p>\n<ol>\n<li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section. </li>\n<li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>. </li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true\" /></p>\n<ol>\n<li>Click the \"Try it out\" button</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true\" /></p>\n<ol>\n<li>\n<p>Finally, copy the create table statement using the code below into the <strong>body</strong> field\n<code>json\n{\n  \"name\": \"restfromreadme_by_id\",\n  \"ifNotExists\": true,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"id\",\n      \"typeDefinition\": \"uuid\",\n      \"static\": false\n    },\n    {\n      \"name\": \"text\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"key\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"completed\",\n          \"typeDefinition\": \"boolean\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"id\"\n    ]\n  }\n}</code></p>\n</li>\n<li>\n<p>And click <strong>execute</strong> to apply the command and create the table</p>\n</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true\" /></p>\n<p>You should see a <strong>201</strong> response telling you it correctly created the \"restfromreadme_by_id\" table.</p>\n<p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>4. Insert data in the Table with the REST API using Swagger</h2>\n<p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p>\n<p>\u2705  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p>\n<ol>\n<li>Scroll down and navigate to the <strong>data</strong> section</li>\n<li>Then find <strong>Add row</strong> and click it to open the section</li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 4b:</strong> FIll in values and add a row</p>\n<ol>\n<li>Add your Astra token</li>\n<li>Add the keyspaceName <code>todos</code></li>\n<li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true\" /></p>\n<ol>\n<li>Copy the following JSON into the <strong>body</strong></li>\n</ol>\n<p><code>json\n{\"id\":\"57dbd260-d905-11eb-b985-c522859819b9\",\"completed\":false,\"text\":\"TODO FROM README\",\"key\":\"none\"}</code></p>\n<ol>\n<li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li>\n</ol>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>5. Retrieving values</h2>\n<p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p>\n<p>\u2705  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p>\n<ol>\n<li>Scroll up within the <strong>data</strong> section</li>\n<li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li>\n<li>Take note this is using a <strong>GET</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 5b:</strong> Execute the command to display the data</p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n<li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true\" /></p>\n<ol>\n<li>Click <strong>Execute</strong></li>\n<li>View the end result data that should be exactly what we created in the previous step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>6. Launch GitPod IDE</h2>\n<ul>\n<li>Click the button to launch the GitPod IDE.</li>\n</ul>\n<p><a href=\"https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<h1>Need a refresher on React Basics?</h1>\n<details><summary>Take me to the React stuff</summary>\n  We've created a separate repo going over the Basics of React. To get there, click the link below.\n\n  [GOTO React-Basics](https://github.com/datastaxdevs/react-basics)\n\n  When you're done, just click on the \"Back to Main\" breadcrumb to come back here.\n</details>\n\n<h2>7. Launch the TODO app</h2>\n<p>\u2705  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p>\n<p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href=\"#2-create-a-security-token\">the instructions above</a></p>\n<p>\u2705  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p>\n<ol>\n<li>Create <code>.env</code> file</li>\n</ol>\n<p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.\n<code>bash\nnpm exec astra-setup todos_workshop_db todos</code></p>\n<ol>\n<li>\ud83d\udc69\u200d\ud83d\udcbb  Install all the packages</li>\n</ol>\n<p><code>bash\nnpm install -g netlify-cli</code></p>\n<p>\u2705  <strong>Step 7c:</strong> Launch your app\n  * Run the application \n  <code>netlify dev</code>\n  * The application should automatically launch in the GitPod preview pane</p>\n<h3>Things to Note:</h3>\n<ul>\n<li>The contents of this repo are based on <a href=\"https://github.com/tjake/todo-astra-react-serverless/\">Jake's port</a> of the <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/react\">TodoMVC code</a> originally written by <a href=\"https://github.com/petehunt\">Pete Hunt</a>.</li>\n<li>The example is modified from https://github.com/huksley/todo-react-ssr-serverless.</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W014",
            "name": "TikTok clone using React, JAMStack and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "doc api"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1SP0VbYkO0QQP5Ur4_H62ALPYtgfc5GfD"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-social-media-tiktok"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134131"
                ],
                "demo": [
                    "https://fanciful-licorice-ea1437.netlify.app/"
                ]
            },
            "description": "A simple Tik-Tok clone running on AstraDB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Astra DB TikTok Clone Workshop</h1>\n<p><a href=\"https://github.com/datastaxdevs/workshop-social-media-tiktok\"><img alt=\"Gitpod ready-to-code\" src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\" /></a> \n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\"><img alt=\"License Apache2\" src=\"https://img.shields.io/hexpm/l/plug.svg\" /></a>\n<a href=\"https://discord.com/widget?id=685554030159593522&amp;theme=dark\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/685554030159593522\" /></a></p>\n<p>\u23f2\ufe0f <strong>Duration :</strong> 2 hours</p>\n<p>\ud83c\udf93 <strong>Level</strong> Beginner to Intermediate</p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href=\"https://fanciful-licorice-ea1437.netlify.app\">here</a></p>\n<p><img alt=\"image\" src=\"./screenshot.jpg\" /></p>\n<blockquote>\n<p><a href=\"#-start-hands-on\">\ud83d\udd16 Accessing HANDS-ON</a></p>\n</blockquote>\n<h2>\ud83d\udccb Table of contents</h2>\n<ul>\n<li><strong>HouseKeeping</strong></li>\n<li><a href=\"#1---objectives\">1. Objectives</a></li>\n<li><a href=\"#2---frequently-asked-questions\">2. Frequently asked questions</a></li>\n<li><a href=\"#3---materials-for-the-session\">3. Materials for the Session</a></li>\n<li><a href=\"#4---homework\">4. Homework</a></li>\n<li><strong><a href=\"#lab-1---getting-started-with-database\">LAB 1 - Getting Started with Database</a></strong></li>\n<li><a href=\"#11---getting-started-with-database\">1.1 - Create Astra Account</a></li>\n<li><a href=\"#11---getting-started-with-database\">1.2 - Create Astra Database</a></li>\n<li><strong><a href=\"#lab-2---document-api\">LAB 2 - Document API</a></strong></li>\n<li><a href=\"#21-using-document-api\">2.1 - Using Document API</a></li>\n<li><a href=\"#22---create-astra-credentials\">2.2 - Create Astra Credentials</a></li>\n<li><strong><a href=\"#lab-3---ide-setup\">LAB 3 - IDE Setup</a></strong>  </li>\n<li><a href=\"#31---netlify-site-setup\">3.1 - Netlify site setup</a></li>\n<li><a href=\"#32---launch-gitpod\">3.2 - Launch GitPod</a></li>\n<li><a href=\"#33---astra-cli-setup\">3.3 - Astra CLI Setup</a></li>\n<li><a href=\"#34---netlify-cli-setup\">3.4 - Netlify CLI Setup</a></li>\n<li><a href=\"#35-launch-your-app\">3.5 - Launch the application</a></li>\n<li><strong><a href=\"#lab-4---coding-against-db\">LAB 4 - Coding Against DB</a></strong></li>\n<li><a href=\"#41---document-api\">4.1 - Document API</a></li>\n<li><a href=\"#42---astrajs-client\">4.2 - AstraJS Client</a></li>\n<li><a href=\"#43---serverless-configuration\">4.3 - Serverless configuration</a></li>\n<li><a href=\"#44---react-component\">4.4 - React Component</a></li>\n<li><strong><a href=\"#lab-5---netlify-deployments\">LAB 5 - Netlify Deployments</a></strong></li>\n<li><a href=\"#51---connect-netlify-to-your-site\">5.1 - Connect Netlify to your site</a></li>\n<li><a href=\"#52---deploy-to-production\">5.2 - Deploy to production</a></li>\n</ul>\n<h2>Housekeeping</h2>\n<h3>1 - Objectives</h3>\n<ul>\n<li>\n<p>\ud83c\udfaf How to build a frontend application using React Components</p>\n</li>\n<li>\n<p>\ud83c\udfaf How to build a backend with Javascript without Express.</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn what is gitpod and how you can use it in your projects</p>\n</li>\n</ul>\n<h3>2 - Frequently asked questions</h3>\n<p/>\n<details>\n<summary><b> 1\ufe0f\u20e3 Can I run this workshop on my computer?</b></summary>\n<hr>\n<p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:\n<ol>\n<li><b>git installed on your local system</b>\n<li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b>\n</ol>\n</p>\nIn this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.\n</details>\n<p/>\n<details>\n<summary><b> 2\ufe0f\u20e3 What other prerequisites are there?</b></summary>\n<hr>\n<ul>\n<li>You will need an <b>Github account</b>\n<li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop\n<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)\n\n</ul>\n</p>\n</details>\n<p/>\n<details>\n<summary><b> 3\ufe0f\u20e3 Do I need to pay for anything for this workshop?</b></summary>\n<hr>\n<b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.\n</details>\n<p/>\n<details>\n<summary><b> 4\ufe0f\u20e3 Will I get a certificate if I attend this workshop?</b></summary>\n<hr>\nAttending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*\n</details>\n<p/>\n\n<h3>3 - Materials for the Session</h3>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides/slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n<li><a href=\"jamstack.md\">What is JamStack?</a></li>\n<li><a href=\"#video-tutorial-with-ania-kubow\">Video tutorial with Ania Kubow</a></li>\n</ul>\n<h3>4 - Homework</h3>\n<p><img src=\"tutorial/images/tiktok-badge.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li>\n<li>(Optional extra credit) Watch the 2 hour Ania video <a href=\"#video-tutorial-with-ania-kubow\">HERE</a>, build the app yourself, and show us the completed app.</li>\n<li>Submit your homework <a href=\"https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys\">here</a></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>\ud83c\udfc1 Start Hands-on</h1>\n<h2>LAB 1 - Getting Started with Database</h2>\n<h3>1.1 - Getting Started with Database</h3>\n<p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p>\n<h4><code>\u2705.1.1.a</code>- Create Astra Account</h4>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://astra.dev/yt-12-14\"><img alt=\"image\" src=\"./tutorial/images/create_astra_db.png?raw=true\" /></a></p>\n</blockquote>\n<h4><code>\u2705.1.1.b</code>- Create Astra Database</h4>\n<ul>\n<li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-button.png?raw=true\" /></p>\n<ul>\n<li>Use the following values when creating the database:</li>\n</ul>\n<p>| #  | Field Name         | Field Value                     |\n|----|--------------------|---------------------------------|\n| 1  | <strong>Database Name</strong>    | <code>workshops</code>                     |\n| 2  | <strong>Keyspace Name</strong>  | <code>tiktok_keyspace</code>               |\n| 3  | <strong>Cloud Provider</strong> | <code>Google Cloud Plaform</code>          |\n| 4  | <strong>Area</strong>   | <code>North America</code>                 |\n| 5  | <strong>Region</strong> | <code>Moncks Corner, South Carolina</code> |</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Now click <code>[Create Database button]</code> that became blue.</li>\n<li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-pending.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Click <code>[Go to Database]</code></li>\n</ul>\n<h4><code>\u2705.1.1.c</code>- Database was already existing</h4>\n<p>Here are some special situations you might encounter.</p>\n<blockquote>\n<p>\u2139\ufe0f <strong>Hibernated Database:</strong></p>\n<p>If the DB workshops already exists but is hibernated (you have not use it for a while):<br />\n- Click the <code>[Resume Database]</code> button on the top right-hand corner.</p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-resume.png?raw=true\" /> </p>\n<p>\u2139\ufe0f <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p>\n<p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p>\n<ul>\n<li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li>\n<li>Provide the keyspace name <code>tiktok_keyspace</code></li>\n<li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-keyspace.png?raw=true\" /></p>\n</blockquote>\n<h2>LAB 2 - Document API</h2>\n<h3>2.1 Using Document API</h3>\n<h4><code>\u2705.2.1.a</code>- Open Swagger User Interface</h4>\n<ul>\n<li>(1) -  Select your database in the left panel (if needed)</li>\n<li>(2) -  Select the tab <code>Connect</code></li>\n<li>(3) -  Select the <code>Document API</code> bloc</li>\n<li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/access-swagger.png?raw=true\" /></p>\n<ul>\n<li>You should access this screen</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Swagger UI</code></p>\n<p><img alt=\"image\" src=\"tutorial/images/show-swagger.png?raw=true\" /></p>\n</blockquote>\n<h4><code>\u2705.2.1.b</code>- Lists Collections</h4>\n<ul>\n<li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-1.png?raw=true\" /></p>\n<ul>\n<li>(2) - Click the <code>[Try It Out]</code> button</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-2.png?raw=true\" /></p>\n<ul>\n<li>(3) - Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |</p>\n<ul>\n<li>(4) - Click on <code>[Execute]</code> button</li>\n</ul>\n<p>The output is empty (expected):</p>\n<p><code>json\n[]</code></p>\n<h4><code>\u2705.2.1.c</code>- Create Collection <code>story</code></h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>body</strong>| <code>{\"name\":\"story\"}</code> |</p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You can see the output with <code>201</code> (created) code</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/create-collection-1.png?raw=true\" /></p>\n<ul>\n<li>(6) - Following the steps in previous section list collections again, you should get </li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": [\n   {\n     \"name\": \"story\",\n     \"upgradeAvailable\": false\n   }\n ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.d</code>- Create a first document</h4>\n<p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |</p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"Mo Farooq\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"documentId\": \"8aa07632-4ffb-46e5-9d78-b32e21847221\"\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.e</code>- Search documents in a collections</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>where</strong>|  <code>{\"username\": {\"$eq\": \"mofarooq32\"}}</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": {\n   \"8aa07632-4ffb-46e5-9d78-b32e21847221\": {\n     \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n     \"button_visible\": true,\n     \"caption\": \"These ducks are MEGA cute\",\n     \"comments\": 2,\n     \"is_followed\": true,\n     \"likes\": 10,\n     \"name\": \"Mo Farooq\",\n     \"username\": \"mofarooq32\",\n     \"video\": \"https://i.imgur.com/FTBP02Y.mp4\"\n   }\n }\n}</code>\n</p>\n</blockquote>\n<h4><code>\u2705.2.1.f</code>- Update a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"New Name\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get an updated document</p>\n</li>\n</ul>\n<h4><code>\u2705.2.1.g</code>- Delete a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> _ Delete a document_</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result code of <code>204</code></p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>Code 204\naccess-control-allow-credentials: true \naccess-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com \naccess-control-expose-headers: Date \ndate: Mon,12 Dec 2022 18:12:43 GMT \nvary: Origin</code></p>\n</blockquote>\n<h3>2.2 - Create Astra Credentials</h3>\n<p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token. </p>\n<h4><code>\u2705.2.2.a</code>- Create Astra Credentials</h4>\n<blockquote>\n<p>\u2139\ufe0f <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p>\n</blockquote>\n<ul>\n<li>(1) - Go the <code>Organization Settings</code></li>\n<li>(2) - Go to <code>Token Management</code></li>\n<li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li>\n<li>(4) - Click <code>Generate token</code></li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-create-token.gif?raw=true\" /></p>\n<h4><code>\u2705.2.2.b</code>- Download Astra Credentials</h4>\n<ul>\n<li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-token.png?raw=true\" /></p>\n<blockquote>\n<p><strong>\u26a0\ufe0f Important</strong>\n<code>The instructor will show you on screen how to create a token \nbut will have to destroy to token immediately for security reasons.</code></p>\n</blockquote>\n<p>Notice the clipboard icon at the end of each value.\n- <code>Client ID:</code> We will <em>not</em> use this during this workshop\n- <code>Client Secret:</code> We will <em>not</em> use this during this workshop\n- <code>Token:</code> <strong><em>This is your token!</em></strong> We will use it as a api Key to interact with APIS</p>\n<h2>LAB 3 - IDE Setup</h2>\n<h3>3.1 - Netlify Site Setup</h3>\n<ul>\n<li>(1) Click the button to deploy.</li>\n</ul>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok\"><img alt=\"Deploy to Netlify\" src=\"https://www.netlify.com/img/deploy/button.svg\" /></a></p>\n</blockquote>\n<ul>\n<li>\n<p>(2) - Authenticate with your github Account</p>\n</li>\n<li>\n<p>(3) - Select an account and the github repository where to clone</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/deploy-to-netlify.gif?raw=true\" /></p>\n<ul>\n<li>(4) - In netlify user interface click on <code>Site deploy in progress</code> </li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-1.png\" /></p>\n</blockquote>\n<ul>\n<li>(5) - Click the top deploy link to see the build process.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-2.png\" /></p>\n</blockquote>\n<ul>\n<li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-3.png\" /></p>\n</blockquote>\n<ul>\n<li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-4.png\" /></p>\n</blockquote>\n<ul>\n<li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-5.png\" /></p>\n</blockquote>\n<h3>3.2 - Launch GitPod</h3>\n<h4><code>\u2705.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>\n<ul>\n<li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li>\n</ul>\n<h4>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>\n<p><img alt=\"correct notcorrect\" src=\"tutorial/images/correct-not-correct.png?raw=true\" /></p>\n<p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href=\"#3-clone-your-github-repository\">step3</a> to get to your repo.</p>\n<h4><code>\u2705.3.2.b</code>- Open Gitpod IDE</h4>\n<blockquote>\n<p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</blockquote>\n<h4><code>\u2705.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>\n<ul>\n<li>From your GitPod terminal execute the following command</li>\n</ul>\n<p><code>bash\ngit remote -v</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)\norigin  https://github.com/clun/workshop-astra-tik-tok.git (push)\nIf the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code>\n</p>\n</blockquote>\n<h3>3.3 - Astra CLI Setup</h3>\n<h4><code>\u2705.3.3.a</code>- Save your token</h4>\n<p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p>\n<p><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></p>\n<h4><code>\u2705.3.3.b</code>- Validate your configuration</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra user list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list\n+--------------------------------------+-----------------------------+---------------------+\n| User Id                              | User Email                  | Status              |\n+--------------------------------------+-----------------------------+---------------------+\n| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |\n+--------------------------------------+-----------------------------+---------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.c</code>- List Database to see  <code>workshops</code></h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>+---------------------+--------------------------------------+---------------------+----------------+\n| Name                | id                                   | Default Region      | Status         |\n+---------------------+--------------------------------------+---------------------+----------------+\n| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         |\n| workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |\n+---------------------+--------------------------------------+---------------------+----------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.d</code>- Get db details</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db get workshops</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops\n+------------------------+-----------------------------------------+\n| Attribute              | Value                                   |\n+------------------------+-----------------------------------------+\n| Name                   | workshops                               |\n| id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    |\n| Status                 | ACTIVE                                  |\n| Default Cloud Provider | GCP                                     |\n| Default Region         | us-east1                                |\n| Default Keyspace       | tiktok_keyspace                         |\n| Creation Time          | 2022-12-12T11:14:58Z                    |\n|                        |                                         |\n| Keyspaces              | [0] tiktok_keyspace                     |\n|                        |                                         |\n|                        |                                         |\n| Regions                | [0] us-east1                            |\n|                        |                                         |\n+------------------------+-----------------------------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.e</code>- Create configuration file</h4>\n<ul>\n<li>Create <code>.env</code> file</li>\n</ul>\n<p><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></p>\n<ul>\n<li>Show content</li>\n</ul>\n<p><code>cat .env</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>ASTRA_DB_APPLICATION_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZTvaCp......\"\nASTRA_DB_GRAPHQL_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace\"\nASTRA_DB_GRAPHQL_URL_ADMIN=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin\"\nASTRA_DB_GRAPHQL_URL_PLAYGROUND=\"https://.....-us-east1.apps.astra.datastax.com/api/playground\"\nASTRA_DB_GRAPHQL_URL_SCHEMA=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema\"\nASTRA_DB_ID=\".....\"\nASTRA_DB_KEYSPACE=\"tiktok_keyspace\"\nASTRA_DB_REGION=\"us-east1\"\nASTRA_DB_REST_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/rest\"\nASTRA_DB_REST_URL_SWAGGER=\"https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/\"\nASTRA_DB_SECURE_BUNDLE_PATH=\"/home/gitpod/.astra/scb/scb_....._us-east1.zip\"\nASTRA_DB_SECURE_BUNDLE_URL=\"secured_url\"\nASTRA_ORG_ID=\"f9460f14-9879-4ebe-83f2-48d3f3dce13c\"\nASTRA_ORG_NAME=\"cedrick.lunven@datastax.com\"\nASTRA_ORG_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZT.....\"</code></p>\n</blockquote>\n<h3>3.4 - Netlify CLI Setup</h3>\n<h4><code>\u2705.3.4.a</code>- Install the package</h4>\n<p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p>\n<p><code>npm install -g netlify-cli</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img src=\"tutorial/images/netlify-install-cli.png?raw=true\" /></p>\n</blockquote>\n<h3>3.5 Launch your app</h3>\n<h4><code>\u2705.3.5.a</code>- Start application</h4>\n<p><code>netlify dev</code></p>\n<p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n</blockquote>\n<p>```\n\u25c8 Netlify Dev \u25c8\n\u25c8 Ignored general context env var: LANG (defined in process)\n\u25c8 Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA\n\u25c8 Injected .env file env var: ASTRA_DB_ID\n\u25c8 Injected .env file env var: ASTRA_DB_KEYSPACE\n\u25c8 Injected .env file env var: ASTRA_DB_REGION\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL\n\u25c8 Injected .env file env var: ASTRA_ORG_ID\n\u25c8 Injected .env file env var: ASTRA_ORG_NAME\n\u25c8 Injected .env file env var: ASTRA_ORG_TOKEN\n\u25c8 Loaded function add http://localhost:8888/.netlify/functions/add.\n\u25c8 Loaded function addData http://localhost:8888/.netlify/functions/addData.\n\u25c8 Loaded function edit http://localhost:8888/.netlify/functions/edit.\n\u25c8 Loaded function posts http://localhost:8888/.netlify/functions/posts.\n\u25c8 Functions server is listening on 36661\n\u25c8 Setting up local development server</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Netlify Build                                               <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u276f Version\n  @netlify/build 28.4.5</p>\n<p>\u276f Flags\n  {}</p>\n<p>\u276f Current directory\n  /workspace/workshop-astra-tik-tok</p>\n<p>\u276f Config file\n  /workspace/workshop-astra-tik-tok/netlify.toml</p>\n<p>\u276f Context\n  dev</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  1. Run command for local development                        <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u25c8 Starting Netlify Dev with Create React App</p>\n<blockquote>\n<p>tik-tok-stargate@0.1.0 start\nreact-scripts start</p>\n</blockquote>\n<p>\u2139 \uff62wds\uff63: Project is running at http://10.0.5.2/\n\u2139 \uff62wds\uff63: webpack output is served from \n\u2139 \uff62wds\uff63: Content not from webpack is served from /workspace/workshop-astra-tik-tok/public\n\u2139 \uff62wds\uff63: 404s will fallback to /\nStarting the development server...</p>\n<p>Compiled successfully!</p>\n<p>You can now view tik-tok-stargate in the browser.</p>\n<p>Local:            http://localhost:3000\n  On Your Network:  http://10.0.5.2:3000</p>\n<p>Note that the development build is not optimized.\nTo create a production build, use npm run build.</p>\n<p>\u2714 Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml</p>\n<p>(dev.command completed in 9.4s)</p>\n<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502                                                 \u2502\n   \u2502   \u25c8 Server now ready on http://localhost:8888   \u2502\n   \u2502                                                 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>\n<p>\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData\n\u2827 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts\n\u2819 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.\n\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.\n\u2714 Setting up the Edge Functions environment. This may take a couple of minutes.\n```</p>\n<p><img alt=\"start\" src=\"./tutorial/images/netlify-start.png?raw=true\" /></p>\n<h2>LAB 4 - Coding Against DB</h2>\n<h3>4.1 - Document API</h3>\n<p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p>\n<h4><code>\u2705.4.1.a</code>- Reopen Swagger</h4>\n<p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href=\"astra.datastax.com\">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p>\n<p><img alt=\"db_connect\" src=\"./tutorial/images/db_connect.png?raw=true\" /></p>\n<p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_link.png?raw=true\" /></p>\n<h4><code>\u2705.4.1.a</code>- List Collections</h4>\n<p>Open up the first section labelled \"List collections in namespace\" and click the button \"Try it out\".</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_listcollections_02.png?raw=true\" /></p>\n<ul>\n<li>Execture with <code>[Execute]</code> button</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"data\": [\n    {\n      \"name\": \"story\",\n      \"upgradeAvailable\": false\n    },\n    {\n      \"name\": \"tktkposts\",\n      \"upgradeAvailable\": false\n    }\n  ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.4.1.b</code>- List Documents of <code>tktkposts</code></h4>\n<ul>\n<li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li>\n</ul>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_02.png?raw=true\" /></p>\n<ul>\n<li>Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>tktkposts</code> |</p>\n<p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_04.png?raw=true\" /></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"pageState\": \"ATIA8H_____wf____w==\",\n  \"data\": {\n    \"0\": {\n      \"avatar\": \"https://i.imgur.com/jONHmE5.png\",\n      \"button_visible\": true,\n      \"caption\": \"Art is for everyone\",\n      \"comments\": 20,\n      \"id\": 0,\n      \"is_followed\": true,\n      \"likes\": 231,\n      \"name\": \"Lana Del Mont\",\n      \"timestamp\": \"2020-09-10T09:08:31.020Z\",\n      \"username\": \"lana_del_away\",\n      \"video\": \"https://i.imgur.com/H9UX0Jm.mp4\"\n    },\n    \"2\": {\n      \"avatar\": \"https://i.imgur.com/eX3hkoc.png\",\n      \"button_visible\": true,\n      \"caption\": \"Happiest of Birthdays my Angel\",\n      \"comments\": 4,\n      \"id\": 2,\n      \"is_followed\": true,\n      \"likes\": 2,\n      \"name\": \"Angela Lee\",\n      \"timestamp\": \"2020-04-10T09:08:31.020Z\",\n      \"username\": \"angiecakes\",\n      \"video\": \"https://i.imgur.com/al6MLay.mp4\"\n    },\n    \"3\": {\n      \"avatar\": \"https://i.imgur.com/IigY4Hm.png\",\n      \"button_visible\": true,\n      \"caption\": \"The new normal\",\n      \"comments\": 2,\n      \"id\": 3,\n      \"is_followed\": false,\n      \"likes\": 10,\n      \"name\": \"Nina Xen\",\n      \"timestamp\": \"2020-05-10T09:08:31.020Z\",\n      \"username\": \"nina_lina\",\n      \"video\": \"https://i.imgur.com/Kzvbeup.mp4\"\n    }\n  }\n}</code></p>\n</blockquote>\n<h3>4.2 - AstraJS Client</h3>\n<h4><code>\u2705.4.2.1</code> - Initialization</h4>\n<p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>. </p>\n<p>(See: <a href=\"./functions/utils/astraClient.js\">functions/utils/astraClient.js</a>)</p>\n<p>```javascript\nconst { createClient } = require(\"@astrajs/collections\");</p>\n<p>let astraClient = null;</p>\n<p>const getAstraClient = async () =&gt; {\n  if (astraClient === null) {\n    astraClient = await createClient(\n      {\n        astraDatabaseId: process.env.ASTRA_DB_ID,\n        astraDatabaseRegion: process.env.ASTRA_DB_REGION,\n        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,\n      },\n      30000\n    );\n  }\n  return astraClient;\n};\n```</p>\n<p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p>\n<ul>\n<li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li>\n<li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li>\n<li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li>\n</ul>\n<p>Then we return the <code>astraClient</code> we can then use in our API calls.</p>\n<p>We also need to create a document collection to store our data.</p>\n<p><code>javascript\nconst getCollection = async () =&gt; {\n  const documentClient = await getAstraClient();\n  return documentClient\n    .namespace(process.env.ASTRA_DB_KEYSPACE)\n    .collection(\"tktkposts\");\n};</code></p>\n<p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p>\n<ul>\n<li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li>\n</ul>\n<p>We will call the collection <strong>tktkposts</strong>.</p>\n<h4><code>\u2705.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>\n<p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p>\n<p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href=\"https://docs.datastax.com/en/astra/docs/astra-collection-client.html\">AstraJS Collections</a></p>\n<p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p>\n<p><code>javascript\nconst users = await getCollection();</code></p>\n<p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p>\n<p><code>javascript\ntry {\n    const user = await users.create(id, event.body);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(user),\n    };\n}</code></p>\n<h4><code>\u2705.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>\n<p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p>\n<p><code>javascript\ntry {\n    users.update(body.userId, body.data);\n    return {\n      statusCode: 200,\n    };\n  }</code></p>\n<h4><code>\u2705.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>\n<p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p>\n<p><code>javascript\ntry {\n    const res = await users.find({});\n    return {\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),\n    };\n  }</code></p>\n<p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p>\n<h3>4.3 - Serverless configuration</h3>\n<p>Take a look at <code>netlify.toml</code>.</p>\n<p><code>init\n[build]\ncommand = \"npm run build\"\nfunctions = \"functions\"\npublish = \"build\"</code></p>\n<p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p>\n<p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p>\n<p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href=\"./functions/posts.js\">/.netlify/functions/posts</a></p>\n<p>```javascript\n// Declaring 'getCollection'\nconst { getCollection } = require(\"./utils/astraClient\");</p>\n<p>// Function exported as a REST API\nexports.handler = async function () {\n  // Accessing the collection tkt\n  const tktkpostsCollection = await getCollection();\n  try {\n    // Access POST\n    const res = await tktkpostsCollection.find({});\n    return {\n      // Return POSTS in the body\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),</p>\n<p>[...]\n```</p>\n<p>\u2705 We can see these functions in our Netlify account.\n- Go to netlify.com and sign in.\n- Select your site from the list.\n- Select the \"Functions\" tab at the top.</p>\n<p><img alt=\"netlify_functions\" src=\"./tutorial/images/netlify_functions_tab.gif\" /></p>\n<p>From here we can see all our functions and get direct links as well as watch real time logs.</p>\n<p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/netlify_endpoint_nav.gif\" /></p>\n<h3>4.4 - React Component</h3>\n<p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p>\n<h4><code>\u2705.4.4.a</code> - React Router</h4>\n<p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href=\"./src/index.js\">index.js</a></p>\n<p><code>xml\n&lt;Switch&gt;\n  &lt;Route path= \"/upload\" component={Upload}/&gt;\n  &lt;Route path= \"/\" component={Home}/&gt;\n&lt;/Switch&gt;</code></p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/pages-all.png\" /></p>\n<h4><code>\u2705.4.4.b</code> - Upload Page</h4>\n<p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/page-upload.png\" /></p>\n<p>As you can see <a href=\"./src/pages/Upload.js\">Upload.js</a> there are no component used.</p>\n<p>```html</p>\n<form onSubmit={handleSubmit}>\n    <div className='section'>\n<!-- rest is omitted --> \n```\n\n- Function to post to backend\n\n```javascript\n const handleSubmit = async (e) => {\n e.preventDefault()\n // Create payload\n const data =  {\n        id: id,\n        name: name,\n        username: username,\n        avatar: avatar,\n        is_followed: false,\n        video: video,\n        caption: caption,\n        likes: 0,\n        comments: 0,\n        timestamp: timestamp,\n        button_visible: false  \n  }\n  // Post Payload to Netlify functions\n  axios.post('/.netlify/functions/add', data)\n       .then((response) => { console.log(response)})\n       .catch((err) => { console.error(err)})\n```\n\n#### `\u2705.4.4.b` - Home Page\n\nThe page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.\n\n![netlify_endpoint](./tutorial/images/react-components.png)\n\nMore on [Home.js](./src/pages/Home.js).\n\n## LAB 5 - Netlify Deployments\n\n### 5.1 - Connect Netlify to your site\n\nExecute each of the commands below to link your code to your Netlify deployment.\n  * First thing, we'll need to **STOP** the `netlify dev` command we issued a moment ago. In the terminal where you executed the netlify command issue a `CTRL-C` (control key + the C key) in order to stop the process.\n  * Then continue with the following commands\n  * This will pop up a browser to authenticate with netlify\n\n#### `\u2705.5.1.a` - Authenticate in Netlify\n\n```\nnetlify login\n```\n\n_Note, when using GitPod the preview pane will not display this properly. You must click the \"open in a new window\" button in the very top right of the preview pane._\n\n![swaggerui_link](./tutorial/images/netlify_login.png)\n\n> \ud83d\udda5\ufe0f `Output`\n> \n> ```bash\n> Logging into your Netlify account...\n> Opening https://app.netlify.com/authorize?response_type=ticket&ticket=774701161c326912e718b3a86096f375\n> You are now logged into your Netlify account!\n> Run netlify status for account details\n> To see all available commands run: netlify help\n> ```\n\n- Link your workspace to the associated site with the command Below\n\n```\nnetlify link\n```\n\n- It will display a MENU where you can move UP and DOWN with arrows. Pick first choice\n\n```\n> Use current git remote origin (https://github ...`\n```\n\n![swaggerui_link](./tutorial/images/netlify-link.png?raw=true)\n\n> \ud83d\udda5\ufe0f `Output`\n> ```bash\n> netlify link will connect this folder to a site on Netlify\n> ? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)\n> Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...\n> Directory Linked\n> Admin url: https://app.netlify.com/sites/fanciful-licorice-ea1437\n> Site url:  https://fanciful-licorice-ea1437.netlify.app\n> You can now run other `netlify` cli commands in this directory\n>```\n\n#### `\u2705.5.1.b` - Import configuration in site\n\n* This will take the `.env` file created by astra-setup and upload it to netlify\n\n```\nnetlify env:import .env\n```\n\n### 5.2 - Deploy to production\n\nNow that you've hooked everything up, time to deploy to production.\n\n* Run\n\n```\nnetlify build\n```\n\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build                                                 \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> \u276f Version\n>   @netlify/build 28.4.5\n>\n> \u276f Flags\n>   dry: false\n>   offline: false\n>\n> \u276f Current directory\n>   /workspace/workshop-astra-tik-tok\n>\n> \u276f Config file\n>   /workspace/workshop-astra-tik-tok/netlify.toml\n>\n> \u276f Context\n>   production\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   1. build.command from netlify.toml                            \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> $ npm run build\n> \n> tik-tok-stargate@0.1.0 build\n> react-scripts build\n>\n> Creating an optimized production build...\n> Compiled successfully.\n>\n> File sizes after gzip:\n>\n>   616.87 KB  build/static/js/2.82b8325c.chunk.js\n>   2.32 KB    build/static/js/main.fd7c93f3.chunk.js\n>   966 B      build/static/css/main.9d8c5499.chunk.css\n>   780 B      build/static/js/runtime-main.f09b770f.js\n>\n> The project was built assuming it is hosted at /.\n> You can control this with the homepage field in your package.json.\n> \n> The build folder is ready to be deployed.\n> You may serve it with a static server:\n>\n>  npm install -g serve\n>  serve -s build\n>\n> Find out more about deployment here:\n>\n>   https://cra.link/deployment\n>\n>\n> (build.command completed in 35.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   2. Functions bundling                                         \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> Packaging Functions from functions directory:\n>  - add.js\n>  - addData.js\n>  - edit.js\n>  - posts.js\n>\n>\n> (Functions bundling completed in 6.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build Complete                                        \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> (Netlify Build completed in 41.3s)\n> ```\n\n- Then run\n\n```\nnetlify deploy --prod\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Deploy path:        /workspace/workshop-astra-tik-tok/build\n> Functions path:     /workspace/workshop-astra-tik-tok/functions\n> Configuration path: /workspace/workshop-astra-tik-tok/netlify.toml\n> Deploying to main site URL...\n> \u2714 Deploying functions from cache (use --skip-functions-cache to override)\n> \u2714 Finished hashing 17 files and 4 functions\n> \u2714 CDN requesting 0 files and 4 functions\n> \u2714 Finished uploading 4 assets\n> \u2714 Deploy is live!\n>\n> Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455\n> Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.app\n> Website URL:       https://fanciful-licorice-ea1437.netlify.app\n> gitpod /workspace/workshop-astra-tik-tok (master) $ \n```\n\n- Then finally run\n\n```\nnetlify open:site\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Opening \"fanciful-licorice-ea1437\" site url:\n> https://fanciful-licorice-ea1437.netlify.app\n> ```\n\n## Extra Resources\n\n#### Video tutorial with Ania Kubow\n\nThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.\n\nWhile we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.\n\n#### Running Astra DB Tik-Tok\nWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).\n\nFollow the instructions below to get started.\n\n#### If you did like this video, please hit the Like and Subscribe button so I know to make more!\n- Twitter: https://twitter.com/ania_kubow\n- YouTube: https://youtube.com/aniakubow\n- Instagram: https://instagram.com/aniakubow"
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + Azure Functions + Astra using Node.js",
            "description": "This example shows how to use Azure Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + AWS Lambda + Astra using Node.js",
            "description": "This example shows how to use AWS Lambda with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "javascript",
                "nodejs driver",
                "starters"
            ],
            "name": "Google Cloud Functions + Astra DB using Node.js",
            "description": "This example shows how to use Google Cloud Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/3iX75yf"
                ],
                "netlify": [
                    "https://dtsx.io/3aZJLxa"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-gatsbyjs-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "graphql api",
                "starters"
            ],
            "name": "Astra DB and Gatsby.js Starter",
            "description": "Create a React.js, Gatsby application that reads data from DataStax Astra DB using GraphQL.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/2YtXWVU"
                ],
                "vercel": [
                    "https://dtsx.io/3aUg00p"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-next.js-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Next.js and Astra DB Starter",
            "description": "A sample Next.js + DataStax Astra DB starter app that integrates Astra DB with Next.js.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nodejs-starter"
                ]
            },
            "tags": [
                "javascript",
                "nodejs",
                "starters"
            ],
            "name": "Astra + NodeJS Starter",
            "description": "Bootstrap your next NodeJS app with an Astra integration.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "python",
                "javascript",
                "apps"
            ],
            "name": "Doom Patrol, an Astra + Kepler.gl App",
            "description": "Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/glitch-astra-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Glitch and Astra DB Starter",
            "description": "Jumpstart your next React/Express prototype with this starter!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/fastsite-console"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/fastsite-console"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/fastsite-console/master/hero.png"
            },
            "tags": [
                "javascript",
                "doc api",
                "apps"
            ],
            "name": "FastSite",
            "description": "FastSite is a no-code tool to generate content-driven websites. It leverages the power of modern JAMStack and cloud-native technologies.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/nf-data-explorer/master/hero.png"
            },
            "tags": [
                "javascript",
                "tools"
            ],
            "name": "Netflix Data Explorer",
            "description": "Launch Netlfix's Open Source Data Explorer in Gitpod and connect to your Astra DB instance!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/todo-native-mobile"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-native-mobile/master/hero.png"
            },
            "tags": [
                "javascript",
                "workshop",
                "apps"
            ],
            "name": "React Native Todo List, an Astra DB + Netlify Workshop",
            "description": "A workshop where you build a React Native Todo application using DataStax Astra DB.",
            "duration": "40 minutes",
            "skilllevel": "Intermediate",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"
                ],
                "demo": [
                    "https://sag-telco-billing-app.netlify.app/"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Telco Billing App",
            "description": "An example of a telcom app dashboard, built with React and Netlify.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nextjs-tutorial/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nextjs-tutorial"
                ]
            },
            "tags": [
                "javascript",
                "nextjs",
                "apps"
            ],
            "name": "NextJS Fullstack Tutorial",
            "description": "Create a fullstack NextJS app while following along with the tutorial video and blogpost from Eddie Jaoude.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"
                ]
            },
            "tags": [
                "javascript",
                "nuxtjs",
                "nestjs",
                "apps"
            ],
            "name": "NuxtJS + NestJS Fullstack Tutorial",
            "description": "Create a fullstack NuxtJS + NestJS app while following along with the tutorial video from Eddie Jaoude.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Build an Astra DB RPG",
            "description": "This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/weatherapp/master/hero.png"
            },
            "tags": [
                "javascript",
                "stargate documents api",
                "timeseries db",
                "apps"
            ],
            "name": "Using Stargate Documents API to build a TimeSeries DB API",
            "description": "A sample app that shows how the Stargate Documents API can be used to build a TimeSeries DB Abstraction on top of AstraDB",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 3
        }
    ],
    "count": 23
}
{'documentId': 'javascript'}
SUCCESS
{
    "name": "react",
    "apps": [
        {
            "name": "Social Media App using React, JAMStack and Astra DB",
            "summary": "React demo connecting document Api in Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ],
                "badge": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Social Network",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "A simple Tik-Tok clone running on Astra DB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n\n<h1>Social Media App using React, JAMStack and Astra DB</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart\">Start Building</a></em></p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n\n<ul>\n<li><a href=\"https://dtsx.io/2WMxoBQ\">Signup for DataStax Astra</a>, or login to your already existing account.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<!--- STARTEXCLUDE --->\n<h3>Video Content:</h3>\n<ul>\n<li><a href=\"https://youtu.be/IATOicvih5A\">https://youtu.be/IATOicvih5A</a></li>\n<li>(00:00) Introduction</li>\n<li>(03:05) Creating our Database on DataStax</li>\n<li>(06:52) Setting up our App</li>\n<li>(12:37) Routing Pages</li>\n<li>(18:02) Creating Components</li>\n<li>(28:32) Introduction to Data with Netlify and Stargate</li>\n<li>(30:10) Introduction to using the astrajs/collections</li>\n<li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li>\n<li>(34:01) Adding authorization to access our Database</li>\n<li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li>\n<li>(50: 32) Viewing all our Data</li>\n<li>(51:56) Rendering components based on our Data</li>\n<li>(01:17:01) Editing our Data (following/unfollowing a user)</li>\n<li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li>\n</ul>\n<h3>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>\n<ul>\n<li>Twitter: https://twitter.com/ania_kubow</li>\n<li>YouTube: https://youtube.com/aniakubow</li>\n<li>Instagram: https://instagram.com/aniakubow</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Netflix Clone using GraphQL and Astra DB",
            "summary": "React demo connecting graph Api in Astra with paging",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-netflix"
                ],
                "demo": [
                    "https://sag-astra-netflix.netlify.app"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\nGraphQL"
            ],
            "usecases": "Digital Library",
            "owner": "Chris Whilhite",
            "apis": [
                "GQL"
            ],
            "tags": [
                "javascript",
                "react",
                "graphql api",
                "apps"
            ],
            "description": "Let's code a Netflix Clone with GraphQL Pagination!",
            "duration": "2 hours",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Netflix Clone using Astra DB and GraphQL</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/astra-netflix#quick-start\">Start Building</a>, <a href=\"https://sag-astra-netflix.netlify.app\">View Demo</a></em></p>\n<p>Let's code a Netflix Clone with GraphQL Pagination! </p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<ul>\n<li><a href=\"https://dtsx.io/3sYwYUL\">Signup for DataStax Astra</a>, or login to your already existing account. </li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<h2>Objectives</h2>\n<ul>\n<li>Build a Netflix clone using GraphQL</li>\n</ul>\n<h2>How this works</h2>\n<p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href=\"https://sag-astra-netflix.netlify.app\">here</a>.</p>\n<p>Follow along with Ania's <a href=\"https://www.youtube.com/watch?v=g8COh40v2jU\">walkthrough video</a>. </p>\n<p>Additionally, there is a workshop repository for this sample app <a href=\"https://github.com/datastaxdevs/appdev-week3-graphql\">located here</a>.</p>"
        },
        {
            "name": "ToDo App using JAMStack, Netlify, and Astra DB",
            "summary": "React demo using Netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify"
            ],
            "usecases": "TodoList",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "This is an example React To-Do application using a DataStax Astra DB free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>JAMStack + Netlify + Astra DB + Cassandra</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://dtsx.io/2Yhvqtv\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<p>0) <a href=\"https://dtsx.io/2Yhvqtv\">Signup for DataStax Astra</a>, or login to your already existing account. </p>\n<!--- ENDEXCLUDE --->\n<p>1) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> or use an existing one.\n2) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.\n3) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.\n4) Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a>\n5) Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.\n6) Start the example by running <code>npm run dev</code> in the Gitpod console.</p>\n<h2>Objectives</h2>\n<ul>\n<li>Provide a fullstack development example using Astra DB as the storage backend</li>\n</ul>\n<h2>How this works</h2>\n<p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>"
        },
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"
                ],
                "demo": [
                    "https://sag-telco-billing-app.netlify.app/"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Telco Billing App",
            "description": "An example of a telcom app dashboard, built with React and Netlify.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Build an Astra DB RPG",
            "description": "This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 6
}
{'documentId': 'react'}
SUCCESS
{
    "name": "doc api",
    "apps": [
        {
            "name": "Social Media App using React, JAMStack and Astra DB",
            "summary": "React demo connecting document Api in Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ],
                "badge": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Social Network",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "A simple Tik-Tok clone running on Astra DB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n\n<h1>Social Media App using React, JAMStack and Astra DB</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart\">Start Building</a></em></p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n\n<ul>\n<li><a href=\"https://dtsx.io/2WMxoBQ\">Signup for DataStax Astra</a>, or login to your already existing account.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<!--- STARTEXCLUDE --->\n<h3>Video Content:</h3>\n<ul>\n<li><a href=\"https://youtu.be/IATOicvih5A\">https://youtu.be/IATOicvih5A</a></li>\n<li>(00:00) Introduction</li>\n<li>(03:05) Creating our Database on DataStax</li>\n<li>(06:52) Setting up our App</li>\n<li>(12:37) Routing Pages</li>\n<li>(18:02) Creating Components</li>\n<li>(28:32) Introduction to Data with Netlify and Stargate</li>\n<li>(30:10) Introduction to using the astrajs/collections</li>\n<li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li>\n<li>(34:01) Adding authorization to access our Database</li>\n<li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li>\n<li>(50: 32) Viewing all our Data</li>\n<li>(51:56) Rendering components based on our Data</li>\n<li>(01:17:01) Editing our Data (following/unfollowing a user)</li>\n<li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li>\n</ul>\n<h3>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>\n<ul>\n<li>Twitter: https://twitter.com/ania_kubow</li>\n<li>YouTube: https://youtube.com/aniakubow</li>\n<li>Instagram: https://instagram.com/aniakubow</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "ToDo App using JAMStack, Netlify, and Astra DB",
            "summary": "React demo using Netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify"
            ],
            "usecases": "TodoList",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "This is an example React To-Do application using a DataStax Astra DB free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>JAMStack + Netlify + Astra DB + Cassandra</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://dtsx.io/2Yhvqtv\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<p>0) <a href=\"https://dtsx.io/2Yhvqtv\">Signup for DataStax Astra</a>, or login to your already existing account. </p>\n<!--- ENDEXCLUDE --->\n<p>1) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> or use an existing one.\n2) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.\n3) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.\n4) Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a>\n5) Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.\n6) Start the example by running <code>npm run dev</code> in the Gitpod console.</p>\n<h2>Objectives</h2>\n<ul>\n<li>Provide a fullstack development example using Astra DB as the storage backend</li>\n</ul>\n<h2>How this works</h2>\n<p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>"
        },
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W014",
            "name": "TikTok clone using React, JAMStack and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "doc api"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1SP0VbYkO0QQP5Ur4_H62ALPYtgfc5GfD"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-social-media-tiktok"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134131"
                ],
                "demo": [
                    "https://fanciful-licorice-ea1437.netlify.app/"
                ]
            },
            "description": "A simple Tik-Tok clone running on AstraDB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Astra DB TikTok Clone Workshop</h1>\n<p><a href=\"https://github.com/datastaxdevs/workshop-social-media-tiktok\"><img alt=\"Gitpod ready-to-code\" src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\" /></a> \n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\"><img alt=\"License Apache2\" src=\"https://img.shields.io/hexpm/l/plug.svg\" /></a>\n<a href=\"https://discord.com/widget?id=685554030159593522&amp;theme=dark\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/685554030159593522\" /></a></p>\n<p>\u23f2\ufe0f <strong>Duration :</strong> 2 hours</p>\n<p>\ud83c\udf93 <strong>Level</strong> Beginner to Intermediate</p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href=\"https://fanciful-licorice-ea1437.netlify.app\">here</a></p>\n<p><img alt=\"image\" src=\"./screenshot.jpg\" /></p>\n<blockquote>\n<p><a href=\"#-start-hands-on\">\ud83d\udd16 Accessing HANDS-ON</a></p>\n</blockquote>\n<h2>\ud83d\udccb Table of contents</h2>\n<ul>\n<li><strong>HouseKeeping</strong></li>\n<li><a href=\"#1---objectives\">1. Objectives</a></li>\n<li><a href=\"#2---frequently-asked-questions\">2. Frequently asked questions</a></li>\n<li><a href=\"#3---materials-for-the-session\">3. Materials for the Session</a></li>\n<li><a href=\"#4---homework\">4. Homework</a></li>\n<li><strong><a href=\"#lab-1---getting-started-with-database\">LAB 1 - Getting Started with Database</a></strong></li>\n<li><a href=\"#11---getting-started-with-database\">1.1 - Create Astra Account</a></li>\n<li><a href=\"#11---getting-started-with-database\">1.2 - Create Astra Database</a></li>\n<li><strong><a href=\"#lab-2---document-api\">LAB 2 - Document API</a></strong></li>\n<li><a href=\"#21-using-document-api\">2.1 - Using Document API</a></li>\n<li><a href=\"#22---create-astra-credentials\">2.2 - Create Astra Credentials</a></li>\n<li><strong><a href=\"#lab-3---ide-setup\">LAB 3 - IDE Setup</a></strong>  </li>\n<li><a href=\"#31---netlify-site-setup\">3.1 - Netlify site setup</a></li>\n<li><a href=\"#32---launch-gitpod\">3.2 - Launch GitPod</a></li>\n<li><a href=\"#33---astra-cli-setup\">3.3 - Astra CLI Setup</a></li>\n<li><a href=\"#34---netlify-cli-setup\">3.4 - Netlify CLI Setup</a></li>\n<li><a href=\"#35-launch-your-app\">3.5 - Launch the application</a></li>\n<li><strong><a href=\"#lab-4---coding-against-db\">LAB 4 - Coding Against DB</a></strong></li>\n<li><a href=\"#41---document-api\">4.1 - Document API</a></li>\n<li><a href=\"#42---astrajs-client\">4.2 - AstraJS Client</a></li>\n<li><a href=\"#43---serverless-configuration\">4.3 - Serverless configuration</a></li>\n<li><a href=\"#44---react-component\">4.4 - React Component</a></li>\n<li><strong><a href=\"#lab-5---netlify-deployments\">LAB 5 - Netlify Deployments</a></strong></li>\n<li><a href=\"#51---connect-netlify-to-your-site\">5.1 - Connect Netlify to your site</a></li>\n<li><a href=\"#52---deploy-to-production\">5.2 - Deploy to production</a></li>\n</ul>\n<h2>Housekeeping</h2>\n<h3>1 - Objectives</h3>\n<ul>\n<li>\n<p>\ud83c\udfaf How to build a frontend application using React Components</p>\n</li>\n<li>\n<p>\ud83c\udfaf How to build a backend with Javascript without Express.</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn what is gitpod and how you can use it in your projects</p>\n</li>\n</ul>\n<h3>2 - Frequently asked questions</h3>\n<p/>\n<details>\n<summary><b> 1\ufe0f\u20e3 Can I run this workshop on my computer?</b></summary>\n<hr>\n<p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:\n<ol>\n<li><b>git installed on your local system</b>\n<li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b>\n</ol>\n</p>\nIn this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.\n</details>\n<p/>\n<details>\n<summary><b> 2\ufe0f\u20e3 What other prerequisites are there?</b></summary>\n<hr>\n<ul>\n<li>You will need an <b>Github account</b>\n<li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop\n<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)\n\n</ul>\n</p>\n</details>\n<p/>\n<details>\n<summary><b> 3\ufe0f\u20e3 Do I need to pay for anything for this workshop?</b></summary>\n<hr>\n<b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.\n</details>\n<p/>\n<details>\n<summary><b> 4\ufe0f\u20e3 Will I get a certificate if I attend this workshop?</b></summary>\n<hr>\nAttending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*\n</details>\n<p/>\n\n<h3>3 - Materials for the Session</h3>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides/slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n<li><a href=\"jamstack.md\">What is JamStack?</a></li>\n<li><a href=\"#video-tutorial-with-ania-kubow\">Video tutorial with Ania Kubow</a></li>\n</ul>\n<h3>4 - Homework</h3>\n<p><img src=\"tutorial/images/tiktok-badge.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li>\n<li>(Optional extra credit) Watch the 2 hour Ania video <a href=\"#video-tutorial-with-ania-kubow\">HERE</a>, build the app yourself, and show us the completed app.</li>\n<li>Submit your homework <a href=\"https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys\">here</a></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>\ud83c\udfc1 Start Hands-on</h1>\n<h2>LAB 1 - Getting Started with Database</h2>\n<h3>1.1 - Getting Started with Database</h3>\n<p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p>\n<h4><code>\u2705.1.1.a</code>- Create Astra Account</h4>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://astra.dev/yt-12-14\"><img alt=\"image\" src=\"./tutorial/images/create_astra_db.png?raw=true\" /></a></p>\n</blockquote>\n<h4><code>\u2705.1.1.b</code>- Create Astra Database</h4>\n<ul>\n<li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-button.png?raw=true\" /></p>\n<ul>\n<li>Use the following values when creating the database:</li>\n</ul>\n<p>| #  | Field Name         | Field Value                     |\n|----|--------------------|---------------------------------|\n| 1  | <strong>Database Name</strong>    | <code>workshops</code>                     |\n| 2  | <strong>Keyspace Name</strong>  | <code>tiktok_keyspace</code>               |\n| 3  | <strong>Cloud Provider</strong> | <code>Google Cloud Plaform</code>          |\n| 4  | <strong>Area</strong>   | <code>North America</code>                 |\n| 5  | <strong>Region</strong> | <code>Moncks Corner, South Carolina</code> |</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Now click <code>[Create Database button]</code> that became blue.</li>\n<li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-pending.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Click <code>[Go to Database]</code></li>\n</ul>\n<h4><code>\u2705.1.1.c</code>- Database was already existing</h4>\n<p>Here are some special situations you might encounter.</p>\n<blockquote>\n<p>\u2139\ufe0f <strong>Hibernated Database:</strong></p>\n<p>If the DB workshops already exists but is hibernated (you have not use it for a while):<br />\n- Click the <code>[Resume Database]</code> button on the top right-hand corner.</p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-resume.png?raw=true\" /> </p>\n<p>\u2139\ufe0f <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p>\n<p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p>\n<ul>\n<li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li>\n<li>Provide the keyspace name <code>tiktok_keyspace</code></li>\n<li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-keyspace.png?raw=true\" /></p>\n</blockquote>\n<h2>LAB 2 - Document API</h2>\n<h3>2.1 Using Document API</h3>\n<h4><code>\u2705.2.1.a</code>- Open Swagger User Interface</h4>\n<ul>\n<li>(1) -  Select your database in the left panel (if needed)</li>\n<li>(2) -  Select the tab <code>Connect</code></li>\n<li>(3) -  Select the <code>Document API</code> bloc</li>\n<li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/access-swagger.png?raw=true\" /></p>\n<ul>\n<li>You should access this screen</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Swagger UI</code></p>\n<p><img alt=\"image\" src=\"tutorial/images/show-swagger.png?raw=true\" /></p>\n</blockquote>\n<h4><code>\u2705.2.1.b</code>- Lists Collections</h4>\n<ul>\n<li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-1.png?raw=true\" /></p>\n<ul>\n<li>(2) - Click the <code>[Try It Out]</code> button</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-2.png?raw=true\" /></p>\n<ul>\n<li>(3) - Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |</p>\n<ul>\n<li>(4) - Click on <code>[Execute]</code> button</li>\n</ul>\n<p>The output is empty (expected):</p>\n<p><code>json\n[]</code></p>\n<h4><code>\u2705.2.1.c</code>- Create Collection <code>story</code></h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>body</strong>| <code>{\"name\":\"story\"}</code> |</p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You can see the output with <code>201</code> (created) code</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/create-collection-1.png?raw=true\" /></p>\n<ul>\n<li>(6) - Following the steps in previous section list collections again, you should get </li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": [\n   {\n     \"name\": \"story\",\n     \"upgradeAvailable\": false\n   }\n ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.d</code>- Create a first document</h4>\n<p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |</p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"Mo Farooq\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"documentId\": \"8aa07632-4ffb-46e5-9d78-b32e21847221\"\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.e</code>- Search documents in a collections</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>where</strong>|  <code>{\"username\": {\"$eq\": \"mofarooq32\"}}</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": {\n   \"8aa07632-4ffb-46e5-9d78-b32e21847221\": {\n     \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n     \"button_visible\": true,\n     \"caption\": \"These ducks are MEGA cute\",\n     \"comments\": 2,\n     \"is_followed\": true,\n     \"likes\": 10,\n     \"name\": \"Mo Farooq\",\n     \"username\": \"mofarooq32\",\n     \"video\": \"https://i.imgur.com/FTBP02Y.mp4\"\n   }\n }\n}</code>\n</p>\n</blockquote>\n<h4><code>\u2705.2.1.f</code>- Update a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"New Name\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get an updated document</p>\n</li>\n</ul>\n<h4><code>\u2705.2.1.g</code>- Delete a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> _ Delete a document_</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result code of <code>204</code></p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>Code 204\naccess-control-allow-credentials: true \naccess-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com \naccess-control-expose-headers: Date \ndate: Mon,12 Dec 2022 18:12:43 GMT \nvary: Origin</code></p>\n</blockquote>\n<h3>2.2 - Create Astra Credentials</h3>\n<p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token. </p>\n<h4><code>\u2705.2.2.a</code>- Create Astra Credentials</h4>\n<blockquote>\n<p>\u2139\ufe0f <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p>\n</blockquote>\n<ul>\n<li>(1) - Go the <code>Organization Settings</code></li>\n<li>(2) - Go to <code>Token Management</code></li>\n<li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li>\n<li>(4) - Click <code>Generate token</code></li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-create-token.gif?raw=true\" /></p>\n<h4><code>\u2705.2.2.b</code>- Download Astra Credentials</h4>\n<ul>\n<li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-token.png?raw=true\" /></p>\n<blockquote>\n<p><strong>\u26a0\ufe0f Important</strong>\n<code>The instructor will show you on screen how to create a token \nbut will have to destroy to token immediately for security reasons.</code></p>\n</blockquote>\n<p>Notice the clipboard icon at the end of each value.\n- <code>Client ID:</code> We will <em>not</em> use this during this workshop\n- <code>Client Secret:</code> We will <em>not</em> use this during this workshop\n- <code>Token:</code> <strong><em>This is your token!</em></strong> We will use it as a api Key to interact with APIS</p>\n<h2>LAB 3 - IDE Setup</h2>\n<h3>3.1 - Netlify Site Setup</h3>\n<ul>\n<li>(1) Click the button to deploy.</li>\n</ul>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok\"><img alt=\"Deploy to Netlify\" src=\"https://www.netlify.com/img/deploy/button.svg\" /></a></p>\n</blockquote>\n<ul>\n<li>\n<p>(2) - Authenticate with your github Account</p>\n</li>\n<li>\n<p>(3) - Select an account and the github repository where to clone</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/deploy-to-netlify.gif?raw=true\" /></p>\n<ul>\n<li>(4) - In netlify user interface click on <code>Site deploy in progress</code> </li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-1.png\" /></p>\n</blockquote>\n<ul>\n<li>(5) - Click the top deploy link to see the build process.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-2.png\" /></p>\n</blockquote>\n<ul>\n<li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-3.png\" /></p>\n</blockquote>\n<ul>\n<li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-4.png\" /></p>\n</blockquote>\n<ul>\n<li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-5.png\" /></p>\n</blockquote>\n<h3>3.2 - Launch GitPod</h3>\n<h4><code>\u2705.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>\n<ul>\n<li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li>\n</ul>\n<h4>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>\n<p><img alt=\"correct notcorrect\" src=\"tutorial/images/correct-not-correct.png?raw=true\" /></p>\n<p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href=\"#3-clone-your-github-repository\">step3</a> to get to your repo.</p>\n<h4><code>\u2705.3.2.b</code>- Open Gitpod IDE</h4>\n<blockquote>\n<p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</blockquote>\n<h4><code>\u2705.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>\n<ul>\n<li>From your GitPod terminal execute the following command</li>\n</ul>\n<p><code>bash\ngit remote -v</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)\norigin  https://github.com/clun/workshop-astra-tik-tok.git (push)\nIf the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code>\n</p>\n</blockquote>\n<h3>3.3 - Astra CLI Setup</h3>\n<h4><code>\u2705.3.3.a</code>- Save your token</h4>\n<p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p>\n<p><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></p>\n<h4><code>\u2705.3.3.b</code>- Validate your configuration</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra user list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list\n+--------------------------------------+-----------------------------+---------------------+\n| User Id                              | User Email                  | Status              |\n+--------------------------------------+-----------------------------+---------------------+\n| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |\n+--------------------------------------+-----------------------------+---------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.c</code>- List Database to see  <code>workshops</code></h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>+---------------------+--------------------------------------+---------------------+----------------+\n| Name                | id                                   | Default Region      | Status         |\n+---------------------+--------------------------------------+---------------------+----------------+\n| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         |\n| workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |\n+---------------------+--------------------------------------+---------------------+----------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.d</code>- Get db details</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db get workshops</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops\n+------------------------+-----------------------------------------+\n| Attribute              | Value                                   |\n+------------------------+-----------------------------------------+\n| Name                   | workshops                               |\n| id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    |\n| Status                 | ACTIVE                                  |\n| Default Cloud Provider | GCP                                     |\n| Default Region         | us-east1                                |\n| Default Keyspace       | tiktok_keyspace                         |\n| Creation Time          | 2022-12-12T11:14:58Z                    |\n|                        |                                         |\n| Keyspaces              | [0] tiktok_keyspace                     |\n|                        |                                         |\n|                        |                                         |\n| Regions                | [0] us-east1                            |\n|                        |                                         |\n+------------------------+-----------------------------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.e</code>- Create configuration file</h4>\n<ul>\n<li>Create <code>.env</code> file</li>\n</ul>\n<p><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></p>\n<ul>\n<li>Show content</li>\n</ul>\n<p><code>cat .env</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>ASTRA_DB_APPLICATION_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZTvaCp......\"\nASTRA_DB_GRAPHQL_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace\"\nASTRA_DB_GRAPHQL_URL_ADMIN=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin\"\nASTRA_DB_GRAPHQL_URL_PLAYGROUND=\"https://.....-us-east1.apps.astra.datastax.com/api/playground\"\nASTRA_DB_GRAPHQL_URL_SCHEMA=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema\"\nASTRA_DB_ID=\".....\"\nASTRA_DB_KEYSPACE=\"tiktok_keyspace\"\nASTRA_DB_REGION=\"us-east1\"\nASTRA_DB_REST_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/rest\"\nASTRA_DB_REST_URL_SWAGGER=\"https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/\"\nASTRA_DB_SECURE_BUNDLE_PATH=\"/home/gitpod/.astra/scb/scb_....._us-east1.zip\"\nASTRA_DB_SECURE_BUNDLE_URL=\"secured_url\"\nASTRA_ORG_ID=\"f9460f14-9879-4ebe-83f2-48d3f3dce13c\"\nASTRA_ORG_NAME=\"cedrick.lunven@datastax.com\"\nASTRA_ORG_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZT.....\"</code></p>\n</blockquote>\n<h3>3.4 - Netlify CLI Setup</h3>\n<h4><code>\u2705.3.4.a</code>- Install the package</h4>\n<p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p>\n<p><code>npm install -g netlify-cli</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img src=\"tutorial/images/netlify-install-cli.png?raw=true\" /></p>\n</blockquote>\n<h3>3.5 Launch your app</h3>\n<h4><code>\u2705.3.5.a</code>- Start application</h4>\n<p><code>netlify dev</code></p>\n<p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n</blockquote>\n<p>```\n\u25c8 Netlify Dev \u25c8\n\u25c8 Ignored general context env var: LANG (defined in process)\n\u25c8 Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA\n\u25c8 Injected .env file env var: ASTRA_DB_ID\n\u25c8 Injected .env file env var: ASTRA_DB_KEYSPACE\n\u25c8 Injected .env file env var: ASTRA_DB_REGION\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL\n\u25c8 Injected .env file env var: ASTRA_ORG_ID\n\u25c8 Injected .env file env var: ASTRA_ORG_NAME\n\u25c8 Injected .env file env var: ASTRA_ORG_TOKEN\n\u25c8 Loaded function add http://localhost:8888/.netlify/functions/add.\n\u25c8 Loaded function addData http://localhost:8888/.netlify/functions/addData.\n\u25c8 Loaded function edit http://localhost:8888/.netlify/functions/edit.\n\u25c8 Loaded function posts http://localhost:8888/.netlify/functions/posts.\n\u25c8 Functions server is listening on 36661\n\u25c8 Setting up local development server</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Netlify Build                                               <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u276f Version\n  @netlify/build 28.4.5</p>\n<p>\u276f Flags\n  {}</p>\n<p>\u276f Current directory\n  /workspace/workshop-astra-tik-tok</p>\n<p>\u276f Config file\n  /workspace/workshop-astra-tik-tok/netlify.toml</p>\n<p>\u276f Context\n  dev</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  1. Run command for local development                        <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u25c8 Starting Netlify Dev with Create React App</p>\n<blockquote>\n<p>tik-tok-stargate@0.1.0 start\nreact-scripts start</p>\n</blockquote>\n<p>\u2139 \uff62wds\uff63: Project is running at http://10.0.5.2/\n\u2139 \uff62wds\uff63: webpack output is served from \n\u2139 \uff62wds\uff63: Content not from webpack is served from /workspace/workshop-astra-tik-tok/public\n\u2139 \uff62wds\uff63: 404s will fallback to /\nStarting the development server...</p>\n<p>Compiled successfully!</p>\n<p>You can now view tik-tok-stargate in the browser.</p>\n<p>Local:            http://localhost:3000\n  On Your Network:  http://10.0.5.2:3000</p>\n<p>Note that the development build is not optimized.\nTo create a production build, use npm run build.</p>\n<p>\u2714 Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml</p>\n<p>(dev.command completed in 9.4s)</p>\n<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502                                                 \u2502\n   \u2502   \u25c8 Server now ready on http://localhost:8888   \u2502\n   \u2502                                                 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>\n<p>\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData\n\u2827 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts\n\u2819 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.\n\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.\n\u2714 Setting up the Edge Functions environment. This may take a couple of minutes.\n```</p>\n<p><img alt=\"start\" src=\"./tutorial/images/netlify-start.png?raw=true\" /></p>\n<h2>LAB 4 - Coding Against DB</h2>\n<h3>4.1 - Document API</h3>\n<p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p>\n<h4><code>\u2705.4.1.a</code>- Reopen Swagger</h4>\n<p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href=\"astra.datastax.com\">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p>\n<p><img alt=\"db_connect\" src=\"./tutorial/images/db_connect.png?raw=true\" /></p>\n<p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_link.png?raw=true\" /></p>\n<h4><code>\u2705.4.1.a</code>- List Collections</h4>\n<p>Open up the first section labelled \"List collections in namespace\" and click the button \"Try it out\".</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_listcollections_02.png?raw=true\" /></p>\n<ul>\n<li>Execture with <code>[Execute]</code> button</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"data\": [\n    {\n      \"name\": \"story\",\n      \"upgradeAvailable\": false\n    },\n    {\n      \"name\": \"tktkposts\",\n      \"upgradeAvailable\": false\n    }\n  ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.4.1.b</code>- List Documents of <code>tktkposts</code></h4>\n<ul>\n<li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li>\n</ul>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_02.png?raw=true\" /></p>\n<ul>\n<li>Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>tktkposts</code> |</p>\n<p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_04.png?raw=true\" /></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"pageState\": \"ATIA8H_____wf____w==\",\n  \"data\": {\n    \"0\": {\n      \"avatar\": \"https://i.imgur.com/jONHmE5.png\",\n      \"button_visible\": true,\n      \"caption\": \"Art is for everyone\",\n      \"comments\": 20,\n      \"id\": 0,\n      \"is_followed\": true,\n      \"likes\": 231,\n      \"name\": \"Lana Del Mont\",\n      \"timestamp\": \"2020-09-10T09:08:31.020Z\",\n      \"username\": \"lana_del_away\",\n      \"video\": \"https://i.imgur.com/H9UX0Jm.mp4\"\n    },\n    \"2\": {\n      \"avatar\": \"https://i.imgur.com/eX3hkoc.png\",\n      \"button_visible\": true,\n      \"caption\": \"Happiest of Birthdays my Angel\",\n      \"comments\": 4,\n      \"id\": 2,\n      \"is_followed\": true,\n      \"likes\": 2,\n      \"name\": \"Angela Lee\",\n      \"timestamp\": \"2020-04-10T09:08:31.020Z\",\n      \"username\": \"angiecakes\",\n      \"video\": \"https://i.imgur.com/al6MLay.mp4\"\n    },\n    \"3\": {\n      \"avatar\": \"https://i.imgur.com/IigY4Hm.png\",\n      \"button_visible\": true,\n      \"caption\": \"The new normal\",\n      \"comments\": 2,\n      \"id\": 3,\n      \"is_followed\": false,\n      \"likes\": 10,\n      \"name\": \"Nina Xen\",\n      \"timestamp\": \"2020-05-10T09:08:31.020Z\",\n      \"username\": \"nina_lina\",\n      \"video\": \"https://i.imgur.com/Kzvbeup.mp4\"\n    }\n  }\n}</code></p>\n</blockquote>\n<h3>4.2 - AstraJS Client</h3>\n<h4><code>\u2705.4.2.1</code> - Initialization</h4>\n<p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>. </p>\n<p>(See: <a href=\"./functions/utils/astraClient.js\">functions/utils/astraClient.js</a>)</p>\n<p>```javascript\nconst { createClient } = require(\"@astrajs/collections\");</p>\n<p>let astraClient = null;</p>\n<p>const getAstraClient = async () =&gt; {\n  if (astraClient === null) {\n    astraClient = await createClient(\n      {\n        astraDatabaseId: process.env.ASTRA_DB_ID,\n        astraDatabaseRegion: process.env.ASTRA_DB_REGION,\n        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,\n      },\n      30000\n    );\n  }\n  return astraClient;\n};\n```</p>\n<p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p>\n<ul>\n<li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li>\n<li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li>\n<li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li>\n</ul>\n<p>Then we return the <code>astraClient</code> we can then use in our API calls.</p>\n<p>We also need to create a document collection to store our data.</p>\n<p><code>javascript\nconst getCollection = async () =&gt; {\n  const documentClient = await getAstraClient();\n  return documentClient\n    .namespace(process.env.ASTRA_DB_KEYSPACE)\n    .collection(\"tktkposts\");\n};</code></p>\n<p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p>\n<ul>\n<li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li>\n</ul>\n<p>We will call the collection <strong>tktkposts</strong>.</p>\n<h4><code>\u2705.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>\n<p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p>\n<p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href=\"https://docs.datastax.com/en/astra/docs/astra-collection-client.html\">AstraJS Collections</a></p>\n<p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p>\n<p><code>javascript\nconst users = await getCollection();</code></p>\n<p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p>\n<p><code>javascript\ntry {\n    const user = await users.create(id, event.body);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(user),\n    };\n}</code></p>\n<h4><code>\u2705.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>\n<p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p>\n<p><code>javascript\ntry {\n    users.update(body.userId, body.data);\n    return {\n      statusCode: 200,\n    };\n  }</code></p>\n<h4><code>\u2705.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>\n<p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p>\n<p><code>javascript\ntry {\n    const res = await users.find({});\n    return {\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),\n    };\n  }</code></p>\n<p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p>\n<h3>4.3 - Serverless configuration</h3>\n<p>Take a look at <code>netlify.toml</code>.</p>\n<p><code>init\n[build]\ncommand = \"npm run build\"\nfunctions = \"functions\"\npublish = \"build\"</code></p>\n<p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p>\n<p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p>\n<p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href=\"./functions/posts.js\">/.netlify/functions/posts</a></p>\n<p>```javascript\n// Declaring 'getCollection'\nconst { getCollection } = require(\"./utils/astraClient\");</p>\n<p>// Function exported as a REST API\nexports.handler = async function () {\n  // Accessing the collection tkt\n  const tktkpostsCollection = await getCollection();\n  try {\n    // Access POST\n    const res = await tktkpostsCollection.find({});\n    return {\n      // Return POSTS in the body\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),</p>\n<p>[...]\n```</p>\n<p>\u2705 We can see these functions in our Netlify account.\n- Go to netlify.com and sign in.\n- Select your site from the list.\n- Select the \"Functions\" tab at the top.</p>\n<p><img alt=\"netlify_functions\" src=\"./tutorial/images/netlify_functions_tab.gif\" /></p>\n<p>From here we can see all our functions and get direct links as well as watch real time logs.</p>\n<p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/netlify_endpoint_nav.gif\" /></p>\n<h3>4.4 - React Component</h3>\n<p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p>\n<h4><code>\u2705.4.4.a</code> - React Router</h4>\n<p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href=\"./src/index.js\">index.js</a></p>\n<p><code>xml\n&lt;Switch&gt;\n  &lt;Route path= \"/upload\" component={Upload}/&gt;\n  &lt;Route path= \"/\" component={Home}/&gt;\n&lt;/Switch&gt;</code></p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/pages-all.png\" /></p>\n<h4><code>\u2705.4.4.b</code> - Upload Page</h4>\n<p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/page-upload.png\" /></p>\n<p>As you can see <a href=\"./src/pages/Upload.js\">Upload.js</a> there are no component used.</p>\n<p>```html</p>\n<form onSubmit={handleSubmit}>\n    <div className='section'>\n<!-- rest is omitted --> \n```\n\n- Function to post to backend\n\n```javascript\n const handleSubmit = async (e) => {\n e.preventDefault()\n // Create payload\n const data =  {\n        id: id,\n        name: name,\n        username: username,\n        avatar: avatar,\n        is_followed: false,\n        video: video,\n        caption: caption,\n        likes: 0,\n        comments: 0,\n        timestamp: timestamp,\n        button_visible: false  \n  }\n  // Post Payload to Netlify functions\n  axios.post('/.netlify/functions/add', data)\n       .then((response) => { console.log(response)})\n       .catch((err) => { console.error(err)})\n```\n\n#### `\u2705.4.4.b` - Home Page\n\nThe page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.\n\n![netlify_endpoint](./tutorial/images/react-components.png)\n\nMore on [Home.js](./src/pages/Home.js).\n\n## LAB 5 - Netlify Deployments\n\n### 5.1 - Connect Netlify to your site\n\nExecute each of the commands below to link your code to your Netlify deployment.\n  * First thing, we'll need to **STOP** the `netlify dev` command we issued a moment ago. In the terminal where you executed the netlify command issue a `CTRL-C` (control key + the C key) in order to stop the process.\n  * Then continue with the following commands\n  * This will pop up a browser to authenticate with netlify\n\n#### `\u2705.5.1.a` - Authenticate in Netlify\n\n```\nnetlify login\n```\n\n_Note, when using GitPod the preview pane will not display this properly. You must click the \"open in a new window\" button in the very top right of the preview pane._\n\n![swaggerui_link](./tutorial/images/netlify_login.png)\n\n> \ud83d\udda5\ufe0f `Output`\n> \n> ```bash\n> Logging into your Netlify account...\n> Opening https://app.netlify.com/authorize?response_type=ticket&ticket=774701161c326912e718b3a86096f375\n> You are now logged into your Netlify account!\n> Run netlify status for account details\n> To see all available commands run: netlify help\n> ```\n\n- Link your workspace to the associated site with the command Below\n\n```\nnetlify link\n```\n\n- It will display a MENU where you can move UP and DOWN with arrows. Pick first choice\n\n```\n> Use current git remote origin (https://github ...`\n```\n\n![swaggerui_link](./tutorial/images/netlify-link.png?raw=true)\n\n> \ud83d\udda5\ufe0f `Output`\n> ```bash\n> netlify link will connect this folder to a site on Netlify\n> ? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)\n> Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...\n> Directory Linked\n> Admin url: https://app.netlify.com/sites/fanciful-licorice-ea1437\n> Site url:  https://fanciful-licorice-ea1437.netlify.app\n> You can now run other `netlify` cli commands in this directory\n>```\n\n#### `\u2705.5.1.b` - Import configuration in site\n\n* This will take the `.env` file created by astra-setup and upload it to netlify\n\n```\nnetlify env:import .env\n```\n\n### 5.2 - Deploy to production\n\nNow that you've hooked everything up, time to deploy to production.\n\n* Run\n\n```\nnetlify build\n```\n\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build                                                 \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> \u276f Version\n>   @netlify/build 28.4.5\n>\n> \u276f Flags\n>   dry: false\n>   offline: false\n>\n> \u276f Current directory\n>   /workspace/workshop-astra-tik-tok\n>\n> \u276f Config file\n>   /workspace/workshop-astra-tik-tok/netlify.toml\n>\n> \u276f Context\n>   production\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   1. build.command from netlify.toml                            \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> $ npm run build\n> \n> tik-tok-stargate@0.1.0 build\n> react-scripts build\n>\n> Creating an optimized production build...\n> Compiled successfully.\n>\n> File sizes after gzip:\n>\n>   616.87 KB  build/static/js/2.82b8325c.chunk.js\n>   2.32 KB    build/static/js/main.fd7c93f3.chunk.js\n>   966 B      build/static/css/main.9d8c5499.chunk.css\n>   780 B      build/static/js/runtime-main.f09b770f.js\n>\n> The project was built assuming it is hosted at /.\n> You can control this with the homepage field in your package.json.\n> \n> The build folder is ready to be deployed.\n> You may serve it with a static server:\n>\n>  npm install -g serve\n>  serve -s build\n>\n> Find out more about deployment here:\n>\n>   https://cra.link/deployment\n>\n>\n> (build.command completed in 35.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   2. Functions bundling                                         \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> Packaging Functions from functions directory:\n>  - add.js\n>  - addData.js\n>  - edit.js\n>  - posts.js\n>\n>\n> (Functions bundling completed in 6.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build Complete                                        \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> (Netlify Build completed in 41.3s)\n> ```\n\n- Then run\n\n```\nnetlify deploy --prod\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Deploy path:        /workspace/workshop-astra-tik-tok/build\n> Functions path:     /workspace/workshop-astra-tik-tok/functions\n> Configuration path: /workspace/workshop-astra-tik-tok/netlify.toml\n> Deploying to main site URL...\n> \u2714 Deploying functions from cache (use --skip-functions-cache to override)\n> \u2714 Finished hashing 17 files and 4 functions\n> \u2714 CDN requesting 0 files and 4 functions\n> \u2714 Finished uploading 4 assets\n> \u2714 Deploy is live!\n>\n> Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455\n> Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.app\n> Website URL:       https://fanciful-licorice-ea1437.netlify.app\n> gitpod /workspace/workshop-astra-tik-tok (master) $ \n```\n\n- Then finally run\n\n```\nnetlify open:site\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Opening \"fanciful-licorice-ea1437\" site url:\n> https://fanciful-licorice-ea1437.netlify.app\n> ```\n\n## Extra Resources\n\n#### Video tutorial with Ania Kubow\n\nThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.\n\nWhile we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.\n\n#### Running Astra DB Tik-Tok\nWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).\n\nFollow the instructions below to get started.\n\n#### If you did like this video, please hit the Like and Subscribe button so I know to make more!\n- Twitter: https://twitter.com/ania_kubow\n- YouTube: https://youtube.com/aniakubow\n- Instagram: https://instagram.com/aniakubow"
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/fastsite-console"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/fastsite-console"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/fastsite-console/master/hero.png"
            },
            "tags": [
                "javascript",
                "doc api",
                "apps"
            ],
            "name": "FastSite",
            "description": "FastSite is a no-code tool to generate content-driven websites. It leverages the power of modern JAMStack and cloud-native technologies.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 5
}
{'documentId': 'doc api'}
SUCCESS
{
    "name": "apps",
    "apps": [
        {
            "name": "Social Media App using React, JAMStack and Astra DB",
            "summary": "React demo connecting document Api in Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ],
                "badge": [
                    "https://github.com/DataStax-Examples/astra-tik-tok"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Social Network",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "A simple Tik-Tok clone running on Astra DB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n\n<h1>Social Media App using React, JAMStack and Astra DB</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart\">Start Building</a></em></p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n\n<ul>\n<li><a href=\"https://dtsx.io/2WMxoBQ\">Signup for DataStax Astra</a>, or login to your already existing account.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<!--- STARTEXCLUDE --->\n<h3>Video Content:</h3>\n<ul>\n<li><a href=\"https://youtu.be/IATOicvih5A\">https://youtu.be/IATOicvih5A</a></li>\n<li>(00:00) Introduction</li>\n<li>(03:05) Creating our Database on DataStax</li>\n<li>(06:52) Setting up our App</li>\n<li>(12:37) Routing Pages</li>\n<li>(18:02) Creating Components</li>\n<li>(28:32) Introduction to Data with Netlify and Stargate</li>\n<li>(30:10) Introduction to using the astrajs/collections</li>\n<li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li>\n<li>(34:01) Adding authorization to access our Database</li>\n<li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li>\n<li>(50: 32) Viewing all our Data</li>\n<li>(51:56) Rendering components based on our Data</li>\n<li>(01:17:01) Editing our Data (following/unfollowing a user)</li>\n<li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li>\n</ul>\n<h3>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>\n<ul>\n<li>Twitter: https://twitter.com/ania_kubow</li>\n<li>YouTube: https://youtube.com/aniakubow</li>\n<li>Instagram: https://instagram.com/aniakubow</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Netflix Clone using GraphQL and Astra DB",
            "summary": "React demo connecting graph Api in Astra with paging",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-netflix"
                ],
                "demo": [
                    "https://sag-astra-netflix.netlify.app"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\nGraphQL"
            ],
            "usecases": "Digital Library",
            "owner": "Chris Whilhite",
            "apis": [
                "GQL"
            ],
            "tags": [
                "javascript",
                "react",
                "graphql api",
                "apps"
            ],
            "description": "Let's code a Netflix Clone with GraphQL Pagination!",
            "duration": "2 hours",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Netflix Clone using Astra DB and GraphQL</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/astra-netflix#quick-start\">Start Building</a>, <a href=\"https://sag-astra-netflix.netlify.app\">View Demo</a></em></p>\n<p>Let's code a Netflix Clone with GraphQL Pagination! </p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<ul>\n<li><a href=\"https://dtsx.io/3sYwYUL\">Signup for DataStax Astra</a>, or login to your already existing account. </li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<h2>Objectives</h2>\n<ul>\n<li>Build a Netflix clone using GraphQL</li>\n</ul>\n<h2>How this works</h2>\n<p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href=\"https://sag-astra-netflix.netlify.app\">here</a>.</p>\n<p>Follow along with Ania's <a href=\"https://www.youtube.com/watch?v=g8COh40v2jU\">walkthrough video</a>. </p>\n<p>Additionally, there is a workshop repository for this sample app <a href=\"https://github.com/datastaxdevs/appdev-week3-graphql\">located here</a>.</p>"
        },
        {
            "name": "ToDo App using JAMStack, Netlify, and Astra DB",
            "summary": "React demo using Netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify"
            ],
            "usecases": "TodoList",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "apps"
            ],
            "description": "This is an example React To-Do application using a DataStax Astra DB free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>JAMStack + Netlify + Astra DB + Cassandra</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://dtsx.io/2Yhvqtv\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<p>0) <a href=\"https://dtsx.io/2Yhvqtv\">Signup for DataStax Astra</a>, or login to your already existing account. </p>\n<!--- ENDEXCLUDE --->\n<p>1) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> or use an existing one.\n2) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.\n3) <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.\n4) Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a>\n5) Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.\n6) Start the example by running <code>npm run dev</code> in the Gitpod console.</p>\n<h2>Objectives</h2>\n<ul>\n<li>Provide a fullstack development example using Astra DB as the storage backend</li>\n</ul>\n<h2>How this works</h2>\n<p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>"
        },
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Reactive PetClinic, using Spring WebFlux and Astra DB",
            "summary": "Clone of Petclinic with spring webflux, java drivers connected to Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-petclinic-reactive"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-webflux"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "labs",
                "apps"
            ],
            "description": "This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Reactive Implementation of \ud83d\udc08 Spring PetClinic \ud83d\udc15</h1>\n<p><em>15 minutes, Intermediate, <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites\">Start Building</a></em></p>\n<p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png\" /></p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite\">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p>\n<!--- STARTEXCLUDE --->\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38yYuif\">DataStax Astra DB account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"GITHUB_URL\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a>\n  - <a href=\"#deploying-to-vercel\">Deploying to Vercel</a>\n  - <a href=\"#deploying-to-netlify\">Deploying to Netlify</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>Click the 'Open in Gitpod' link:\n<a href=\"https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W013",
            "name": "ToDo App using JAMStack, Netlify, and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "rest api",
                "apps"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ASQIUFRBY1PduuImqh88kn4V2ahIMvKl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/appdev-week1-todolist"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973103"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "description": "This is an example React To-Do application using a DataStax Astra free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>TODO + Astra + Cassandra \ud83d\udcd2</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://astra.dev/9-9\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT\" /></p>\n<h2>\ud83c\udfaf Objectives</h2>\n<ul>\n<li>Create a \"from scratch\" <strong>React</strong> app using NPX</li>\n<li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li>\n<li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li>\n<li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API </li>\n<li>Leverage Netlify and DataStax Astra DB</li>\n</ul>\n<h2>\u2139\ufe0f Frequently asked questions \u2139\ufe0f</h2>\n<ul>\n<li><em>Can I run the workshop on my computer?</em></li>\n</ul>\n<blockquote>\n<p>There is nothing preventing you from running the workshop on your own machine.\nIf you do so, you will need\n* git installed on your local system\n* <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/\">node 15 and npm 7 or later</a></p>\n<p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p>\n</blockquote>\n<ul>\n<li>\n<p><em>What other prerequisites are there?</em></p>\n<blockquote>\n<ul>\n<li>You will need a github account</li>\n<li>You will also need an Astra DB account, but we'll work through that in the exercises</li>\n<li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Do I need to pay for anything for this workshop?</em></p>\n<blockquote>\n<ul>\n<li><strong>No.</strong> All tools and services we provide here are FREE.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Will I get a certificate if I attend this workshop?</em></p>\n</li>\n</ul>\n<blockquote>\n<p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p>\n</blockquote>\n<h2>Materials for the Session</h2>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n</ul>\n<h2>Homework</h2>\n<p><img src=\"https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below.</li>\n<li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href=\"https://github.com/datastaxdevs/react-basics\">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li>\n<li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li>\n<li>Submit your homework <a href=\"https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E\">here</a>. Note:\n<em>never share your Astra DB tokens!</em></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>Let's start</h1>\n<h2>Table of contents</h2>\n<ol>\n<li><a href=\"#1-login-or-register-to-astradb-and-create-database\">Login or Register to AstraDB and create database</a></li>\n<li><a href=\"#2-create-a-security-token\">Create a security token</a></li>\n<li><a href=\"#3-create-a-table-with-rest-api-using-swagger\">Create a table with REST API using Swagger</a></li>\n<li><a href=\"#4-insert-data-in-the-table-with-the-rest-api-using-swagger\">Insert data in the Table with the REST API using Swagger</a></li>\n<li><a href=\"#5-retrieving-values\">Retrieving values</a></li>\n<li><a href=\"#6-launch-gitpod-ide\">Launch GitPod IDE</a></li>\n<li><a href=\"#7-launch-the-todo-app\">Launch the TODO app</a></li>\n</ol>\n<h2>An introduction to web development</h2>\n<h3>CodePen starter examples</h3>\n<ul>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/WNjrXXp\">HTML</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/QWvyOOv\">CSS</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/mdmVRwy\">Javascript</a></li>\n</ul>\n<h2>1. Login or Register to AstraDB and create database</h2>\n<p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.  </p>\n<h3>\u2705 Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>\n<p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p>\n<p><a href=\"https://astra.dev/9-9\"><img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true\" /></a>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true\" />\n</details></p>\n<p><strong>Use the following values when creating the database</strong>\n|Field| Value|\n|---|---|\n|<strong>database name</strong>| <code>todos_workshop_db</code> |\n|<strong>keypace</strong>| <code>todos</code> |\n|<strong>Cloud Provider</strong>| <em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em> |</p>\n<p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p>\n<p>You will see your new database <code>pending</code> in the Dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true\" /></p>\n<p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>2. Create a security token</h2>\n<p>\u2705  <strong>Step 2a:</strong>  <a href=\"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\">Create a token for your app</a> to use in the settings screen. Use \"Database Administrator\" permission.</p>\n<p>\u2705  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p>\n<p><strong>\ud83d\udc41\ufe0f Expected output</strong>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true\" />\n</details></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>3. Create a table with REST API using Swagger</h2>\n<p>\u2705  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by \n1. Click on your active database\n2. Click <code>Connect</code> TAB\n3. Click <code>REST API</code>\n4. Clik link to your swagger endpoint.</p>\n<p><em>As shown on the picture below.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p>\n<ol>\n<li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true\" /></p>\n<ol>\n<li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section. </li>\n<li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>. </li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true\" /></p>\n<ol>\n<li>Click the \"Try it out\" button</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true\" /></p>\n<ol>\n<li>\n<p>Finally, copy the create table statement using the code below into the <strong>body</strong> field\n<code>json\n{\n  \"name\": \"restfromreadme_by_id\",\n  \"ifNotExists\": true,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"id\",\n      \"typeDefinition\": \"uuid\",\n      \"static\": false\n    },\n    {\n      \"name\": \"text\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"key\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"completed\",\n          \"typeDefinition\": \"boolean\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"id\"\n    ]\n  }\n}</code></p>\n</li>\n<li>\n<p>And click <strong>execute</strong> to apply the command and create the table</p>\n</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true\" /></p>\n<p>You should see a <strong>201</strong> response telling you it correctly created the \"restfromreadme_by_id\" table.</p>\n<p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>4. Insert data in the Table with the REST API using Swagger</h2>\n<p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p>\n<p>\u2705  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p>\n<ol>\n<li>Scroll down and navigate to the <strong>data</strong> section</li>\n<li>Then find <strong>Add row</strong> and click it to open the section</li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 4b:</strong> FIll in values and add a row</p>\n<ol>\n<li>Add your Astra token</li>\n<li>Add the keyspaceName <code>todos</code></li>\n<li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true\" /></p>\n<ol>\n<li>Copy the following JSON into the <strong>body</strong></li>\n</ol>\n<p><code>json\n{\"id\":\"57dbd260-d905-11eb-b985-c522859819b9\",\"completed\":false,\"text\":\"TODO FROM README\",\"key\":\"none\"}</code></p>\n<ol>\n<li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li>\n</ol>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>5. Retrieving values</h2>\n<p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p>\n<p>\u2705  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p>\n<ol>\n<li>Scroll up within the <strong>data</strong> section</li>\n<li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li>\n<li>Take note this is using a <strong>GET</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 5b:</strong> Execute the command to display the data</p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n<li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true\" /></p>\n<ol>\n<li>Click <strong>Execute</strong></li>\n<li>View the end result data that should be exactly what we created in the previous step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>6. Launch GitPod IDE</h2>\n<ul>\n<li>Click the button to launch the GitPod IDE.</li>\n</ul>\n<p><a href=\"https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<h1>Need a refresher on React Basics?</h1>\n<details><summary>Take me to the React stuff</summary>\n  We've created a separate repo going over the Basics of React. To get there, click the link below.\n\n  [GOTO React-Basics](https://github.com/datastaxdevs/react-basics)\n\n  When you're done, just click on the \"Back to Main\" breadcrumb to come back here.\n</details>\n\n<h2>7. Launch the TODO app</h2>\n<p>\u2705  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p>\n<p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href=\"#2-create-a-security-token\">the instructions above</a></p>\n<p>\u2705  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p>\n<ol>\n<li>Create <code>.env</code> file</li>\n</ol>\n<p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.\n<code>bash\nnpm exec astra-setup todos_workshop_db todos</code></p>\n<ol>\n<li>\ud83d\udc69\u200d\ud83d\udcbb  Install all the packages</li>\n</ol>\n<p><code>bash\nnpm install -g netlify-cli</code></p>\n<p>\u2705  <strong>Step 7c:</strong> Launch your app\n  * Run the application \n  <code>netlify dev</code>\n  * The application should automatically launch in the GitPod preview pane</p>\n<h3>Things to Note:</h3>\n<ul>\n<li>The contents of this repo are based on <a href=\"https://github.com/tjake/todo-astra-react-serverless/\">Jake's port</a> of the <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/react\">TodoMVC code</a> originally written by <a href=\"https://github.com/petehunt\">Pete Hunt</a>.</li>\n<li>The example is modified from https://github.com/huksley/todo-react-ssr-serverless.</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "c#",
                "apps"
            ],
            "name": "Getting Started with Cassandra + C# + Astra",
            "description": "This provides an example REST backend built in C# using .NET Core 2.1 for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "java",
                "spring",
                "apps"
            ],
            "name": "Getting Started with Java + Spring + Astra DB",
            "description": "This provides an example REST backend built in Java using Spring Boot for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "python",
                "python driver",
                "apps"
            ],
            "name": "Getting Started with Python + Astra DB",
            "description": "This sample Python backend provides a REST API service that is used with the Getting Started with Astra UI to show a simple example of how to connect to and query DataStax Astra DBs.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "java",
                "apps"
            ],
            "name": "Astra + Java 101",
            "description": "Minimal code sample to work ASTRA in Java.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "python",
                "javascript",
                "apps"
            ],
            "name": "Doom Patrol, an Astra + Kepler.gl App",
            "description": "Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io#https://github.com/DataStax-Examples/astra-loom"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-loom/master/hero.png"
            },
            "tags": [
                "labs",
                "elixir",
                "apps"
            ],
            "name": "Astra DB Loom",
            "description": "Loom is a thread based chat server, where users can send messages to one or more threads via hashtags (ex. I'm heading to the park at noon #family #friends #frisbee_club ).",
            "duration": "60 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/fastsite-console"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/fastsite-console"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/fastsite-console/master/hero.png"
            },
            "tags": [
                "javascript",
                "doc api",
                "apps"
            ],
            "name": "FastSite",
            "description": "FastSite is a no-code tool to generate content-driven websites. It leverages the power of modern JAMStack and cloud-native technologies.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/todo-native-mobile"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-native-mobile/master/hero.png"
            },
            "tags": [
                "javascript",
                "workshop",
                "apps"
            ],
            "name": "React Native Todo List, an Astra DB + Netlify Workshop",
            "description": "A workshop where you build a React Native Todo application using DataStax Astra DB.",
            "duration": "40 minutes",
            "skilllevel": "Intermediate",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"
                ]
            },
            "tags": [
                "python",
                "django",
                "video",
                "apps"
            ],
            "name": "Build a Blog With Django and Astra DB",
            "description": "Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"
                ],
                "demo": [
                    "https://sag-telco-billing-app.netlify.app/"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Telco Billing App",
            "description": "An example of a telcom app dashboard, built with React and Netlify.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nextjs-tutorial/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nextjs-tutorial"
                ]
            },
            "tags": [
                "javascript",
                "nextjs",
                "apps"
            ],
            "name": "NextJS Fullstack Tutorial",
            "description": "Create a fullstack NextJS app while following along with the tutorial video and blogpost from Eddie Jaoude.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"
                ]
            },
            "tags": [
                "javascript",
                "nuxtjs",
                "nestjs",
                "apps"
            ],
            "name": "NuxtJS + NestJS Fullstack Tutorial",
            "description": "Create a fullstack NuxtJS + NestJS app while following along with the tutorial video from Eddie Jaoude.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg"
            },
            "tags": [
                "python",
                "selenium",
                "video",
                "apps"
            ],
            "name": "Build a Website Scraper with Astra DB + Python",
            "description": "Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, & FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/betterreads-webapp"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/betterreads-webapp/master/hero.jpeg"
            },
            "tags": [
                "java",
                "spring",
                "apps"
            ],
            "name": "BetterReads Spring App",
            "description": "Companion code for the Java Brains \"code with me\" series that reads data from DataStax Astra DB.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg"
            },
            "tags": [
                "python",
                "machine-learning",
                "video",
                "apps"
            ],
            "name": "AI as an API",
            "description": "Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Build an Astra DB RPG",
            "description": "This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/weatherapp/master/hero.png"
            },
            "tags": [
                "javascript",
                "stargate documents api",
                "timeseries db",
                "apps"
            ],
            "name": "Using Stargate Documents API to build a TimeSeries DB API",
            "description": "A sample app that shows how the Stargate Documents API can be used to build a TimeSeries DB Abstraction on top of AstraDB",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 3
        }
    ],
    "count": 23
}
{'documentId': 'apps'}
SUCCESS
{
    "name": "graphql api",
    "apps": [
        {
            "name": "Netflix Clone using GraphQL and Astra DB",
            "summary": "React demo connecting graph Api in Astra with paging",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/astra-netflix"
                ],
                "demo": [
                    "https://sag-astra-netflix.netlify.app"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\nGraphQL"
            ],
            "usecases": "Digital Library",
            "owner": "Chris Whilhite",
            "apis": [
                "GQL"
            ],
            "tags": [
                "javascript",
                "react",
                "graphql api",
                "apps"
            ],
            "description": "Let's code a Netflix Clone with GraphQL Pagination!",
            "duration": "2 hours",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Netflix Clone using Astra DB and GraphQL</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/astra-netflix#quick-start\">Start Building</a>, <a href=\"https://sag-astra-netflix.netlify.app\">View Demo</a></em></p>\n<p>Let's code a Netflix Clone with GraphQL Pagination! </p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png\" /></p>\n<h2>Quick Start</h2>\n<!--- STARTEXCLUDE --->\n<ul>\n<li><a href=\"https://dtsx.io/3sYwYUL\">Signup for DataStax Astra</a>, or login to your already existing account. </li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db\">Create an Astra DB Database</a> if you don't already have one.</li>\n</ul>\n<!--- ENDEXCLUDE --->\n<ul>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace\">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li>\n<li><a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token\">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li>\n<li>Click the 'Open in Gitpod' link: <a href=\"https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n<li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href=\"https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings\">Astra DB connection settings</a>.</li>\n<li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li>\n</ul>\n<h2>Objectives</h2>\n<ul>\n<li>Build a Netflix clone using GraphQL</li>\n</ul>\n<h2>How this works</h2>\n<p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href=\"https://sag-astra-netflix.netlify.app\">here</a>.</p>\n<p>Follow along with Ania's <a href=\"https://www.youtube.com/watch?v=g8COh40v2jU\">walkthrough video</a>. </p>\n<p>Additionally, there is a workshop repository for this sample app <a href=\"https://github.com/datastaxdevs/appdev-week3-graphql\">located here</a>.</p>"
        },
        {
            "code": "W018",
            "name": "Introduction to GraphQL",
            "tags": [
                "graphql api",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1UEgbHHRPu5W79E5N6FO2emK424r3BSkH"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-graphql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1768638"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=0yLysXQNJ1g"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/3iX75yf"
                ],
                "netlify": [
                    "https://dtsx.io/3aZJLxa"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-gatsbyjs-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "graphql api",
                "starters"
            ],
            "name": "Astra DB and Gatsby.js Starter",
            "description": "Create a React.js, Gatsby application that reads data from DataStax Astra DB using GraphQL.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        }
    ],
    "count": 3
}
{'documentId': 'graphql api'}
SUCCESS
{
    "name": "workshop",
    "apps": [
        {
            "name": "BattleStax, a JamStack + Astra DB Workshop",
            "summary": "React game using doc API and netlify",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/battlestax"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/battlestax"
                ],
                "netlify": [
                    "https://app.netlify.com/start/deploy?repository=https://github.com/DataStax-Examples/battlestax"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "React",
                " netlify",
                "\ndocAPI"
            ],
            "usecases": "Game Development",
            "owner": "Chris Whilhite",
            "apis": [
                "DOC"
            ],
            "tags": [
                "javascript",
                "react",
                "doc api",
                "workshop",
                "apps"
            ],
            "description": "BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>BattleStax</h1>\n<p><em>50 minutes, Advanced, <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">Start Building</a></em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Deploy a scalable JAMStack app to production</li>\n<li>Leverage a good CI/CD process to manage your JAMStack App</li>\n</ul>\n<h2>How this works</h2>\n<p>The BattleStax players watch a lobby screen while playing the game on their devices.</p>\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png\" /></p>\n<p><a href=\"https://jamstack.org/\">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">https://github.com/DataStax-Examples/battlestax</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running BattleStax</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/3jGT8b4\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/battlestax\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>Running the full game</h2>\n<p><em>Make sure you've completed the <a href=\"https://github.com/DataStax-Examples/battlestax#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine\">Running on your local machine</a></p>\n<h3>Running on your local machine</h3>\n<ol>\n<li>\n<p>Check out the <code>full-game</code> branch\n<code>sh\ngit fetch\ngit checkout full-game</code></p>\n</li>\n<li>\n<p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p>\n</li>\n<li>\n<p>Make sure the package dependencies are installed\n```sh</p>\n</li>\n</ol>\n<h1>install dependencies</h1>\n<p>npm install\n```</p>\n<ol>\n<li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.\n```sh</li>\n</ol>\n<h1>start battlestax in dev mode</h1>\n<p>npm run dev\n```</p>\n<h2>Tutorial Steps</h2>\n<p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p>\n<p align=\"center\">\n<a href=\"https://github.com/DataStax-Examples/battlestax/wiki\">\n <img src=\"https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798\" />\n</a>\n</p>\n\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W001",
            "name": "Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals",
            "tags": [
                "apache cassandra",
                "cql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/140-5Cz21Z897ArtF63crXbJY3ypcHyXa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-cassandra",
                    "https://github.com/datastaxdevs/workshop-cassandra-fundamentals"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134126"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1VZDIS6L_K4w9X8oOitzBStV1xVRPbQXtin6aWB7jqt8/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=EVpeqOnsDnU"
                ]
            }
        },
        {
            "code": "W002",
            "name": "Cassandra Data Modelling",
            "tags": [
                "apache cassandra",
                "cql",
                "data modeling",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/104L7gBEzpgzrXg472D0q-85PnDU0xBMl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-data-modeling"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/764223"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1pkpY6IDkYuHguer7kXJB3vgqvX2OjVTGswvAwUsSHtU/edit#"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=xrDfE74QnSE"
                ]
            }
        },
        {
            "code": "W003",
            "name": "Drivers and App Development",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ONw8hG0_oh7bXEv4vMk9Biuq1qQqdzP4"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-application-development"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973141"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1Jd0nISIBIAnmp7yHDS8Ot0X6RXIuaQiy6eCnW_WezMc/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jCq0Eg0RnLU"
                ]
            }
        },
        {
            "code": "W004",
            "name": "Api and microservices",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/U_i7NpP4R269yyq1w50MDg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/U_i7NpP4R269yyq1w50MDg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1a511qG28gu_SNZg8PsBuWqqfGDsbmsXI"
                ],
                "github": [
                    "https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973113"
                ]
            }
        },
        {
            "code": "W005",
            "name": "Storage Attached Index (SAI)",
            "tags": [
                "astra db",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1eXCZkejddut_BaMr8fTVc-D5iwggJqkM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-storage-attached-indexes"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973142"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1fTrT1BTX6ORKunBze3l88ptonCZg7x0VIGfWP5fvRLE/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=GLJc1Uz9dqw"
                ]
            }
        },
        {
            "code": "W006",
            "name": "Introduction to Machine Learning with Apache Spark and Apache Cassandra",
            "tags": [
                "ml",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png"
                ],
                "heroimage": "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1iuZ2d3TduHL4q0pRgI-UP_SB6lNRAarM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-machine-learning"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1829591"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1YGHay-6x3XEF0BZhohrEFe4KXgm84etBB6hNu1ke_ws/edit#slide=id.g14709f5edc7_0_3213"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=KLccQKxWZ4Y"
                ]
            }
        },
        {
            "code": "W007",
            "name": "Benchmark your database with NoSQLBench",
            "tags": [
                "performance testing",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Y7izOZOwcQfXvt-OJTwZtqdEO1vDDghe"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-nosqlbench"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973143"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1QBqlmG5K5s7i28iX_Wagnwfr1pCoTvpjJAeEGqG7EII/edit#slide=id.p"
                ]
            }
        },
        {
            "code": "W008",
            "name": "Kubernetes, K8ssandra",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/EzPmO6Q6T7WJpN0rIkGHzQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/EzPmO6Q6T7WJpN0rIkGHzQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Nm7Ji_gHAcyUpzUAk_Vy-Wro91jutYr1"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-k8ssandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/597905"
                ]
            }
        },
        {
            "code": "W009",
            "name": "BattleStax",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/16zspYMQgxbnt-XN34loeQIcOaUbiJ6hi"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-battlestax"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134146"
                ]
            }
        },
        {
            "code": "W010",
            "name": "Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification",
            "tags": [
                "certification",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1E_s-doK5RXO3MvL8tc-v-dj5u0asUD9b"
                ],
                "github": [
                    "https://github.com/DataStax-Academy/workshop-cassandra-certification",
                    "https://github.com/DataStax-Academy/workshop-k8ssandra-certification"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973145"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1bVGQ85jz70uh4L7arkmwTWG_rRWPqOMbTlHXMY7wg-M/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=ZA-NBczakqk",
                    "https://www.youtube.com/watch?v=JT1Dljbfmz8"
                ]
            }
        },
        {
            "code": "W011",
            "name": "Cassandra in the cloud",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1UE_ooWhnRf1trfuKhAy2eQg9lB8LUjH-"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-your-k8s-to-cloud"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973130"
                ]
            }
        },
        {
            "code": "W012",
            "name": "From SQL to NoSQL",
            "tags": [
                "nosql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1KP6ltv8AwRBQNroaOTfMXv-o_NM8GJYa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-sql-to-nosql-migration"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973105"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1C1lJpj_gkUsRtueL2JrY1S2M4fNdGSBe1M23l6Mlnjg/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=tNvBjY8izSk"
                ]
            }
        },
        {
            "code": "W013",
            "name": "ToDo App using JAMStack, Netlify, and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "rest api",
                "apps"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ASQIUFRBY1PduuImqh88kn4V2ahIMvKl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/appdev-week1-todolist"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973103"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "description": "This is an example React To-Do application using a DataStax Astra free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>TODO + Astra + Cassandra \ud83d\udcd2</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://astra.dev/9-9\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT\" /></p>\n<h2>\ud83c\udfaf Objectives</h2>\n<ul>\n<li>Create a \"from scratch\" <strong>React</strong> app using NPX</li>\n<li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li>\n<li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li>\n<li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API </li>\n<li>Leverage Netlify and DataStax Astra DB</li>\n</ul>\n<h2>\u2139\ufe0f Frequently asked questions \u2139\ufe0f</h2>\n<ul>\n<li><em>Can I run the workshop on my computer?</em></li>\n</ul>\n<blockquote>\n<p>There is nothing preventing you from running the workshop on your own machine.\nIf you do so, you will need\n* git installed on your local system\n* <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/\">node 15 and npm 7 or later</a></p>\n<p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p>\n</blockquote>\n<ul>\n<li>\n<p><em>What other prerequisites are there?</em></p>\n<blockquote>\n<ul>\n<li>You will need a github account</li>\n<li>You will also need an Astra DB account, but we'll work through that in the exercises</li>\n<li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Do I need to pay for anything for this workshop?</em></p>\n<blockquote>\n<ul>\n<li><strong>No.</strong> All tools and services we provide here are FREE.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Will I get a certificate if I attend this workshop?</em></p>\n</li>\n</ul>\n<blockquote>\n<p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p>\n</blockquote>\n<h2>Materials for the Session</h2>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n</ul>\n<h2>Homework</h2>\n<p><img src=\"https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below.</li>\n<li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href=\"https://github.com/datastaxdevs/react-basics\">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li>\n<li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li>\n<li>Submit your homework <a href=\"https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E\">here</a>. Note:\n<em>never share your Astra DB tokens!</em></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>Let's start</h1>\n<h2>Table of contents</h2>\n<ol>\n<li><a href=\"#1-login-or-register-to-astradb-and-create-database\">Login or Register to AstraDB and create database</a></li>\n<li><a href=\"#2-create-a-security-token\">Create a security token</a></li>\n<li><a href=\"#3-create-a-table-with-rest-api-using-swagger\">Create a table with REST API using Swagger</a></li>\n<li><a href=\"#4-insert-data-in-the-table-with-the-rest-api-using-swagger\">Insert data in the Table with the REST API using Swagger</a></li>\n<li><a href=\"#5-retrieving-values\">Retrieving values</a></li>\n<li><a href=\"#6-launch-gitpod-ide\">Launch GitPod IDE</a></li>\n<li><a href=\"#7-launch-the-todo-app\">Launch the TODO app</a></li>\n</ol>\n<h2>An introduction to web development</h2>\n<h3>CodePen starter examples</h3>\n<ul>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/WNjrXXp\">HTML</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/QWvyOOv\">CSS</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/mdmVRwy\">Javascript</a></li>\n</ul>\n<h2>1. Login or Register to AstraDB and create database</h2>\n<p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.  </p>\n<h3>\u2705 Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>\n<p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p>\n<p><a href=\"https://astra.dev/9-9\"><img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true\" /></a>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true\" />\n</details></p>\n<p><strong>Use the following values when creating the database</strong>\n|Field| Value|\n|---|---|\n|<strong>database name</strong>| <code>todos_workshop_db</code> |\n|<strong>keypace</strong>| <code>todos</code> |\n|<strong>Cloud Provider</strong>| <em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em> |</p>\n<p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p>\n<p>You will see your new database <code>pending</code> in the Dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true\" /></p>\n<p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>2. Create a security token</h2>\n<p>\u2705  <strong>Step 2a:</strong>  <a href=\"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\">Create a token for your app</a> to use in the settings screen. Use \"Database Administrator\" permission.</p>\n<p>\u2705  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p>\n<p><strong>\ud83d\udc41\ufe0f Expected output</strong>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true\" />\n</details></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>3. Create a table with REST API using Swagger</h2>\n<p>\u2705  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by \n1. Click on your active database\n2. Click <code>Connect</code> TAB\n3. Click <code>REST API</code>\n4. Clik link to your swagger endpoint.</p>\n<p><em>As shown on the picture below.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p>\n<ol>\n<li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true\" /></p>\n<ol>\n<li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section. </li>\n<li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>. </li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true\" /></p>\n<ol>\n<li>Click the \"Try it out\" button</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true\" /></p>\n<ol>\n<li>\n<p>Finally, copy the create table statement using the code below into the <strong>body</strong> field\n<code>json\n{\n  \"name\": \"restfromreadme_by_id\",\n  \"ifNotExists\": true,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"id\",\n      \"typeDefinition\": \"uuid\",\n      \"static\": false\n    },\n    {\n      \"name\": \"text\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"key\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"completed\",\n          \"typeDefinition\": \"boolean\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"id\"\n    ]\n  }\n}</code></p>\n</li>\n<li>\n<p>And click <strong>execute</strong> to apply the command and create the table</p>\n</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true\" /></p>\n<p>You should see a <strong>201</strong> response telling you it correctly created the \"restfromreadme_by_id\" table.</p>\n<p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>4. Insert data in the Table with the REST API using Swagger</h2>\n<p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p>\n<p>\u2705  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p>\n<ol>\n<li>Scroll down and navigate to the <strong>data</strong> section</li>\n<li>Then find <strong>Add row</strong> and click it to open the section</li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 4b:</strong> FIll in values and add a row</p>\n<ol>\n<li>Add your Astra token</li>\n<li>Add the keyspaceName <code>todos</code></li>\n<li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true\" /></p>\n<ol>\n<li>Copy the following JSON into the <strong>body</strong></li>\n</ol>\n<p><code>json\n{\"id\":\"57dbd260-d905-11eb-b985-c522859819b9\",\"completed\":false,\"text\":\"TODO FROM README\",\"key\":\"none\"}</code></p>\n<ol>\n<li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li>\n</ol>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>5. Retrieving values</h2>\n<p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p>\n<p>\u2705  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p>\n<ol>\n<li>Scroll up within the <strong>data</strong> section</li>\n<li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li>\n<li>Take note this is using a <strong>GET</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 5b:</strong> Execute the command to display the data</p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n<li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true\" /></p>\n<ol>\n<li>Click <strong>Execute</strong></li>\n<li>View the end result data that should be exactly what we created in the previous step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>6. Launch GitPod IDE</h2>\n<ul>\n<li>Click the button to launch the GitPod IDE.</li>\n</ul>\n<p><a href=\"https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<h1>Need a refresher on React Basics?</h1>\n<details><summary>Take me to the React stuff</summary>\n  We've created a separate repo going over the Basics of React. To get there, click the link below.\n\n  [GOTO React-Basics](https://github.com/datastaxdevs/react-basics)\n\n  When you're done, just click on the \"Back to Main\" breadcrumb to come back here.\n</details>\n\n<h2>7. Launch the TODO app</h2>\n<p>\u2705  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p>\n<p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href=\"#2-create-a-security-token\">the instructions above</a></p>\n<p>\u2705  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p>\n<ol>\n<li>Create <code>.env</code> file</li>\n</ol>\n<p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.\n<code>bash\nnpm exec astra-setup todos_workshop_db todos</code></p>\n<ol>\n<li>\ud83d\udc69\u200d\ud83d\udcbb  Install all the packages</li>\n</ol>\n<p><code>bash\nnpm install -g netlify-cli</code></p>\n<p>\u2705  <strong>Step 7c:</strong> Launch your app\n  * Run the application \n  <code>netlify dev</code>\n  * The application should automatically launch in the GitPod preview pane</p>\n<h3>Things to Note:</h3>\n<ul>\n<li>The contents of this repo are based on <a href=\"https://github.com/tjake/todo-astra-react-serverless/\">Jake's port</a> of the <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/react\">TodoMVC code</a> originally written by <a href=\"https://github.com/petehunt\">Pete Hunt</a>.</li>\n<li>The example is modified from https://github.com/huksley/todo-react-ssr-serverless.</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "code": "W014",
            "name": "TikTok clone using React, JAMStack and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "doc api"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7SDqPNjOSparwE2anSqvgw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1SP0VbYkO0QQP5Ur4_H62ALPYtgfc5GfD"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-social-media-tiktok"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134131"
                ],
                "demo": [
                    "https://fanciful-licorice-ea1437.netlify.app/"
                ]
            },
            "description": "A simple Tik-Tok clone running on AstraDB that leverages the Document API.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Astra DB TikTok Clone Workshop</h1>\n<p><a href=\"https://github.com/datastaxdevs/workshop-social-media-tiktok\"><img alt=\"Gitpod ready-to-code\" src=\"https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod\" /></a> \n<a href=\"http://www.apache.org/licenses/LICENSE-2.0\"><img alt=\"License Apache2\" src=\"https://img.shields.io/hexpm/l/plug.svg\" /></a>\n<a href=\"https://discord.com/widget?id=685554030159593522&amp;theme=dark\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/685554030159593522\" /></a></p>\n<p>\u23f2\ufe0f <strong>Duration :</strong> 2 hours</p>\n<p>\ud83c\udf93 <strong>Level</strong> Beginner to Intermediate</p>\n<p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href=\"https://fanciful-licorice-ea1437.netlify.app\">here</a></p>\n<p><img alt=\"image\" src=\"./screenshot.jpg\" /></p>\n<blockquote>\n<p><a href=\"#-start-hands-on\">\ud83d\udd16 Accessing HANDS-ON</a></p>\n</blockquote>\n<h2>\ud83d\udccb Table of contents</h2>\n<ul>\n<li><strong>HouseKeeping</strong></li>\n<li><a href=\"#1---objectives\">1. Objectives</a></li>\n<li><a href=\"#2---frequently-asked-questions\">2. Frequently asked questions</a></li>\n<li><a href=\"#3---materials-for-the-session\">3. Materials for the Session</a></li>\n<li><a href=\"#4---homework\">4. Homework</a></li>\n<li><strong><a href=\"#lab-1---getting-started-with-database\">LAB 1 - Getting Started with Database</a></strong></li>\n<li><a href=\"#11---getting-started-with-database\">1.1 - Create Astra Account</a></li>\n<li><a href=\"#11---getting-started-with-database\">1.2 - Create Astra Database</a></li>\n<li><strong><a href=\"#lab-2---document-api\">LAB 2 - Document API</a></strong></li>\n<li><a href=\"#21-using-document-api\">2.1 - Using Document API</a></li>\n<li><a href=\"#22---create-astra-credentials\">2.2 - Create Astra Credentials</a></li>\n<li><strong><a href=\"#lab-3---ide-setup\">LAB 3 - IDE Setup</a></strong>  </li>\n<li><a href=\"#31---netlify-site-setup\">3.1 - Netlify site setup</a></li>\n<li><a href=\"#32---launch-gitpod\">3.2 - Launch GitPod</a></li>\n<li><a href=\"#33---astra-cli-setup\">3.3 - Astra CLI Setup</a></li>\n<li><a href=\"#34---netlify-cli-setup\">3.4 - Netlify CLI Setup</a></li>\n<li><a href=\"#35-launch-your-app\">3.5 - Launch the application</a></li>\n<li><strong><a href=\"#lab-4---coding-against-db\">LAB 4 - Coding Against DB</a></strong></li>\n<li><a href=\"#41---document-api\">4.1 - Document API</a></li>\n<li><a href=\"#42---astrajs-client\">4.2 - AstraJS Client</a></li>\n<li><a href=\"#43---serverless-configuration\">4.3 - Serverless configuration</a></li>\n<li><a href=\"#44---react-component\">4.4 - React Component</a></li>\n<li><strong><a href=\"#lab-5---netlify-deployments\">LAB 5 - Netlify Deployments</a></strong></li>\n<li><a href=\"#51---connect-netlify-to-your-site\">5.1 - Connect Netlify to your site</a></li>\n<li><a href=\"#52---deploy-to-production\">5.2 - Deploy to production</a></li>\n</ul>\n<h2>Housekeeping</h2>\n<h3>1 - Objectives</h3>\n<ul>\n<li>\n<p>\ud83c\udfaf How to build a frontend application using React Components</p>\n</li>\n<li>\n<p>\ud83c\udfaf How to build a backend with Javascript without Express.</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p>\n</li>\n<li>\n<p>\ud83c\udfaf Learn what is gitpod and how you can use it in your projects</p>\n</li>\n</ul>\n<h3>2 - Frequently asked questions</h3>\n<p/>\n<details>\n<summary><b> 1\ufe0f\u20e3 Can I run this workshop on my computer?</b></summary>\n<hr>\n<p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:\n<ol>\n<li><b>git installed on your local system</b>\n<li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b>\n</ol>\n</p>\nIn this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.\n</details>\n<p/>\n<details>\n<summary><b> 2\ufe0f\u20e3 What other prerequisites are there?</b></summary>\n<hr>\n<ul>\n<li>You will need an <b>Github account</b>\n<li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop\n<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)\n\n</ul>\n</p>\n</details>\n<p/>\n<details>\n<summary><b> 3\ufe0f\u20e3 Do I need to pay for anything for this workshop?</b></summary>\n<hr>\n<b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.\n</details>\n<p/>\n<details>\n<summary><b> 4\ufe0f\u20e3 Will I get a certificate if I attend this workshop?</b></summary>\n<hr>\nAttending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*\n</details>\n<p/>\n\n<h3>3 - Materials for the Session</h3>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides/slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n<li><a href=\"jamstack.md\">What is JamStack?</a></li>\n<li><a href=\"#video-tutorial-with-ania-kubow\">Video tutorial with Ania Kubow</a></li>\n</ul>\n<h3>4 - Homework</h3>\n<p><img src=\"tutorial/images/tiktok-badge.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li>\n<li>(Optional extra credit) Watch the 2 hour Ania video <a href=\"#video-tutorial-with-ania-kubow\">HERE</a>, build the app yourself, and show us the completed app.</li>\n<li>Submit your homework <a href=\"https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys\">here</a></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>\ud83c\udfc1 Start Hands-on</h1>\n<h2>LAB 1 - Getting Started with Database</h2>\n<h3>1.1 - Getting Started with Database</h3>\n<p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p>\n<h4><code>\u2705.1.1.a</code>- Create Astra Account</h4>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://astra.dev/yt-12-14\"><img alt=\"image\" src=\"./tutorial/images/create_astra_db.png?raw=true\" /></a></p>\n</blockquote>\n<h4><code>\u2705.1.1.b</code>- Create Astra Database</h4>\n<ul>\n<li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-button.png?raw=true\" /></p>\n<ul>\n<li>Use the following values when creating the database:</li>\n</ul>\n<p>| #  | Field Name         | Field Value                     |\n|----|--------------------|---------------------------------|\n| 1  | <strong>Database Name</strong>    | <code>workshops</code>                     |\n| 2  | <strong>Keyspace Name</strong>  | <code>tiktok_keyspace</code>               |\n| 3  | <strong>Cloud Provider</strong> | <code>Google Cloud Plaform</code>          |\n| 4  | <strong>Area</strong>   | <code>North America</code>                 |\n| 5  | <strong>Region</strong> | <code>Moncks Corner, South Carolina</code> |</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Now click <code>[Create Database button]</code> that became blue.</li>\n<li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-pending.png?raw=true\" /></p>\n</blockquote>\n<ul>\n<li>Click <code>[Go to Database]</code></li>\n</ul>\n<h4><code>\u2705.1.1.c</code>- Database was already existing</h4>\n<p>Here are some special situations you might encounter.</p>\n<blockquote>\n<p>\u2139\ufe0f <strong>Hibernated Database:</strong></p>\n<p>If the DB workshops already exists but is hibernated (you have not use it for a while):<br />\n- Click the <code>[Resume Database]</code> button on the top right-hand corner.</p>\n<p><img alt=\"image\" src=\"./tutorial/images/db-resume.png?raw=true\" /> </p>\n<p>\u2139\ufe0f <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p>\n<p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p>\n<ul>\n<li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li>\n<li>Provide the keyspace name <code>tiktok_keyspace</code></li>\n<li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/db-create-keyspace.png?raw=true\" /></p>\n</blockquote>\n<h2>LAB 2 - Document API</h2>\n<h3>2.1 Using Document API</h3>\n<h4><code>\u2705.2.1.a</code>- Open Swagger User Interface</h4>\n<ul>\n<li>(1) -  Select your database in the left panel (if needed)</li>\n<li>(2) -  Select the tab <code>Connect</code></li>\n<li>(3) -  Select the <code>Document API</code> bloc</li>\n<li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/access-swagger.png?raw=true\" /></p>\n<ul>\n<li>You should access this screen</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Swagger UI</code></p>\n<p><img alt=\"image\" src=\"tutorial/images/show-swagger.png?raw=true\" /></p>\n</blockquote>\n<h4><code>\u2705.2.1.b</code>- Lists Collections</h4>\n<ul>\n<li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-1.png?raw=true\" /></p>\n<ul>\n<li>(2) - Click the <code>[Try It Out]</code> button</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/list-collections-2.png?raw=true\" /></p>\n<ul>\n<li>(3) - Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |</p>\n<ul>\n<li>(4) - Click on <code>[Execute]</code> button</li>\n</ul>\n<p>The output is empty (expected):</p>\n<p><code>json\n[]</code></p>\n<h4><code>\u2705.2.1.c</code>- Create Collection <code>story</code></h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>body</strong>| <code>{\"name\":\"story\"}</code> |</p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You can see the output with <code>201</code> (created) code</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"tutorial/images/create-collection-1.png?raw=true\" /></p>\n<ul>\n<li>(6) - Following the steps in previous section list collections again, you should get </li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": [\n   {\n     \"name\": \"story\",\n     \"upgradeAvailable\": false\n   }\n ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.d</code>- Create a first document</h4>\n<p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p>\n<ul>\n<li>\n<p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |</p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"Mo Farooq\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"documentId\": \"8aa07632-4ffb-46e5-9d78-b32e21847221\"\n}</code></p>\n</blockquote>\n<h4><code>\u2705.2.1.e</code>- Search documents in a collections</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>where</strong>|  <code>{\"username\": {\"$eq\": \"mofarooq32\"}}</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result</p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>json\n{\n \"data\": {\n   \"8aa07632-4ffb-46e5-9d78-b32e21847221\": {\n     \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n     \"button_visible\": true,\n     \"caption\": \"These ducks are MEGA cute\",\n     \"comments\": 2,\n     \"is_followed\": true,\n     \"likes\": 10,\n     \"name\": \"Mo Farooq\",\n     \"username\": \"mofarooq32\",\n     \"video\": \"https://i.imgur.com/FTBP02Y.mp4\"\n   }\n }\n}</code>\n</p>\n</blockquote>\n<h4><code>\u2705.2.1.f</code>- Update a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p>\n</li>\n<li>\n<p>(2) - Click the <code>[Try It Out]</code> button</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<p><strong>body:</strong> \n<code>json\n{\n  \"name\": \"New Name\",\n  \"username\": \"mofarooq32\",\n  \"avatar\": \"https://i.imgur.com/9KYq7VG.png\",\n  \"is_followed\": true,\n  \"video\": \"https://i.imgur.com/FTBP02Y.mp4\",\n  \"caption\": \"These ducks are MEGA cute\",\n  \"likes\": 10,\n  \"comments\": 2,\n  \"button_visible\": true\n}</code></p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get an updated document</p>\n</li>\n</ul>\n<h4><code>\u2705.2.1.g</code>- Delete a document</h4>\n<ul>\n<li>\n<p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> _ Delete a document_</p>\n</li>\n<li>\n<p>(3) - Populate the form with the following values</p>\n</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>story</code> |\n|<strong>document-id</strong>|  document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code> | </p>\n<ul>\n<li>\n<p>(4) - Click on <code>[Execute]</code> button</p>\n</li>\n<li>\n<p>(5) - You should get a result code of <code>204</code></p>\n</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>Code 204\naccess-control-allow-credentials: true \naccess-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com \naccess-control-expose-headers: Date \ndate: Mon,12 Dec 2022 18:12:43 GMT \nvary: Origin</code></p>\n</blockquote>\n<h3>2.2 - Create Astra Credentials</h3>\n<p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token. </p>\n<h4><code>\u2705.2.2.a</code>- Create Astra Credentials</h4>\n<blockquote>\n<p>\u2139\ufe0f <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p>\n</blockquote>\n<ul>\n<li>(1) - Go the <code>Organization Settings</code></li>\n<li>(2) - Go to <code>Token Management</code></li>\n<li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li>\n<li>(4) - Click <code>Generate token</code></li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-create-token.gif?raw=true\" /></p>\n<h4><code>\u2705.2.2.b</code>- Download Astra Credentials</h4>\n<ul>\n<li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/astra-token.png?raw=true\" /></p>\n<blockquote>\n<p><strong>\u26a0\ufe0f Important</strong>\n<code>The instructor will show you on screen how to create a token \nbut will have to destroy to token immediately for security reasons.</code></p>\n</blockquote>\n<p>Notice the clipboard icon at the end of each value.\n- <code>Client ID:</code> We will <em>not</em> use this during this workshop\n- <code>Client Secret:</code> We will <em>not</em> use this during this workshop\n- <code>Token:</code> <strong><em>This is your token!</em></strong> We will use it as a api Key to interact with APIS</p>\n<h2>LAB 3 - IDE Setup</h2>\n<h3>3.1 - Netlify Site Setup</h3>\n<ul>\n<li>(1) Click the button to deploy.</li>\n</ul>\n<blockquote>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok\"><img alt=\"Deploy to Netlify\" src=\"https://www.netlify.com/img/deploy/button.svg\" /></a></p>\n</blockquote>\n<ul>\n<li>\n<p>(2) - Authenticate with your github Account</p>\n</li>\n<li>\n<p>(3) - Select an account and the github repository where to clone</p>\n</li>\n</ul>\n<p><img alt=\"image\" src=\"./tutorial/images/deploy-to-netlify.gif?raw=true\" /></p>\n<ul>\n<li>(4) - In netlify user interface click on <code>Site deploy in progress</code> </li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-1.png\" /></p>\n</blockquote>\n<ul>\n<li>(5) - Click the top deploy link to see the build process.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-2.png\" /></p>\n</blockquote>\n<ul>\n<li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-3.png\" /></p>\n</blockquote>\n<ul>\n<li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-4.png\" /></p>\n</blockquote>\n<ul>\n<li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li>\n</ul>\n<blockquote>\n<p><img src=\"tutorial/images/deploy-5.png\" /></p>\n</blockquote>\n<h3>3.2 - Launch GitPod</h3>\n<h4><code>\u2705.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>\n<ul>\n<li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li>\n</ul>\n<h4>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>\n<p><img alt=\"correct notcorrect\" src=\"tutorial/images/correct-not-correct.png?raw=true\" /></p>\n<p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href=\"#3-clone-your-github-repository\">step3</a> to get to your repo.</p>\n<h4><code>\u2705.3.2.b</code>- Open Gitpod IDE</h4>\n<blockquote>\n<p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p>\n<p>\u2197\ufe0f <em>Right Click and select open as a new Tab...</em></p>\n<p><a href=\"https://gitpod.io/from-referrer/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</blockquote>\n<h4><code>\u2705.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>\n<ul>\n<li>From your GitPod terminal execute the following command</li>\n</ul>\n<p><code>bash\ngit remote -v</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code>\n<code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)\norigin  https://github.com/clun/workshop-astra-tik-tok.git (push)\nIf the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code>\n</p>\n</blockquote>\n<h3>3.3 - Astra CLI Setup</h3>\n<h4><code>\u2705.3.3.a</code>- Save your token</h4>\n<p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p>\n<p><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></p>\n<h4><code>\u2705.3.3.b</code>- Validate your configuration</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra user list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list\n+--------------------------------------+-----------------------------+---------------------+\n| User Id                              | User Email                  | Status              |\n+--------------------------------------+-----------------------------+---------------------+\n| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |\n+--------------------------------------+-----------------------------+---------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.c</code>- List Database to see  <code>workshops</code></h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db list</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>+---------------------+--------------------------------------+---------------------+----------------+\n| Name                | id                                   | Default Region      | Status         |\n+---------------------+--------------------------------------+---------------------+----------------+\n| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         |\n| workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |\n+---------------------+--------------------------------------+---------------------+----------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.d</code>- Get db details</h4>\n<ul>\n<li>In the terminal panel in gitpod enter the following command:</li>\n</ul>\n<p><code>astra db get workshops</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops\n+------------------------+-----------------------------------------+\n| Attribute              | Value                                   |\n+------------------------+-----------------------------------------+\n| Name                   | workshops                               |\n| id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    |\n| Status                 | ACTIVE                                  |\n| Default Cloud Provider | GCP                                     |\n| Default Region         | us-east1                                |\n| Default Keyspace       | tiktok_keyspace                         |\n| Creation Time          | 2022-12-12T11:14:58Z                    |\n|                        |                                         |\n| Keyspaces              | [0] tiktok_keyspace                     |\n|                        |                                         |\n|                        |                                         |\n| Regions                | [0] us-east1                            |\n|                        |                                         |\n+------------------------+-----------------------------------------+</code></p>\n</blockquote>\n<h4><code>\u2705.3.3.e</code>- Create configuration file</h4>\n<ul>\n<li>Create <code>.env</code> file</li>\n</ul>\n<p><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></p>\n<ul>\n<li>Show content</li>\n</ul>\n<p><code>cat .env</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>ASTRA_DB_APPLICATION_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZTvaCp......\"\nASTRA_DB_GRAPHQL_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace\"\nASTRA_DB_GRAPHQL_URL_ADMIN=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin\"\nASTRA_DB_GRAPHQL_URL_PLAYGROUND=\"https://.....-us-east1.apps.astra.datastax.com/api/playground\"\nASTRA_DB_GRAPHQL_URL_SCHEMA=\"https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema\"\nASTRA_DB_ID=\".....\"\nASTRA_DB_KEYSPACE=\"tiktok_keyspace\"\nASTRA_DB_REGION=\"us-east1\"\nASTRA_DB_REST_URL=\"https://.....-us-east1.apps.astra.datastax.com/api/rest\"\nASTRA_DB_REST_URL_SWAGGER=\"https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/\"\nASTRA_DB_SECURE_BUNDLE_PATH=\"/home/gitpod/.astra/scb/scb_....._us-east1.zip\"\nASTRA_DB_SECURE_BUNDLE_URL=\"secured_url\"\nASTRA_ORG_ID=\"f9460f14-9879-4ebe-83f2-48d3f3dce13c\"\nASTRA_ORG_NAME=\"cedrick.lunven@datastax.com\"\nASTRA_ORG_TOKEN=\"AstraCS:gfYSGwpaFNGmUZnZT.....\"</code></p>\n</blockquote>\n<h3>3.4 - Netlify CLI Setup</h3>\n<h4><code>\u2705.3.4.a</code>- Install the package</h4>\n<p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p>\n<p><code>npm install -g netlify-cli</code></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><img src=\"tutorial/images/netlify-install-cli.png?raw=true\" /></p>\n</blockquote>\n<h3>3.5 Launch your app</h3>\n<h4><code>\u2705.3.5.a</code>- Start application</h4>\n<p><code>netlify dev</code></p>\n<p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n</blockquote>\n<p>```\n\u25c8 Netlify Dev \u25c8\n\u25c8 Ignored general context env var: LANG (defined in process)\n\u25c8 Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND\n\u25c8 Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA\n\u25c8 Injected .env file env var: ASTRA_DB_ID\n\u25c8 Injected .env file env var: ASTRA_DB_KEYSPACE\n\u25c8 Injected .env file env var: ASTRA_DB_REGION\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL\n\u25c8 Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH\n\u25c8 Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL\n\u25c8 Injected .env file env var: ASTRA_ORG_ID\n\u25c8 Injected .env file env var: ASTRA_ORG_NAME\n\u25c8 Injected .env file env var: ASTRA_ORG_TOKEN\n\u25c8 Loaded function add http://localhost:8888/.netlify/functions/add.\n\u25c8 Loaded function addData http://localhost:8888/.netlify/functions/addData.\n\u25c8 Loaded function edit http://localhost:8888/.netlify/functions/edit.\n\u25c8 Loaded function posts http://localhost:8888/.netlify/functions/posts.\n\u25c8 Functions server is listening on 36661\n\u25c8 Setting up local development server</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  Netlify Build                                               <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u276f Version\n  @netlify/build 28.4.5</p>\n<p>\u276f Flags\n  {}</p>\n<p>\u276f Current directory\n  /workspace/workshop-astra-tik-tok</p>\n<p>\u276f Config file\n  /workspace/workshop-astra-tik-tok/netlify.toml</p>\n<p>\u276f Context\n  dev</p>\n<p>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n  1. Run command for local development                        <br />\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500</p>\n<p>\u25c8 Starting Netlify Dev with Create React App</p>\n<blockquote>\n<p>tik-tok-stargate@0.1.0 start\nreact-scripts start</p>\n</blockquote>\n<p>\u2139 \uff62wds\uff63: Project is running at http://10.0.5.2/\n\u2139 \uff62wds\uff63: webpack output is served from \n\u2139 \uff62wds\uff63: Content not from webpack is served from /workspace/workshop-astra-tik-tok/public\n\u2139 \uff62wds\uff63: 404s will fallback to /\nStarting the development server...</p>\n<p>Compiled successfully!</p>\n<p>You can now view tik-tok-stargate in the browser.</p>\n<p>Local:            http://localhost:3000\n  On Your Network:  http://10.0.5.2:3000</p>\n<p>Note that the development build is not optimized.\nTo create a production build, use npm run build.</p>\n<p>\u2714 Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml</p>\n<p>(dev.command completed in 9.4s)</p>\n<p>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502                                                 \u2502\n   \u2502   \u25c8 Server now ready on http://localhost:8888   \u2502\n   \u2502                                                 \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</p>\n<p>\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData\n\u2827 Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts\n\u2819 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.\n\u2826 Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.\n\u2714 Setting up the Edge Functions environment. This may take a couple of minutes.\n```</p>\n<p><img alt=\"start\" src=\"./tutorial/images/netlify-start.png?raw=true\" /></p>\n<h2>LAB 4 - Coding Against DB</h2>\n<h3>4.1 - Document API</h3>\n<p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p>\n<h4><code>\u2705.4.1.a</code>- Reopen Swagger</h4>\n<p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href=\"astra.datastax.com\">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p>\n<p><img alt=\"db_connect\" src=\"./tutorial/images/db_connect.png?raw=true\" /></p>\n<p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_link.png?raw=true\" /></p>\n<h4><code>\u2705.4.1.a</code>- List Collections</h4>\n<p>Open up the first section labelled \"List collections in namespace\" and click the button \"Try it out\".</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_listcollections_02.png?raw=true\" /></p>\n<ul>\n<li>Execture with <code>[Execute]</code> button</li>\n</ul>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"data\": [\n    {\n      \"name\": \"story\",\n      \"upgradeAvailable\": false\n    },\n    {\n      \"name\": \"tktkposts\",\n      \"upgradeAvailable\": false\n    }\n  ]\n}</code></p>\n</blockquote>\n<h4><code>\u2705.4.1.b</code>- List Documents of <code>tktkposts</code></h4>\n<ul>\n<li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li>\n</ul>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_02.png?raw=true\" /></p>\n<ul>\n<li>Populate the form with the following values</li>\n</ul>\n<p>|Field| Value|\n|---|---|\n|<strong>X-Cassandra-Token</strong>| <em>autopopulated</em> |\n|<strong>namespace-id</strong>| <code>tiktok_keyspace</code> |\n|<strong>collection-id</strong>| <code>tktkposts</code> |</p>\n<p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p>\n<p><img alt=\"swaggerui_link\" src=\"./tutorial/images/swaggerui_searchdocuments_04.png?raw=true\" /></p>\n<blockquote>\n<p>\ud83d\udda5\ufe0f <code>Output</code></p>\n<p><code>json\n{\n  \"pageState\": \"ATIA8H_____wf____w==\",\n  \"data\": {\n    \"0\": {\n      \"avatar\": \"https://i.imgur.com/jONHmE5.png\",\n      \"button_visible\": true,\n      \"caption\": \"Art is for everyone\",\n      \"comments\": 20,\n      \"id\": 0,\n      \"is_followed\": true,\n      \"likes\": 231,\n      \"name\": \"Lana Del Mont\",\n      \"timestamp\": \"2020-09-10T09:08:31.020Z\",\n      \"username\": \"lana_del_away\",\n      \"video\": \"https://i.imgur.com/H9UX0Jm.mp4\"\n    },\n    \"2\": {\n      \"avatar\": \"https://i.imgur.com/eX3hkoc.png\",\n      \"button_visible\": true,\n      \"caption\": \"Happiest of Birthdays my Angel\",\n      \"comments\": 4,\n      \"id\": 2,\n      \"is_followed\": true,\n      \"likes\": 2,\n      \"name\": \"Angela Lee\",\n      \"timestamp\": \"2020-04-10T09:08:31.020Z\",\n      \"username\": \"angiecakes\",\n      \"video\": \"https://i.imgur.com/al6MLay.mp4\"\n    },\n    \"3\": {\n      \"avatar\": \"https://i.imgur.com/IigY4Hm.png\",\n      \"button_visible\": true,\n      \"caption\": \"The new normal\",\n      \"comments\": 2,\n      \"id\": 3,\n      \"is_followed\": false,\n      \"likes\": 10,\n      \"name\": \"Nina Xen\",\n      \"timestamp\": \"2020-05-10T09:08:31.020Z\",\n      \"username\": \"nina_lina\",\n      \"video\": \"https://i.imgur.com/Kzvbeup.mp4\"\n    }\n  }\n}</code></p>\n</blockquote>\n<h3>4.2 - AstraJS Client</h3>\n<h4><code>\u2705.4.2.1</code> - Initialization</h4>\n<p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>. </p>\n<p>(See: <a href=\"./functions/utils/astraClient.js\">functions/utils/astraClient.js</a>)</p>\n<p>```javascript\nconst { createClient } = require(\"@astrajs/collections\");</p>\n<p>let astraClient = null;</p>\n<p>const getAstraClient = async () =&gt; {\n  if (astraClient === null) {\n    astraClient = await createClient(\n      {\n        astraDatabaseId: process.env.ASTRA_DB_ID,\n        astraDatabaseRegion: process.env.ASTRA_DB_REGION,\n        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,\n      },\n      30000\n    );\n  }\n  return astraClient;\n};\n```</p>\n<p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p>\n<ul>\n<li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li>\n<li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li>\n<li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li>\n</ul>\n<p>Then we return the <code>astraClient</code> we can then use in our API calls.</p>\n<p>We also need to create a document collection to store our data.</p>\n<p><code>javascript\nconst getCollection = async () =&gt; {\n  const documentClient = await getAstraClient();\n  return documentClient\n    .namespace(process.env.ASTRA_DB_KEYSPACE)\n    .collection(\"tktkposts\");\n};</code></p>\n<p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p>\n<ul>\n<li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li>\n</ul>\n<p>We will call the collection <strong>tktkposts</strong>.</p>\n<h4><code>\u2705.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>\n<p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p>\n<p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href=\"https://docs.datastax.com/en/astra/docs/astra-collection-client.html\">AstraJS Collections</a></p>\n<p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p>\n<p><code>javascript\nconst users = await getCollection();</code></p>\n<p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p>\n<p><code>javascript\ntry {\n    const user = await users.create(id, event.body);\n    return {\n      statusCode: 200,\n      body: JSON.stringify(user),\n    };\n}</code></p>\n<h4><code>\u2705.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>\n<p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p>\n<p><code>javascript\ntry {\n    users.update(body.userId, body.data);\n    return {\n      statusCode: 200,\n    };\n  }</code></p>\n<h4><code>\u2705.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>\n<p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p>\n<p><code>javascript\ntry {\n    const res = await users.find({});\n    return {\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),\n    };\n  }</code></p>\n<p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p>\n<h3>4.3 - Serverless configuration</h3>\n<p>Take a look at <code>netlify.toml</code>.</p>\n<p><code>init\n[build]\ncommand = \"npm run build\"\nfunctions = \"functions\"\npublish = \"build\"</code></p>\n<p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p>\n<p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p>\n<p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href=\"./functions/posts.js\">/.netlify/functions/posts</a></p>\n<p>```javascript\n// Declaring 'getCollection'\nconst { getCollection } = require(\"./utils/astraClient\");</p>\n<p>// Function exported as a REST API\nexports.handler = async function () {\n  // Accessing the collection tkt\n  const tktkpostsCollection = await getCollection();\n  try {\n    // Access POST\n    const res = await tktkpostsCollection.find({});\n    return {\n      // Return POSTS in the body\n      statusCode: 200,\n      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),</p>\n<p>[...]\n```</p>\n<p>\u2705 We can see these functions in our Netlify account.\n- Go to netlify.com and sign in.\n- Select your site from the list.\n- Select the \"Functions\" tab at the top.</p>\n<p><img alt=\"netlify_functions\" src=\"./tutorial/images/netlify_functions_tab.gif\" /></p>\n<p>From here we can see all our functions and get direct links as well as watch real time logs.</p>\n<p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/netlify_endpoint_nav.gif\" /></p>\n<h3>4.4 - React Component</h3>\n<p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p>\n<h4><code>\u2705.4.4.a</code> - React Router</h4>\n<p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href=\"./src/index.js\">index.js</a></p>\n<p><code>xml\n&lt;Switch&gt;\n  &lt;Route path= \"/upload\" component={Upload}/&gt;\n  &lt;Route path= \"/\" component={Home}/&gt;\n&lt;/Switch&gt;</code></p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/pages-all.png\" /></p>\n<h4><code>\u2705.4.4.b</code> - Upload Page</h4>\n<p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p>\n<p><img alt=\"netlify_endpoint\" src=\"./tutorial/images/page-upload.png\" /></p>\n<p>As you can see <a href=\"./src/pages/Upload.js\">Upload.js</a> there are no component used.</p>\n<p>```html</p>\n<form onSubmit={handleSubmit}>\n    <div className='section'>\n<!-- rest is omitted --> \n```\n\n- Function to post to backend\n\n```javascript\n const handleSubmit = async (e) => {\n e.preventDefault()\n // Create payload\n const data =  {\n        id: id,\n        name: name,\n        username: username,\n        avatar: avatar,\n        is_followed: false,\n        video: video,\n        caption: caption,\n        likes: 0,\n        comments: 0,\n        timestamp: timestamp,\n        button_visible: false  \n  }\n  // Post Payload to Netlify functions\n  axios.post('/.netlify/functions/add', data)\n       .then((response) => { console.log(response)})\n       .catch((err) => { console.error(err)})\n```\n\n#### `\u2705.4.4.b` - Home Page\n\nThe page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.\n\n![netlify_endpoint](./tutorial/images/react-components.png)\n\nMore on [Home.js](./src/pages/Home.js).\n\n## LAB 5 - Netlify Deployments\n\n### 5.1 - Connect Netlify to your site\n\nExecute each of the commands below to link your code to your Netlify deployment.\n  * First thing, we'll need to **STOP** the `netlify dev` command we issued a moment ago. In the terminal where you executed the netlify command issue a `CTRL-C` (control key + the C key) in order to stop the process.\n  * Then continue with the following commands\n  * This will pop up a browser to authenticate with netlify\n\n#### `\u2705.5.1.a` - Authenticate in Netlify\n\n```\nnetlify login\n```\n\n_Note, when using GitPod the preview pane will not display this properly. You must click the \"open in a new window\" button in the very top right of the preview pane._\n\n![swaggerui_link](./tutorial/images/netlify_login.png)\n\n> \ud83d\udda5\ufe0f `Output`\n> \n> ```bash\n> Logging into your Netlify account...\n> Opening https://app.netlify.com/authorize?response_type=ticket&ticket=774701161c326912e718b3a86096f375\n> You are now logged into your Netlify account!\n> Run netlify status for account details\n> To see all available commands run: netlify help\n> ```\n\n- Link your workspace to the associated site with the command Below\n\n```\nnetlify link\n```\n\n- It will display a MENU where you can move UP and DOWN with arrows. Pick first choice\n\n```\n> Use current git remote origin (https://github ...`\n```\n\n![swaggerui_link](./tutorial/images/netlify-link.png?raw=true)\n\n> \ud83d\udda5\ufe0f `Output`\n> ```bash\n> netlify link will connect this folder to a site on Netlify\n> ? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)\n> Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...\n> Directory Linked\n> Admin url: https://app.netlify.com/sites/fanciful-licorice-ea1437\n> Site url:  https://fanciful-licorice-ea1437.netlify.app\n> You can now run other `netlify` cli commands in this directory\n>```\n\n#### `\u2705.5.1.b` - Import configuration in site\n\n* This will take the `.env` file created by astra-setup and upload it to netlify\n\n```\nnetlify env:import .env\n```\n\n### 5.2 - Deploy to production\n\nNow that you've hooked everything up, time to deploy to production.\n\n* Run\n\n```\nnetlify build\n```\n\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build                                                 \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> \u276f Version\n>   @netlify/build 28.4.5\n>\n> \u276f Flags\n>   dry: false\n>   offline: false\n>\n> \u276f Current directory\n>   /workspace/workshop-astra-tik-tok\n>\n> \u276f Config file\n>   /workspace/workshop-astra-tik-tok/netlify.toml\n>\n> \u276f Context\n>   production\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   1. build.command from netlify.toml                            \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> $ npm run build\n> \n> tik-tok-stargate@0.1.0 build\n> react-scripts build\n>\n> Creating an optimized production build...\n> Compiled successfully.\n>\n> File sizes after gzip:\n>\n>   616.87 KB  build/static/js/2.82b8325c.chunk.js\n>   2.32 KB    build/static/js/main.fd7c93f3.chunk.js\n>   966 B      build/static/css/main.9d8c5499.chunk.css\n>   780 B      build/static/js/runtime-main.f09b770f.js\n>\n> The project was built assuming it is hosted at /.\n> You can control this with the homepage field in your package.json.\n> \n> The build folder is ready to be deployed.\n> You may serve it with a static server:\n>\n>  npm install -g serve\n>  serve -s build\n>\n> Find out more about deployment here:\n>\n>   https://cra.link/deployment\n>\n>\n> (build.command completed in 35.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   2. Functions bundling                                         \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> Packaging Functions from functions directory:\n>  - add.js\n>  - addData.js\n>  - edit.js\n>  - posts.js\n>\n>\n> (Functions bundling completed in 6.1s)\n>\n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>   Netlify Build Complete                                        \n> \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n>\n> (Netlify Build completed in 41.3s)\n> ```\n\n- Then run\n\n```\nnetlify deploy --prod\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Deploy path:        /workspace/workshop-astra-tik-tok/build\n> Functions path:     /workspace/workshop-astra-tik-tok/functions\n> Configuration path: /workspace/workshop-astra-tik-tok/netlify.toml\n> Deploying to main site URL...\n> \u2714 Deploying functions from cache (use --skip-functions-cache to override)\n> \u2714 Finished hashing 17 files and 4 functions\n> \u2714 CDN requesting 0 files and 4 functions\n> \u2714 Finished uploading 4 assets\n> \u2714 Deploy is live!\n>\n> Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455\n> Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.app\n> Website URL:       https://fanciful-licorice-ea1437.netlify.app\n> gitpod /workspace/workshop-astra-tik-tok (master) $ \n```\n\n- Then finally run\n\n```\nnetlify open:site\n```\n\n> \ud83d\udda5\ufe0f `Output`\n> ```\n> Opening \"fanciful-licorice-ea1437\" site url:\n> https://fanciful-licorice-ea1437.netlify.app\n> ```\n\n## Extra Resources\n\n#### Video tutorial with Ania Kubow\n\nThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.\n\nWhile we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.\n\n#### Running Astra DB Tik-Tok\nWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).\n\nFollow the instructions below to get started.\n\n#### If you did like this video, please hit the Like and Subscribe button so I know to make more!\n- Twitter: https://twitter.com/ania_kubow\n- YouTube: https://youtube.com/aniakubow\n- Instagram: https://instagram.com/aniakubow"
        },
        {
            "code": "W015",
            "name": "Netflix Application",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/d3rt3TUlQw-GBb1ethVnzg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/d3rt3TUlQw-GBb1ethVnzg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1neLRpSiNxqQs_vEoDJ7l05KOVWJzu1CU"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-graphql-netflix"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134150"
                ]
            }
        },
        {
            "code": "W016",
            "name": "React Native",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/7tNZR8zwQkS3gXVi0jLJ0w/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/7tNZR8zwQkS3gXVi0jLJ0w/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1QXerOGOImq-U_2nxwXuiBVMMOYS8Xe_n"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-todo-native-mobile"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973146"
                ]
            }
        },
        {
            "code": "W017",
            "name": "VueJS and TypeScript",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6-MkoHDYS1erN3aLT8n7gg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6-MkoHDYS1erN3aLT8n7gg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1o-SeO00oyszgjWrMpjQ-DK4OpewTkaFQ"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-vuejs"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973147"
                ]
            }
        },
        {
            "code": "W018",
            "name": "Introduction to GraphQL",
            "tags": [
                "graphql api",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Wp93l6JnTUG6w-b7f6KT9w/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1UEgbHHRPu5W79E5N6FO2emK424r3BSkH"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-graphql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1768638"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=0yLysXQNJ1g"
                ]
            }
        },
        {
            "code": "W019",
            "name": "Introduction to NoSQL",
            "tags": [
                "cassandra",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1XpYXADz39jP0NUwN4aq1_yyFqYCA12hq"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-nosql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1710373"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1B2sEsHrQcjj7TxR9reNZLoJ0LI7NBgeMk1IpgVvF2jM/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=rhzUrejsA4A"
                ]
            }
        },
        {
            "code": "W020",
            "name": "Pulsar and Astra Streaming",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/XHV8YAGkSGSZdVIB4ojv5A/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/XHV8YAGkSGSZdVIB4ojv5A/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/13_d2AvKotYkIkTQTJrta_cTcE9y-JE3m"
                ],
                "github": [
                    "#gid=1827917007"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973117"
                ]
            }
        },
        {
            "code": "W021",
            "name": "Cassandra and Quarkus",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://badgr.com/public/assertions/O_7Dcl7ySCiWJasmtnJaNw"
                ],
                "heroimage": "https://badgr.com/public/assertions/O_7Dcl7ySCiWJasmtnJaNw",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1wD15nv9KwwjtIVPrQ2YmejajcxLOilRj"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-quarkus-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1397809"
                ]
            }
        },
        {
            "code": "W022",
            "name": "Todo Application (Spring Data)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6WpOvdPQR4CF5jcJf5tjEg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6WpOvdPQR4CF5jcJf5tjEg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/167Mf0WSRTEhcD8tywONFZqWGd_-RQH-e"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-data-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973108"
                ]
            }
        },
        {
            "code": "W023",
            "name": "eCommerce Application",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1qRm2k12ugxH0H4ZnMKWYAARALcc-voch"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ecommerce-app"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1495817"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1MgVCGoe31OjFrQkg0VaiQnTPPj6h0mPqlnanBHvPe0s/edit?usp=sharing"
                ]
            }
        },
        {
            "code": "W024",
            "name": "Stargate Wheel App (Spring Data)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/badge.png?raw=true"
                ],
                "heroimage": "https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/badge.png?raw=true",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1-wAY_jtez3eNDKElovTPy_pCv6LIXeb1"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-stargate"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973138"
                ]
            }
        },
        {
            "code": "W025",
            "name": "PetClinic App (Spring, Reactive)",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/QNo4Nsq5QAyo7NJsgRY1Bg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/QNo4Nsq5QAyo7NJsgRY1Bg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1VzvQ2vbJQVoPU75E41NT2VnJliN4v3Or"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-reactive"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973087"
                ]
            }
        },
        {
            "code": "W026",
            "name": "NLP as an API - Text classification using Keras, FastAPI and NoSQL",
            "tags": [
                "ai",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1bOYZsmF6l7M_qmgjizXRBrUhsSa-Fk2Z"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ai-as-api"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1585505"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1ZzK86Zw7izsn5sgq1-n7tSVveqV0HPAuKtyQtwDGKrg/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=3LQBJP3JL6A"
                ]
            }
        },
        {
            "code": "W027",
            "name": "Build a Multiplayer Real-time Game with Astra Streaming",
            "tags": [
                "streaming",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/11BMPKnpCnEpTa5PCpNLbOuapP5X5Ze_P"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-game"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1432915"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/17_D6IFIxgkzvCb59pdeI2zoMphKCNF45BwAdlAvoBo0/edit#slide=id.p"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jfOBPlcd9eA"
                ]
            }
        },
        {
            "code": "W028",
            "name": "Better Reads (Spring)",
            "tags": [
                "spring",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LOZuswpVQKejngXt5We_rw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1W2u_Wdrs7aqBQ3dfkLEE0Mygu18-QuWU"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-betterreads"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973089"
                ]
            }
        },
        {
            "code": "W029",
            "name": "Introduction to Streaming and CDC",
            "tags": [
                "change data capture",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Ynj_SX6PS6p9XyUbIXnB03GYuRnjcNFM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-streaming-and-cdc"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973152"
                ]
            }
        },
        {
            "code": "W030",
            "name": "Real-Time Data pipelines",
            "tags": [
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ZpDnGf53rvCDovVOZMVf8UyphZTdTJhR"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-realtime-data-pipelines"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1858607"
                ]
            }
        },
        {
            "code": "W031",
            "name": "Swift, IOS and Document API",
            "tags": [
                "workshop"
            ],
            "urls": {
                "slides": [
                    "https://drive.google.com/drive/folders/1K6XtDFET9ujOzQKMHzK-RYNP2-ZSsjbF?usp=sharing"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-IOS-Swift-Astra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1807858"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1KHysoOwoohnHnA8Qz5yMmk20cNZvupZr3Rh_DbUyXvw/edit#"
                ]
            }
        },
        {
            "code": "W032",
            "name": "Quine and Astra DBIn progress 10/19",
            "tags": [
                "graph",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-graph-quine"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1884439"
                ]
            }
        },
        {
            "code": "W033",
            "name": "Quarkus Spring and Micronaut",
            "tags": [
                "workshop"
            ],
            "urls": {
                "slides": [
                    "https://drive.google.com/drive/u/0/folders/1tm2ynxcNv22TmhhbvXUpL4I4514WGgar"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-spring-quarkus-micronaut-cassandra"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973120"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/todo-native-mobile"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/todo-native-mobile/master/hero.png"
            },
            "tags": [
                "javascript",
                "workshop",
                "apps"
            ],
            "name": "React Native Todo List, an Astra DB + Netlify Workshop",
            "description": "A workshop where you build a React Native Todo application using DataStax Astra DB.",
            "duration": "40 minutes",
            "skilllevel": "Intermediate",
            "priority": 2
        }
    ],
    "count": 35
}
{'documentId': 'workshop'}
SUCCESS
{
    "name": "java",
    "apps": [
        {
            "name": "Spring Data Astra DB REST API",
            "summary": "REST API with Spring data and spring-mvc",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-data-starter/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-data-starter"
                ],
                "gitpod": [
                    "https://dtsx.io/2QjoULs"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "starters"
            ],
            "description": "This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Spring Data Cassandra REST API</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">Start Building</a></em></p>\n<p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Run a REST API that connects to DataStax Astra DB</li>\n</ul>\n<h2>How this works</h2>\n<p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">https://github.com/DataStax-Examples/spring-data-starter</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running Spring Data Cassandra REST API</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38HWu73\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/spring-data-starter\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>\n<p>Click the 'Open in Gitpod' link:\n<a href=\"https://dtsx.io/2QjoULs\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</li>\n<li>\n<p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png\" /></p>\n</li>\n<li>\n<p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png\" /></p>\n</li>\n<li>\n<p>You've successfully build a Spring Data Cassandra application!\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n</li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Reactive PetClinic, using Spring WebFlux and Astra DB",
            "summary": "Clone of Petclinic with spring webflux, java drivers connected to Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-petclinic-reactive"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-webflux"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "labs",
                "apps"
            ],
            "description": "This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Reactive Implementation of \ud83d\udc08 Spring PetClinic \ud83d\udc15</h1>\n<p><em>15 minutes, Intermediate, <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites\">Start Building</a></em></p>\n<p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png\" /></p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite\">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p>\n<!--- STARTEXCLUDE --->\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38yYuif\">DataStax Astra DB account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"GITHUB_URL\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a>\n  - <a href=\"#deploying-to-vercel\">Deploying to Vercel</a>\n  - <a href=\"#deploying-to-netlify\">Deploying to Netlify</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>Click the 'Open in Gitpod' link:\n<a href=\"https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "name": "Killrvideo Java",
            "summary": "Clone of youtube using DSE and java drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-java"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "grpc",
                " spring",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "Cedrick Lunven",
            "apis": [],
            "tags": [
                "java",
                "grpc"
            ]
        },
        {
            "name": "From driver 3x to 4x",
            "summary": "Sample codes to illustrate part of java drivers and migrations",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/DataStax-Examples/java-cassandra-driver-from3x-to4x"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                ""
            ],
            "usecases": "N/A",
            "owner": "Cedrick Lunven",
            "apis": [],
            "tags": [
                "java"
            ]
        },
        {
            "code": "W003",
            "name": "Drivers and App Development",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/zlJu1hFlR3SBhwmROwX8ug/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ONw8hG0_oh7bXEv4vMk9Biuq1qQqdzP4"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-application-development"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973141"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1Jd0nISIBIAnmp7yHDS8Ot0X6RXIuaQiy6eCnW_WezMc/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jCq0Eg0RnLU"
                ]
            }
        },
        {
            "code": "W023",
            "name": "eCommerce Application",
            "tags": [
                "java",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/By3medzRRv6DYaPPJrOEyw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1qRm2k12ugxH0H4ZnMKWYAARALcc-voch"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ecommerce-app"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1495817"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1MgVCGoe31OjFrQkg0VaiQnTPPj6h0mPqlnanBHvPe0s/edit?usp=sharing"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "java",
                "spring",
                "apps"
            ],
            "name": "Getting Started with Java + Spring + Astra DB",
            "description": "This provides an example REST backend built in Java using Spring Boot for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "java",
                "apps"
            ],
            "name": "Astra + Java 101",
            "description": "Minimal code sample to work ASTRA in Java.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/betterreads-webapp"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/betterreads-webapp/master/hero.jpeg"
            },
            "tags": [
                "java",
                "spring",
                "apps"
            ],
            "name": "BetterReads Spring App",
            "description": "Companion code for the Java Brains \"code with me\" series that reads data from DataStax Astra DB.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-ide-plugin/master/hero.jpeg"
            },
            "tags": [
                "jetbrains",
                "java",
                "tools"
            ],
            "name": "JetBrains Astra DB Plugin",
            "description": "A Jetbrains plugin that allows you to connect and explore your data on Astra DB or any Apache Cassandra cluster running with Stargate.",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        }
    ],
    "count": 10
}
{'documentId': 'java'}
SUCCESS
{
    "name": "starters",
    "apps": [
        {
            "name": "Spring Data Astra DB REST API",
            "summary": "REST API with Spring data and spring-mvc",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-data-starter/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-data-starter"
                ],
                "gitpod": [
                    "https://dtsx.io/2QjoULs"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-data"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "starters"
            ],
            "description": "This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Spring Data Cassandra REST API</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">Start Building</a></em></p>\n<p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n<h2>Objectives</h2>\n<ul>\n<li>Run a REST API that connects to DataStax Astra DB</li>\n</ul>\n<h2>How this works</h2>\n<p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-data-starter#prerequisites\">https://github.com/DataStax-Examples/spring-data-starter</a></p>\n<!--- STARTEXCLUDE --->\n<h1>Running Spring Data Cassandra REST API</h1>\n<p>Follow the instructions below to get started.</p>\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38HWu73\">DataStax Astra account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"https://github.com/DataStax-Examples/spring-data-starter\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>\n<p>Click the 'Open in Gitpod' link:\n<a href=\"https://dtsx.io/2QjoULs\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n</li>\n<li>\n<p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png\" /></p>\n</li>\n<li>\n<p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png\" /></p>\n</li>\n<li>\n<p>You've successfully build a Spring Data Cassandra application!\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png\" /></p>\n</li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + Azure Functions + Astra using Node.js",
            "description": "This example shows how to use Azure Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + AWS Lambda + Astra using Node.js",
            "description": "This example shows how to use AWS Lambda with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "javascript",
                "nodejs driver",
                "starters"
            ],
            "name": "Google Cloud Functions + Astra DB using Node.js",
            "description": "This example shows how to use Google Cloud Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/3iX75yf"
                ],
                "netlify": [
                    "https://dtsx.io/3aZJLxa"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-gatsbyjs-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "graphql api",
                "starters"
            ],
            "name": "Astra DB and Gatsby.js Starter",
            "description": "Create a React.js, Gatsby application that reads data from DataStax Astra DB using GraphQL.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/2YtXWVU"
                ],
                "vercel": [
                    "https://dtsx.io/3aUg00p"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-next.js-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Next.js and Astra DB Starter",
            "description": "A sample Next.js + DataStax Astra DB starter app that integrates Astra DB with Next.js.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nodejs-starter"
                ]
            },
            "tags": [
                "javascript",
                "nodejs",
                "starters"
            ],
            "name": "Astra + NodeJS Starter",
            "description": "Bootstrap your next NodeJS app with an Astra integration.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/glitch-astra-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Glitch and Astra DB Starter",
            "description": "Jumpstart your next React/Express prototype with this starter!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        }
    ],
    "count": 8
}
{'documentId': 'starters'}
SUCCESS
{
    "name": "labs",
    "apps": [
        {
            "name": "Reactive PetClinic, using Spring WebFlux and Astra DB",
            "summary": "Clone of Petclinic with spring webflux, java drivers connected to Astra",
            "urls": {
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png",
                "github": [
                    "https://github.com/DataStax-Examples/spring-petclinic-reactive"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "spring-boot",
                " spring-webflux"
            ],
            "usecases": "Order Management",
            "owner": "Cedrick Lunven",
            "apis": [
                "CQL"
            ],
            "tags": [
                "java",
                "spring",
                "labs",
                "apps"
            ],
            "description": "This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>Reactive Implementation of \ud83d\udc08 Spring PetClinic \ud83d\udc15</h1>\n<p><em>15 minutes, Intermediate, <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites\">Start Building</a></em></p>\n<p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png\" /></p>\n<h2>Get Started</h2>\n<p>To build and play with this app, follow the build instructions that are located here: <a href=\"https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite\">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p>\n<!--- STARTEXCLUDE --->\n<h2>Prerequisites</h2>\n<p>Let's do some initial setup by creating a serverless(!) database.</p>\n<h3>DataStax Astra</h3>\n<ol>\n<li>\n<p>Create a <a href=\"https://dtsx.io/38yYuif\">DataStax Astra DB account</a> if you don't already have one:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png\" /></p>\n</li>\n<li>\n<p>On the home page. Locate the button <strong><code>Create Database</code></strong>\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png\" /></p>\n</li>\n<li>\n<p>Locate the <strong><code>Get Started</code></strong> button to continue\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png\" /></p>\n</li>\n<li>\n<p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png\" /></p>\n</li>\n<li>\n<p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> \ud83d\udca5\ud83d\udca5\ud83d\udca5 \n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png\" /></p>\n</li>\n<li>\n<p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png\" /></p>\n</li>\n<li>\n<p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png\" /></p>\n</li>\n<li>\n<p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png\" /></p>\n</li>\n<li>\n<p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png\" /></p>\n</li>\n</ol>\n<h3>Github</h3>\n<ol>\n<li>\n<p>Click <code>Use this template</code> at the top of the <a href=\"GITHUB_URL\">GitHub Repository</a>:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png\" /></p>\n</li>\n<li>\n<p>Enter a repository name and click 'Create repository from template':\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png\" /></p>\n</li>\n<li>\n<p>Clone the repository:\n<img alt=\"image\" src=\"https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png\" /></p>\n</li>\n</ol>\n<h2>\ud83d\ude80 Getting Started Paths:</h2>\n<p><em>Make sure you've completed the <a href=\"#prerequisites\">prerequisites</a> before starting this step</em>\n  - <a href=\"#running-on-gitpod\">Running on Gitpod</a>\n  - <a href=\"#deploying-to-vercel\">Deploying to Vercel</a>\n  - <a href=\"#deploying-to-netlify\">Deploying to Netlify</a></p>\n<h3>Running on Gitpod</h3>\n<ol>\n<li>Click the 'Open in Gitpod' link:\n<a href=\"https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive\"><img alt=\"Open in IDE\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></li>\n</ol>\n<!--- ENDEXCLUDE --->"
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "c#",
                "apps"
            ],
            "name": "Getting Started with Cassandra + C# + Astra",
            "description": "This provides an example REST backend built in C# using .NET Core 2.1 for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "java",
                "spring",
                "apps"
            ],
            "name": "Getting Started with Java + Spring + Astra DB",
            "description": "This provides an example REST backend built in Java using Spring Boot for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "python",
                "python driver",
                "apps"
            ],
            "name": "Getting Started with Python + Astra DB",
            "description": "This sample Python backend provides a REST API service that is used with the Getting Started with Astra UI to show a simple example of how to connect to and query DataStax Astra DBs.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + Azure Functions + Astra using Node.js",
            "description": "This example shows how to use Azure Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "javascript",
                "starters"
            ],
            "name": "Cassandra + AWS Lambda + Astra using Node.js",
            "description": "This example shows how to use AWS Lambda with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "cql",
                "ds-bulk",
                "tools"
            ],
            "name": "Loading Data into Astra DB with DataStax Bulk Loader",
            "description": "If you're trying to load data into Astra from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the DataStax Bulk Loader.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "java",
                "apps"
            ],
            "name": "Astra + Java 101",
            "description": "Minimal code sample to work ASTRA in Java.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-spark-migration/master/hero.png"
            },
            "tags": [
                "labs",
                "scala",
                "tools"
            ],
            "name": "Spark Migration Tool for Astra DB",
            "description": "Migrate data from an existing Cassandra cluster to Astra DB using a Spark application.",
            "duration": "40 minutes",
            "skilllevel": "Expert",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "python",
                "javascript",
                "apps"
            ],
            "name": "Doom Patrol, an Astra + Kepler.gl App",
            "description": "Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io#https://github.com/DataStax-Examples/astra-loom"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-loom/master/hero.png"
            },
            "tags": [
                "labs",
                "elixir",
                "apps"
            ],
            "name": "Astra DB Loom",
            "description": "Loom is a thread based chat server, where users can send messages to one or more threads via hashtags (ex. I'm heading to the park at noon #family #friends #frisbee_club ).",
            "duration": "60 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 11
}
{'documentId': 'labs'}
SUCCESS
{
    "name": "spark",
    "apps": [
        {
            "name": "Datastax Bulk Loader Demo",
            "summary": "",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo"
            },
            "language": [
                ""
            ],
            "stack": [
                "Spark"
            ],
            "usecases": "N/A",
            "owner": "Chris Whilhite",
            "apis": [],
            "tags": [
                "spark"
            ]
        }
    ],
    "count": 1
}
{'documentId': 'spark'}
SUCCESS
{
    "name": "grpc",
    "apps": [
        {
            "name": "Killrvideo Java",
            "summary": "Clone of youtube using DSE and java drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-java"
                ]
            },
            "language": [
                "Java"
            ],
            "stack": [
                "grpc",
                " spring",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "Cedrick Lunven",
            "apis": [],
            "tags": [
                "java",
                "grpc"
            ]
        },
        {
            "name": "Killrvideo Python",
            "summary": "Clone of youtube using DSE and python drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-python"
                ]
            },
            "language": [
                "Python"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "python",
                "grpc"
            ]
        },
        {
            "name": "Killrvideo CSharp",
            "summary": "Clone of youtube using DSE and csharp drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-csharp"
                ]
            },
            "language": [
                "CSharp"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "csharp",
                "grpc"
            ]
        },
        {
            "name": "Kiillrvideo NodeJS",
            "summary": "Clone of youtube using DSE and nodeJS drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-nodejs"
                ]
            },
            "language": [
                "JavaScript"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "javascript",
                "grpc"
            ]
        }
    ],
    "count": 4
}
{'documentId': 'grpc'}
SUCCESS
{
    "name": "python",
    "apps": [
        {
            "name": "Killrvideo Python",
            "summary": "Clone of youtube using DSE and python drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-python"
                ]
            },
            "language": [
                "Python"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "python",
                "grpc"
            ]
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "python",
                "python driver",
                "apps"
            ],
            "name": "Getting Started with Python + Astra DB",
            "description": "This sample Python backend provides a REST API service that is used with the Getting Started with Astra UI to show a simple example of how to connect to and query DataStax Astra DBs.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "python",
                "javascript",
                "apps"
            ],
            "name": "Doom Patrol, an Astra + Kepler.gl App",
            "description": "Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"
                ]
            },
            "tags": [
                "python",
                "django",
                "video",
                "apps"
            ],
            "name": "Build a Blog With Django and Astra DB",
            "description": "Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg"
            },
            "tags": [
                "python",
                "selenium",
                "video",
                "apps"
            ],
            "name": "Build a Website Scraper with Astra DB + Python",
            "description": "Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, & FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg"
            },
            "tags": [
                "python",
                "machine-learning",
                "video",
                "apps"
            ],
            "name": "AI as an API",
            "description": "Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 6
}
{'documentId': 'python'}
SUCCESS
{
    "name": "csharp",
    "apps": [
        {
            "name": "Killrvideo CSharp",
            "summary": "Clone of youtube using DSE and csharp drivers",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo",
                "github": [
                    "https://github.com/KillrVideo/killrvideo-csharp"
                ]
            },
            "language": [
                "CSharp"
            ],
            "stack": [
                "grpc",
                " drivers"
            ],
            "usecases": "Digital Library",
            "owner": "no maintenance",
            "apis": [],
            "tags": [
                "csharp",
                "grpc"
            ]
        }
    ],
    "count": 1
}
{'documentId': 'csharp'}
SUCCESS
{
    "name": "elixir",
    "apps": [
        {
            "name": "AstraDB Loom",
            "summary": "",
            "urls": {
                "heroimage": "https://yt3.googleusercontent.com/ytc/AMLnZu99z7O76h-EBAOloogUjeaXsi0HN-2YaiixWxAjyw=s176-c-k-c0x00ffffff-no-rj-mo"
            },
            "language": [
                "Elixir"
            ],
            "stack": [
                ""
            ],
            "usecases": "Chat Server",
            "owner": "Chris Wilhite",
            "apis": [],
            "tags": [
                "elixir"
            ]
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io#https://github.com/DataStax-Examples/astra-loom"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-loom/master/hero.png"
            },
            "tags": [
                "labs",
                "elixir",
                "apps"
            ],
            "name": "Astra DB Loom",
            "description": "Loom is a thread based chat server, where users can send messages to one or more threads via hashtags (ex. I'm heading to the park at noon #family #friends #frisbee_club ).",
            "duration": "60 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 2
}
{'documentId': 'elixir'}
SUCCESS
{
    "name": "apache cassandra",
    "apps": [
        {
            "code": "W001",
            "name": "Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals",
            "tags": [
                "apache cassandra",
                "cql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/140-5Cz21Z897ArtF63crXbJY3ypcHyXa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-cassandra",
                    "https://github.com/datastaxdevs/workshop-cassandra-fundamentals"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134126"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1VZDIS6L_K4w9X8oOitzBStV1xVRPbQXtin6aWB7jqt8/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=EVpeqOnsDnU"
                ]
            }
        },
        {
            "code": "W002",
            "name": "Cassandra Data Modelling",
            "tags": [
                "apache cassandra",
                "cql",
                "data modeling",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/104L7gBEzpgzrXg472D0q-85PnDU0xBMl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-data-modeling"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/764223"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1pkpY6IDkYuHguer7kXJB3vgqvX2OjVTGswvAwUsSHtU/edit#"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=xrDfE74QnSE"
                ]
            }
        }
    ],
    "count": 2
}
{'documentId': 'apache cassandra'}
SUCCESS
{
    "name": "cql",
    "apps": [
        {
            "code": "W001",
            "name": "Introduction to NoSQL Apache Cassandra for App Developers* Introduction to Cassandra* Cassandra Fundamentals",
            "tags": [
                "apache cassandra",
                "cql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/RW0Am093TlaDJBDitqOzjQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/140-5Cz21Z897ArtF63crXbJY3ypcHyXa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-to-cassandra",
                    "https://github.com/datastaxdevs/workshop-cassandra-fundamentals"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1134126"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1VZDIS6L_K4w9X8oOitzBStV1xVRPbQXtin6aWB7jqt8/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=EVpeqOnsDnU"
                ]
            }
        },
        {
            "code": "W002",
            "name": "Cassandra Data Modelling",
            "tags": [
                "apache cassandra",
                "cql",
                "data modeling",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/104L7gBEzpgzrXg472D0q-85PnDU0xBMl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-data-modeling"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/764223"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1pkpY6IDkYuHguer7kXJB3vgqvX2OjVTGswvAwUsSHtU/edit#"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=xrDfE74QnSE"
                ]
            }
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "cql",
                "ds-bulk",
                "tools"
            ],
            "name": "Loading Data into Astra DB with DataStax Bulk Loader",
            "description": "If you're trying to load data into Astra from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the DataStax Bulk Loader.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        }
    ],
    "count": 3
}
{'documentId': 'cql'}
SUCCESS
{
    "name": "data modeling",
    "apps": [
        {
            "code": "W002",
            "name": "Cassandra Data Modelling",
            "tags": [
                "apache cassandra",
                "cql",
                "data modeling",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/104L7gBEzpgzrXg472D0q-85PnDU0xBMl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-cassandra-data-modeling"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/764223"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1pkpY6IDkYuHguer7kXJB3vgqvX2OjVTGswvAwUsSHtU/edit#"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=xrDfE74QnSE"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'data modeling'}
SUCCESS
{
    "name": "astra db",
    "apps": [
        {
            "code": "W005",
            "name": "Storage Attached Index (SAI)",
            "tags": [
                "astra db",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1eXCZkejddut_BaMr8fTVc-D5iwggJqkM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-storage-attached-indexes"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973142"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1fTrT1BTX6ORKunBze3l88ptonCZg7x0VIGfWP5fvRLE/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=GLJc1Uz9dqw"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'astra db'}
SUCCESS
{
    "name": "ml",
    "apps": [
        {
            "code": "W006",
            "name": "Introduction to Machine Learning with Apache Spark and Apache Cassandra",
            "tags": [
                "ml",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png"
                ],
                "heroimage": "https://media.badgr.com/uploads/badges/d9dc7f9c-da38-41ff-aea4-e9ffc1c1cbe1.png",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1iuZ2d3TduHL4q0pRgI-UP_SB6lNRAarM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-machine-learning"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1829591"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1YGHay-6x3XEF0BZhohrEFe4KXgm84etBB6hNu1ke_ws/edit#slide=id.g14709f5edc7_0_3213"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=KLccQKxWZ4Y"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'ml'}
SUCCESS
{
    "name": "performance testing",
    "apps": [
        {
            "code": "W007",
            "name": "Benchmark your database with NoSQLBench",
            "tags": [
                "performance testing",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Am0bzHvSTSm4hCceusS2IA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Y7izOZOwcQfXvt-OJTwZtqdEO1vDDghe"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-nosqlbench"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973143"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1QBqlmG5K5s7i28iX_Wagnwfr1pCoTvpjJAeEGqG7EII/edit#slide=id.p"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'performance testing'}
SUCCESS
{
    "name": "certification",
    "apps": [
        {
            "code": "W010",
            "name": "Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification",
            "tags": [
                "certification",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1E_s-doK5RXO3MvL8tc-v-dj5u0asUD9b"
                ],
                "github": [
                    "https://github.com/DataStax-Academy/workshop-cassandra-certification",
                    "https://github.com/DataStax-Academy/workshop-k8ssandra-certification"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973145"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1bVGQ85jz70uh4L7arkmwTWG_rRWPqOMbTlHXMY7wg-M/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing",
                    "https://docs.google.com/document/d/1JZtIgFtSDXCnyR1-d6Gz-r7RkacMxT1W_u84hRxJCgs/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=ZA-NBczakqk",
                    "https://www.youtube.com/watch?v=JT1Dljbfmz8"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'certification'}
SUCCESS
{
    "name": "nosql",
    "apps": [
        {
            "code": "W012",
            "name": "From SQL to NoSQL",
            "tags": [
                "nosql",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/AuVCajxCS0eXFYb2aCRqxA/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1KP6ltv8AwRBQNroaOTfMXv-o_NM8GJYa"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-sql-to-nosql-migration"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973105"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1C1lJpj_gkUsRtueL2JrY1S2M4fNdGSBe1M23l6Mlnjg/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=tNvBjY8izSk"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'nosql'}
SUCCESS
{
    "name": "rest api",
    "apps": [
        {
            "code": "W013",
            "name": "ToDo App using JAMStack, Netlify, and AstraDB",
            "tags": [
                "workshop",
                "javascript",
                "rest api",
                "apps"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/oxe83LqpTnG4tkMATfwOqg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1ASQIUFRBY1PduuImqh88kn4V2ahIMvKl"
                ],
                "github": [
                    "https://github.com/datastaxdevs/appdev-week1-todolist"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973103"
                ],
                "gitpod": [
                    "https://dtsx.io/3gtADSq"
                ],
                "netlify": [
                    "https://dtsx.io/2EtfGty"
                ]
            },
            "description": "This is an example React To-Do application using a DataStax Astra free tier database.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 2,
            "readme": "<!--- STARTEXCLUDE --->\n<h1>TODO + Astra + Cassandra \ud83d\udcd2</h1>\n<p><em>10 minutes, Beginner, <a href=\"https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites\">Start Building</a></em></p>\n<p>This is an example React To-Do application using a <a href=\"https://astra.dev/9-9\">DataStax Astra</a> free tier database.</p>\n<!--- ENDEXCLUDE --->\n\n<p><img alt=\"image\" src=\"https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT\" /></p>\n<h2>\ud83c\udfaf Objectives</h2>\n<ul>\n<li>Create a \"from scratch\" <strong>React</strong> app using NPX</li>\n<li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li>\n<li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li>\n<li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API </li>\n<li>Leverage Netlify and DataStax Astra DB</li>\n</ul>\n<h2>\u2139\ufe0f Frequently asked questions \u2139\ufe0f</h2>\n<ul>\n<li><em>Can I run the workshop on my computer?</em></li>\n</ul>\n<blockquote>\n<p>There is nothing preventing you from running the workshop on your own machine.\nIf you do so, you will need\n* git installed on your local system\n* <a href=\"https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/\">node 15 and npm 7 or later</a></p>\n<p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p>\n</blockquote>\n<ul>\n<li>\n<p><em>What other prerequisites are there?</em></p>\n<blockquote>\n<ul>\n<li>You will need a github account</li>\n<li>You will also need an Astra DB account, but we'll work through that in the exercises</li>\n<li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Do I need to pay for anything for this workshop?</em></p>\n<blockquote>\n<ul>\n<li><strong>No.</strong> All tools and services we provide here are FREE.</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><em>Will I get a certificate if I attend this workshop?</em></p>\n</li>\n</ul>\n<blockquote>\n<p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p>\n</blockquote>\n<h2>Materials for the Session</h2>\n<p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p>\n<ul>\n<li><a href=\"./slides.pdf\">Slide deck</a></li>\n<li><a href=\"https://bit.ly/cassandra-workshop\">Discord chat</a></li>\n<li><a href=\"https://community.datastax.com/\">Questions and Answers</a></li>\n</ul>\n<h2>Homework</h2>\n<p><img src=\"https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true\" width=\"200\" align=\"right\" /></p>\n<p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p>\n<ol>\n<li>Complete the practice steps from this repository as described below.</li>\n<li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href=\"https://github.com/datastaxdevs/react-basics\">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li>\n<li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li>\n<li>Submit your homework <a href=\"https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E\">here</a>. Note:\n<em>never share your Astra DB tokens!</em></li>\n</ol>\n<p>That's it, you are done! Expect an email next week!</p>\n<h1>Let's start</h1>\n<h2>Table of contents</h2>\n<ol>\n<li><a href=\"#1-login-or-register-to-astradb-and-create-database\">Login or Register to AstraDB and create database</a></li>\n<li><a href=\"#2-create-a-security-token\">Create a security token</a></li>\n<li><a href=\"#3-create-a-table-with-rest-api-using-swagger\">Create a table with REST API using Swagger</a></li>\n<li><a href=\"#4-insert-data-in-the-table-with-the-rest-api-using-swagger\">Insert data in the Table with the REST API using Swagger</a></li>\n<li><a href=\"#5-retrieving-values\">Retrieving values</a></li>\n<li><a href=\"#6-launch-gitpod-ide\">Launch GitPod IDE</a></li>\n<li><a href=\"#7-launch-the-todo-app\">Launch the TODO app</a></li>\n</ol>\n<h2>An introduction to web development</h2>\n<h3>CodePen starter examples</h3>\n<ul>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/WNjrXXp\">HTML</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/QWvyOOv\">CSS</a></li>\n<li><a href=\"https://codepen.io/DatastaxDevs/pen/mdmVRwy\">Javascript</a></li>\n</ul>\n<h2>1. Login or Register to AstraDB and create database</h2>\n<p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.  </p>\n<h3>\u2705 Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>\n<p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p>\n<p><a href=\"https://astra.dev/9-9\"><img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true\" /></a>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true\" />\n</details></p>\n<p><strong>Use the following values when creating the database</strong>\n|Field| Value|\n|---|---|\n|<strong>database name</strong>| <code>todos_workshop_db</code> |\n|<strong>keypace</strong>| <code>todos</code> |\n|<strong>Cloud Provider</strong>| <em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em> |</p>\n<p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p>\n<p>You will see your new database <code>pending</code> in the Dashboard.</p>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true\" /></p>\n<p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>2. Create a security token</h2>\n<p>\u2705  <strong>Step 2a:</strong>  <a href=\"https://docs.datastax.com/en/astra/docs/manage-application-tokens.html\">Create a token for your app</a> to use in the settings screen. Use \"Database Administrator\" permission.</p>\n<p>\u2705  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p>\n<p><strong>\ud83d\udc41\ufe0f Expected output</strong>\n- <details><summary>Show me!</summary>\n    <img src=\"https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true\" />\n</details></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>3. Create a table with REST API using Swagger</h2>\n<p>\u2705  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by \n1. Click on your active database\n2. Click <code>Connect</code> TAB\n3. Click <code>REST API</code>\n4. Clik link to your swagger endpoint.</p>\n<p><em>As shown on the picture below.</em>\n<img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p>\n<ol>\n<li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true\" /></p>\n<ol>\n<li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section. </li>\n<li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>. </li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true\" /></p>\n<ol>\n<li>Click the \"Try it out\" button</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true\" /></p>\n<ol>\n<li>\n<p>Finally, copy the create table statement using the code below into the <strong>body</strong> field\n<code>json\n{\n  \"name\": \"restfromreadme_by_id\",\n  \"ifNotExists\": true,\n  \"columnDefinitions\": [\n    {\n      \"name\": \"id\",\n      \"typeDefinition\": \"uuid\",\n      \"static\": false\n    },\n    {\n      \"name\": \"text\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n    {\n      \"name\": \"key\",\n      \"typeDefinition\": \"text\",\n      \"static\": false\n    },\n        {\n          \"name\": \"completed\",\n          \"typeDefinition\": \"boolean\"\n        }\n  ],\n  \"primaryKey\": {\n    \"partitionKey\": [\n      \"id\"\n    ]\n  }\n}</code></p>\n</li>\n<li>\n<p>And click <strong>execute</strong> to apply the command and create the table</p>\n</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true\" /></p>\n<p>You should see a <strong>201</strong> response telling you it correctly created the \"restfromreadme_by_id\" table.</p>\n<p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>4. Insert data in the Table with the REST API using Swagger</h2>\n<p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p>\n<p>\u2705  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p>\n<ol>\n<li>Scroll down and navigate to the <strong>data</strong> section</li>\n<li>Then find <strong>Add row</strong> and click it to open the section</li>\n<li>Also take note this is using a <strong>POST</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 4b:</strong> FIll in values and add a row</p>\n<ol>\n<li>Add your Astra token</li>\n<li>Add the keyspaceName <code>todos</code></li>\n<li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true\" /></p>\n<ol>\n<li>Copy the following JSON into the <strong>body</strong></li>\n</ol>\n<p><code>json\n{\"id\":\"57dbd260-d905-11eb-b985-c522859819b9\",\"completed\":false,\"text\":\"TODO FROM README\",\"key\":\"none\"}</code></p>\n<ol>\n<li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li>\n</ol>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>5. Retrieving values</h2>\n<p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p>\n<p>\u2705  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p>\n<ol>\n<li>Scroll up within the <strong>data</strong> section</li>\n<li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li>\n<li>Take note this is using a <strong>GET</strong> command.</li>\n<li>Click <strong>Try it out</strong> just like we did previously</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true\" /></p>\n<p>\u2705  <strong>Step 5b:</strong> Execute the command to display the data</p>\n<ol>\n<li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li>\n<li>Enter the <strong>keyspaceName</strong> <code>todos</code></li>\n<li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li>\n</ol>\n<p><img alt=\"image\" src=\"https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true\" /></p>\n<ol>\n<li>Click <strong>Execute</strong></li>\n<li>View the end result data that should be exactly what we created in the previous step</li>\n</ol>\n<p><img alt=\"image\" src=\"https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true\" /></p>\n<p><a href=\"#table-of-contents\">\ud83c\udfe0 Back to Table of Contents</a></p>\n<h2>6. Launch GitPod IDE</h2>\n<ul>\n<li>Click the button to launch the GitPod IDE.</li>\n</ul>\n<p><a href=\"https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/\"><img alt=\"Open in Gitpod\" src=\"https://gitpod.io/button/open-in-gitpod.svg\" /></a></p>\n<h1>Need a refresher on React Basics?</h1>\n<details><summary>Take me to the React stuff</summary>\n  We've created a separate repo going over the Basics of React. To get there, click the link below.\n\n  [GOTO React-Basics](https://github.com/datastaxdevs/react-basics)\n\n  When you're done, just click on the \"Back to Main\" breadcrumb to come back here.\n</details>\n\n<h2>7. Launch the TODO app</h2>\n<p>\u2705  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p>\n<p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href=\"#2-create-a-security-token\">the instructions above</a></p>\n<p>\u2705  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p>\n<ol>\n<li>Create <code>.env</code> file</li>\n</ol>\n<p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.\n<code>bash\nnpm exec astra-setup todos_workshop_db todos</code></p>\n<ol>\n<li>\ud83d\udc69\u200d\ud83d\udcbb  Install all the packages</li>\n</ol>\n<p><code>bash\nnpm install -g netlify-cli</code></p>\n<p>\u2705  <strong>Step 7c:</strong> Launch your app\n  * Run the application \n  <code>netlify dev</code>\n  * The application should automatically launch in the GitPod preview pane</p>\n<h3>Things to Note:</h3>\n<ul>\n<li>The contents of this repo are based on <a href=\"https://github.com/tjake/todo-astra-react-serverless/\">Jake's port</a> of the <a href=\"https://github.com/tastejs/todomvc/tree/master/examples/react\">TodoMVC code</a> originally written by <a href=\"https://github.com/petehunt\">Pete Hunt</a>.</li>\n<li>The example is modified from https://github.com/huksley/todo-react-ssr-serverless.</li>\n</ul>\n<!--- ENDEXCLUDE --->"
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://dtsx.io/2YtXWVU"
                ],
                "vercel": [
                    "https://dtsx.io/3aUg00p"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-next.js-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Next.js and Astra DB Starter",
            "description": "A sample Next.js + DataStax Astra DB starter app that integrates Astra DB with Next.js.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/glitch-astra-starter/master/hero.png"
            },
            "tags": [
                "javascript",
                "rest api",
                "starters"
            ],
            "name": "Glitch and Astra DB Starter",
            "description": "Jumpstart your next React/Express prototype with this starter!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        }
    ],
    "count": 3
}
{'documentId': 'rest api'}
SUCCESS
{
    "name": "cassandra",
    "apps": [
        {
            "code": "W019",
            "name": "Introduction to NoSQL",
            "tags": [
                "cassandra",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/LbRRYqXOQIanLfV05nP8Ow/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1XpYXADz39jP0NUwN4aq1_yyFqYCA12hq"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-introduction-to-nosql"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1710373"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/1B2sEsHrQcjj7TxR9reNZLoJ0LI7NBgeMk1IpgVvF2jM/edit?usp=sharing"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=rhzUrejsA4A"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'cassandra'}
SUCCESS
{
    "name": "ai",
    "apps": [
        {
            "code": "W026",
            "name": "NLP as an API - Text classification using Keras, FastAPI and NoSQL",
            "tags": [
                "ai",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/Hx87KBhFTDK1BK1DUPRRPg/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1bOYZsmF6l7M_qmgjizXRBrUhsSa-Fk2Z"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-ai-as-api"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1585505"
                ],
                "abstract": [
                    "https://docs.google.com/document/d/1ZzK86Zw7izsn5sgq1-n7tSVveqV0HPAuKtyQtwDGKrg/edit"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=3LQBJP3JL6A"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'ai'}
SUCCESS
{
    "name": "streaming",
    "apps": [
        {
            "code": "W027",
            "name": "Build a Multiplayer Real-time Game with Astra Streaming",
            "tags": [
                "streaming",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/6EYVSdcSTfKyYnkXAZcmUw/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/11BMPKnpCnEpTa5PCpNLbOuapP5X5Ze_P"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-game"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1432915"
                ],
                "abstract": [
                    "https://docs.google.com/presentation/d/17_D6IFIxgkzvCb59pdeI2zoMphKCNF45BwAdlAvoBo0/edit#slide=id.p"
                ],
                "youtube": [
                    "https://www.youtube.com/watch?v=jfOBPlcd9eA"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'streaming'}
SUCCESS
{
    "name": "change data capture",
    "apps": [
        {
            "code": "W029",
            "name": "Introduction to Streaming and CDC",
            "tags": [
                "change data capture",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/OE7vzm9cRHyD1WbDI2BXdQ/image?imageVersion=1",
                "slides": [
                    "https://drive.google.com/drive/u/1/folders/1Ynj_SX6PS6p9XyUbIXnB03GYuRnjcNFM"
                ],
                "github": [
                    "https://github.com/datastaxdevs/workshop-intro-streaming-and-cdc"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1973152"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'change data capture'}
SUCCESS
{
    "name": "graph",
    "apps": [
        {
            "code": "W032",
            "name": "Quine and Astra DBIn progress 10/19",
            "tags": [
                "graph",
                "workshop"
            ],
            "urls": {
                "badge": [
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                    "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1"
                ],
                "heroimage": "https://api.badgr.io/public/badges/xMO8NpTGQKOO8ViIPifdQA/image?imageVersion=1",
                "github": [
                    "https://github.com/datastaxdevs/workshop-streaming-graph-quine"
                ],
                "menti": [
                    "https://www.mentimeter.com/app/folder/1884439"
                ]
            }
        }
    ],
    "count": 1
}
{'documentId': 'graph'}
SUCCESS
{
    "name": "c#",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ]
            },
            "tags": [
                "labs",
                "c#",
                "apps"
            ],
            "name": "Getting Started with Cassandra + C# + Astra",
            "description": "This provides an example REST backend built in C# using .NET Core 2.1 for use with the Getting Started with Astra UI.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'c'}
SUCCESS
{
    "name": "python driver",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "python",
                "python driver",
                "apps"
            ],
            "name": "Getting Started with Python + Astra DB",
            "description": "This sample Python backend provides a REST API service that is used with the Getting Started with Astra UI to show a simple example of how to connect to and query DataStax Astra DBs.",
            "duration": "50 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'python driver'}
SUCCESS
{
    "name": "nodejs driver",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "javascript",
                "nodejs driver",
                "starters"
            ],
            "name": "Google Cloud Functions + Astra DB using Node.js",
            "description": "This example shows how to use Google Cloud Functions with the Node.js DataStax Cassandra Driver to set up a basic REST API for a Cassandra database via HTTP Endpoints.",
            "duration": "30 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'nodejs driver'}
SUCCESS
{
    "name": "ds-bulk",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "cql",
                "ds-bulk",
                "tools"
            ],
            "name": "Loading Data into Astra DB with DataStax Bulk Loader",
            "description": "If you're trying to load data into Astra from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the DataStax Bulk Loader.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        }
    ],
    "count": 1
}
{'documentId': 'ds-bulk'}
SUCCESS
{
    "name": "tools",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png"
            },
            "tags": [
                "labs",
                "cql",
                "ds-bulk",
                "tools"
            ],
            "name": "Loading Data into Astra DB with DataStax Bulk Loader",
            "description": "If you're trying to load data into Astra from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the DataStax Bulk Loader.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-spark-migration/master/hero.png"
            },
            "tags": [
                "labs",
                "scala",
                "tools"
            ],
            "name": "Spark Migration Tool for Astra DB",
            "description": "Migrate data from an existing Cassandra cluster to Astra DB using a Spark application.",
            "duration": "40 minutes",
            "skilllevel": "Expert",
            "priority": 2
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/nf-data-explorer/master/hero.png"
            },
            "tags": [
                "javascript",
                "tools"
            ],
            "name": "Netflix Data Explorer",
            "description": "Launch Netlfix's Open Source Data Explorer in Gitpod and connect to your Astra DB instance!",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-ide-plugin/master/hero.jpeg"
            },
            "tags": [
                "jetbrains",
                "java",
                "tools"
            ],
            "name": "JetBrains Astra DB Plugin",
            "description": "A Jetbrains plugin that allows you to connect and explore your data on Astra DB or any Apache Cassandra cluster running with Stargate.",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        }
    ],
    "count": 4
}
{'documentId': 'tools'}
SUCCESS
{
    "name": "scala",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-spark-migration/master/hero.png"
            },
            "tags": [
                "labs",
                "scala",
                "tools"
            ],
            "name": "Spark Migration Tool for Astra DB",
            "description": "Migrate data from an existing Cassandra cluster to Astra DB using a Spark application.",
            "duration": "40 minutes",
            "skilllevel": "Expert",
            "priority": 2
        }
    ],
    "count": 1
}
{'documentId': 'scala'}
SUCCESS
{
    "name": "nodejs",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nodejs-starter"
                ]
            },
            "tags": [
                "javascript",
                "nodejs",
                "starters"
            ],
            "name": "Astra + NodeJS Starter",
            "description": "Bootstrap your next NodeJS app with an Astra integration.",
            "duration": "10 minutes",
            "skilllevel": "Beginner",
            "priority": 1
        }
    ],
    "count": 1
}
{'documentId': 'nodejs'}
SUCCESS
{
    "name": "django",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"
                ]
            },
            "tags": [
                "python",
                "django",
                "video",
                "apps"
            ],
            "name": "Build a Blog With Django and Astra DB",
            "description": "Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'django'}
SUCCESS
{
    "name": "video",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"
                ]
            },
            "tags": [
                "python",
                "django",
                "video",
                "apps"
            ],
            "name": "Build a Blog With Django and Astra DB",
            "description": "Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video.",
            "duration": "15 minutes",
            "skilllevel": "Intermediate",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg"
            },
            "tags": [
                "python",
                "selenium",
                "video",
                "apps"
            ],
            "name": "Build a Website Scraper with Astra DB + Python",
            "description": "Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, & FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg"
            },
            "tags": [
                "python",
                "machine-learning",
                "video",
                "apps"
            ],
            "name": "AI as an API",
            "description": "Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 3
}
{'documentId': 'video'}
SUCCESS
{
    "name": "netlify",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"
                ],
                "demo": [
                    "https://sag-telco-billing-app.netlify.app/"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Telco Billing App",
            "description": "An example of a telcom app dashboard, built with React and Netlify.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        },
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"
                ]
            },
            "tags": [
                "javascript",
                "react",
                "netlify",
                "apps"
            ],
            "name": "Build an Astra DB RPG",
            "description": "This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 2
}
{'documentId': 'netlify'}
SUCCESS
{
    "name": "nextjs",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nextjs-tutorial/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nextjs-tutorial"
                ]
            },
            "tags": [
                "javascript",
                "nextjs",
                "apps"
            ],
            "name": "NextJS Fullstack Tutorial",
            "description": "Create a fullstack NextJS app while following along with the tutorial video and blogpost from Eddie Jaoude.",
            "duration": "30 minutes",
            "skilllevel": "Advanced",
            "priority": 2
        }
    ],
    "count": 1
}
{'documentId': 'nextjs'}
SUCCESS
{
    "name": "nuxtjs",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"
                ]
            },
            "tags": [
                "javascript",
                "nuxtjs",
                "nestjs",
                "apps"
            ],
            "name": "NuxtJS + NestJS Fullstack Tutorial",
            "description": "Create a fullstack NuxtJS + NestJS app while following along with the tutorial video from Eddie Jaoude.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'nuxtjs'}
SUCCESS
{
    "name": "nestjs",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg",
                "gitpod": [
                    "https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"
                ]
            },
            "tags": [
                "javascript",
                "nuxtjs",
                "nestjs",
                "apps"
            ],
            "name": "NuxtJS + NestJS Fullstack Tutorial",
            "description": "Create a fullstack NuxtJS + NestJS app while following along with the tutorial video from Eddie Jaoude.",
            "duration": "50 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'nestjs'}
SUCCESS
{
    "name": "selenium",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg"
            },
            "tags": [
                "python",
                "selenium",
                "video",
                "apps"
            ],
            "name": "Build a Website Scraper with Astra DB + Python",
            "description": "Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, & FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'selenium'}
SUCCESS
{
    "name": "machine-learning",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg"
            },
            "tags": [
                "python",
                "machine-learning",
                "video",
                "apps"
            ],
            "name": "AI as an API",
            "description": "Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI.",
            "duration": "180 minutes",
            "skilllevel": "Advanced",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'machine-learning'}
SUCCESS
{
    "name": "jetbrains",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/astra-ide-plugin/master/hero.jpeg"
            },
            "tags": [
                "jetbrains",
                "java",
                "tools"
            ],
            "name": "JetBrains Astra DB Plugin",
            "description": "A Jetbrains plugin that allows you to connect and explore your data on Astra DB or any Apache Cassandra cluster running with Stargate.",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 2
        }
    ],
    "count": 1
}
{'documentId': 'jetbrains'}
SUCCESS
{
    "name": "stargate documents api",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/weatherapp/master/hero.png"
            },
            "tags": [
                "javascript",
                "stargate documents api",
                "timeseries db",
                "apps"
            ],
            "name": "Using Stargate Documents API to build a TimeSeries DB API",
            "description": "A sample app that shows how the Stargate Documents API can be used to build a TimeSeries DB Abstraction on top of AstraDB",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'stargate documents api'}
SUCCESS
{
    "name": "timeseries db",
    "apps": [
        {
            "urls": {
                "github": [
                    "url"
                ],
                "heroimage": "https://raw.githubusercontent.com/DataStax-Examples/weatherapp/master/hero.png"
            },
            "tags": [
                "javascript",
                "stargate documents api",
                "timeseries db",
                "apps"
            ],
            "name": "Using Stargate Documents API to build a TimeSeries DB API",
            "description": "A sample app that shows how the Stargate Documents API can be used to build a TimeSeries DB Abstraction on top of AstraDB",
            "duration": "15 minutes",
            "skilllevel": "Beginner",
            "priority": 3
        }
    ],
    "count": 1
}
{'documentId': 'timeseries db'}

Starting Creds
Refreshing creds
Getting sample application links
Got sample application links
Getting sample application items
Got sample application items
Getting workshop links
Got workshop links
Getting workshop items
Got workshop items
Getting information for conference-2019-shiftdev-apis
Getting information for workshop-machine-learning
Getting information for conference-2020-javafest-api
Getting information for workshop-microservices-java
Getting information for workshop-intro-to-cassandra
Getting information for learningpath-docker
Getting information for shared-assets
Getting information for datastaxdevs.github.io
Getting information for workshop-spring-reactive
Getting information for workshop-cassandra-data-modeling
Getting information for workshop-storage-attached-indexes
Getting information for conference-2020-dataconla-stargate
Getting information for workshop-spring-data-cassandra
Getting information for workshop-pulsar
Getting information for learningpath-terraform-it
Getting information for workshop-your-k8s-to-cloud
Getting information for workshop-k8ssandra
Getting information for conference-2021-apidays-stargate
Getting information for demo-astra-java-quarkus
Getting information for workshop-introduction-to-nosql
Getting information for workshop-sql-to-nosql-migration
Getting information for workshop-spring-stargate
Getting information for netlify-astra-example
Getting information for workshop-social-media-tiktok
Getting information for workshop-graphql-netflix
Getting information for event-streaming-series
Getting information for demo-astra-sdk-java
Getting information for appdev-week1-todolist
Getting information for badgrbot
Getting information for react-basics
Getting information for workshop-faq
Getting information for workshop-battlestax
Getting information for workshop-todo-native-mobile
Getting information for workshop-intro-to-graphql
Getting information for conference-2021-apachecon-stargate
Getting information for workshop-streaming-game
Getting information for workshop-tiktok-codetour
Getting information for workshop-vuejs
Getting information for apiworld-stargate-tour
Getting information for workshop-intro-quarkus-cassandra
Getting information for quarkus-astra-intro-demo
Getting information for workshop-nosqlbench
Getting information for conf-grpc-rest-graphql-data-apis
Getting information for conference-2021-javazone
Getting information for bootcamp-fullstack-apps-with-cassandra
Getting information for workshop-ecommerce-app
Getting information for awesome-astra
Getting information for workshop-realtime-data-pipelines
Getting information for workshop-betterreads
Getting information for workshop-ai-as-api
Getting information for workshop-cassandra-driver-nodejs-portugues
Getting information for cdc-for-astra-guides
Getting information for conference-2022-devoxx-france
Getting information for workshop-intro-streaming-and-cdc
Getting information for advanced-cdc-for-astra
Getting information for feast-cassandra-online-store
Getting information for killercoda-scenarios
Getting information for webclicks-with-decodable-and-astra
Getting information for workshop-cassandra-application-development
Getting information for workshop-cassandra-fundamentals
Getting information for workshop-introduction-to-machine-learning
Getting information for workshop-IOS-Swift-Astra
Getting information for workshop-streaming-graph-quine
Getting information for cassandra-day
Getting information for workshop-spring-quarkus-micronaut-cassandra
Getting information for conference-2022-devoxx
Getting information for astra-and-startree-demo
Getting information for workshop-swinburne
Getting information for luna-streaming-examples
Getting information for workshop-python-astra-app
Getting information for datastax-content-repository
Getting information for Cassandra-Quarkus-Demo
Getting information for gallery_content_loader
Getting information for workshop-cassandra-data-modeling-tables-single-row-partitions
Getting information for workshop-cassandra-data-modeling-tables-multi-row-partitions
Getting information for workshop-cassandra-data-modeling-sensor-data
Getting information for k8ssandra-civo
Getting information for testing-markdown
Getting information for SparkBuildExamples
Getting information for datastax-examples-template
Getting information for how-to-create-an-example
Getting information for paging-graph-results-java
Getting information for getting-started-with-astra-csharp
Getting information for getting-started-with-astra-ui
Getting information for kafka-connector-sink-json
Getting information for getting-started-with-astra-java
Getting information for getting-started-with-astra-python
Getting information for azure-functions-nodejs
Getting information for aws-lambda-nodejs
Getting information for google-cloud-functions-nodejs
Getting information for kafka-connector-sink-avro
Getting information for cassandra-reactive-demo-java
Getting information for gremlin-reference-guides
Getting information for switch-connection-nodejs
Getting information for concurrent-requests-python
Getting information for forward-paging-restui-java
Getting information for graph-traversal-builder-java
Getting information for concurrent-requests-csharp
Getting information for intro-dsegraphframes
Getting information for tuples-nodejs
Getting information for blobs-java
Getting information for concurrent-requests-nodejs
Getting information for concurrent-requests-java
Getting information for object-mapper-nodejs
Getting information for random-paging-restui-java
Getting information for graphql-example-java
Getting information for switch-connection-csharp
Getting information for spark-kafka-streaming
Getting information for dsegraphframes-spark-filtering
Getting information for switch-connection-java
Getting information for prepared-statements-nodejs
Getting information for object-mapper-java
Getting information for dsbulk-to-astra
Getting information for object-mapper-csharp
Getting information for linq-csharp
Getting information for cluster-topology-java
Getting information for metrics-to-prometheus-java
Getting information for quickstart-java
Getting information for quickstart-python
Getting information for quickstart-nodejs
Getting information for quickstart-csharp
Getting information for quickstart-c
Getting information for java-cassandra-driver-from3x-to4x
Getting information for ex_bestpractices
Getting information for kong-charts
Getting information for iot-demo-java
Getting information for killrvideo-developerapis
Getting information for banking-iot-demo
Getting information for taxi-iot-demo
Getting information for geospatial-demo
Getting information for dc-latency-checker
Getting information for ticker-demo-python
Getting information for spring-k8s-cassandra-microservices
Getting information for todo-astra-jamstack-netlify
Getting information for astra-gatsbyjs-starter
Getting information for query-diagnostics
Getting information for astra-next.js-starter
Getting information for object-mapper-jvm
Getting information for spring-data-starter
Getting information for java-framework-compare
Getting information for all_astra_apis
Getting information for Astra101Java
Getting information for astra-spark-migration
Getting information for sai-demo
Getting information for crud-with-python-and-node
Getting information for astra-nodejs-starter
Getting information for spring-petclinic-reactive
Getting information for battlestax
Getting information for doom-patrol
Getting information for astra-tik-tok
Getting information for sample-app-template
Getting information for astradb-spring-rest
Getting information for astra-loom
Getting information for glitch-astra-starter
Getting information for astra-netflix
Getting information for fastsite-console
Getting information for nf-data-explorer
Getting information for todo-native-mobile
Getting information for django-cassandra-blog
Getting information for telco-billing-app
Getting information for astra-nextjs-tutorial
Getting information for astra-nuxtjs-nestjs
Getting information for python-website-scraper
Getting information for betterreads-webapp
Getting information for cassandra-cicd-example
Getting information for ai-as-an-api
Getting information for astra-samples-java-sdk
Getting information for astra-samples-java
Getting information for astra-ide-plugin
Getting information for rpg-astra
Getting information for spark-dsegf-identity-resolution
Getting information for dscryptocommerce-astradb
Getting information for spring-data-cassandra-dse
Getting information for grpc-drivers-demo-java
Getting information for weatherapp
Getting information for astra-cli-github-action
Getting information for springboot3-astrastreaming-db
SUCCESS for s73qwGaKyv0
{"kind": "youtube#video", "etag": "1xcBOmPiYo0zNEuQKSh8lkW0Jek", "id": "s73qwGaKyv0", "statistics": {"viewCount": "245232", "likeCount": "54", "favoriteCount": "0", "commentCount": "2"}}
SUCCESS for iy7SNKMXnLw
{"kind": "youtube#video", "etag": "or4jU0ai7BuoqLPEef1BZodhx2A", "id": "iy7SNKMXnLw", "statistics": {"viewCount": "730", "likeCount": "9", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for mYrUDSCXcR4
{"kind": "youtube#video", "etag": "oGkp1qn0Zv3h72NQcpswiZ5ugJI", "id": "mYrUDSCXcR4", "statistics": {"viewCount": "3246", "likeCount": "35", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for -MkFhtnT2d8
{"kind": "youtube#video", "etag": "5q-PkXuoNLUwnrAcSqaCaUrvbwA", "id": "-MkFhtnT2d8", "statistics": {"viewCount": "784", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for nkl1kHYyHP8
{"kind": "youtube#video", "etag": "zd6FWkImvLDsetbxnz7wsk9UEQM", "id": "nkl1kHYyHP8", "statistics": {"viewCount": "2495", "likeCount": "28", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for Dx6cqLCd93c
{"kind": "youtube#video", "etag": "4W0FLMxhFQVsSFXz0Iva4ZkbghI", "id": "Dx6cqLCd93c", "statistics": {"viewCount": "426", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for Np5RJpCiCzM
{"kind": "youtube#video", "etag": "nvt1Ra9ZkuJvrq8LYageelQOfgM", "id": "Np5RJpCiCzM", "statistics": {"viewCount": "5921", "likeCount": "58", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for AhNe--S_aTM
{"kind": "youtube#video", "etag": "C2v33UdaoynB7M3T4YhuYaNYQTM", "id": "AhNe--S_aTM", "statistics": {"viewCount": "374", "likeCount": "2", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for Zeva59Yu1iQ
{"kind": "youtube#video", "etag": "DVAh3vXHwn9KtbuZUfFxBGoTboQ", "id": "Zeva59Yu1iQ", "statistics": {"viewCount": "900", "likeCount": "4", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 8GyjWte2Saw
{"kind": "youtube#video", "etag": "8oVRGIKnXcUf-6mqD_6PAEpoNDQ", "id": "8GyjWte2Saw", "statistics": {"viewCount": "1036", "likeCount": "5", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for JkmpMczPzjU
{"kind": "youtube#video", "etag": "urdn1JlK0vRd-oKbuGzuJtiXvZA", "id": "JkmpMczPzjU", "statistics": {"viewCount": "761", "likeCount": "2", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for Jey504qdm-c
{"kind": "youtube#video", "etag": "fsv5J5L6g73GI1XBrlW_hEKhfDI", "id": "Jey504qdm-c", "statistics": {"viewCount": "8620", "likeCount": "66", "favoriteCount": "0", "commentCount": "3"}}
SUCCESS for SAGxMODAlEg
{"kind": "youtube#video", "etag": "bFwOrfdfPPvI39AP0Jk3oHPOxYM", "id": "SAGxMODAlEg", "statistics": {"viewCount": "3624", "likeCount": "25", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for mDd4I-isodE
{"kind": "youtube#video", "etag": "ykE7sWUVLiuuLDuH-sgpFFDg-y8", "id": "mDd4I-isodE", "statistics": {"viewCount": "3039", "likeCount": "25", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for mfJHFyFvs2M
{"kind": "youtube#video", "etag": "5Ch3MPVZ3k5UGDzwryopDEDEnmk", "id": "mfJHFyFvs2M", "statistics": {"viewCount": "2684", "likeCount": "24", "favoriteCount": "0", "commentCount": "2"}}
SUCCESS for w369PhOt1wc
{"kind": "youtube#video", "etag": "TK3ZU8uEHCa33zGcYYWZw1T_fZ0", "id": "w369PhOt1wc", "statistics": {"viewCount": "363", "likeCount": "7", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for zrJlojbxeXo
{"kind": "youtube#video", "etag": "MtoU6Fcnhb8fBDJFrxfJqPmpbIs", "id": "zrJlojbxeXo", "statistics": {"viewCount": "6481", "likeCount": "70", "favoriteCount": "0", "commentCount": "4"}}
SUCCESS for 1rb8d5gCSpw
{"kind": "youtube#video", "etag": "IjEWow2OmsZkVvkv52ri-10Bhww", "id": "1rb8d5gCSpw", "statistics": {"viewCount": "557", "likeCount": "40", "favoriteCount": "0", "commentCount": "1"}, "liveStreamingDetails": {"actualStartTime": "2022-03-16T16:00:10Z", "actualEndTime": "2022-03-16T16:40:22Z", "scheduledStartTime": "2022-03-16T16:00:00Z"}}
SUCCESS for TyTXOjFMi7k
{"kind": "youtube#video", "etag": "YPXsTvlup903l9h4OGv4ejQkWjI", "id": "TyTXOjFMi7k", "statistics": {"viewCount": "3642", "likeCount": "41", "favoriteCount": "0", "commentCount": "5"}}
SUCCESS for UtvS0V3uv-o
{"kind": "youtube#video", "etag": "2l8ZxrI_QUS2Cz13FkIn1THcFPA", "id": "UtvS0V3uv-o", "statistics": {"viewCount": "1266", "likeCount": "7", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for kMUP6s4Sd6Q
{"kind": "youtube#video", "etag": "7QecqDdGlXXhgCe3IEmoGJM_iX0", "id": "kMUP6s4Sd6Q", "statistics": {"viewCount": "1421", "likeCount": "11", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for w0zsV-qlPCE
{"kind": "youtube#video", "etag": "d2A3X1pBcFQj-K7wdEElh0xYVZ8", "id": "w0zsV-qlPCE", "statistics": {"viewCount": "1926", "likeCount": "13", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for oma4xwVbhvk
{"kind": "youtube#video", "etag": "7xZSrUvSH7g8ajHRYKyKN9qPN34", "id": "oma4xwVbhvk", "statistics": {"viewCount": "2733", "likeCount": "21", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for YjYWsN1vek8
{"kind": "youtube#video", "etag": "tOqdozKapKjLCuMRGUisGWsBPHM", "id": "YjYWsN1vek8", "statistics": {"viewCount": "53119", "likeCount": "843", "favoriteCount": "0", "commentCount": "23"}}
SUCCESS for sns5nc3IU5g
{"kind": "youtube#video", "etag": "LY2Wn6gBU1EHd06ImjAc6MGFusA", "id": "sns5nc3IU5g", "statistics": {"viewCount": "3034", "likeCount": "43", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for hzZ3nVrsEpM
{"kind": "youtube#video", "etag": "s0vDbP7XpH2LRw8UQB4Ab_QlG5c", "id": "hzZ3nVrsEpM", "statistics": {"viewCount": "2419", "likeCount": "16", "favoriteCount": "0", "commentCount": "3"}}
SUCCESS for _49wlA53L_8
{"kind": "youtube#video", "etag": "ePml9YkiarAuX7eAHDiBJoAW-vQ", "id": "_49wlA53L_8", "statistics": {"viewCount": "249", "likeCount": "12", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for pjzbkD4xc0o
{"kind": "youtube#video", "etag": "w_W6BX65__XeLSVSjuclYoA-Bxs", "id": "pjzbkD4xc0o", "statistics": {"viewCount": "417", "likeCount": "3", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for P8jPlppa_8I
{"kind": "youtube#video", "etag": "V_-9WptQqhXMfQu9s8gRIXAyVAg", "id": "P8jPlppa_8I", "statistics": {"viewCount": "1452", "likeCount": "14", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for IAvU1G_yokE
{"kind": "youtube#video", "etag": "VaMvUgVP7hqasUqTzXGNFHl0v2g", "id": "IAvU1G_yokE", "statistics": {"viewCount": "2547", "likeCount": "10", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for Gx-pmH-b5mI
{"kind": "youtube#video", "etag": "Sl9k8hhv7hfKedaZoMWtGKIv9k8", "id": "Gx-pmH-b5mI", "statistics": {"viewCount": "5096", "likeCount": "81", "favoriteCount": "0", "commentCount": "4"}}
SUCCESS for PcH9b0janp0
{"kind": "youtube#video", "etag": "3RHR1iXfnb-vGjHCYaS9MrZiyVM", "id": "PcH9b0janp0", "statistics": {"viewCount": "2622", "likeCount": "27", "favoriteCount": "0", "commentCount": "3"}}
SUCCESS for w2-PTw4FPGg
{"kind": "youtube#video", "etag": "VRXSZsHzD0hMtlWhi33shG3-yr0", "id": "w2-PTw4FPGg", "statistics": {"viewCount": "154", "likeCount": "3", "favoriteCount": "0", "commentCount": "0"}, "liveStreamingDetails": {"actualStartTime": "2017-06-21T18:03:49Z", "actualEndTime": "2017-06-21T18:23:05Z", "scheduledStartTime": "2017-06-21T18:00:00Z"}}
SUCCESS for -jbi_r5VKHw
{"kind": "youtube#video", "etag": "ANKk-zDwY5ZZ8xWKic7GJrxGAoY", "id": "-jbi_r5VKHw", "statistics": {"viewCount": "117", "likeCount": "3", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 7upnNTGkcCc
{"kind": "youtube#video", "etag": "SxIikuEMrDW4HxILpQ5V-tmbGs0", "id": "7upnNTGkcCc", "statistics": {"viewCount": "537", "likeCount": "3", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for D6PMEQAfjeU
{"kind": "youtube#video", "etag": "lrhc7dcuYI4AeCzqxaXU3EKt7SI", "id": "D6PMEQAfjeU", "statistics": {"viewCount": "796", "likeCount": "1", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for G01H_Gix6Dg
{"kind": "youtube#video", "etag": "2W5E0t05yc0HgrJe5KPMzrWPcek", "id": "G01H_Gix6Dg", "statistics": {"viewCount": "253", "likeCount": "2", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for BBE5ZWTPnnY
{"kind": "youtube#video", "etag": "eRFd9uxrrl6UHqD0fA5t5RiNMLE", "id": "BBE5ZWTPnnY", "statistics": {"viewCount": "278", "likeCount": "15", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 6yJEwqseMY4
{"kind": "youtube#video", "etag": "Z5-AMUw2NL6pGluNULBTkRKK53Q", "id": "6yJEwqseMY4", "statistics": {"viewCount": "4363", "likeCount": "69", "favoriteCount": "0", "commentCount": "6"}}
SUCCESS for 5g-XN9DKrVg
{"kind": "youtube#video", "etag": "1fOKahNz5tT3MMjv7niLx9kFefQ", "id": "5g-XN9DKrVg", "statistics": {"viewCount": "901", "likeCount": "9", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 69sHSF0iUqg
{"kind": "youtube#video", "etag": "0ADjrJnyQ6gANzQgpmIiFR9M5d8", "id": "69sHSF0iUqg", "statistics": {"viewCount": "4401", "likeCount": "36", "favoriteCount": "0", "commentCount": "3"}}
SUCCESS for OoCUcPtOEG0
{"kind": "youtube#video", "etag": "gJDjV073yB0yCqG7iTsfEIF10BY", "id": "OoCUcPtOEG0", "statistics": {"viewCount": "2034", "likeCount": "17", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for lNIrj9VuBQ0
{"kind": "youtube#video", "etag": "4u4wgrarMjcNE_-8jJOvQKpPvmE", "id": "lNIrj9VuBQ0", "statistics": {"viewCount": "2644", "likeCount": "29", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for pc-2-IueSUE
{"kind": "youtube#video", "etag": "cIcah_2d4eOZoulRtJYgSChpv_8", "id": "pc-2-IueSUE", "statistics": {"viewCount": "708", "likeCount": "15", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for WWI_L9znCMo
{"kind": "youtube#video", "etag": "qtkhf7ahDw_G_uT_Mem2un3ybLc", "id": "WWI_L9znCMo", "statistics": {"viewCount": "2563", "likeCount": "14", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for 4FEIyDtZF9c
{"kind": "youtube#video", "etag": "kOuGCHsteFe-1r3Zql0cU013qNE", "id": "4FEIyDtZF9c", "statistics": {"viewCount": "197", "likeCount": "12", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 8AoWhAhfuYk
{"kind": "youtube#video", "etag": "-yzt25uBfxOCpa5U3NoAMtFDlyQ", "id": "8AoWhAhfuYk", "statistics": {"viewCount": "15922", "likeCount": "245", "favoriteCount": "0", "commentCount": "13"}}
SUCCESS for vEk3VDC0J7k
{"kind": "youtube#video", "etag": "q9nqRwTnj5ewXSKQfM_x1Lsjwns", "id": "vEk3VDC0J7k", "statistics": {"viewCount": "4274", "likeCount": "41", "favoriteCount": "0", "commentCount": "6"}}
SUCCESS for x6g0sUi-5tw
{"kind": "youtube#video", "etag": "Mpuhjhf9Wd12g6Ujr3Wl9BJqeLM", "id": "x6g0sUi-5tw", "statistics": {"viewCount": "3078", "likeCount": "21", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for _W5VvxzoS6w
{"kind": "youtube#video", "etag": "fBYP3DUFP3RXbLvA4fcTbGsP7Zw", "id": "_W5VvxzoS6w", "statistics": {"viewCount": "8425", "likeCount": "183", "favoriteCount": "0", "commentCount": "16"}}
SUCCESS for 3N65GTQDF9A
{"kind": "youtube#video", "etag": "2K86ckPFRA_eRW-KhEnySJRaFKY", "id": "3N65GTQDF9A", "statistics": {"viewCount": "301", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for oK7yj2U2kEU
{"kind": "youtube#video", "etag": "vZ1exw3r5Gqb617GPbxqYfzo1Lk", "id": "oK7yj2U2kEU", "statistics": {"viewCount": "54", "likeCount": "0", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for yTm3KYMZhSo
{"kind": "youtube#video", "etag": "A4O5egnNMkPVgkTZpDybbDFaR6E", "id": "yTm3KYMZhSo", "statistics": {"viewCount": "1072", "likeCount": "7", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for k5b5TiafAAM
{"kind": "youtube#video", "etag": "ixJSTKkZTsgyu_kEq96cVfaevGk", "id": "k5b5TiafAAM", "statistics": {"viewCount": "2679", "likeCount": "24", "favoriteCount": "0", "commentCount": "4"}}
SUCCESS for IYZYDHD5jdA
{"kind": "youtube#video", "etag": "8c3kpJ9ib5OIWIuLeHlsUIwxK7k", "id": "IYZYDHD5jdA", "statistics": {"viewCount": "2917", "likeCount": "65", "favoriteCount": "0", "commentCount": "0"}, "liveStreamingDetails": {"actualStartTime": "2021-07-20T15:05:49Z", "actualEndTime": "2021-07-20T16:21:47Z", "scheduledStartTime": "2021-07-20T15:00:00Z"}}
SUCCESS for wctJbpEVNZI
{"kind": "youtube#video", "etag": "ll3INUcmwn4fUkJUhXbyN7U87gA", "id": "wctJbpEVNZI", "statistics": {"viewCount": "2066", "likeCount": "58", "favoriteCount": "0", "commentCount": "0"}, "liveStreamingDetails": {"actualStartTime": "2021-12-01T16:55:33Z", "actualEndTime": "2021-12-01T18:55:10Z", "scheduledStartTime": "2021-12-01T17:00:00Z"}}
SUCCESS for -CkHnVOiUN0
{"kind": "youtube#video", "etag": "6_YUEgaM3Wq2zvEskI1DQEhAP5A", "id": "-CkHnVOiUN0", "statistics": {"viewCount": "337", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for mDHT-yBOUUs
{"kind": "youtube#video", "etag": "tNIElIu_T5zGIL7EOCBunUirSsw", "id": "mDHT-yBOUUs", "statistics": {"viewCount": "1138", "likeCount": "32", "favoriteCount": "0", "commentCount": "0"}, "liveStreamingDetails": {"actualStartTime": "2021-05-04T14:06:06Z", "actualEndTime": "2021-05-04T17:03:21Z", "scheduledStartTime": "2021-05-04T14:00:00Z"}}
SUCCESS for f4OluFkBFOU
{"kind": "youtube#video", "etag": "idoTWW93mWpESr3OA_i5NwQrZvs", "id": "f4OluFkBFOU", "statistics": {"viewCount": "108", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for jCq0Eg0RnLU
{"kind": "youtube#video", "etag": "NzvtKQAa4i853Vq7Boa8uUtUwwk", "id": "jCq0Eg0RnLU", "statistics": {"viewCount": "795", "likeCount": "30", "favoriteCount": "0", "commentCount": "0"}, "liveStreamingDetails": {"actualStartTime": "2022-08-10T14:54:50Z", "actualEndTime": "2022-08-10T17:11:57Z", "scheduledStartTime": "2022-08-10T15:00:00Z"}}
SUCCESS for alcSZFcVvDk
{"kind": "youtube#video", "etag": "Sn_0QsFKp5ZJC4ZCr14iLJXEJwo", "id": "alcSZFcVvDk", "statistics": {"viewCount": "390", "likeCount": "4", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for lNIrj9VuBQ0
{"kind": "youtube#video", "etag": "4u4wgrarMjcNE_-8jJOvQKpPvmE", "id": "lNIrj9VuBQ0", "statistics": {"viewCount": "2644", "likeCount": "29", "favoriteCount": "0", "commentCount": "1"}}
SUCCESS for lY_eo00lvcU
{"kind": "youtube#video", "etag": "i0QV5GwbpfnYPAnKs8Y27nQq6Nw", "id": "lY_eo00lvcU", "statistics": {"viewCount": "200", "likeCount": "6", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for BWYKQHXfpsg
{"kind": "youtube#video", "etag": "uXG1rBZEtva-CaJ0UZPTr5iCJlk", "id": "BWYKQHXfpsg", "statistics": {"viewCount": "269", "likeCount": "4", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for NdLelsjqd9w
{"kind": "youtube#video", "etag": "PGlStuSsst5EVKmGFuzO5ukamBs", "id": "NdLelsjqd9w", "statistics": {"viewCount": "3496", "likeCount": "69", "favoriteCount": "0", "commentCount": "2"}, "liveStreamingDetails": {"actualStartTime": "2022-06-01T14:58:29Z", "actualEndTime": "2022-06-01T17:05:57Z", "scheduledStartTime": "2022-06-01T15:00:00Z"}}
SUCCESS for LTH0TsOe9y0
{"kind": "youtube#video", "etag": "eabA2pz6Anzl0pSPPcHDjWJEYNk", "id": "LTH0TsOe9y0", "statistics": {"viewCount": "74", "likeCount": "1", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 4ZqEA8MA7cI
{"kind": "youtube#video", "etag": "ywc85NbP3l-DnogHNC51dFB-i0c", "id": "4ZqEA8MA7cI", "statistics": {"viewCount": "707", "likeCount": "2", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for eGruCOlw3oQ
{"kind": "youtube#video", "etag": "OmR6-kxQDrUKwJh3pAFmuv1ZIN8", "id": "eGruCOlw3oQ", "statistics": {"viewCount": "1188", "likeCount": "10", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for 7iG_Q-dPIQU
{"kind": "youtube#video", "etag": "MLHlR97CNWVXHBxPZ-7OYObKPOY", "id": "7iG_Q-dPIQU", "statistics": {"viewCount": "2220", "likeCount": "12", "favoriteCount": "0", "commentCount": "0"}}
SUCCESS for D9lVeajae4U
{"kind": "youtube#video", "etag": "LR71jKJZEesqQ9oufnenTmf4DTo", "id": "D9lVeajae4U", "statistics": {"viewCount": "590", "likeCount": "4", "favoriteCount": "0", "commentCount": "0"}}
Getting astra.json for datastax/astra-sdk-java at 277
No astra.json for datastax/astra-sdk-java at 281
No astrajson for astra spring boot starter
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-software-development-kit"> </a>Astra Software Development Kit</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="overview"> </a>Overview</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2>
HTML FOR datastax-astra-sdk-java<h1><a class="anchor" aria-hidden="true" id="astra-software-development-kit"> </a>Astra Software Development Kit</h1><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><img src="https://img.shields.io/github/workflow/status/datastax/astra-sdk-java/Java%20SDK%20Tests" alt="GitHub Workflow Status" /><a href="https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-sdk/"><img src="https://maven-badges.herokuapp.com/maven-central/com.datastax.astra/astra-sdk/badge.svg" alt="Maven Central" /></a></p><img src="https://github.com/datastax/astra-sdk-java/blob/main/docs/img/astra-sdk-logo.png?raw/true" height="70"  align="left"/><h2><a class="anchor" aria-hidden="true" id="overview"> </a>Overview</h2><h4></h4><p>This SDK <em>(Software Development Kit)</em> makes it easy to call Stargate and/or Astra services using idiomatic Java APIs.</p><center><img src="https://github.com/datastax/astra-sdk-java/blob/main/docs/img/sdk-overview.png?raw/true" /></center><ul><li><p><strong>The Stargate SDK</strong> works with both Stargate standalone installations and Stargate deployed in Astra. With standalone Stargate deployments you will initialize the framework with the class <code>StargateClient</code> and provide a list of nodes (IP). To start locally please follow <a href="https://github.com/datastax/astra-sdk-java/wiki/Stargate-SDK-Quickstart">Stargate SDK quickstart</a> guide. The nodes will run in Docker.</p></li><li><p><strong>The Astra SDK</strong> reuses the previous library and setup the connection to work with AstraDB cloud-based service. You work with the class <code>AstraClient</code> (that configure <code>StargateClient</code> for you). As you can see on the figure below the <code>AstraClient</code> handles not only Stargate Apis but also Astra Devops Api and Apache Pulsar. To get started follow the <a href="https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart">Astra SDK quickstart</a> guide.</p></li><li><p><strong>The Astra Spring Boot Starter</strong>: Imported in a Spring Boot application, it configures both <code>Astra SDK</code> and <code>Spring Data Cassandra</code> to work with AstraDB. Configuration is read in <code>application.yaml</code>. The starter will initialize any beans you would need (<code>AstraClient</code>, <code>CqlSession</code>, <code>StargateClient</code>. To get started follow the <a href="https://github.com/datastax/astra-sdk-java/wiki/Spring-Boot-Starter-Quickstart">Astra Spring Boot Starter QuickStart</a> guide.</p></li></ul><h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2><ol><li><a href="https://github.com/datastax/astra-sdk-java/wiki/Stargate-SDK-Quickstart">QuickStart for Stargate</a></li><li><a href="https://github.com/datastax/astra-sdk-java/wiki/Astra-SDK-Quickstart">QuickStart for Astra</a></li><li><a href="https://github.com/datastax/astra-sdk-java/wiki/Spring-Boot-Starter-Quickstart">QuickStart for Astra Spring Boot Starter</a></li></ol>
SUCCESS SAVING README for datastax-astra-sdk-java
Getting astra.json for DataStax-Examples/astra-tik-tok at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="social-media-app-using-react-jamstack-and-astra-db"> </a>Social Media App using React, JAMStack and Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="video-content"> </a>Video Content:</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="if-you-did-like-this-video-please-hit-the-like-and-subscribe-button-so-i-know-to-make-more"> </a>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>
HTML FOR DataStax-Examples-astra-tik-tok<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="social-media-app-using-react-jamstack-and-astra-db"> </a>Social Media App using React, JAMStack and Astra DB</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart">Start Building</a></em></p><p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/2WMxoBQ">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><!--- STARTEXCLUDE ---><h3><a class="anchor" aria-hidden="true" id="video-content"> </a>Video Content:</h3><ul><li><a href="https://youtu.be/IATOicvih5A">https://youtu.be/IATOicvih5A</a></li><li>(00:00) Introduction</li><li>(03:05) Creating our Database on DataStax</li><li>(06:52) Setting up our App</li><li>(12:37) Routing Pages</li><li>(18:02) Creating Components</li><li>(28:32) Introduction to Data with Netlify and Stargate</li><li>(30:10) Introduction to using the astrajs/collections</li><li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li><li>(34:01) Adding authorization to access our Database</li><li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li><li>(50: 32) Viewing all our Data</li><li>(51:56) Rendering components based on our Data</li><li>(01:17:01) Editing our Data (following/unfollowing a user)</li><li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li></ul><h3><a class="anchor" aria-hidden="true" id="if-you-did-like-this-video-please-hit-the-like-and-subscribe-button-so-i-know-to-make-more"> </a>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3><ul><li>Twitter: <a href="https://twitter.com/ania_kubow">https://twitter.com/ania_kubow</a></li><li>YouTube: <a href="https://youtube.com/aniakubow">https://youtube.com/aniakubow</a></li><li>Instagram: <a href="https://instagram.com/aniakubow">https://instagram.com/aniakubow</a></li></ul><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-astra-tik-tok
Getting astra.json for DataStax-Examples/astra-netflix at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>Netflix Clone using Astra DB and GraphQL</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-netflix<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>Netflix Clone using Astra DB and GraphQL</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-netflix#quick-start">Start Building</a>, <a href="https://sag-astra-netflix.netlify.app">View Demo</a></em></p><p>Let's code a Netflix Clone with GraphQL Pagination!</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3sYwYUL">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Build a Netflix clone using GraphQL</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href="https://sag-astra-netflix.netlify.app">here</a>.</p><p>Follow along with Ania's <a href="https://www.youtube.com/watch?v=g8COh40v2jU">walkthrough video</a>.</p><p>Additionally, there is a workshop repository for this sample app <a href="https://github.com/datastaxdevs/appdev-week3-graphql">located here</a>.</p>
SUCCESS SAVING README for DataStax-Examples-astra-netflix
Getting astra.json for DataStax-Examples/todo-astra-jamstack-netlify at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-db-cassandra"> </a>JAMStack + Netlify + Astra DB + Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-todo-astra-jamstack-netlify<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-db-cassandra"> </a>JAMStack + Netlify + Astra DB + Cassandra</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start">Start Building</a></em></p><p>This is an example React To-Do application using a <a href="https://dtsx.io/2Yhvqtv">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ol start="0"><li><a href="https://dtsx.io/2Yhvqtv">Signup for DataStax Astra</a>, or login to your already existing account.</li></ol><!--- ENDEXCLUDE ---><ol><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> or use an existing one.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ol><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a fullstack development example using Astra DB as the storage backend</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p><p><a href="https://jamstack.org/">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>
SUCCESS SAVING README for DataStax-Examples-todo-astra-jamstack-netlify
Getting astra.json for DataStax-Examples/battlestax at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="battlestax"> </a>BattleStax</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-battlestax"> </a>Running BattleStax</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-the-full-game"> </a>Running the full game</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="tutorial-steps"> </a>Tutorial Steps</h2>
HTML FOR DataStax-Examples-battlestax<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="battlestax"> </a>BattleStax</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">Start Building</a></em></p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Deploy a scalable JAMStack app to production</li><li>Leverage a good CI/CD process to manage your JAMStack App</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>The BattleStax players watch a lobby screen while playing the game on their devices.</p><p><img src="https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png" alt="image" /></p><p><a href="https://jamstack.org/">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">https://github.com/DataStax-Examples/battlestax</a></p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-battlestax"> </a>Running BattleStax</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/3jGT8b4">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/battlestax">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="running-the-full-game"> </a>Running the full game</h2><p><em>Make sure you've completed the <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine">Running on your local machine</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><ol><li>Check out the <code>full-game</code> branch</li></ol><pre lang="sh"><code>git fetchgit checkout full-game</code></pre><ol start="2"><li><p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p></li><li><p>Make sure the package dependencies are installed</p></li></ol><pre lang="sh"><code># install dependenciesnpm install</code></pre><ol start="3"><li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.</li></ol><pre lang="sh"><code># start battlestax in dev modenpm run dev</code></pre><h2><a class="anchor" aria-hidden="true" id="tutorial-steps"> </a>Tutorial Steps</h2><p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p><p align="center"><a href="https://github.com/DataStax-Examples/battlestax/wiki"> <img src="https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798" /></a></p><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-battlestax
Getting astra.json for DataStax-Examples/spring-data-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="spring-data-cassandra-rest-api"> </a>Spring Data Cassandra REST API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-spring-data-cassandra-rest-api"> </a>Running Spring Data Cassandra REST API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3>
HTML FOR DataStax-Examples-spring-data-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="spring-data-cassandra-rest-api"> </a>Spring Data Cassandra REST API</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/spring-data-starter#prerequisites">Start Building</a></em></p><p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p><!--- ENDEXCLUDE ---><p><img src="https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Run a REST API that connects to DataStax Astra DB</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/spring-data-starter#prerequisites">https://github.com/DataStax-Examples/spring-data-starter</a></p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-spring-data-cassandra-rest-api"> </a>Running Spring Data Cassandra REST API</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/38HWu73">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/spring-data-starter">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-gitpod">Running on Gitpod</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3><ol><li><p>Click the 'Open in Gitpod' link:<a href="https://dtsx.io/2QjoULs"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></p></li><li><p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:<img src="https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png" alt="image" /></p></li><li><p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:<img src="https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png" alt="image" /></p></li><li><p>You've successfully build a Spring Data Cassandra application!<img src="https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png" alt="image" /></p></li></ol><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-spring-data-starter
Getting astra.json for DataStax-Examples/spring-petclinic-reactive at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="reactive-implementation-of-spring-petclinic"> </a>Reactive Implementation of 🐈 Spring PetClinic 🐕</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3>
HTML FOR DataStax-Examples-spring-petclinic-reactive<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="reactive-implementation-of-spring-petclinic"> </a>Reactive Implementation of 🐈 Spring PetClinic 🐕</h1><p><em>15 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites">Start Building</a></em></p><p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p><!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/38yYuif">DataStax Astra DB account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="GITHUB_URL">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-gitpod">Running on Gitpod</a></li><li><a href="#deploying-to-vercel">Deploying to Vercel</a></li><li><a href="#deploying-to-netlify">Deploying to Netlify</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3><ol><li>Click the 'Open in Gitpod' link:<a href="https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li></ol><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-spring-petclinic-reactive
Getting astra.json for KillrVideo/killrvideo-java at 277
No astra.json for KillrVideo/killrvideo-java at 281
No astrajson for Killrvideo Java
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="killrvideo-java"> </a>KillrVideo Java</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-latest-stable-build-of-killrvideo-java-is-a-href-https-github-com-killrvideo-killrvideo-java-tree-v2-1-0-v2-1-0-a-master-is-experimental-please-use-v2-1-0-if-you-attempting-to-follow-the-instructions-in-the-links-below"> </a>The latest stable build of KillrVideo Java is <a href="https://github.com/KillrVideo/killrvideo-java/tree/v2.1.0">v2.1.0</a>. Master is experimental. Please use v2.1.0 if you attempting to follow the instructions in the links below.</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="building-locally"> </a>Building Locally</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-locally"> </a>Running Locally</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="pull-requests-requests-for-more-examples"> </a>Pull Requests, Requests for More Examples</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="license"> </a>License</h2>
HTML FOR KillrVideo-killrvideo-java<h1><a class="anchor" aria-hidden="true" id="killrvideo-java"> </a>KillrVideo Java</h1><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a></p><p><a href="https://travis-ci.org/KillrVideo/killrvideo-java"><img src="https://travis-ci.org/KillrVideo/killrvideo-java.svg?branch=master" alt="Build Status" /></a></p><p>A reference application for Java developers looking to learn more about using <a href="http://cassandra.apache.org/">Apache Cassandra</a> and<a href="http://www.datastax.com/products/datastax-enterprise">DataStax Enterprise</a> in their applications and services. Learn more at <a href="https://killrvideo.github.io">Killrvideo</a>.</p><h2><a class="anchor" aria-hidden="true" id="the-latest-stable-build-of-killrvideo-java-is-a-href-https-github-com-killrvideo-killrvideo-java-tree-v2-1-0-v2-1-0-a-master-is-experimental-please-use-v2-1-0-if-you-attempting-to-follow-the-instructions-in-the-links-below"> </a>The latest stable build of KillrVideo Java is <a href="https://github.com/KillrVideo/killrvideo-java/tree/v2.1.0">v2.1.0</a>. Master is experimental. Please use v2.1.0 if you attempting to follow the instructions in the links below.</h2><h2><a class="anchor" aria-hidden="true" id="building-locally"> </a>Building Locally</h2><p><strong>Docker Way</strong></p><p><code>docker run -v ${PWD}:/opt/killrvideo-java -w /opt/killrvideo-java maven mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B</code></p><p><strong>Maven Way</strong></p><p><code>mvn install</code></p><h2><a class="anchor" aria-hidden="true" id="running-locally"> </a>Running Locally</h2><p>Use these guides to get started running KillrVideo locally on your development machine:</p><ul><li><a href="https://killrvideo.github.io/getting-started/">Getting Started with KillrVideo</a>: Follow this to setup common dependencies like Docker.</li><li><a href="https://killrvideo.github.io/docs/languages/java/">Getting Started with Java</a>: Follow this to get this Java coderunning.</li></ul><h2><a class="anchor" aria-hidden="true" id="pull-requests-requests-for-more-examples"> </a>Pull Requests, Requests for More Examples</h2><p>This project will continue to evolve along with Cassandra and you can expect that as Cassandra and the DataStaxdriver add new features. This sample application will try and provide examples of those.</p><p>We will gladly accept any pull requests for bug fixes, new features, etc.  and if you have a request for an examplethat you don't see in the code currently, send me a message <a href="https://twitter.com/SonicDMG">@SonicDMG</a> or <a href="https://twitter.com/clunven">@clunven</a> on Twitter or open an issue<a href="https://github.com/KillrVideo/killrvideo-java/issues">here</a> on GitHub.</p><h2><a class="anchor" aria-hidden="true" id="license"> </a>License</h2><p>Copyright 2018 David Gilardi, Cedrick Lunven, derived from original work by Duy Hai Doan</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at</p><p><a href="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</a></p><p>Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</p>
SUCCESS SAVING README for KillrVideo-killrvideo-java
Getting astra.json for KillrVideo/killrvideo-python at 277
No astra.json for KillrVideo/killrvideo-python at 281
No astrajson for Killrvideo Python
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="killrvideo-python"> </a>killrvideo-python</h1>
HTML FOR KillrVideo-killrvideo-python<h1><a class="anchor" aria-hidden="true" id="killrvideo-python"> </a>killrvideo-python</h1><p>Python implementation of KillrVideo service layer. Requires Python 3.</p><p>Install:</p><ul><li>Clone this repo<ul><li><code>git clone &lt;&gt;</code></li><li><code>cd killrvideo-python</code></li></ul></li></ul><p>Dependencies:</p><ul><li>To run the Python services, we recommend using <code>venv</code> to create a Python virtual environment, which leverages the contentsof <code>requirements.txt</code> to install the required Python libraries<ul><li><code>python3 -m venv venv</code></li><li><code>source venv/bin/activate</code></li></ul></li><li>Alternatively, you can build the dependencies locally by emulating the <code>pip install</code> commands in <code>Dockerfile</code>.</li></ul><p>Running Python services in Docker:</p><ul><li>Run the script to build the Docker container:<ul><li><code>scripts/docker-build.sh</code></li></ul></li><li>Run the services and supporting infrastructure in Docker<ul><li><code>docker-compose up -d</code></li></ul></li></ul><p>(Alternate) Running the Python Services on the host (not in docker):</p><ul><li>Run supporting infrastructure using Docker<ul><li><code>scripts/run-docker-backend-exernal.sh</code></li><li>Note this script makes use of the custom compose file <code>scripts/docker-compose-backend-external.yaml</code>, which references the environment variable <code>KILLRVIDEO_BACKEND</code>. The script sets this to the host IP.</li></ul></li><li>Run the Python services<ul><li>In your IDE or shell, set the environment variables <code>KILLRVIDEO_DSE_CONTACT_POINTS</code> and <code>KILLRVIDEO_KAFKA_BOOTSTRAP_SERVERS</code> to point to localhost (<code>127.0.0.1</code>)</li><li><code>python killrvideo/__init__.py</code></li><li>To stop the docker services, run <code>scripts/stop-docker-backend-external.sh</code></li></ul></li></ul><p>For more advanced Docker configuration options including metrics, volume storage and OpsCenter, see the <a href="https://github.com/KillrVideo/killrvideo-docker-common">killrvideo-docker-common</a> repository.</p>
SUCCESS SAVING README for KillrVideo-killrvideo-python
Getting astra.json for KillrVideo/killrvideo-csharp at 277
No astra.json for KillrVideo/killrvideo-csharp at 281
No astrajson for Killrvideo CSharp
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="killrvideo-c"> </a>KillrVideo C#</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-locally"> </a>Running Locally</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="pull-requests-requests-for-more-examples"> </a>Pull Requests, Requests for More Examples</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="license"> </a>License</h2>
HTML FOR KillrVideo-killrvideo-csharp<h1><a class="anchor" aria-hidden="true" id="killrvideo-c"> </a>KillrVideo C#</h1><p>A reference application for .NET developers looking to learn more about using <a href="http://cassandra.apache.org/">Apache Cassandra</a> and<a href="http://www.datastax.com/products/datastax-enterprise">DataStax Enterprise</a> in their applications and services. Learn more at <a href="https://killrvideo.github.io/">killrvideo.github.io</a>.</p><h2><a class="anchor" aria-hidden="true" id="running-locally"> </a>Running Locally</h2><p>Use these guides to get started running KillrVideo locally on your development machine:</p><ul><li><a href="https://killrvideo.github.io/getting-started/">Getting Started with KillrVideo</a>: Follow this to setup common dependencies like Docker.</li><li><a href="https://killrvideo.github.io/docs/languages/c-sharp/">Getting Started with C#</a>: Follow this to get this C# code running.</li></ul><h2><a class="anchor" aria-hidden="true" id="pull-requests-requests-for-more-examples"> </a>Pull Requests, Requests for More Examples</h2><p>This project will continue to evolve along with Cassandra and you can expect that as Cassandra and the DataStax driver add new features, this sample application will try and provide examples of those.  I'll gladly accept any pull requests for bug fixes, new features, etc.  and if you have a request for an example that you don't see in the code currently, send me a message <a href="https://twitter.com/LukeTillman">@LukeTillman</a> on Twitter or open an issue here on GitHub.</p><h2><a class="anchor" aria-hidden="true" id="license"> </a>License</h2><p>Copyright 2016-2019 Luke Tillman</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);you may not use this file except in compliance with the License.You may obtain a copy of the License at</p><p><a href="http://www.apache.org/licenses/LICENSE-2.0">http://www.apache.org/licenses/LICENSE-2.0</a></p><p>Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an &quot;AS IS&quot; BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.</p>
SUCCESS SAVING README for KillrVideo-killrvideo-csharp
Getting astra.json for KillrVideo/killrvideo-nodejs at 277
No astra.json for KillrVideo/killrvideo-nodejs at 281
No astrajson for Kiillrvideo NodeJS
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="killrvideo-node-js"> </a>KillrVideo Node.js</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-locally-using-docker"> </a>Running Locally using Docker</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="contributing-requests-for-more-examples"> </a>Contributing, Requests for More Examples</h2>
HTML FOR KillrVideo-killrvideo-nodejs<h1><a class="anchor" aria-hidden="true" id="killrvideo-node-js"> </a>KillrVideo Node.js</h1><p>A reference application for Node.js developers looking to learn more about using<a href="http://cassandra.apache.org/">Apache Cassandra</a> and <a href="http://www.datastax.com/products/datastax-enterprise">DataStax Enterprise</a> in their applications andservices. Learn more at <a href="https://killrvideo.github.io/">killrvideo.github.io</a>.</p><h2><a class="anchor" aria-hidden="true" id="running-locally-using-docker"> </a>Running Locally using Docker</h2><p>Running should be pretty straight-forward if you are familiar with docker and docker-compose</p><pre><code>&gt; docker-compose pull&gt; docker-compose build&gt; docker-compose up -d</code></pre><h2><a class="anchor" aria-hidden="true" id="contributing-requests-for-more-examples"> </a>Contributing, Requests for More Examples</h2><p>This project will continue to evolve along with Cassandra and you can expect that asCassandra, DSE, and the drivers add new features, this application will try and provideexamples of those.  We gladly accept any pull requests for bug fixes, new features, etc. andif you have a request for an example that you don't see in the code currently, feel free toopen an issue here on GitHub or send a message to <a href="https://twitter.com/LukeTillman">@LukeTillman</a> on Twitter.</p>
SUCCESS SAVING README for KillrVideo-killrvideo-nodejs
Getting astra.json for DataStax-Examples/java-cassandra-driver-from3x-to4x at 277
No astra.json for DataStax-Examples/java-cassandra-driver-from3x-to4x at 281
No astrajson for From driver 3x to 4x
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="java-driver-code-samples"> </a>Java Driver Code Samples</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="clipboard-table-of-content"> </a>:clipboard: Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-prerequisites"> </a>1. Prerequisites</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="java-development-kit-jdk-8"> </a>📦 Java Development Kit (JDK) 8</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="apache-maven"> </a>📦 Apache Maven</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="docker-local-installation"> </a>📦 Docker (local Installation)</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="add-docker-ce-repo"> </a>Add docker-ce repo</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="install"> </a>Install</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="enable-service"> </a>Enable service</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="get-status"> </a>Get Status</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="logout-lougin"> </a>Logout....Lougin</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="create-user"> </a>Create user</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="validation"> </a>Validation</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-start-local-cluster"> </a>2. Start Local Cluster</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="working-with-schema"> </a>Working with Schema</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="executing-queries"> </a>Executing Queries</h2>
HTML FOR DataStax-Examples-java-cassandra-driver-from3x-to4x<h1><a class="anchor" aria-hidden="true" id="java-driver-code-samples"> </a>Java Driver Code Samples</h1><ul><li><p><em>Latest V3 Driver</em>: <a href="https://maven-badges.herokuapp.com/maven-central/com.datastax.cassandra/cassandra-driver-mapping/"><img src="https://maven-badges.herokuapp.com/maven-central/com.datastax.cassandra/cassandra-driver-mapping/badge.svg" alt="Maven Central" /></a></p></li><li><p><em>Latest V4 Driver</em>: <a href="https://maven-badges.herokuapp.com/maven-central/com.datastax.oss/java-driver-core"><img src="https://maven-badges.herokuapp.com/maven-central/com.datastax.oss/java-driver-core/badge.svg" alt="Maven Central" /></a></p></li></ul><p>This repository contains a list of standalone classes illustrating each a dedicated feature of the <em>DataStax java driver</em>. The purpose is to provide you an extended list of code samples with explicit names to speed up you developments (with copy-paste). We implemented those for both driver 3.x <em>(previous oss)</em> and driver 4.x <em>(latest)</em></p><h2><a class="anchor" aria-hidden="true" id="clipboard-table-of-content"> </a>:clipboard: Table of content</h2><ol><li><a href="#1-prerequisites">Prerequisites</a></li><li><a href="#2-start-local-cluster">Start Local Cluster</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-prerequisites"> </a>1. Prerequisites</h2><h4><a class="anchor" aria-hidden="true" id="java-development-kit-jdk-8"> </a>📦 Java Development Kit (JDK) 8</h4><ul><li>Use the <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/install/install_overview.html">reference documentation</a> to install a <strong>Java Development Kit</strong></li><li>Validate your installation with</li></ul><pre lang="bash"><code>java --version</code></pre><h4><a class="anchor" aria-hidden="true" id="apache-maven"> </a>📦 Apache Maven</h4><ul><li>Use the <a href="https://maven.apache.org/install.html">reference documentation</a> to install <strong>Apache Maven</strong></li><li>Validate your installation with</li></ul><pre lang="bash"><code>mvn -version</code></pre><h4><a class="anchor" aria-hidden="true" id="docker-local-installation"> </a>📦 Docker (local Installation)</h4><p>Docker is an open-source project that automates the deployment of software applications inside containers by providing an additional layer of abstraction and automation of OS-level virtualization on Linux.</p><details><summary><b><img src="https://github.com/DataStax-Academy/kubernetes-workshop-online/blob/master/4-materials/images/windows32.png?raw=true" height="24"/> To install on windows</b></summary><a href="https://download.docker.com/win/stable/Docker%20Desktop%20Installer.exe">Docker Desktop for Windows Installer</a></details><details><summary><b><img src="https://github.com/DataStax-Academy/kubernetes-workshop-online/blob/master/4-materials/images/mac32.png?raw=true" height="24"/> To install on MAC</b></summary><a href="https://download.docker.com/mac/stable/Docker.dmg">Docker Desktop for MAC Installer</a> or <a href="https://download.docker.com/mac/stable/Docker.dmg">Homebrew</a><pre># Fetch latest version of homebrew and formula.brew update              # Tap the Caskroom/Cask repository from Github using HTTPS.brew tap caskroom/cask                # Searches all known Casks for a partial or exact match.brew search docker                    # Displays information about the given Caskbrew cask info docker# Install the given cask.brew cask install docker              # Remove any older versions from the cellar.brew cleanup# Validate installationdocker -v</pre></details><details><summary><b><img src="https://github.com/DataStax-Academy/kubernetes-workshop-online/blob/master/4-materials/images/linux32.png?raw=true" height="24"/>To install on linux (centOS) you can use the following commands</b></summary><pre># Remove if already installsudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine# Utilssudo yum install -y yum-utils<h1><a class="anchor" aria-hidden="true" id="add-docker-ce-repo"> </a>Add docker-ce repo</h1><p>sudo dnf config-manager --add-repo=<a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a></p><h1><a class="anchor" aria-hidden="true" id="install"> </a>Install</h1><p>sudo dnf -y  install docker-ce --nobest</p><h1><a class="anchor" aria-hidden="true" id="enable-service"> </a>Enable service</h1><p>sudo systemctl enable --now docker</p><h1><a class="anchor" aria-hidden="true" id="get-status"> </a>Get Status</h1><p>systemctl status  docker</p><h1><a class="anchor" aria-hidden="true" id="logout-lougin"> </a>Logout....Lougin</h1><p>exit</p><h1><a class="anchor" aria-hidden="true" id="create-user"> </a>Create user</h1><p>sudo usermod -aG docker $USERnewgrp docker</p><h1><a class="anchor" aria-hidden="true" id="validation"> </a>Validation</h1><p>docker imagesdocker run hello-worlddocker -v</pre></p></details><h2><a class="anchor" aria-hidden="true" id="2-start-local-cluster"> </a>2. Start Local Cluster</h2><ul><li><strong>Start Cassandra</strong></li></ul><p>After cloning this repository you can start either you local instance of Cassandra with <code>$Cassandra_HOME/bin/cassandra</code> or with docker-compose.</p><pre><code>docker-compose up -d</code></pre><ul><li><strong>Run Samples</strong></li></ul><p>You can execute each class with <code>maven</code> and or your favorite IDE. Each class will create everything needed each time <code>keyspace</code> and <code>tables</code>. The working tables will be empty in the beginning for not dropped.</p><pre><code>cd example-3xmvn exec:java -D&quot;exec.mainClass&quot;=&quot;com.datastax.samples.SampleCode3x_CONNECT_ClusterShowMetaData&quot;</code></pre><ul><li><strong>Data displayed with CQL Shell</strong></li></ul><p>If cassandra is running as a docker container and you want to have a cqlsh shell please execute:</p><pre><code>docker exec -it `docker ps | grep cassandra:3.11.5 | cut -b 1-12` cqlsh</code></pre><h2><a class="anchor" aria-hidden="true" id="working-with-schema"> </a>Working with Schema</h2><table><thead><tr><th align="center">3x</th><th align="center">4x</th><th align="left">Description</th></tr></thead><tbody><tr><td align="center"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_ClusterShowMetaData.java">ShowMetaData3x</a></td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_ClusterShowMetaData.java">ShowMetaData4x</a></td><td align="left">Connect to cluster then show keyspaces and metadata</td></tr><tr><td align="center"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_CreateKeyspace.java">CreateKeyspace3x</a></td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_CreateKeyspace.java">CreateKeyspace4x</a></td><td align="left">Create the <code>killrvideo</code> keyspace using <code>SchemaBuilder</code> if not exist</td></tr><tr><td align="center"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_CreateSchema.java">CreateSchema3x</a></td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_CreateSchema.java">CreateSchema4x</a></td><td align="left">Create <code>table</code> and <code>type</code> in <code>killrvideo</code> keyspace if they don't exist</td></tr><tr><td align="center"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_DropKeyspace.java">DropKeyspace3x</a></td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_DropKeyspace.java">DropKeyspace4x</a></td><td align="left">Drop the <code>killrvideo</code> keyspace if existis using  <code>SchemaBuilder</code></td></tr><tr><td align="center"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_DropSchema.java">DropSchema3x</a></td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_DropSchema.java">DropSchema4x</a></td><td align="left">Drop all  <code>table</code> and <code>type</code> in <code>killrvideo</code> keyspace if they exist</td></tr><tr><td align="center">---</td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_DriverConfigLoader.java">ConfigurationFile4x</a></td><td align="left">Setup the driver using custom conf file and not default <code>application.conf</code></td></tr><tr><td align="center">---</td><td align="center"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_ProgrammaticConfiguration.java">ProgrammaticConfig4x</a></td><td align="left">Setup the driver in a programmatic way</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="executing-queries"> </a>Executing Queries</h2><table><thead><tr><th align="left">3x</th><th align="left">4x</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_00_GettingStarted.java">GettingStarted3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_00_GettingStarted.java">GettingStarted4x</a></td><td align="left">First touch with executing queries</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_01_Simple.java">Simple3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_01_Simple.java">Simple4x</a></td><td align="left">Read, update, insert, delete operations using <code>QueryBuilder</code></td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_02_Paging.java">Paging3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_02_Paging.java">Paging4x</a></td><td align="left">Illustrating FetchSize and how to retrieve page by page</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_03_Batches.java">Batches3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_03_Batches.java">Batches4x</a></td><td align="left">Group statements within batches</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_04_ListSetMapAndUdt.java">ListSetMapUdt3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_04_ListSetMapAndUdt.java">ListSetMapUdt4x</a></td><td align="left">Advanced types insertions with <code>list</code>, <code>set</code>, <code>map</code> but also <code>User Defined Type</code></td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_05_Json.java">Json3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_05_Json.java">Json4x</a></td><td align="left">Work with columns or full record with <code>JSON</code></td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_06_Async.java">Async3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_06_Async.java">Async4x</a></td><td align="left">Sample operations as Simple in <code>Asynchronous</code> way</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_07_ObjectMapping.java">ObjectMapping3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_07_ObjectMapping.java">ObjectMapping4x</a></td><td align="left">Map table record to Java POJO at driver level</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_08_Counters.java">Counter3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_08_Counters.java">Counter4x</a></td><td align="left">Working with <code>counters</code> increment/decrement</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_09_LightweightTransactions.java">Lwt3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_09_LightweightTransactions.java">Lwt4x</a></td><td align="left">Working for Lightweight transactions read-before-write</td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CRUD_10_BlobAndCodec.java">BlobAndCodec3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_10_BlobAndCodec.java">BlobAndCodec4x</a></td><td align="left">Working with <code>BLOB</code> and binary data but also how to create your own <code>CustomCodec</code></td></tr><tr><td align="left"><a href="./example-3x/src/main/java/com/datastax/samples/SampleCode3x_CONNECT_ServiceCloudAstra.java">CloudAstra3x</a></td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CONNECT_ServiceCloudAstra.java">CloudAstra4x</a></td><td align="left">Working with <code>BLOB</code> and binary data but also how to create your own <code>CustomCodec</code></td></tr><tr><td align="left">---</td><td align="left"><a href="./example-4x/src/main/java/com/datastax/samples/SampleCode4x_CRUD_11_Reactive.java">Reactive4x</a></td><td align="left">Working with the Reactive API introduce in driver 4.x</td></tr></tbody></table><p>For reference this is the working schema we used for queries</p><pre lang="sql"><code>// ----------------------------------------// Sample Keyspace (to be used locally)// // Here a sample if you want to create on multiple node DC// CREATE KEYSPACE IF NOT EXISTS killrvideo // WITH REPLICATION = { 'class' : 'NetworkTopologyStrategy', 'datacenter1' : 3 }// AND DURABLE_WRITES = true;// ----------------------------------------CREATE KEYSPACE IF NOT EXISTS killrvideo WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }AND DURABLE_WRITES = true;// ----------------------------------------// Basic table for basic operations// ----------------------------------------// Used by : SampleCodeXx_CRUD_01_Simple// Used by : SampleCodeXx_CRUD_02_Paging// Used by : SampleCodeXx_CRUD_06_Async// Used by : SampleCodeXx_CRUD_09_LightweightTransactions// ----------------------------------------CREATE TABLE IF NOT EXISTS users ( email      text, firstname  text, lastname   text, PRIMARY KEY (email));// ----------------------------------------// Table to show MAP, LIST, SET, UDT, JSON// ----------------------------------------// Used by : SampleCodeXx_CRUD_04_ListSetMapAndUdt// Used by : SampleCodeXx_CRUD_06_Json// ----------------------------------------CREATE TYPE IF NOT EXISTS video_format (  width   int,  height  int);CREATE TABLE IF NOT EXISTS videos (  videoid    uuid,  title      text,  upload     timestamp,  email      text,  url        text,  tags       set &lt;text&gt;,  frames     list&lt;int&gt;,  formats    map &lt;text,frozen&lt;video_format&gt;&gt;,  PRIMARY KEY (videoid));// ----------------------------------------// Table to show Batches, ObjectMapping// ----------------------------------------// Used by : SampleCodeXx_CRUD_03_Bacthes// Used by : SampleCodeXx_CRUD_07_ObjectMapping// ----------------------------------------CREATE TABLE IF NOT EXISTS comments_by_video (    videoid uuid,    commentid timeuuid,    userid uuid,    comment text,    PRIMARY KEY (videoid, commentid)) WITH CLUSTERING ORDER BY (commentid DESC);CREATE TABLE IF NOT EXISTS comments_by_user (    userid uuid,    commentid timeuuid,    videoid uuid,    comment text,    PRIMARY KEY (userid, commentid)) WITH CLUSTERING ORDER BY (commentid DESC);// ----------------------------------------// Table to show Counters// ----------------------------------------// Used by : SampleCodeXx_CRUD_08_Counters// ----------------------------------------CREATE TABLE IF NOT EXISTS videos_views (    videoid     uuid,    views       counter,    PRIMARY KEY (videoid));// ----------------------------------------// Table to show Binary DATA// ----------------------------------------// Used by : SampleCodeXx_CRUD_10_Blob// ----------------------------------------CREATE TABLE IF NOT EXISTS files (   filename  text,   upload    timestamp,   extension text static,   binary    blob,   PRIMARY KEY((filename), upload)) WITH CLUSTERING ORDER BY (upload DESC);</code></pre>
SUCCESS SAVING README for DataStax-Examples-java-cassandra-driver-from3x-to4x
Getting astra.json for ds-steven-matison/astra-ansibile-demo at 277
No astra.json for ds-steven-matison/astra-ansibile-demo at 281
No astrajson for Ansible Demo
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-ansible-api-demos"> </a>Astra Ansible API Demos</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-devops-api"> </a>Astra Devops API</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-data-api"> </a>Astra Data API</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-documentation"> </a>Astra Documentation</h1>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-api-reference"> </a>Astra API Reference</h1>
HTML FOR ds-steven-matison-astra-ansibile-demo<h1><a class="anchor" aria-hidden="true" id="astra-ansible-api-demos"> </a>Astra Ansible API Demos</h1><p>A sample repository demonstrating how to use Astra Data &amp; DevOps APIs in ansible playbooks.</p><p>Check out my <a href="https://ds-steven-matison.github.io/astra/ansible/">Astra + Ansible</a> blog.</p><h1><a class="anchor" aria-hidden="true" id="astra-devops-api"> </a>Astra Devops API</h1><ul><li>devops_auth_post</li><li>devops_get_databases</li><li>devops_add_keyspace</li><li>devops_create_database</li><li>devops_reset_password</li><li>devops_resize_database</li><li>devops_park_database</li><li>devops_unpark_database</li><li>devops_terminate_database</li><li>devops_get_bundle</li><li>devops_get_regions</li></ul><h1><a class="anchor" aria-hidden="true" id="astra-data-api"> </a>Astra Data API</h1><ul><li>data_auth_post</li><li>data_get_keyspaces</li><li>data_create_table</li><li>data_get_tables</li><li>data_get_table</li><li>data_delete_table</li><li>data_add_rows</li><li>data_submit_queries</li><li>data_get_rows</li><li>data_get_row</li><li>data_update_rows</li><li>data_delete_rows</li><li>data_get_columns</li><li>data_get_column</li><li>data_add_column</li><li>data_update_column</li><li>data_delete_colun</li></ul><h1><a class="anchor" aria-hidden="true" id="astra-documentation"> </a>Astra Documentation</h1><ul><li><a href="https://docs.astra.datastax.com/docs">https://docs.astra.datastax.com/docs</a></li></ul><h1><a class="anchor" aria-hidden="true" id="astra-api-reference"> </a>Astra API Reference</h1><ul><li><a href="https://docs.astra.datastax.com/reference">https://docs.astra.datastax.com/reference</a></li></ul>
SUCCESS SAVING README for ds-steven-matison-astra-ansibile-demo
Getting astra.json for msmygit/dse-titbits at 277
No astra.json for msmygit/dse-titbits at 281
No astrajson for How to use Ansible with Astra
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="what-is-included"> </a>What is included?</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="a-href-documents-documentation-a"> </a><a href="documents/">Documentation</a></h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="a-href-scripts-scripts-a"> </a><a href="scripts/">Scripts</a></h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="a-href-java-driver-4-x-datastax-java-driver-4-x-examples-a"> </a><a href="java-driver-4.x/">DataStax Java Driver 4.x Examples</a></h2>
HTML FOR msmygit-dse-titbits<p>This repository contains a number of auxiliary scripts, code and documents for Cassandra or DSE that simplify their development, maintenance/operations.</p><h1><a class="anchor" aria-hidden="true" id="what-is-included"> </a>What is included?</h1><h2><a class="anchor" aria-hidden="true" id="a-href-documents-documentation-a"> </a><a href="documents/">Documentation</a></h2><ul><li><a href="documents/Working_with_DataStax_Astra.md">Working with DataStax Astra™</a></li><li><a href="documents/Working_with_DataStax_Astra_API_Ansible.md">Working with DataStax Astra™ DevOps &amp; Data APIs with Ansible</a></li><li><a href="documents/Cloud_provider_status_dashboards_icons_and_general.md">Public cloud provider status dashboards, architectural diagrams, etc.,</a></li><li><a href="documents/DataStax_Enterprise_on_Azure_Environment_Sizing_Example.md">DataStax Enterprise (DSE) &amp; OpsCenter environment sizing example</a></li><li><a href="documents/DSE_on_Azure_Deployment_Example.md">DataStax Enterprise (DSE) on Azure cloud deployment example</a></li><li><a href="documents/DSE_cluster_with_OpsCenter_Failover_setup.md">DataStax Enterprise (DSE) with OpsCenter Failover setup example</a></li><li><a href="documents/Package_vs_Tarball_install_DSE_OpsCenter_Agents.md">Package versus Tarball installation methods of DataStax Enterprise (DSE) &amp; OpsCenter comparison</a></li><li><a href="documents/datastax_bulk_loader.md">DataStax Bulk Loader References</a></li><li><a href="documents/minimum_opscenter_metrics_to_watchout.md">Minimum OpsCenter metrics to watchout on a DSE cluster</a></li><li><a href="documents/DataStax_Enterprise_Configuration_Directions_Tarball_Install.md">DataStax Enterprise (DSE) Tarball install config &amp; managing DSE as-a-service</a></li></ul><h2><a class="anchor" aria-hidden="true" id="a-href-scripts-scripts-a"> </a><a href="scripts/">Scripts</a></h2><ul><li><a href="scripts/stargate-dse687/Working_with_Stargate_and_DSE.md">How to hook up Stargate with DataStax Enterprise (DSE)?</a></li><li><a href="scripts/dse_recommended_settings_check.md">DataStax Recommended Settings validation script</a></li><li><a href="https://github.com/msmygit/dse-pkg-install">How to perform a package install of DataStax suite of products using Ansible automation?</a></li><li><a href="scripts/Find_Cassandra_SimpleStrategy_keyspaces.md">How to find Apache Cassandra™ SimpleStrategy keyspaces?</a></li><li><a href="scripts/dse_search_core_info_viewing.md">How to find DataStax Enterprise (DSE) Search core information?</a></li><li><a href="scripts/How_to_find_OpsCenter_Alert_Rules.md">How to find OpsCenter Alert Rules?</a></li><li><a href="scripts/Find_PIT_Scheduled_Backups_DataStax_OpsCenter.md">How to find OpsCenter point-in-time and scheduled backups?</a></li><li><a href="scripts/OpsCenter_tarball_install_custom_start-stop_scripts.md">How to customize a tarball installation of DataStax OpsCenter DSE start/stop scripts?</a></li><li><a href="scripts/tablestats_analysis/Create_a_CSV_file_from_cfstats_diagnostics.md">Hoe to create a CSV file cfstats/tablestats diagnostics</a></li><li><a href="scripts/dse-astra-spark-migration-main/README.md">How to migrate from DSE to AstraDB using DSE Analytics Spark</a></li></ul><h2><a class="anchor" aria-hidden="true" id="a-href-java-driver-4-x-datastax-java-driver-4-x-examples-a"> </a><a href="java-driver-4.x/">DataStax Java Driver 4.x Examples</a></h2><ul><li><a href="java-driver-4.x/">How to leverage <code>solr_query</code> column using Java Driver Mapper</a></li><li><a href="java-driver-4.x/src/main/java/com/madhavan/demos/schemabuilder/CreateTableWithSchemaBuilder.java">How to create a table with Schema Builder using Geospatial types: <code>PointType</code>, <code>LineStringType</code> and <code>PolygonType</code></a></li></ul><hr />
SUCCESS SAVING README for msmygit-dse-titbits
Getting astra.json for datastaxdevs/workshop-cassandra-fundamentals at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandratm-fundamentals"> </a>🎓 Apache Cassandra™ Fundamentals</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-tables"> </a>5. Create tables</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 5a. Navigate to the CQL Console and login to the database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5b-describe-keyspaces-and-use-one-of-them"> </a>✅ Step 5b. Describe keyspaces and USE one of them</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5c-create-the-code-networks-code-table"> </a>✅ Step 5c. Create the <code>networks</code> table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5d-create-the-tables-for-code-sensors-code-and-code-temperatures-code"> </a>✅ Step 5d. Create the tables for <code>sensors</code> and <code>temperatures</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-execute-crud-operations"> </a>6. Execute CRUD operations</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6a-c-rud-create-insert-data-users"> </a>✅ Step 6a. (C)RUD = create = insert data, users</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6b-c-rud-create-insert-data-posts"> </a>✅ Step 6b. (C)RUD = create = insert data, posts</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6c-c-r-ud-read-read-data"> </a>✅ Step 6c. C(R)UD = read = read data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6d-cr-u-d-update-update-data"> </a>✅ Step 6d. CR(U)D = update = update data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6e-cru-d-delete-remove-data"> </a>✅ Step 6e. CRU(D) = delete = remove data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6f-design"> </a>✅ Step 6f. Design</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-cassandra-fundamentals<h1><a class="anchor" aria-hidden="true" id="apache-cassandratm-fundamentals"> </a>🎓 Apache Cassandra™ Fundamentals</h1><p>Welcome to the <strong>Apache Cassandra™ Fundamentals</strong> workshop! In this two-hour workshop, we shows the most important fundamentals and basics of the powerful distributed <code>NoSQL database Apache Cassandra™</code>.</p><p>Using <strong>Astra DB</strong>, the cloud based <em>Cassandra-as-a-Service</em> platform delivered by DataStax, we will cover the very first steps for every developer who wants to try to learn a new database: creating tables and CRUD operations.</p><p><img src="images/splash.png" alt="" /></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><img src="https://github.com/datastaxdevs/workshop-cassandra-fundamentals/blob/main/images/cassandra_fundamentals.png?raw=true" align="right" width="300px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create your Database</a></li><li><a href="#5-create-tables">Create tables</a></li><li><a href="#6-execute-crud-operations">Execute CRUD operations</a></li><li><a href="#7-homework">Homework</a></li><li><a href="#8-whats-next-">What's NEXT </a></li></ol><p><br/><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Give you an understanding and how and where to position Apache Cassandra™</strong></p><p>2️⃣ <strong>Give an overview of the NoSQL ecosystem and its rationale</strong></p><p>3️⃣ <strong>Provide an overview of Cassandra Architecture</strong></p><p>4️⃣ <strong>Make you create your first tables and run your first statements</strong></p><p>🚀 <strong>Have fun with an interactive session</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-01-11-23"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>sensor_data</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>sensor_data</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong>:save it somewhere safe, as it will be needed to later in other workshop (In particular the string starting with <code>AstraCS:...</code>.)</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-create-tables"> </a>5. Create tables</h2><p>Ok, now that you have a database created the next step is to create tables to work with.</p><p><em>General Methodology Notes</em>: We'll work with a (rather simplified) <em>Internet of things</em> application where we'll be recording temperatures coming from a network of sensors.</p><ul><li><code>networks</code> identified by a unique name represent a region, an area where you find related infrastructure.</li></ul><h4><a class="anchor" aria-hidden="true" id="step-5a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 5a. Navigate to the CQL Console and login to the database</h4><p>In the Summary screen for your database, select <strong><em>CQL Console</em></strong> from the top menu in the main window. This will take you to the CQL Console and automatically log you in.</p><details>    <summary>Show me! </summary>    <img src="images/astra-cql-console.gif" /></details><blockquote><p><em>Note</em>: if you are working with your own Cassandra cluster (other than Astra DB), you will reach the CQL Console differently.Moreover, in that case you have to manually create the keyspace once in the CQL Console: this is done with a command similar to<code>CREATE KEYSPACE sensor_data WITH REPLICATION = {'class': 'NetworkTopologyStrategy', 'replication_factor': 3};</code>.See the Cassandra documentation for more details on this.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-5b-describe-keyspaces-and-use-one-of-them"> </a>✅ Step 5b. Describe keyspaces and USE one of them</h4><p>Ok, now we're ready to rock. Creating tables is quite easy, but before we create one we need to tell the database which keyspace we are working with.</p><p>First, let's <strong><em>DESCRIBE</em></strong> all of the keyspaces that are in the database. This will give us a list of the available keyspaces.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC KEYSPACES;</code></pre><p><em>&quot;desc&quot; is short for &quot;describe&quot;, either is valid.</em></p><blockquote><p>CQL commands usually end with a semicolon <code>;</code>. If you hit Enter and nothing happens -- you don't even get your prompt back -- most likely it's because you have not ended the command with <code>;</code>. If in trouble, you can always get back to the prompt with <code>Ctrl-C</code> and start typing the command anew.</p></blockquote><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/01_desc_keyspaces.png" alt="Keyspaces in CQL" /></p><blockquote><p>ℹ️ Depending on your setup you might see a different set of keyspaces than in the image. The one we care about for now is <strong><em>sensor_data</em></strong>. From here, execute the <strong><em>USE</em></strong> command with the <strong><em>sensor_data</em></strong> keyspace to tell the database our context is within <strong><em>sensor_data</em></strong>.</p></blockquote><blockquote><p>Take advantage of the TAB-completion in the CQL Console. Try typing <code>use sens</code> and then pressing TAB, for example.</p></blockquote><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>USE sensor_data;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/02_use_sensor_data.png" alt="USE keyspace" /></p><p>Notice how the prompt displays <code>&lt;username&gt;@cqlsh:sensor_data&gt;</code> informing us we are <strong>using</strong> the <strong><em>sensor_data</em></strong> keyspace. Now we are ready to create our tables.</p><h4><a class="anchor" aria-hidden="true" id="step-5c-create-the-code-networks-code-table"> </a>✅ Step 5c. Create the <code>networks</code> table</h4><p>At this point we can execute a command to create the <strong>networks</strong> table.Just copy/paste the following command into your CQL console at the prompt.Try to identify the primary key, the partition key and the clustering columns(if any) for this table in the command:</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS networks (  name        TEXT,  description TEXT,  region      TEXT,  PRIMARY KEY ((name)));</code></pre><p>Then <strong><em>DESCRIBE</em></strong> your keyspace tables to ensure it is there.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC TABLES;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/03_networks_table_created.png" alt="A table created" /></p><p>Aaaand <strong>BOOM</strong>, you created a table in your database. That's it.Now let's go ahead and create a couple more tables before we dosomething interesting with the data.</p><h4><a class="anchor" aria-hidden="true" id="step-5d-create-the-tables-for-code-sensors-code-and-code-temperatures-code"> </a>✅ Step 5d. Create the tables for <code>sensors</code> and <code>temperatures</code></h4><ul><li><p>A network will contain several <code>sensors</code>. Sensors are uniquely identified by their name, such as <code>s1001</code>. The design of our application is such that we need to be able to <em>retrieve all <code>sensors</code> for a given <code>network</code>, sorted by the sensor name</em>.</p></li><li><p>Next, for each sensor you want to be able to retrieve <code>temperatures</code> sorted by descending date.</p></li></ul><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS sensors_by_network (  network         TEXT,  sensor          TEXT,  latitude        DECIMAL,  longitude       DECIMAL,  characteristics MAP&lt;TEXT,TEXT&gt;,  PRIMARY KEY ((network),sensor));CREATE TABLE IF NOT EXISTS temperatures_by_sensor_bad (  sensor TEXT,  timestamp TIMESTAMP,  value FLOAT,  PRIMARY KEY ((sensor),timestamp)) WITH CLUSTERING ORDER BY (timestamp DESC);</code></pre><ul><li><p><code>networks</code> to <code>sensors</code> is a one-to-many relationship yet there is no integrity constraint. This is on you, at application level to ensure the coherence.</p></li><li><p>You should notice than sensors are grouped by network (as the name stated. The partition key <code>network</code> groups all sensors for a given network on the same Cassandra node meaning a request with network in the where clause will access a single node.</p></li><li><p><code>sensors</code> to <code>temperatures</code> is a also a one-to-many relation. Every temperature for a sensor will be saved in the same partition.</p></li></ul><p/><details><summary><b>This table has a major issue... can you guess what it is?</b></summary><hr>The SIZE. The more the sensors capture information the bigger the partitions become. There is a good practice rule stating that the upper limit for a partition is 100MB or 100k records. You need to split values across multiple partitions. This technique is called <i>bucketing.</i></details><p/><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DROP TABLE  temperatures_by_sensor_bad;CREATE TABLE temperatures_by_sensor (  sensor TEXT,  date DATE,  timestamp TIMESTAMP,  value FLOAT,  PRIMARY KEY ((sensor, date),timestamp)) WITH CLUSTERING ORDER BY (timestamp DESC);</code></pre><blockquote><p>ℹ️ <em>Dropping a table can lead to a timeout in the user interface, do not worry, it is not harmful: the table is effectively deleted under the hood.</em></p></blockquote><p><strong><em>DESCRIBE</em></strong> your keyspace tables: you should see all three listed.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC TABLES;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/04_post_tables_created.png" alt="A table created" /></p><p>And tables list:</p><p><img src="images/cql/04_post_tables_created_2.png" alt="A table created" /></p><p>You may wonder, how did we arrive at this particular structure for the <code>sensors_by_network</code> and <code>temperatures_by_sensors</code> tables ?</p><p>The answer lies in the methodology for data modelingwith Cassandra, which, at its very core, states: <strong>first look at application's needs, determine the required workflows, then map them to a number of queries, finally design a table around each query</strong>.</p><ul><li><p>We create table <code>sensors_by_network</code> to support a query such as <em>&quot;get all sensors for a network <code>X</code>&quot;</em></p></li><li><p>We create table <code>temperatures_by_sensors</code> to support a query such as <em>&quot;get all temperatures for a sensor <code>Y</code>&quot;</em></p></li></ul><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-execute-crud-operations"> </a>6. Execute CRUD operations</h2><p>CRUD stands for &quot;<strong>create, read, update, and delete</strong>&quot;. Simply put, they are the basic types of commands you need to work with ANY database in order to maintain data for your applications.</p><h4><a class="anchor" aria-hidden="true" id="step-6a-c-rud-create-insert-data-users"> </a>✅ Step 6a. (C)RUD = create = insert data, users</h4><p>Our tables are in place so let's put some data in them. This is done with the <strong>INSERT</strong> statement. We'll start by inserting 2 rows into the <strong><em>networks</em></strong> table.</p><p>Copy and paste the following in your CQL Console:<em>(Once you have carefully examined the first of the following <strong>INSERT</strong> statements below, you can simply copy/paste the others which are very similar.)</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO networks (name,description,region)VALUES ('forest-net',        'forest fire detection network',        'south');INSERT INTO networks (name,description,region)VALUES ('volcano-net',        'volcano monitoring network',        'north');   </code></pre><h4><a class="anchor" aria-hidden="true" id="step-6b-c-rud-create-insert-data-posts"> </a>✅ Step 6b. (C)RUD = create = insert data, posts</h4><p>Let's run some more <strong>INSERT</strong> statements, this time for <strong>sensors</strong>. We'll insert data into the <strong><em>sensors_by_network</em></strong> table.</p><p><em>(Once you have carefully examined the first of the following <strong>INSERT</strong> statements below, you can simply copy/paste the others which are very similar.)</em></p><blockquote><p><em>Note</em>: in the following, we are using <code>MAP&lt;&gt;</code> which lets you define you our key/value mapping, thereby adding a bit of flexibility -- Cassandra Data models are strongly typed.</p></blockquote><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1001',30.526503,-95.582815,       {'accuracy':'medium','sensitivity':'high'});INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1002',30.518650,-95.583585,       {'accuracy':'medium','sensitivity':'high'});     INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1003',30.515056,-95.556225,       {'accuracy':'medium','sensitivity':'high'});     INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('volcano-net','s2001',44.460321,-110.828151,       {'accuracy':'high','sensitivity':'medium'});    INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('volcano-net','s2002',44.463195,-110.830124,       {'accuracy':'high','sensitivity':'medium'});    </code></pre><p>Ok, we have a lovely bunch of sensors in our application.</p><p>Now let's add temperature measurements in table <strong><em>temperatures_by_sensors</em></strong> as well! Let's do it with the following command (please note that the <code>INSERT</code> statements are similar to the ones seen above, with different columns and table name):</p><blockquote><p><em>Note</em>: In a relational database you may have use a join on 3 tables <code>Networks &gt; Sensors &gt; Temperatures</code>. In the following, we are putting back the network name in temperature table and this is because it will be required in the where clause.</p></blockquote><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 00:00:01',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 00:59:59',79);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 12:00:01',97);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 12:59:59',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 00:00:01',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 12:00:01',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 12:59:59',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 00:00:01',81);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 12:00:01',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 12:59:59',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 00:00:01',81);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 12:00:01',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 12:59:59',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:00:01',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:59:59',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 12:00:01',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 12:59:59',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 00:00:01',83);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 00:59:59',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 12:00:01',101);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 12:59:59',102);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 12:00:01',106);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 12:59:59',107);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 12:00:01',108);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 12:59:59',110);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 12:00:01',1315);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 12:59:59',1429);</code></pre><h4><a class="anchor" aria-hidden="true" id="step-6c-c-r-ud-read-read-data"> </a>✅ Step 6c. C(R)UD = read = read data</h4><p>Now that we've inserted a set of rows (two sets, to be precise), let's take a look at how to read the data back out. This is done with a <strong>SELECT</strong> statement. In its simplest form we could just execute a statement like the following <strong><em>**cough</em></strong> <strong><em>**cough</em></strong>:</p><pre lang="sql"><code>SELECT * FROM networks;</code></pre><pre><code> name        | description                   | region-------------+-------------------------------+--------  forest-net | forest fire detection network |  south volcano-net |    volcano monitoring network |  north</code></pre><p>or</p><pre lang="sql"><code>SELECT * FROM sensors_by_network;</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; SELECT * FROM sensors_by_network; network     | sensor | characteristics                               | latitude  | longitude-------------+--------+-----------------------------------------------+-----------+-------------  forest-net |  s1001 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.526503 |  -95.582815  forest-net |  s1002 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.518650 |  -95.583585  forest-net |  s1003 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.515056 |  -95.556225 volcano-net |  s2001 | {'accuracy': 'high', 'sensitivity': 'medium'} | 44.460321 | -110.828151 volcano-net |  s2002 | {'accuracy': 'high', 'sensitivity': 'medium'} | 44.463195 | -110.830124</code></pre><p>You may have noticed my coughing fit a moment ago. Even though you can execute a <strong>SELECT</strong> statement with no partition key defined, this is NOT something you should do when using Apache Cassandra. We are doing it here for illustration purposes only and because our whole dataset is just a handful of values.</p><p>Given the data we inserted earlier, a more proper statement would be something like (while we are at it, we also explicitly specify which columns we want back):</p><pre lang="sql"><code>SELECT sensor, characteristics, latitude, longitude FROM sensors_by_networkWHERE network = 'forest-net';</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; SELECT sensor, characteristics, latitude, longitude               ... FROM sensors_by_network               ... WHERE network = 'forest-net'; sensor | characteristics                               | latitude  | longitude--------+-----------------------------------------------+-----------+------------  s1001 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.526503 | -95.582815  s1002 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.518650 | -95.583585  s1003 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.515056 | -95.556225</code></pre><p>The key is to ensure we are <strong>always selecting by some partition key</strong> at a minimum, so to avoid the dreaded <em>full-cluster scans</em> which yield performances that are generally unacceptable in production.</p><p>Ok, with that out of the way we can <strong>READ</strong> the data from the other table as well - remember we <strong>INSERT</strong>ed on both tables?</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>SELECT * FROM temperatures_by_sensor;SELECT timestamp, value FROM temperatures_by_sensorWHERE sensor='s1002' AND date='2020-07-05';</code></pre><p>(again, in the second <strong>SELECT</strong> we specify some columns - it is something we may want to do in most cases).</p><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; select timestamp, value from temperatures_by_sensor where sensor='s1002' and DATE='2020-07-05'; timestamp                       | value---------------------------------+------- 2020-07-05 12:59:59.000000+0000 |    99 2020-07-05 12:00:01.000000+0000 |   100 2020-07-05 00:59:59.000000+0000 |    82 2020-07-05 00:00:01.000000+0000 |    82</code></pre><p>Once you execute the above <strong>SELECT</strong> statements you should see something like the expected output above. We have now <strong>READ</strong> the data we <strong>INSERTED</strong> earlier. Awesome job!</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>SELECT * FROM temperatures_by_sensorWHERE sensor='s1002';</code></pre><p>📗 <strong>Expected output</strong></p><p>This is a surprise.</p><p/><details><summary><b> Can you explain the error message ?</b></summary>As you did not provide the full partition key (2 columns) Cassandra needs to perform a full scan of your cluster (request on every node).<p>It will be bad, it will be ugly, it will be your fault. Always code your applications as if the DBA was a serial killer and he knows your address.</p></p></details><p/><h4><a class="anchor" aria-hidden="true" id="step-6d-cr-u-d-update-update-data"> </a>✅ Step 6d. CR(U)D = update = update data</h4><p>At this point we've <strong><em>CREATED</em></strong> and <strong><em>READ</em></strong> some data, but what happens when you want to change some existing data to some new value? That's where <strong>UPDATE</strong> comes into play.</p><p><em>The use case is as follows: We notice the sensor was not correctly calibrated and the data needs to be updated.</em></p><p>Let's take one of the records we created earlier and modify it. Recall that we <strong><em>INSERTED</em></strong> the following record in the <strong><em>temperatures_by_sensors</em></strong> table.</p><pre lang="sql"><code>// For referenceINSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:00:01', 82);</code></pre><blockquote><p>Let's say that at this particular moment the temperature was not 82 but 92 (Climate change ...).</p></blockquote><p>Looking at <code>PRIMARY KEY ((sensor, date), timestamp)</code>, we know that  <strong>sensor</strong>, <strong>date</strong> and <strong>timestamp</strong> are used to define uniqueness of the row. We'll need all of them to update our record (plus, of course, some of the data columns, otherwise we are not changing anything in that row!).</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>UPDATE temperatures_by_sensor SET value = 92WHERE sensor = 's1002'AND date = '2020-07-05'AND timestamp = '2020-07-05 00:00:01';SELECT *FROM temperatures_by_sensor WHERE sensor='s1002' AND DATE='2020-07-05';</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; select *  from temperatures_by_sensor where sensor='s1002' and DATE='2020-07-05'; sensor | date       | timestamp                       | value--------+------------+---------------------------------+-------  s1002 | 2020-07-05 | 2020-07-05 12:59:59.000000+0000 |    99  s1002 | 2020-07-05 | 2020-07-05 12:00:01.000000+0000 |   100  s1002 | 2020-07-05 | 2020-07-05 00:59:59.000000+0000 |    82  s1002 | 2020-07-05 | 2020-07-05 00:00:01.000000+0000 |    92(4 rows)token@cqlsh:sensor_data&gt; </code></pre><blockquote><p><em>Note</em>: you could also achieve the same result with another <code>INSERT</code> statement,which will simply overwrite the previous values if the partition key is the same.This is because Cassandra <em>does not read before writing</em>, i.e. updates are inserts!</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-6e-cru-d-delete-remove-data"> </a>✅ Step 6e. CRU(D) = delete = remove data</h4><p>The final operation from our <strong>CRUD</strong> acronym is <strong>DELETE</strong>. This is the operation we use when we want to remove data from the database.In Apache Cassandra you can <strong>DELETE</strong> from the cell level all the way up to the partition<em>(meaning I could remove a single column in a single row or I could remove a whole partition)</em> using the same <strong>DELETE</strong> command.</p><p><em>Generally speaking, it's best to perform as few delete operations as possible on the largest amount of data. Think of it this way, if you want to delete ALL data in a table, don't delete each individual cell, just <strong>TRUNCATE</strong> the table. If you need to delete all the rows in a partition, don't delete each row, <strong>DELETE</strong> the partition, and so on.</em></p><p>When deleting a row on a given table, we have to specify the values of the primary key for that table. <em>(And don't forgetthat, if your data model has the same information stored twice in different tables, it will be up to you toissue two different <strong>DELETE</strong> operations!)</em></p><p>📘 <strong>Commands to execute</strong></p><ul><li>Partition level delete</li></ul><pre lang="sql"><code>// Get a partitionSELECT *  FROM temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-05';// Delete at Partition levelDELETE FROM temperatures_by_sensorWHERE sensor='s1002' AND date='2020-07-05';// Read againSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-05';</code></pre><ul><li>Row-level delete</li></ul><pre lang="sql"><code>// Get a partitionSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-04';// Delete at Row levelDELETE FROM temperatures_by_sensorwhere sensor='s1002' AND date='2020-07-04' AND timestamp='2020-07-04 00:00:01.000000+0000';// Read againSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-04';</code></pre><p>(Notice in the above, for your convenience, we read the tables, then delete the rows, then read them again).</p><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/07_deleting.png" alt="Deleting in CQL" /></p><p>Notice the rows are now removed from both tables: it is as simple as that.</p><h4><a class="anchor" aria-hidden="true" id="step-6f-design"> </a>✅ Step 6f. Design</h4><pre><code>What is the table we need in order to:  - find hourly average temperatures ...  - for every sensor ...  - in a specified network ...  - for a given date range ?How can you do that?</code></pre><p>Maybe you select every sensors...</p><ul><li><p>...then for every sensors you select the list of temperatures...</p></li><li><p>...but you could do the latest queries in parallel doing map reduce</p></li></ul><p>Maybe you can query all temperatures and then filter by network...</p><ul><li><p>... but you will need to add this column network....</p></li><li><p>....</p></li><li><p>....</p></li></ul><p><code>STOP IT !!!!</code></p><p>With Cassandra for a new request, you create a new table, even if its mean duplicating the data. I think you got it <code>^_^</code></p><p/><details><summary><b> Can you find what the table looks like ?</b></summary><hr><p><pre>CREATE TABLE temperatures_by_network (  network TEXT,  week DATE,  date_hour TIMESTAMP,  sensor TEXT,  avg_temperature FLOAT,  latitude DECIMAL,  longitude DECIMAL,  PRIMARY KEY ((network,week),date_hour,sensor)) WITH CLUSTERING ORDER BY (date_hour DESC, sensor ASC);</pre></details><p/><h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2><p>To submit the <strong>homework</strong>, please take a screenshot of the CQL Console showing the rows in tables<code>temperatures_by_sensor</code> and <code>sensors_by_network</code> before <em>and</em> after executing the DELETE statements.</p><p>You should also complete two mini-courses (a few minutes each) about using CQL and designing tables:</p><ul><li>Complete the mini-course <a href="https://www.datastax.com/learn/cassandra-fundamentals/cql">Cassandra Query Language</a> and take a screenshot of the final screen (&quot;Congratulations!&quot; on the left + console output on the right).</li><li>Complete the mini-course <a href="https://www.datastax.com/learn/data-modeling-by-example/digital-library-data-model">&quot;Cassandra Data Modeling / Digital Library&quot;</a> (link for hands-on at the bottom of the lessons). Take a screenshot of the final screen (&quot;Congratulations!&quot; on the left + console output on the right).</li></ul><p>Don't forget to <a href="https://dtsx.io/homework-intro-to-cassandra">submit your homework</a> and be awarded a nice verified badge!</p><h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Cassandra.Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p>Don't forget to <a href="https://dtsx.io/homework-intro-to-cassandra">submit your homework</a> and be awarded a nice verified badge!</p><p><img src="images/badge/intro-to-cassandra.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-fundamentals
Getting astra.json for datastaxdevs/workshop-cassandra-data-modeling at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandra-r-data-modelling"> </a>🎓🎓 Apache Cassandra® Data Modelling</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently Asked Questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create Your Astra DB Instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-tables-with-single-row-and-multi-row-partitions"> </a>5. Tables with Single-Row and Multi-Row Partitions</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-1-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-single-row-partitions-tables-with-single-row-partitions-a"> </a>✅ Part 1: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-single-row-partitions/">Tables with Single-Row Partitions</a></h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-2-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-multi-row-partitions-tables-with-multi-row-partitions-a"> </a>✅ Part 2: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-multi-row-partitions/">Tables with Multi-Row Partitions</a></h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-dynamic-bucketing"> </a>6. Dynamic Bucketing</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="homework-1"> </a>📌 Homework 1</h3></summary>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-working-with-data-types"> </a>7. Working with Data Types</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="homework-2"> </a>📌 Homework 2</h3></summary>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7a-code-list-code-collections"> </a>✅ Step 7a. <code>List</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7b-code-set-code-collections"> </a>✅ Step 7b. <code>Set</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7c-code-map-code-collections"> </a>✅ Step 7c. <code>Map</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7d-user-defined-types"> </a>✅ Step 7d. User-Defined Types</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7e-counters"> </a>✅ Step 7e. Counters</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-kdm-data-modeling-tool"> </a>8. KDM Data Modeling Tool</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="demo"> </a>🍿 Demo</h3></summary>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="download-a-href-https-raw-githubusercontent-com-datastaxdevs-workshop-cassandra-data-modeling-main-materials-kdm-sensor-data-xml-the-project-xml-file-a"> </a>✅ Download <a href="https://raw.githubusercontent.com/datastaxdevs/workshop-cassandra-data-modeling/main/materials/kdm_sensor_data.xml">the project XML file</a>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="open-a-href-http-kdm-kashliev-com-the-kdm-tool-a"> </a>✅ Open <a href="http://kdm.kashliev.com/">the KDM tool</a>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="import-the-project-by-selecting-code-import-project-code-from-the-menu-and-specifying-file-code-kdm-sensor-data-xml-code"> </a>✅ Import the project by selecting <code>Import Project</code> from the menu and specifying file <code>kdm_sensor_data.xml</code>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="explore-the-five-data-modeling-steps-supported-by-kdm-note-that-the-conceptual-data-model-in-step-1-and-queries-in-step-2-are-already-defined"> </a>✅ Explore the five data modeling steps supported by KDM. Note that the conceptual data model in Step 1 and queries in Step 2 are already defined.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-sensor-data-modeling"> </a>9. Sensor Data Modeling</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-sensor-data-sensor-data-modeling-a"> </a>✅ <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-sensor-data/">Sensor Data Modeling</a></h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-homework"> </a>10. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-what-s-next"> </a>11. What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-cassandra-data-modeling<h1><a class="anchor" aria-hidden="true" id="apache-cassandra-r-data-modelling"> </a>🎓🎓 Apache Cassandra® Data Modelling</h1><p>Welcome to the <strong>Apache Cassandra® Data Modelling</strong> workshop! In this two-hour workshop, we show the methodology to build an effective data model with the distributed <code>NoSQL database Apache Cassandra™</code>.</p><p>Using <strong>Astra DB</strong>, the cloud based <em>Cassandra-as-a-Service</em> platform delivered by DataStax, we will cover the process for every developer who wants to build an application: list the use cases and build an effective data model.</p><p><img src="images/splash.png" alt="" /></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2><img src="images/illustrations.png?raw=true" align="right" width="300px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently Asked Questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create Your Astra DB Instance</a></li><li><a href="#5-tables-with-single-row-and-multi-row-partitions">Tables with Single-Row and Multi-Row Partitions</a></li><li><a href="#6-dynamic-bucketing">Dynamic Bucketing</a></li><li><a href="#7-working-with-data-types">Working with Data Types</a></li><li><a href="#8-kdm-data-modeling-tool">KDM Data Modeling Tool</a></li><li><a href="#9-sensor-data-modeling">Sensor Data Modeling</a></li><li><a href="#10-homework">Homework</a></li><li><a href="#11-whats-next-">What's NEXT </a></li></ol><p><br/><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Understand how data is distributed and organized in Apache Cassandra®</strong></p><p>2️⃣ <strong>Learn how primary, partition, and clustering keys are defined in Apache Cassandra®</strong></p><p>3️⃣ <strong>Become familiar with CQL data types in Apache Cassandra®</strong></p><p>4️⃣ <strong>Learn about the data modeling methodology for Apache Cassandra®</strong></p><p>🚀 <strong>Have fun with an interactive session</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently Asked Questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough "real estate" on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are.</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on LinkedIn or anywhere else.</details><p/><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create Your Astra DB Instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-7-27"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>sensor_data</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>sensor_data</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong>:save it somewhere safe, as it will be needed to later in other workshops (In particular the string starting with <code>AstraCS:...</code>.)</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a tokenbut will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-tables-with-single-row-and-multi-row-partitions"> </a>5. Tables with Single-Row and Multi-Row Partitions</h2><p>A <a href="https://github.com">GitHub</a> account may be required to run this hands-on lab in Gitpod.</p><h3><a class="anchor" aria-hidden="true" id="part-1-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-single-row-partitions-tables-with-single-row-partitions-a"> </a>✅ Part 1: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-single-row-partitions/">Tables with Single-Row Partitions</a></h3><h3><a class="anchor" aria-hidden="true" id="part-2-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-multi-row-partitions-tables-with-multi-row-partitions-a"> </a>✅ Part 2: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-multi-row-partitions/">Tables with Multi-Row Partitions</a></h3><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-dynamic-bucketing"> </a>6. Dynamic Bucketing</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="homework-1"> </a>📌 Homework 1</h3></summary><p>Consider the table that supports query <code>Find all sensors in a specified network</code>:</p><pre lang="sql"><code>CREATE TABLE sensors_by_network_2 (  network TEXT,  sensor TEXT,  PRIMARY KEY ((network), sensor));</code></pre><p>Assume that a network may have none to millions of sensors. With dynamic bucketing, we can introduce artificial buckets to store sensors. A network with a few sensors may only need one bucket. A network with many sensors may need many buckets. Once buckets belonging to a particular network get filled with sensors, we can dynamically assign new buckets to store new sensors of this network.</p><p>📘 <strong>Implement dynamic bucketing in Astra DB</strong></p><pre lang="sql"><code>-- Table to manage bucketsCREATE TABLE buckets_by_network (  network TEXT,  bucket TIMEUUID,  PRIMARY KEY ((network), bucket)) WITH CLUSTERING ORDER BY (bucket DESC);-- Table to store sensorsCREATE TABLE sensors_by_bucket (  bucket TIMEUUID,  sensor TEXT,  PRIMARY KEY ((bucket), sensor));-- Sample dataINSERT INTO buckets_by_network (network, bucket) VALUES ('forest-net', 49171ffe-0d12-11ed-861d-0242ac120002);INSERT INTO buckets_by_network (network, bucket) VALUES ('forest-net', 74a13ede-0d12-11ed-861d-0242ac120002);INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (49171ffe-0d12-11ed-861d-0242ac120002, 's1001');INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (49171ffe-0d12-11ed-861d-0242ac120002, 's1002');INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (74a13ede-0d12-11ed-861d-0242ac120002, 's1003');</code></pre><p>📘 <strong>Add a new sensor to a network</strong></p><ol><li>Get the latest bucket.</li></ol><pre lang="sql"><code>SELECT bucket FROM buckets_by_network WHERE network = 'forest-net' LIMIT 1;</code></pre><ol start="2"><li>Check the number of sensors in the bucket.</li></ol><pre lang="sql"><code>SELECT COUNT(*) AS sensorsFROM sensors_by_bucket WHERE bucket = 74a13ede-0d12-11ed-861d-0242ac120002;</code></pre><ol start="3"><li>Depending on the sensors-per-bucket threshold, insert a new sensor into the existing bucket, or create a new bucket and insert into the new bucket.</li></ol><pre lang="sql"><code>INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (74a13ede-0d12-11ed-861d-0242ac120002, 's1004');</code></pre><p>📘 <strong>Retrieve sensors in a specified network</strong></p><ol><li>Retrieve the buckets</li></ol><pre lang="sql"><code>SELECT bucket FROM buckets_by_network WHERE network = 'forest-net';</code></pre><ol start="2"><li>Retrieve the sensors</li></ol><pre lang="sql"><code>SELECT sensorFROM sensors_by_bucketWHERE bucket IN (74a13ede-0d12-11ed-861d-0242ac120002, 49171ffe-0d12-11ed-861d-0242ac120002);</code></pre></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-working-with-data-types"> </a>7. Working with Data Types</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="homework-2"> </a>📌 Homework 2</h3></summary><h3><a class="anchor" aria-hidden="true" id="step-7a-code-list-code-collections"> </a>✅ Step 7a. <code>List</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_list (  uid      uuid,  items    list&lt;text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_list(uid,items)VALUES (c7133017-6409-4d7a-9479-07a5c1e79306, ['a', 'b', 'c']);// ReplaceUPDATE table_with_list SET items = ['d', 'e']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;// Show resultSELECT * FROM table_with_list ;// Append to listUPDATE table_with_list SET items = items + ['f']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;// Replace an element (not available in Astra because read before write)UPDATE table_with_list SET items[0] = ['g']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7b-code-set-code-collections"> </a>✅ Step 7b. <code>Set</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_set (  uid      uuid,  animals  set&lt;text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_set(uid,animals)VALUES (87fad746-4adf-4107-9858-df8643564186, {'spider', 'cat', 'dog'});// ReplaceUPDATE table_with_set SET animals = {'pangolin', 'bat'}WHERE uid = 87fad746-4adf-4107-9858-df8643564186;// Show resultSELECT * FROM table_with_set;// Append to SetUPDATE table_with_set SET animals = animals + {'sheep'}WHERE uid = 87fad746-4adf-4107-9858-df8643564186;</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7c-code-map-code-collections"> </a>✅ Step 7c. <code>Map</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_map (  uid         text,  dictionary  map&lt;text, text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_map(uid, dictionary)VALUES ('fr_en', {'fromage':'cheese', 'vin':'wine', 'pain':'bread'});// ReplaceUPDATE table_with_map SET dictionary = {'saucisse': 'sausage'}WHERE uid = 'fr_en';// Show resultSELECT * FROM table_with_map;// Append to MapUPDATE table_with_map SET dictionary = dictionary + {'frites':'fries'}WHERE uid = 'fr_en';</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7d-user-defined-types"> </a>✅ Step 7d. User-Defined Types</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TYPE IF NOT EXISTS udt_address (  street text,  city text,  state text,);// Use the UDT in a tableCREATE TABLE IF NOT EXISTS table_with_udt (  uid      text,  address   udt_address,  PRIMARY KEY (uid));// INSERT (not quote on field names like street)INSERT INTO table_with_udt(uid, address)VALUES ('superman', {street:'daily planet',city:'metropolis',state:'CA'});// ReplaceUPDATE table_with_udtSET address = {street:'pingouin alley',city:'antarctica',state:'melting'}WHERE uid = 'superman';// Replace a single fieldUPDATE table_with_udtSET address.state = 'melt'WHERE uid = 'superman';</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7e-counters"> </a>✅ Step 7e. Counters</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_counters (  handle        text,  following     counter,  followers     counter,  notifications counter,  PRIMARY KEY (handle));// You have a new followerUPDATE table_with_counters SET followers = followers + 1WHERE  handle = 'clunven';// Some counters are... nullSELECT * from table_with_counters;// Set to 0... but set is not validUPDATE table_with_countersSET following = following + 0, notifications = notifications + 0WHERE handle = 'clunven';// Following someoneUPDATE table_with_counters SET following = following + 1WHERE handle = 'clunven';// You have a new messageUPDATE table_with_counters SET notifications = notifications + 1WHERE handle = 'clunven';</code></pre></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-kdm-data-modeling-tool"> </a>8. KDM Data Modeling Tool</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="demo"> </a>🍿 Demo</h3></summary><h3><a class="anchor" aria-hidden="true" id="download-a-href-https-raw-githubusercontent-com-datastaxdevs-workshop-cassandra-data-modeling-main-materials-kdm-sensor-data-xml-the-project-xml-file-a"> </a>✅ Download <a href="https://raw.githubusercontent.com/datastaxdevs/workshop-cassandra-data-modeling/main/materials/kdm_sensor_data.xml">the project XML file</a>.</h3><h3><a class="anchor" aria-hidden="true" id="open-a-href-http-kdm-kashliev-com-the-kdm-tool-a"> </a>✅ Open <a href="http://kdm.kashliev.com/">the KDM tool</a>.</h3><h3><a class="anchor" aria-hidden="true" id="import-the-project-by-selecting-code-import-project-code-from-the-menu-and-specifying-file-code-kdm-sensor-data-xml-code"> </a>✅ Import the project by selecting <code>Import Project</code> from the menu and specifying file <code>kdm_sensor_data.xml</code>.</h3><p><img src="images/kdm_01.png" alt="" /></p><p><img src="images/kdm_02.png" alt="" /></p><h3><a class="anchor" aria-hidden="true" id="explore-the-five-data-modeling-steps-supported-by-kdm-note-that-the-conceptual-data-model-in-step-1-and-queries-in-step-2-are-already-defined"> </a>✅ Explore the five data modeling steps supported by KDM. Note that the conceptual data model in Step 1 and queries in Step 2 are already defined.</h3><p><img src="images/kdm_03.png" alt="" /></p></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-sensor-data-modeling"> </a>9. Sensor Data Modeling</h2><p>A <a href="https://github.com">GitHub</a> account may be required to run this hands-on lab in Gitpod.</p><h3><a class="anchor" aria-hidden="true" id="a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-sensor-data-sensor-data-modeling-a"> </a>✅ <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-sensor-data/">Sensor Data Modeling</a></h3><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-homework"> </a>10. Homework</h2><ol><li><p>Complete <a href="#7-working-with-data-types">Working with Data Types</a>. Take a screenshot of the CQL Console showing the rows in tables<code>table_with_udt</code> and <code>table_with_counters</code> before <em>and</em> after executing the DELETE statements.</p></li><li><p>Complete the mini-course <a href="https://www.datastax.com/learn/data-modeling-by-example/time-series-model">Time Series Data Modeling</a>. Take a screenshot of the final screen of the practice lab, with the console output at the right.</p></li><li><p><a href="https://forms.gle/Z69y4MM3SpEDg7nt5">Submit your homework</a> and be awarded a nice verifiable badge!</p></li></ol><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-what-s-next"> </a>11. What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p><img src="images/badge_data_modeling.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-data-modeling
Getting astra.json for datastaxdevs/workshop-cassandra-application-development at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="workshop-application-development-with-cassandra"> </a>Workshop - Application Development with Cassandra</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="pre-requisites"> </a>Pre-requisites</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-pre-requisites"> </a>Database pre-requisites</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-setup"> </a>1. Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="gitpod"> </a>Gitpod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-the-astra-cli"> </a>Configure the Astra CLI</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="create-and-populate-tables"> </a>Create and populate tables</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="prepare-connection-settings"> </a>Prepare connection settings</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-3-now-to-the-exercises"> </a>2 &amp; 3. Now to the exercises!</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-instructions"> </a>Homework instructions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="conclusion"> </a>Conclusion</h2>
HTML FOR datastaxdevs-workshop-cassandra-application-development<h1><a class="anchor" aria-hidden="true" id="workshop-application-development-with-cassandra"> </a>Workshop - Application Development with Cassandra</h1><p>Learn about drivers, connectivity and requests by running a simple API withApache Cassandra/Astra DB as its data backend. The steps are available in <em>several languages</em>.</p><p>Click here for the workshop <a href="slides/slides.pdf">slide deck</a>.</p><h3><a class="anchor" aria-hidden="true" id="pre-requisites"> </a>Pre-requisites</h3><p>This workshop, the third in a series, builds on the same example used in the two previous episodes (an IoT application to access temperature measurements collected from a network of sensors).</p><p>Besides some knowledge of the <a href="https://www.datastax.com/learn/data-modeling-by-example/sensor-data-model">example domain</a> used in this workshop, it is desirable to have familiarity with the concepts explored in the two previous installments of the series:</p><ul><li><a href="https://github.com/datastaxdevs/workshop-cassandra-fundamentals">Cassandra Fundamentals</a></li><li><a href="https://github.com/datastaxdevs/workshop-cassandra-data-modeling">Data Modeling with Cassandra</a></li></ul><h4><a class="anchor" aria-hidden="true" id="database-pre-requisites"> </a>Database pre-requisites</h4><p>It is assumed in the following that you already have created your <a href="https://github.com/datastaxdevs/workshop-cassandra-fundamentals#4-create-your-astra-db-instance">Astra DB instance</a> as instructed in the first episode, and that you have a valid &quot;DB Administrator&quot; Token.<strong>Note</strong>: the Token that is created with the database does not have all permissions we need, so you <em>need</em> to manually <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">create a Token</a> with the higher &quot;DB Administrator&quot; permission and use it in what comes next.</p><p><em>In case you haven't your Astra DB yet, go ahead and create it now for free by clicking here:</em></p><p><a href="https://astra.dev/yt-01-25-23"><img src="images/create_astra_db_button.png?raw=true" /></a></p><blockquote><p><em>Tip</em>: call the database <code>workshops</code> and the keyspace <code>sensor_data</code>.</p></blockquote><p><em>In case you already have a database <code>workshops</code> but no <code>sensor_data</code> keyspace, simply add it using the &quot;Add Keyspace&quot; button on the bottom right hand corner of your DB dashboard: please do so, avoiding the creation of another database with the same name. (Also, on the free tier you have to &quot;Resume&quot; the database if it is &quot;Hibernated&quot; for prolonged inactivity.)</em></p><h2><a class="anchor" aria-hidden="true" id="1-setup"> </a>1. Setup</h2><h3><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h3><p>If you don't have a &quot;DB Administrator&quot; token yet, log in to your Astra DBand create a token with this role.To create the token, click on the &quot;...&quot; menu next to your database in the mainAstra dashboard and choose &quot;Generate token&quot;. Then make sure you select the &quot;DB Administrator&quot; role.<em>Download or note down all components of the token before navigating away:these will not be shown again.</em><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">See here</a>for more on token creation.</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><p>Mind that, as mentioned already, <em>the default Token auto-created for you whencreating the database is not powerful enough for us today.</em></p><h3><a class="anchor" aria-hidden="true" id="gitpod"> </a>Gitpod</h3><p>First, open this repo in Gitpod by right-clicking the following button (&quot;open in new tab&quot;):</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-application-development"><img src="images/open_in_gitpod.svg?raw=true" /></a></p><p>In a couple of minutes you will have your Gitpod IDE up and running, with this repo cloned, ready and waiting for you (you may have to authorize the Gitpod single-sign-on to continue).</p><blockquote><p>You may see a dialog about &quot;opening this workspace in VS Code Desktop&quot;: you can safely dismiss it.</p></blockquote><p><em>Note</em>: The next steps are to be executed <em>within the Gitpod IDE.</em></p><h3><a class="anchor" aria-hidden="true" id="configure-the-astra-cli"> </a>Configure the Astra CLI</h3><p>Astra CLI is preinstalled: configure it by providing your<code>AstraCS:...</code> database token when prompted:</p><pre lang="bash"><code>astra setup</code></pre><p>(<em>Optional)</em> Now you can use the CLI to get some info on your database(s):</p><pre lang="bash"><code>astra db listastra db get workshops</code></pre><details><summary>Click here if you have <strong>multiple databases</strong> called "workshops"</summary><p>DB names are not required to be unique: what <em>is</em> unique is the <a href="https://awesome-astra.github.io/docs/pages/astra/faq/#where-should-i-find-a-database-identifier">&quot;Database ID&quot;</a>.</p><p>In case you find yourself having more than one &quot;workshops&quot; database, you can provide the ID instead of the name to the CLI commandsand, being able to unambiguously determine the target, it will work flawlessly.</p></details><h3><a class="anchor" aria-hidden="true" id="create-and-populate-tables"> </a>Create and populate tables</h3><p>The Astra CLI can also launch a <code>cqlsh</code> session for you, automatically connected to your database. Use this feature to execute a <code>cql</code> script that resets the contents of the <code>sensor_data</code> keyspace, creating the right tables and writing representative data on them:</p><pre lang="bash"><code># Make sure the DB exists (resuming it if hibernated)astra db create workshops -k sensor_data --if-not-exist --wait# Launch the initialization scriptastra db cqlsh workshops -f initialize.cql</code></pre><p>You are encouraged to peek at the contents of the script to see what it does.</p><p><em>(Optional)</em> Interactively run some test queries on the newly-populated keyspace</p><details><summary>Click to show test queries</summary><p>Open an interactive <code>cqlsh</code> shell with:</p><pre lang="bash"><code>astra db cqlsh workshops -k sensor_data</code></pre><p>Now you can copy-paste any of the queries below and execute them with the <kbd>Enter</kbd> key:</p><pre lang="sql"><code>-- Q1 (note 'all' is the only partition key in this table)SELECT  name, description, region, num_sensorsFROM    networksWHERE   bucket = 'all';-- Q2SELECT  date_hour, avg_temperature, latitude, longitude, sensorFROM    temperatures_by_networkWHERE   network    = 'forest-net'  AND   week       = '2020-07-05'  AND   date_hour &gt;= '2020-07-05'  AND   date_hour  &lt; '2020-07-07';-- Q3SELECT  *FROM    sensors_by_networkWHERE   network = 'forest-net';-- Q4SELECT  timestamp, valueFROM    temperatures_by_sensorWHERE   sensor = 's1003'  AND   date   = '2020-07-06';</code></pre><p>To close <code>cqlsh</code> and get back to the shell prompt, execute the <code>EXIT</code> command.</p></details><h3><a class="anchor" aria-hidden="true" id="prepare-connection-settings"> </a>Prepare connection settings</h3><p>You can use the Astra CLI to prepare a dotenv file which defines all connectionparameters and secrets needed for your application to run:</p><pre lang="bash"><code>astra db create-dotenv workshops -k sensor_data</code></pre><p>A <code>.env</code> file will be created (you can peek at it with Gitpod's file editor, e.g. running <code>gp open .env</code>).</p><p>You can now source it with:</p><pre lang="bash"><code>source .env</code></pre><blockquote><p><strong>Note</strong>: The <code>.env</code> is handled differently in each implementation (Java, Python, Javascript), as will be shown later.</p><p><strong>Note</strong>: While creating the <code>.env</code>, the database's <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">Secure Connect Bundle</a>has also been downloaded for you: you may want to check that the fileis about 12-13 KiB in size with <code>ls $ASTRA_DB_SECURE_BUNDLE_PATH -lh</code>.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="2-3-now-to-the-exercises"> </a>2 &amp; 3. Now to the exercises!</h2><p><em>Note: it is suggested to check the <a href="https://www.datastax.com/learn/data-modeling-by-example/sensor-data-model">sensor data model</a> in order to be better prepared for what follows. Keep it open in another tab.</em></p><p>Choose your path:</p><ul><li><a href="python/Python_README.md">Python</a></li><li><a href="java/Java_README.md">Java</a></li><li><a href="javascript/Javascript_README.md">Javascript</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework-instructions"> </a>Homework instructions</h2><img src="images/api-micro.png?raw=true" width="150" align="left" /><p>In order to get a badge of completion for this workshop, complete the following assignment:</p><blockquote><p>Add a GET endpoint to your API corresponding to query <code>Q1</code>(<em>&quot;Find information about all networks; order by name (asc)&quot;</em>).<strong>Tip</strong>: remember the data-modeling optimization of having inserted the <code>bucket</code> column.</p></blockquote><p>Take a <em>screenshot</em> of the relevant code block and of a successful request to that endpoint and head over to <a href="https://dtsx.io/homework-appdev">this form</a>. Answer a couple of &quot;theory&quot; questions, attach your screenshot, and hit &quot;Submit&quot;.</p><p>That's it! Expect to be awarded your badge in the next week or so!</p><h2><a class="anchor" aria-hidden="true" id="conclusion"> </a>Conclusion</h2><p>This is not the end of your journey, rather the start: come visit us for more cool content, and learn how to succeed using Cassandra and Astra DB in your applications!</p><p>Congratulations and see you at our next workshop!</p><blockquote><p>Sincerely yours, the DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-application-development
Getting astra.json for datastaxdevs/bootcamp-fullstack-apps-with-cassandra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-fullstack-applications-with-apache-cassandra"> </a>Build FullStack Applications with Apache Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="introduction-to-notonly-sql-databases"> </a>🎓🔥 Introduction to NotOnly SQL Databases</h2>
HTML FOR datastaxdevs-bootcamp-fullstack-apps-with-cassandra<h1><a class="anchor" aria-hidden="true" id="build-fullstack-applications-with-apache-cassandra"> </a>Build FullStack Applications with Apache Cassandra</h1><h2><a class="anchor" aria-hidden="true" id="introduction-to-notonly-sql-databases"> </a>🎓🔥 Introduction to NotOnly SQL Databases</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="img/splash.png?raw=true"  width="600px"/><ul><li><a href="https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra/tree/main/week1-intro-to-cassandra">Week I: Intro to Cassandra</a></li><li><a href="https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra/tree/main/week2-data-modelling">Week II: Building Efficient Data Model with Apache Cassandra</a></li><li><a href="week3-app-development">Week III: Back End App Dev with Cassandra</a></li><li><a href="week4-api-microservices">Week IV: APIs and Microservices with Cassandra</a></li></ul>
SUCCESS SAVING README for datastaxdevs-bootcamp-fullstack-apps-with-cassandra
Getting astra.json for datastaxdevs/workshop-storage-attached-indexes at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="scalable-indexing-for-cassandra-using-datastax-astra"> </a>🎓🔥 Scalable Indexing for Cassandra using DataStax Astra 🔥🎓</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-getting-started-with-sai-storage-attached-index"> </a>2. Getting started with SAI (Storage Attached Index)</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-iot-sensor-data-model-use-case"> </a>3. IoT sensor data model use case</h2>
HTML FOR datastaxdevs-workshop-storage-attached-indexes<h2><a class="anchor" aria-hidden="true" id="scalable-indexing-for-cassandra-using-datastax-astra"> </a>🎓🔥 Scalable Indexing for Cassandra using DataStax Astra 🔥🎓</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><img src="https://user-images.githubusercontent.com/23346205/96910093-f5ee7100-146c-11eb-9cfb-06ea3732c2bd.png" alt="Storage Attached Index Workshop" /></p><p>Welcome to the 'Scalable Indexing for Cassandra using DataStax Astra' workshop! In this two-hour workshop, the Developer Advocate team of DataStax will explain the new Storage Attached Indexing (SAI) feature using Astra, the cloud based Cassandra-as-a-Service platform delivered by DataStax, to demonstrate how you can use them to add some much wanted flexibility to your Cassandra data model by querying outside of primary key fields.</p><p><strong>To date, SAI is currently supported on DataStax Astra and DataStax Enterprise 6.8.3+. There is a currently a <a href="https://cwiki.apache.org/confluence/display/CASSANDRA/CEP-7%3A+Storage+Attached+Index">CEP</a> to bring this functionality into Open Source Apache Cassandra.</strong></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li>Materials used during presentations</li><li>Hands-on exercises</li><li>Workshop videos<ul><li><a href="https://www.youtube.com/watch?v=GLJc1Uz9dqw">First workshop</a> [NAM Time]</li><li><a href="https://www.youtube.com/watch?v=yNQYQjXtV30">Second workshop</a> [IST Time]</li></ul></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><strong>Slide deck</strong></td><td><a href="slides/Presentation.pdf">Slide deck for the workshop</a></td></tr><tr><td><strong>Exercise Notebook</strong></td><td><a href="SA_Index_Workshop.tar">Exercises in Studio Notebook for Astra</a></td></tr><tr><td><strong>SAI Documentation</strong></td><td><a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiQuickStart.html">SAI Documentation</a></td></tr><tr><td><strong>1. Create your Astra instance</strong></td><td><a href="#1-create-your-astra-instance">Create your Astra instance</a></td></tr><tr><td><strong>2. Getting started with SAI</strong></td><td><a href="#2-getting-started-with-sai-storage-attached-index">Getting started with SAI</a></td></tr><tr><td><strong>3. IoT sensor data model use case</strong></td><td><a href="#3-iot-sensor-data-model-use-case">IoT sensor data model use case</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2><p><code>ASTRA</code> service is available at url <a href="https://dtsx.io/workshop">https://astra.datastax.com</a>. <code>ASTRA</code> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. <code>Astra</code> offers <strong>5 Gb Tier Free Forever</strong> and you <strong>don't need a credit card</strong> or anything to sign-up and use it.</p><p><strong>✅ Step 1a. Register (if needed) and Sign In to Astra</strong> : You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</p><ul><li><a href="https://dtsx.io/workshop">Registration Page</a></li></ul><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/login-1000.png?raw=true" alt="Registration Image" /></p><ul><li><a href="https://dtsx.io/workshop">Authentication Page</a></li></ul><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/signin-raw.png?raw=true" alt="Login Image" /></p><p><strong>✅ Step 1b. Choose the free plan and select your region</strong></p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/choose-a-plan-1000-annotated.png?raw=true" alt="my-pic" /></p><ul><li><p><strong>Select the free tier</strong>: 5GB storage, no obligation</p></li><li><p><strong>Select the region</strong>: This is the region where your database will reside physically (choose one close to you or your users). For people in EMEA please use <code>europe-west-1</code> idea here is to reduce latency.</p></li></ul><p><strong>✅ Step 1c. Configure and create your database</strong></p><p>You will find below which values to enter for each field.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/create-and-configure-annotated-1000.png?raw=true" alt="my-pic" /></p><ul><li><p><strong>Fill in the database name</strong> - <code>sa_index_workshop_db.</code> While Astra allows you to fill in these fields with values of your own choosing, please follow our reccomendations to make the rest of the exercises easier to follow. If you don't, you are on your own! :)</p></li><li><p><strong>Fill in the keyspace name</strong> - <code>sa_index</code>. It's really important that you use the name sa_index here in order for all the exercises to work well. We realize you want to be creative, but please just roll with this one today.</p></li><li><p><strong>Fill in the Database User name</strong> - <code>index_user</code>. Note the user name is case-sensitive. Please use the case we suggest here.</p></li><li><p><strong>Fill in the password</strong> - <code>index_password1</code>. Fill in both the password and the confirmation fields. Note that the password is also case-sensitive. Please use the case we suggest here.</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</p></li></ul><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/dashboard-pending-1000.png?raw=true" alt="my-pic" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email address when it is ready.</p><p><strong>✅ Step 1d. View your Database and connect</strong></p><p>Let’s review the database you have configured. Select your new database in the lefthand column.</p><p>Now you can select to connect, to park the database, to access CQL console or Studio.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/summary-1000.png?raw=true" alt="my-pic" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-getting-started-with-sai-storage-attached-index"> </a>2. Getting started with SAI (Storage Attached Index)</h2><p><strong>SAI</strong> is short for <strong>Storage Attached Indexes</strong>, it allows us to build indexes on Cassandra tables that dramatically improve the flexibility of Cassandra queries.</p><p>For a <strong>non-technical introduction</strong> to <strong>SAI</strong>, have a look at this <a href="https://www.datastax.com/blog/get-your-head-clouds-part-1-3-build-cloud-native-apps-datastax-astra-dbaas-now-aws-gcp">recent blog post</a>.</p><p>To learn more about <strong>SAI</strong> from a <strong>technical perspective</strong>, have a look at our <a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiQuickStart.html">docs on SAI</a>. Honestly, these docs are pretty great IMO especially the <a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiFaqs.html">SAI FAQ</a>. Definitely take a moment to read through these to get a better understanding of how all of this works and even more examples on top of what we are presenting in this repo.</p><p>Now, let's get into some examples. The first thing we'll need is a table and some data to work with. For that we need to talk about my dentist, or really, a contrived example of a client data model a dentist might need to use.</p><p><strong>✅ Step 2a. Navigate to the CQL Console and login to the database</strong></p><p>In the Summary screen for your database, select <strong><em>CQL Console</em></strong> from the top menu in the main window. This will take you to the CQL Console with a login prompt.</p><p><img src="https://user-images.githubusercontent.com/23346205/97186856-35bc9d80-1778-11eb-80fd-df1a2f264a25.png" alt="astra cqlsh console" /></p><p>Once you click the <em><code>CQL Console</code></em> tab it will automatically log you in and present you with a <code>token@cqlsh&gt;</code> prompt.</p><p><strong>✅ Step 2b. Describe keyspaces and USE <code>sa_index</code></strong></p><p>Ok, you're logged in, and now we're ready to rock. Creating tables is quite easy, but before we create one we need to tell the database which keyspace we are working with.</p><p>First, let's <strong><em>DESCRIBE</em></strong> all of the keyspaces that are in the database. This will give us a list of the available keyspaces.</p><p>📘 <strong>Command to execute</strong></p><pre><code>desc KEYSPACES;</code></pre><p><em>&quot;desc&quot; is short for &quot;describe&quot;, either is valid</em></p><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97188152-939db500-1779-11eb-8e47-0d6b4ebea74b.png" alt="desc keyspace output" /></p><p>Depending on your setup you might see a different set of keyspaces then in the image. The one we care about for now is <strong><em>sa_index</em></strong>. From here, execute the <strong><em>USE</em></strong> command with the <strong><em>sa_index</em></strong> keyspace to tell the database our context is within <strong><em>sa_index</em></strong>.</p><p>📘 <strong>Command to execute</strong></p><pre><code>use sa_index;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97188451-e4151280-1779-11eb-98a2-f7292621f6ac.png" alt="use sa_index output" /></p><p>Notice how the prompt displays <code>token@cqlsh:sa_index&gt;</code> informing us we are <strong>using</strong> the <strong><em>sa_index</em></strong> keyspace. Now we are ready to create our tables.</p><p><strong>✅ Step 2c. Create a <em><code>clients</code></em> table and insert some data</strong></p><p>Create the table.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>CREATE TABLE IF NOT EXISTS clients (    uniqueid uuid primary key,    firstname text,    lastname text,    birthday date,    nextappt timestamp,    newpatient boolean,    photo text);</code></pre><p>Insert some data into the table.</p><p><em>We don't have real image URLs, so we're just using a placeholder string.</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="SQL"><code>INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (D85745B1-4BEC-43D7-8B77-DD164CB9D1B8, 'Alice', 'Apple', '1984-01-24', '2020-10-20 12:00:00', true, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (2A4F139F-0BBF-4A6F-B982-5400F11D2F2B, 'Zeke', 'Apple', '1961-12-30', '2020-10-20 12:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (DF649261-89CB-446B-9998-FFA2D17506F9, 'Lorenzo', 'Banana', '1963-09-03', '2020-10-20 13:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (808E6BBF-A0F4-4E4C-9C97-E36751D51A8B, 'Miley', 'Banana', '1969-02-06', '2020-10-20 13:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (3D458A4D-2F54-4271-BEDC-1FC316B3CC96, 'Cheryl', 'Banana', '1970-07-11', '2020-10-20 14:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (287AB6B4-1AA6-45DF-B6F8-2BE253B9AACE, 'Red', 'Currant', '1974-02-18', '2020-10-20 15:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (AB49D151-CC04-40DC-AEEA-0A4E5F59D69A, 'Matthew', 'Durian', '1976-11-11', '2020-10-19 12:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (783CE790-16B4-4645-B27C-4FDF3994A755, 'Vanessa', 'Elderberry', '1977-12-03', '2020-10-20 15:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (D23997E4-CCCB-46BB-B92F-0D4582A68809, 'Elaine', 'Elderberry', '1979-11-16', '2020-10-20 10:00:00', true, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (36C386C1-3C3B-49FC-81B1-391D5537453D, 'Phoebe', 'Fig', '1986-01-27', '2020-10-21 11:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (00FEE7EE-8F93-4C2E-A8BE-3ADD81235822, 'Patricia', 'Grape', '1986-06-24', '2020-10-21 12:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (B9DB7E99-AD1C-49B1-97C6-87154663AEF4, 'Herb', 'Huckleberry', '1990-07-09', '2020-10-21 13:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (F4DB7673-CA4E-4382-BDCD-2C1704363590, 'John-Henry', 'Huckleberry', '1979-11-16', '2020-10-21 14:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (F4DB7673-CA4E-4382-BDCD-2C1704363595, 'Sven', 'Åskådare', '1967-11-07', '2020-10-21 14:00:00', false, 'imageurl');</code></pre><p><strong>✅ Step 2d. Verify data exists</strong></p><p>Now let's take a look at the data we just inserted.</p><p>📘 <strong>Command to execute</strong></p><pre><code>SELECT * FROM clients;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97189410-f2176300-177a-11eb-90ca-3604f113520f.png" alt="select from client table" /></p><p><strong>✅ Step 2e. Create some indexes</strong></p><p>Ok great, we have data in our table, but remember we used <strong><em><code>uniqueid</code></em></strong> as our <strong>primary key</strong> when we created the table. If we want to query a single patient, we'd have to do that by the <strong><em><code>uniqueid</code></em></strong> column because that's our <strong>partition key</strong> <em>(don't forget, a single value in the primary key is always the partition key)</em>.</p><p>As a matter of fact, let's try an example. Let's say I want to find a user by their lastname.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE lastname = 'Apple';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97208146-33b30880-1791-11eb-8470-13b6381de70e.png" alt="clients where lastname allow filtering" /></p><p>Right, the database is telling me here I <strong>CANNOT</strong> query against the <strong>lastname</strong> column because it is NOT in my primary key <strong><em><code>uniqueid</code></em></strong>.</p><p>But how would we search for users outside of using their unique ID's? We need to look for clients based on information they give us when they walk in the office. Namely, information like first and last name, or birthdate. Maybe a combination of those. Let's set up some indexes to do that.</p><p><em>Don't worry about options in the below statements just yet. We'll get to that. For now, just execute the commands to create your indexes.</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="SQL"><code>CREATE CUSTOM INDEX IF NOT EXISTS ON clients(firstname) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON clients(lastname) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON clients(birthday) USING 'StorageAttachedIndex';</code></pre><p><strong>✅ Step 2f. Execute queries that use firstname, lastname, and birthday using our indexes</strong></p><p>Remember, the <strong><code>clients</code></strong> table data model only includes <strong><code>uniqueid</code></strong> in the primary key. In the traditional Cassandra sense I can only query against the <strong><code>uniqueid</code></strong> column in the <strong>WHERE</strong> clause. However, with our <strong>SAIndexes</strong> now added we can do a lot more.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by ONLY their lastname. Notice the case used.SELECT * FROM clients WHERE lastname = 'Apple';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198417-25f78600-1785-11eb-8632-9a7d30456ec4.png" alt="clients where lastname" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by their lastname and firstname. Notice the case used.SELECT * FROM clients WHERE lastname = 'apple' AND firstname = 'alice';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198713-871f5980-1785-11eb-8416-bd595a70bf6d.png" alt="clients where firstname and lastname" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by an exact match to their birthday.SELECT * FROM clients WHERE birthday = '1984-01-24';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198969-d9607a80-1785-11eb-8a5a-f754995634f1.png" alt="clients where birthday" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by a range match for the year of their birthday.SELECT * FROM clients WHERE birthday &gt; '1984-01-01' AND birthday &lt; '1985-01-01';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97199744-baaeb380-1786-11eb-829d-5e05d99d4ba5.png" alt="clients where birthday range" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by their firstname // and a range match for the year of their birthday. Again, notice the case used.SELECT * FROM clients WHERE firstname = 'aLicE'AND birthday &gt; '1984-01-01' AND birthday &lt; '1985-01-01';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97200012-0f522e80-1787-11eb-8aa9-d3c22049dd4b.png" alt="clients where name and birthday range" /></p><p><strong>✅ Step 2g. Digest everything we just did there</strong></p><p>Ok, so let's break that all down. I said earlier when we created the indexes I would explain the options included with some of the indexes.</p><pre lang="SQL"><code>WITH OPTIONS = {'case_sensitive': false, 'normalize': true };</code></pre><p>So what does the <strong>“WITH OPTIONS”</strong> part mean?</p><p>Well, <a href="https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/cql_commands/cqlCreateCustomIndex.html#cqlCreateCustomIndex__cqlCreateCustomIndexOptions">case_sensitive</a> is fairly straightforward. Setting this <strong>false</strong> allows us to match any combination of case for the terms we are querying against, <strong>firstname</strong> or <strong>lastname</strong> fields according to the indexes we created.</p><p>This is why I kept varying the case used in our queries above. You could <strong>NOT</strong> have done does this with a traditional Cassandra query.</p><p>How about <a href="https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/cql_commands/cqlCreateCustomIndex.html#cqlCreateCustomIndex__cqlCreateCustomIndexOptions">normalize</a>? Basically, this means that special characters, like vowels with diacritics can be represented by multiple binary representations for the same character, which also makes things easier to match.</p><p>An example would be a row with a column value that contained the character <code>Å (U+212B)</code>.  With <strong>normalize</strong> enabled a query that used the character <code>Å (U+00C5)</code> would find that row. This saves from the need to find all unicode variations for a single character.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE lastname = 'Åskådare';</code></pre><p><em>To be clear, this is not Ascii folding where I might insert code that uses <code>é</code> and a select using <code>e</code>. This is coming as a future feature.</em></p><p>To sum up, we queried against a combination of string and date fields using exact matches, multiple string cases, and date ranges. Just by adding an index on 3 fields we significantly expanded the flexibility of our data model.</p><p>Let's do more.</p><p><strong>✅ Step 2h. Add another index to support a new data model requirement</strong></p><p>Imagine a case where we now have a requirement to find clients based off of their next appointment.</p><p>Prior to <strong>SAI</strong>, if I wanted to accomplish this same thing in Cassandra, I would set up a new table using the <strong>date</strong> as the <strong>partition key</strong>, and I'd probably have the <strong>appointment</strong> slots as a <strong>clustering column</strong>, along with the <strong><code>uniqueid</code></strong> rounding out the primary key.</p><p>Then, I would retrieve the days partition to get a list of the appointments for the day. Now, I have <strong>two tables</strong> that I need to worry about to support that query.</p><p>Let's see what this looks like with <strong>SAI</strong>.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>CREATE CUSTOM INDEX IF NOT EXISTS ON clients(nextappt) USING 'StorageAttachedIndex';</code></pre><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE nextappt &gt; '2020-10-20 09:00:00';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97206362-01081080-178f-11eb-8b7d-6b002da6f9fb.png" alt="clients where nextappt" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-iot-sensor-data-model-use-case"> </a>3. IoT sensor data model use case</h2><p>Time to swtich gears to a real IoT data model use case.</p><p>In the following case, an organization recieved a feed of sensor data that always included all of the fields that the sensor kept track of, even if those fields hadn't changed since the last reading.</p><p><strong>All of the data was sent whenever a single field changed values.</strong></p><p>Now, this isn't necessarily something that has to be difficult to deal with, if all of the key fields are the same, <strong>we can easily overwrite redundant data without doing a read-before-write</strong> and all of that non-changing, redundant data will just compact away.</p><p>But, a <strong>problem arises</strong> if we need to <strong>query</strong> based on <strong>something other than the primary key</strong>.</p><p>If this table is instead organized to be physically efficient for querying, then I may not be able to easily upsert the data from the sensor without 1) creating a lot of unnecessary records, or 2) being forced to do a read-before-write to check if a record already exists.</p><p>In this case, the <strong>user was stuck with option 1</strong>, because <strong>it was cheaper to store more data than it was to have the compute resources for all of that extra query power for the 20x read workload that was required just to check to see if a sensor reading was already in the database.</strong></p><p>For this section we will continue by using <a href="SA_Index_Workshop.tar">this Studio notebook</a> in Astra. Please right-click on the link provided and choose <strong>Copy Link Address</strong>. From there, follow the instructions to import into Astra.</p><p>Click on the <strong><code>Studio</code></strong> tab within your Astra console.<img src="https://user-images.githubusercontent.com/23346205/97359835-c3c97e80-1873-11eb-82a7-2d6ce63d04f3.png" alt="astra use studio" /></p><p>This will launch <strong>Studio</strong> in a new tab.</p><p>Click the <strong><code>+</code></strong> icon to import a notebook.<img src="https://user-images.githubusercontent.com/23346205/97360192-3c303f80-1874-11eb-97c1-10d610c93f8c.png" alt="studio import notebooks" /></p><p>Choose <strong><code>IMPORT FROM URL</code></strong>.<img src="https://user-images.githubusercontent.com/23346205/97360504-ae088900-1874-11eb-94ca-1157295169de.png" alt="import from url" /></p><p>Paste in the link address you copied and click <strong><code>Import</code></strong>.<img src="https://user-images.githubusercontent.com/23346205/97360803-0dff2f80-1875-11eb-87a4-eb365d951969.png" alt="import from url with link" /></p><p>From there the notebook will be imported and opened automatically. Navigate down to Section <strong>3. IoT sensor data model use case</strong> to continue on.<img src="https://user-images.githubusercontent.com/23346205/97361093-74844d80-1875-11eb-9d11-ceecc64dd1f7.png" alt="view studio notebook" /></p><!--**✅ Step 3a. Create our `sensordata` table**- This table will create a partition for every hour of every day for each location.- In this case, we have between 1,000 and 10,000 locations, and there are potentially dozens of devices per location.- The **`updated`** **STATIC** column will show the last time that the values in **`payload`** were updated that hour.- As hours go by, we will naturally create a snapshot of the last hour.- This might be undesirable if I didn't know that - I get at least one sensor payload per hour unless a device is offline.📘 **Command to execute**```SQLCREATE TABLE sensordata (    location text,    dayhour timestamp,    device_id text,    device_name text,    updated timestamp STATIC,    payload map<text,text>,    PRIMARY KEY ((location, dayhour), device_id)) WITH CLUSTERING ORDER BY (device_id ASC);```**✅ Step 3b. Create indexes to address query needs outside of our primary key**OK, so this table organizes the data the way we want it to be space efficient, and it gets rid of redundant records by virtue of the physical organziation that it creates on disk. We get the snapshot view that we want each hour, and if most of the values in “payload” don't change over the course an hour, then we avoid both having to do a read before write, and we avoid storing extra copies of that data. Where does **SAI** come into the picture? Well, the trick is that queries against this data use the non-unique **`device_name`** field along with the **`dayhour`** that we're looking for, but we also sometimes need to query by the key in the **`payload`** map. Being able to query with those inputs, and also organize the data as efficiently as we can is nearly impossible without **SAI**. Let's look at the indexes we need to make as well as load some sample data that we can query.📘 **Commands to execute**```SQLCREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(device_name) USING 'StorageAttachedIndex'WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(dayhour) USING 'StorageAttachedIndex';CREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(keys(payload)) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };```_That last **CREATE CUSTOM INDEX** command uses the [keys()](https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiUsing.html#SAIcollectionmapexampleswithkeys,values,andentries) function to index only the map keys in the **payload** map. That lets us **search for entries** with a **specific key name**, which in this case allows us to query for a particular sensor reading._ So, now that we have our table structure, let's load some data and query it.**✅ Step 3c. Insert data**_Note that the UUIDs here are only increasing by one because it's an expedient thing to do when manually generating data, in the real world, don't do that._📘 **Commands to execute**```SQLINSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 01:30:00',{'temp':'freezing!', 'humidity':'low'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB79','device1','2020-10-20 01:31:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB79','device1','2020-10-20 01:32:00',{'temp':'freezing!', 'humidity':'low', 'mood':'full'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB80','device2','2020-10-20 02:30:00',{'speed':'stopped', 'color':'blue'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB81','device2','2020-10-20 03:30:00',{'speed':'slow', 'color':'blue'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 00:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB82','dev1','2020-10-20 00:30:00',{'temp':'hot!', 'humidity':'sticky'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB83','dev2','2020-10-20 01:30:00',{'temp':'warm', 'humidity':'muggy'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB84','dev3','2020-10-20 02:30:00',{'temp':'freezing!', 'humidity':'my beard is growing icicles'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 00:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB85','doohickey','2020-10-20 00:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'rightside up'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB86','doohickey','2020-10-20 01:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'upside down'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB87','doohickey','2020-10-20 02:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'forwards'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB85','doohickey','2020-10-20 03:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'backwards'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:31:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry again'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:35:00',{'temp':'freezing!', 'humidity':'low', 'mood':'full'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:40:00',{'temp':'freezing!', 'humidity':'low', 'mood':'no, still peckish'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB93','dev4','2020-10-20 03:30:00',{'temp':'/tmp', 'speed':'low'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB93','dev4','2020-10-20 03:40:00',{'temp':'/var/lib/tmp', 'speed':'low', 'color':'green'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB94','dev5','2020-10-20 03:45:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB95','dev6','2020-10-20 03:50:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});```_It is worth pointing out that doing an **INSERT** on a **Map** column like this will **always replace the full map**. In this case, I know that's OK for my use case because I always get a full input file that has all the sensor readings in it. Sometimes, this isn't what you want, and you'll need to use the **SET** keyword to **set a specific value in the map**._**✅ Step 3d. Execute queries that use device_name, dayhour, and payload map keys using our indexes**📘 **Command to execute**```SQLSELECT * FROM sensordata WHERE device_name='doohickey';```📗 **Expected output**![sensordata where device_name](https://user-images.githubusercontent.com/23346205/97318153-f2c6fc80-1841-11eb-8c77-9aefed902d61.png)📘 **Command to execute**```SQLSELECT * FROM sensordata WHERE device_name = 'device1' AND dayhour = '2020-10-20 01:00:00';```📗 **Expected output**![sensordata where device_name](https://user-images.githubusercontent.com/23346205/97318153-f2c6fc80-1841-11eb-8c77-9aefed902d61.png)-->
SUCCESS SAVING README for datastaxdevs-workshop-storage-attached-indexes
Getting astra.json for datastaxdevs/workshop-introduction-to-machine-learning at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="machine-learning-with-apache-spark-cassandra"> </a>Machine Learning with Apache Spark &amp; Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="requirements"> </a>Requirements</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-setup"> </a>5. Setup</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-algorithms"> </a>6. Algorithms</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT</h2>
HTML FOR datastaxdevs-workshop-introduction-to-machine-learning<h1><a class="anchor" aria-hidden="true" id="machine-learning-with-apache-spark-cassandra"> </a>Machine Learning with Apache Spark &amp; Cassandra</h1><p><img src="images/intro-to-ML-cover.png" alt="Workshop cover" /></p><p>Welcome to the <strong>Introduction to machine learning</strong> workshop! In this two-hour workshop, we show you how you can leverage the distributed <code>NoSQL database Apache Cassandra™</code> to save your datasets, train you models and predict at scale.</p><p>Want to learn about the awesomeness of distributed databases and computational systems?Want to get hands-on with DataStax's Cassandra-as-a-Service offering (<em>for free!</em>) and use popular Machine Learning tools and algorithms?Join in and follow along with this workshop!</p><ul><li><p>Spark + Cassandra = :heart:</p></li><li><p>Spark + DataStax Astra DB = :fire: :rocket: :stars:</p></li></ul><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create your Database</a></li><li><a href="#5-setup">Setup</a></li><li><a href="#6-algorithms">Algorithms</a></li><li><a href="#7-homework">Homework</a></li><li><a href="#8-whats-next">What's NEXT</a></li></ol><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Learn about the NoSQL database Apache Cassandra™</strong></p><p>2️⃣ <strong>Meet Apache Spark™ and its superpowers</strong></p><p>3️⃣ <strong>Learn about the main ideas and practice of Machine Learning (ML)</strong></p><p>4️⃣ <strong>Get a practical understanding of some of the main ML algorithms</strong></p><p>🚀 <strong>Have fun with an interactive session (Python interactive notebooks + Cassandra + Spark)</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2><details><summary><strong>1️⃣ Can I run this workshop on my computer?</strong></summary><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need: <code>git</code>, <code>docker</code>, <code>docker-compose</code>.</p><p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></details><details><summary><strong>2️⃣ Are there other prerequisites?</strong></summary><p>You will need enough <em>real estate</em> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK).</p><p>You will need an Astra account: don't worry, we'll work through that in the following.</p></details><details><summary><strong>3️⃣ Do I need to pay for anything for this workshop?</strong></summary><p><strong>No.</strong> All tools and services we provide here are FREE. FREE not only during the session but also afterwards.</p></details><details><summary><strong>4️⃣ Will I get a certificate if I attend this workshop?</strong></summary><p>Attending the session is not enough. You need to complete the <a href="#7-homework">homework detailed below</a>and you will get a nice badge that you can share on linkedin or anywhere else<em>(the badge conforms to the &quot;open badge&quot; specifications)</em>.</p></details><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/ask?tags=cassandra">Ask on StackOverflow</a> (or <a href="https://dba.stackexchange.com/questions/ask?tags=cassandra">StackExchange</a> for operators)</li></ul><h3><a class="anchor" aria-hidden="true" id="requirements"> </a>Requirements</h3><ul><li><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">git</a></li><li><a href="https://astra.dev/yt-8-31">DataStax Astra Registration</a> (<em>sign up with the email you used to register for the workshop!</em>)</li><li><a href="https://www.docker.com/products/docker-desktop">Docker</a></li><li><a href="https://docs.docker.com/compose/install/">Docker-compose</a> (<em>included with Docker Desktop for Mac and Windows installs</em>)</li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging the <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a>, create a database. <em>Right-Click the following button</em> and <em>Open in a new TAB:</em></p><p><a href="https://astra.dev/yt-8-31" target="_blank" rel="noopener"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>machine_learning</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>machine_learning</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB dashboard page.</p></blockquote><p>While the database is being created, you will also get a<a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#b-prerequisites"><strong>Security token</strong></a>:save it somewhere safe, since you'll need it later during setup.</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>The database status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><blockquote><p>If you already had the database, you can still create a new token: see <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#b-prerequisites">here</a>.</p></blockquote><p>Then go to the <em>Connect</em> tab for your database and download your <strong>Secure Connect Bundle</strong>, as described <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">at this link</a>. It's a ZIP file of about 12Kb, which you will need later.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-setup"> </a>5. Setup</h2><p>We suggest to use Gitpod: <strong>right-click</strong> on the following button and <strong>open in new tab</strong>:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-introduction-to-machine-learning"><img src="images/open_in_gitpod.svg?raw=true" /></a></p><blockquote><p>You can also run everything locally. In this case, you may need to know what you are doing, as we won't be able to troubleshoot live.</p></blockquote><p>If you are on Gitpod, simply follow the on-screen instructions to get everything running:</p><ul><li>⌛ <em>Wait 2-3 minutes as your IDE (and Linux box) gets provisioned...</em></li><li>When prompted in the Gitpod Console, enter the following information to connect to DB:<ul><li>Astra DB Token ID</li><li>Astra DB Token Secret</li><li>Keyspace name (<code>machine_learning</code> by default)</li></ul></li><li>When asked, drag-and-drop (or copy) the Secure bundle to the required destination</li><li>⌛ <em>Wait another 1-2 minutes (while tables are created and populated in your database) ...</em></li><li>Eventually the Gitpod console will spawn a new tab with the Jupter UI running (<strong>check your pop-up blocker</strong> to let it through)</li><li>Insert the password <code>mlrules</code> to access the Jupyter UI</li></ul><details><summary>Steps for running locally (click to show)</summary><ul><li>Clone the repo, <code>cd</code> into it and launch <code>./init_tools.sh</code> (to get the required tools ready and <code>docker-compose</code> up and running).</li><li>Once that is finished, launch <code>./setup.sh</code> and follow the instructions, similarly as for Gitpod.</li></ul><blockquote><p>You may need to use some custom IP instead of <code>localhost</code> if youuse docker-for-mac, docker-for-windows or similar installation.</p></blockquote><blockquote><p><em>Known Issue</em>: in some cases executing the exercises may lead to memory issues, especiallyon weaker or non-Linux machines due to docker limitations on memory. If you have anyissues with exercises after the first few, try to clean up and start again<code>docker-compose kill &amp;&amp; docker-compose down &amp;&amp; docker-compose up -d</code>.You may need to repeat steps of the notebook you were working on.</p></blockquote></details><details><summary>🤦 "I messed up and I need to re-initialize" (click to show)</summary><p>Don't worry, it happens. Re-initialization of the full repo goes as follows:</p><ul><li><code>./init_tools.sh</code>: this downloads Astra DB client utilities and starts your <code>docker-compose</code> image(s). Make sure you have no runningDocker images before re-launching this.</li><li><code>./setup.sh</code>: this allows you to re-create the secrets file. Launch again if you messed up with token info, bundle zipfile and so on. This, in turn, invokes the following ...</li><li><code>./initialize/initialize.sh</code>: table creation and bulk migration of needed datasets from files to database tables.</li></ul></details><h2><a class="anchor" aria-hidden="true" id="6-algorithms"> </a>6. Algorithms</h2><p>The main Jupyter web interface will list five numbered notebooks available.Each one illustrates a key algorithm in Machine Learning:</p><ul><li><strong>K-Means</strong> Clustering</li><li><strong>Naive Bayes</strong> inference</li><li><strong>Random Forest</strong> classification</li><li><strong>FP-Growth</strong> recommendation</li><li><strong>Collaborative Filtering</strong> recommendation</li></ul><p>Click a notebook to open it in a new tab, then you can run all code cellssequentially by clicking on them and hitting <code>Ctrl + Enter</code>.Watch each code cell execute (its numbering will display <code>[*]</code> while running)and, when it finishes, move on to the next.</p><blockquote><p><em>Note</em>: if you see errors such as empty or nonexisting tables, chances areyou started the lab while the database was still being created or was in&quot;maintenance mode&quot;. To fix this, simply issue the command <code>./initialize/initialize.sh</code>and wait one minute or so for it to complete.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2><p><em>Now it's your turn!</em></p><p>Try to improve the accuracy (as computed on the test set) of theRandom Forest classification model by tweaking its parameters.You will need to re-train the model and re-evaluate the accuracy at each try.</p><blockquote><p>Tip: look at the <a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.classification.RandomForestClassifier.html">documentation</a>as a starting point, to see what options there are, pyspark.ml.classification.RandomForestClassifier).</p></blockquote><img src="images/intro-ml-badge.png?raw=true" width="150" align="right" /><p>You can proceed by selecting some parameters (such as <code>numTrees</code> or <code>maxDepth</code>),increase and decrease their value a bit, and compare the accuracy with the&quot;baseline&quot; result from the model you started with.Ideally you should change one parameter at a time,keeping all others the same as the &quot;baseline&quot;.Is the model accuracy more sensitive to <code>numTrees</code> or <code>maxDepth</code>?</p><p>If you really want to get serious, you could even automate this<em>hyperparameter search</em> in the code itself - possibly on a <em>grid</em> of choicesfor the parameters you want to test, such as:</p><pre><code>{numTrees in [5, 10, 20]} x {maxDepth in [2, 5, 10]} x { ... other parameters ... } ...</code></pre><p><strong>Provide a screenshot of an improved choice of parameters, yielding anaccuracy higher than the &quot;baseline&quot;</strong>(Note: an improvement of at least 0.05 is possible).</p><p>Go to <a href="https://dtsx.io/homework-intro-ml">this form</a> to submit your homework, give us a few days to review it,and wait for your well-deserved &quot;Intro to Machine Learning&quot; badge!</p><h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT</h2><p>We've just scratched the surface of what you can do with</p><ul><li>Astra DB, built on Apache Cassandra™;</li><li>Apache Spark™;</li><li>the awesome algorithm in the Machine Learning field.</li></ul><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p><strong>Congratulations: you made to the end of today's workshop.</strong></p><p>Don't forget to <a href="#7-homework">submit your homework</a> and be awarded a nice verified badge!</p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-introduction-to-machine-learning
Getting astra.json for datastaxdevs/workshop-nosqlbench at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db-with-nosqlbench"> </a>Benchmark your Astra DB with NoSQLBench</h1>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="before-you-start"> </a>Before you start</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="faq"> </a>FAQ</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="launch-gitpod-and-setup-nosqlbench"> </a>Launch Gitpod and setup NoSQLBench</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="install-nosqlbench"> </a>Install NoSQLBench</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="version-used"> </a>Version used</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="upload-the-secure-connect-bundle-to-gitpod"> </a>Upload the Secure Connect Bundle to Gitpod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-the-astra-db-parameters"> </a>Configure the Astra DB parameters</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="run-benchmarks"> </a>Run benchmarks</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="a-short-dry-run"> </a>A short dry run</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db"> </a>Benchmark your Astra DB</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-contents"> </a>Database contents</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-health"> </a>Database health</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="final-summary-in-logs"> </a>Final summary in &quot;logs/&quot;</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="additional-histostats-datafile"> </a>Additional &quot;histostats&quot; datafile</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="hdr-extensive-histogram-data"> </a>HDR extensive histogram data</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="metrics-metrics-metrics"> </a>Metrics, metrics, metrics</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="grafana-dashboard"> </a>Grafana dashboard</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="a-glance-at-prometheus"> </a>A glance at Prometheus</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workloads"> </a>Workloads</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-cql-keyvalue"> </a>Inspect &quot;cql-keyvalue&quot;</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="play-with-workloads"> </a>Play with workloads</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="example-1-talking-about-food"> </a>Example 1: talking about food</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="example-2-animal-meeting"> </a>Example 2: animal meeting</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-assignment"> </a>Homework assignment</h2>
HTML FOR datastaxdevs-workshop-nosqlbench<h1><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db-with-nosqlbench"> </a>Benchmark your Astra DB with NoSQLBench</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-nosqlbench"><img src="https://img.shields.io/badge/Gitpod-hands--on-blue?logo=gitpod" alt="Gitpod hands-on" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="images/nosqlbench_banner.png?raw=true" /><p>Time: <em>2 hours</em>. Difficulty: <em>Intermediate</em>. <a href="#create-your-astra-db-instance">Start Building!</a></p><p>The goal of this workshop is to get you familiar with the powerful and versatiletool <strong><a href="https://docs.nosqlbench.io/"><code>NoSQLBench</code></a></strong>. With that, you can perform<strong>industry-grade, robust benchmarksaimed at several (distributed) target systems, especially NoSQL databases</strong>.</p><p>Today you'll be benchmarking Astra DB, a database-as-a-service built on top ofApache Cassandra. Along the way, you will learn the basics of NoSQLBench.</p><p>In this repository you will find all material and references you need:</p><ul><li><a href="https://discord.gg/dBHRakusMN">NoSQLBench Discord</a></li><li><a href="https://docs.nosqlbench.io/">NoSQLBench homepage</a></li><li><a href="#create-your-astra-db-instance">Exercises</a></li><li><a href="#before-you-start">Step-by-step guide</a></li><li><a href="https://dtsx.io/discord">DataStaxDevs Discord server</a> to keep in touch with us</li><li><a href="https://community.datastax.com/">Our Q&amp;A forum</a> (think StackOverflow for Cassandra and all things DataStax)</li><li><a href="slides/datastaxdevs-workshop-benchmarking-nosqlbench.pdf">Slide deck</a></li></ul><!-- - [Workshop video](#) --><h4><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h4><ol><li><a href="#before-you-start">Before you start</a></li><li><a href="#create-your-astra-db-instance">Create your Astra DB instance</a></li><li><a href="#launch-gitpod-and-setup-nosqlbench">Launch Gitpod and setup NoSQLBench</a></li><li><a href="#run-benchmarks">Run benchmarks</a></li><li><a href="#workloads">Workloads</a></li><li><a href="#homework-assignment">Homework assignment</a></li></ol><h2><a class="anchor" aria-hidden="true" id="before-you-start"> </a>Before you start</h2><img src="images/attention.png?raw=true" width="80" align="left" /><blockquote><p><strong>Heads up</strong>: these instructions are available in two forms:a short and to-the-point one (<em>this one</em>),with just the useful commands if you are watching us live; anda <a href="extended_README.md">longer one</a>,with lots of explanations and details, designed for those who follow this workshopat their own pace. Please choose what best suits you!</p></blockquote><h3><a class="anchor" aria-hidden="true" id="faq"> </a>FAQ</h3><ul><li>What are the prerequisites?</li></ul><blockquote><p>This workshop is aimed at data architects, solution architects, developers, or anybody whowants to get serious about measuring the performance of their data-intensive system.You should know what a (distributed) database is, and have a general understanding of thechallenges of communicating over a network.</p></blockquote><ul><li>Do I need to install a database or anything on my machine?</li></ul><blockquote><p>No, no need to install anything. You will do everything in the browser.(That being said, the knowledge you gain today will probably be best put touse once you install NoSQLBench on some client machine to run tests.)</p></blockquote><blockquote><p>You can also choose to work on your machine instead of using Gitpod: there'sno problem with that, just a few setup and operational changes to keepin mind. We will not provide live support in this case, though,assuming you know what you are doing.</p></blockquote><ul><li>Is there anything to pay?</li></ul><blockquote><p><strong>No.</strong> All materials, services and software used in this workshop is <em>free</em>.</p></blockquote><ul><li>Do you cover NoSQLBench 4 or 5?</li></ul><blockquote><p>Ah, I see you are a connoisseur. We focus on the newly-release <strong>NoSQLBench 5</strong>,but we provide tips and remarks aimed at those still using nb4.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3><img src="images/nosqlbench_badge_artwork.png?raw=true" width="200" align="right" /><p>To complete the workshop and get a verified &quot;NoSQLBench&quot; badge,follow these instructions:</p><ol><li>Do the hands-on practice, either during the workshop or by following the instructions in this README;</li><li>(optional) Complete the &quot;Lab&quot; assignment as detailed <a href="homework/homework.md">here</a>;</li><li>Fill the submission form <a href="https://dtsx.io/homework-nosqlbench">here</a>. Answer the theory questions and (optionally) provide a <em>screenshot</em> of the completed &quot;Lab&quot; part;</li><li>give us a few days to process your submission: you should receive your well-earned badge in your email inbox!</li></ol><h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2><p>First you must create a database: an instance of Astra DB, whichyou will then benchmark with NoSQLBench.</p><blockquote><p>Don't worry, you will createit within the &quot;Free Tier&quot;, which offers quite a generous freeallowance in terms of monthly I/O (about 40M operations per month)and storage (80 GB).</p></blockquote><p><a href="https://astra.datastax.com"><img src="images/create_astra_db.png?raw=true" /></a></p><p>You need to:</p><ul><li>create an Astra DB instance <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">as explained here</a>, with <strong>database name</strong> = <code>workshops</code> and <strong>keyspace name</strong> = <code>nbkeyspace</code>;</li><li><em>(this will happen automatically with the previous one)</em> generate and retrieve a DB Token <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">as explained here</a>. <strong>Important</strong>: use the role <em>&quot;DB Administrator&quot;</em> if manually creating the token.</li><li>generate and download a Secure Connect Bundle <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/#c-procedure">as explained here</a>;</li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>Moreover, keep the Astra DB dashboard open: it will be useful later. In particular, locate theHealth tab and the CQL Console.</p><h2><a class="anchor" aria-hidden="true" id="launch-gitpod-and-setup-nosqlbench"> </a>Launch Gitpod and setup NoSQLBench</h2><p><strong>Ctrl-click on the Gitpod button below</strong> to spawn your very own environment + IDE:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-nosqlbench"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>In a few minutes, a full IDE will be ready in your browser, with a fileexplorer on the left, a file editor on the top, and a console (<code>bash</code>) below it.</p><h3><a class="anchor" aria-hidden="true" id="install-nosqlbench"> </a>Install NoSQLBench</h3><p>To download NoSQLBench, type or paste this command in your Gitpod console:</p><pre lang="bash"><code>curl -L -O https://github.com/nosqlbench/nosqlbench/releases/download/nosqlbench-4.17.19/nb5</code></pre><p>then make it executable and move it to a better place:</p><pre lang="bash"><code>chmod +x nb5sudo mv nb5 /usr/local/bin/</code></pre><p>Ok, now check that the program starts: invoking</p><pre lang="bash"><code>nb5 --version</code></pre><p>should output the program version (something like <code>4.17.19</code> or higher).</p><h4><a class="anchor" aria-hidden="true" id="version-used"> </a>Version used</h4><p>This workshop is built for the newly-released NoSQLBench 5.</p><h3><a class="anchor" aria-hidden="true" id="upload-the-secure-connect-bundle-to-gitpod"> </a>Upload the Secure Connect Bundle to Gitpod</h3><p>Locate, with the file explorer on your computer, the bundle file thatyou downloaded earlier (it should be called<code>secure-connect-workshops.zip</code>)and simply <strong>drag-and-drop</strong> it to the file navigator panel(&quot;Explorer&quot;) on the left of the Gitpod view.</p><details><summary>Show me</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/gitpod_uploading_bundle_1_annotated.png?raw=true" /></details><p>Once you drop it you will see it listed in the file explorer itself.As a check, you can issue the command</p><pre lang="bash"><code>ls /workspace/workshop-nosqlbench/secure*zip -lh</code></pre><p>so that you get the <em>absolute path to your bundle file</em> (and also verify that it isthe correct size, about 12-13 KB).</p><details><summary>Show me</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/gitpod_uploading_bundle_2b_annotated.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="configure-the-astra-db-parameters"> </a>Configure the Astra DB parameters</h3><p>Copy the provided template file to a new one and open it in the Gitpodfile editor:</p><pre lang="bash"><code>cp .env.sample .envgp open .env# (you can also simply locate the file#  in the Explorer and click on it)</code></pre><p>Insert the &quot;Client ID&quot; and &quot;Client Secret&quot; of the DB Token you created earlierand, if necessary, adjust the other variables.</p><details><summary>Show me what the .env file would look like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/dotenv2.png?raw=true" /></details><p>Now, source this file to make the definitions therein available to this shell:</p><pre lang="bash"><code>. .env</code></pre><p>To check that the file has been sourced, you can try with:</p><pre lang="bash"><code>echo ${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>and make sure the output is not an empty line.</p><p>(Note that you will have to source the file in any new shell you plan to use).</p><h2><a class="anchor" aria-hidden="true" id="run-benchmarks"> </a>Run benchmarks</h2><p>Everything is set to start running the tool.</p><h3><a class="anchor" aria-hidden="true" id="a-short-dry-run"> </a>A short dry run</h3><p>Try launching this very short &quot;dry-run benchmark&quot;, that instead of actuallyreaching the database simply prints a series of CQL statements to the console(as specified by the <code>driver=stdout</code> parameter):</p><pre lang="bash"><code>nb5 cql-keyvalue2 astra                 \    driver=stdout                       \    rampup-cycles=10                    \    main-cycles=10                      \    keyspace=${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>You will see 21 (fully-formed, valid CQL) statements being printed:one <code>CREATE TABLE</code>, then ten <code>INSERT</code>sand then another ten between <code>SELECT</code>s and further <code>INSERT</code>s.</p><blockquote><p><strong>Note</strong>: we will use workload <code>cql-keyvalue2</code> throughout. This is functionallyidentical to the <code>cql-keyvalue</code> workload but is expressed in the newer syntax for<code>yaml</code> workloads, which comes handy when later dissecting its content.If you are working with NoSQLBench 4, remember to drop the trailing <code>2</code>from the workload name in the following!</p></blockquote><p>Now re-launch the above dry run and look for differences in the output:</p><pre lang="bash"><code>nb5 cql-keyvalue2 astra                 \    driver=stdout                       \    rampup-cycles=10                    \    main-cycles=10                      \    keyspace=${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>is the output identical to the previous run down to the actual &quot;random&quot; values?</p><p>You can also peek at the <code>logs</code> directory now: it is created automatically andpopulated with some information from the benchmark at each execution of <code>nb</code>.</p><h3><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db"> </a>Benchmark your Astra DB</h3><p>It is now time to start hitting the database!</p><p>This time you will run with <code>driver=cql</code> to actually reach the database:for that to work, you will provide all connection parameters set up earlier.</p><p>The next run will ask NoSQLBench to perform a substantial amount of operations,in order to collect enough statistical support for the results.</p><p>Here is the full command to launch:</p><pre lang="bash"><code>nb5 cql-keyvalue2                                                         \    astra                                                                 \    username=${ASTRA_DB_CLIENT_ID}                                        \    password=${ASTRA_DB_CLIENT_SECRET}                                    \    secureconnectbundle=${ASTRA_DB_BUNDLE_PATH}                           \    keyspace=${ASTRA_DB_KEYSPACE_NAME}                                    \    cyclerate=50                                                          \    driver=cql                                                            \    main-cycles=9000                                                      \    rampup-cycles=9000                                                    \    errors='OverloadedException:warn'                                     \    --progress console:5s                                                 \    --log-histograms 'histogram_hdr_data.log:.*.main.result.*:20s'        \    --log-histostats 'hdrstats.log:.*.main.result.*:20s'</code></pre><details><summary>Show me the command breakdown</summary><p>Note that some of the parameters (e.g. <code>keyspace</code>) are workload-specific.</p><table><thead><tr><th>command</th><th>meaning</th></tr></thead><tbody><tr><td><code>cql-keyvalue2</code></td><td>workload</td></tr><tr><td><code>astra</code></td><td>scenario</td></tr><tr><td><code>username</code></td><td>authentication</td></tr><tr><td><code>password</code></td><td>authentication</td></tr><tr><td><code>secureconnectbundle</code></td><td>Astra DB connection parameters</td></tr><tr><td><code>keyspace</code></td><td>target keyspace</td></tr><tr><td><code>cyclerate</code></td><td>rate-limiting (cycles per second)</td></tr><tr><td><code>driver=cql</code></td><td>driver to use (CQL, for AstraDB/Cassandra)</td></tr><tr><td><code>main-cycles</code></td><td>how many operations in the &quot;main&quot; phase</td></tr><tr><td><code>rampup-cycles</code></td><td>how many operations in the &quot;rampup&quot; phase</td></tr><tr><td><code>errors</code></td><td>behaviour if errors occur during benchmarking</td></tr><tr><td><code>--progress console</code></td><td>frequency of console prints</td></tr><tr><td><code>--log-histograms</code></td><td>write data to HDR file (see later)</td></tr><tr><td><code>--log-histostats</code></td><td>write some basic stats to a file (see later)</td></tr></tbody></table><p>This way of invoking <code>nb</code>, the <a href="https://docs.nosqlbench.io/docs/workloads_101/11-named-scenarios/">&quot;named scenario&quot;</a>way, is not the only one: it is also possible to have a finer-grained control over what activities shouldrun with a full-fledged <a href="https://docs.nosqlbench.io/docs/reference/cli-scripting/">CLI scripting</a> syntax.</p><blockquote><p><strong>Note</strong>: the syntax of the <code>errors</code> parameter has been improved in NoSQLBench 5to allow for a <a href="https://docs.nosqlbench.io/docs/reference/error-handlers/">finer control</a> (with multiple directives,such as <code>errors='NoNodeAvailable.*:ignore;InvalidQueryException.*:counter;OverloadedException:warn'</code>).On version 4 you should revert to a simpler parameter,such as <code>errors=count</code>, instead of the above.</p></blockquote></details><p>The benchmark should last about ten minutes, with the progress beingprinted on the console as it proceeds.</p><p>While this runs, have a look around.</p><h4><a class="anchor" aria-hidden="true" id="database-contents"> </a>Database contents</h4><p>Now it's time to find out <em>what is actually being written to the database</em>.</p><p>Choose your database in the Astra main dashboard and click on it;next, go to the &quot;CQL Console&quot; tab in the main panel. In a few seconds theconsole will open in your browser, already connected to your database andwaiting for your input.</p><details><summary>Show me how to get to the CQL Console in Astra</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/astra_get_to_cql_console.gif?raw=true" /></details><p>Start by telling the console that you will be using the <code>nbkeyspace</code> keyspace:</p><pre><code>USE nbkeyspace;</code></pre><p>Check what tables have been created by NoSQLBench in this keyspace:</p><pre><code>DESC TABLES;</code></pre><p>You should see table <code>keyvalue</code> listed as the sole output.Look at a a few lines from this table:</p><pre><code>SELECT * FROM keyvalue LIMIT 20;</code></pre><details><summary>Show me what the output looks like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/select_cql.png?raw=true" /></details><p>Ok, mystery solved. It looks like the table contains simple key-value pairs,with two columns seemingly of numeric type. Check with:</p><pre><code>DESC TABLE keyvalue;</code></pre><p>Oh, looks like both the key and the value columns are of type <code>TEXT</code>:good for adapting this ready-made benchmark to other key/value stores.</p><details><summary>Show me what the output looks like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/desctable_cql.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="database-health"> </a>Database health</h4><p>Locate your database in the Astra main dashboard and click on it;next, go to the &quot;Health&quot; tab in the main panel. You will see what essentiallyis a Grafana dashboard, with a handful of plots being displayed within thetab - all related to how the database is performing in terms of reads and writes.</p><details><summary>Show me the Database Health tab in Astra UI</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/astra_db_health2_annotated.png?raw=true" /></details><p>Check the operations per second from the &quot;Requests Combined&quot; plot;then have a look at the &quot;Write Latency&quot; and &quot;Read Latency&quot; plotsand take note of some of the percentiles shown there.</p><details><summary>Show me "sample values" one could read from the graph</summary><p>Below is a real-life example of the values that could result from a <code>cql-keyvalue2</code>benchmark session in the <em>main</em> phase:</p><table><thead><tr><th>Percentile</th><th>Write Latency</th><th>Read Latency</th></tr></thead><tbody><tr><td>P50</td><td>709     <em>µs</em></td><td>935     <em>µs</em></td></tr><tr><td>P75</td><td>831     <em>µs</em></td><td>1.31  <em>ms</em></td></tr><tr><td>P90</td><td>904     <em>µs</em></td><td>1.53  <em>ms</em></td></tr><tr><td>P95</td><td>1.04  <em>ms</em></td><td>1.77  <em>ms</em></td></tr><tr><td>P99</td><td>2.45  <em>ms</em></td><td>15.6   <em>ms</em></td></tr></tbody></table></details><h4><a class="anchor" aria-hidden="true" id="final-summary-in-logs"> </a>Final summary in &quot;logs/&quot;</h4><p>When the benchmark has finished, open the latest <code>*.summary</code> file and lookfor <code>cqlkeyvalue2_astra_main.result-success</code>.</p><p>Under that metric title, you will see something similar to:</p><pre><code>cqlkeyvalue2_astra_main.result-success             count = 15000         mean rate = 50.00 calls/second     1-minute rate = 49.94 calls/second     5-minute rate = 50.29 calls/second    15-minute rate = 50.57 calls/second</code></pre><h4><a class="anchor" aria-hidden="true" id="additional-histostats-datafile"> </a>Additional &quot;histostats&quot; datafile</h4><p>Use this script to generate a graph of the data collected as &quot;histostats&quot;:</p><pre lang="bash"><code>./hdr_tool/histostats_quick_plotter.py \    hdrstats.log \    -m cqlkeyvalue2_astra_main.result-success</code></pre><p>and then open, in the Gitpod editor, the <code>hdrstats.png</code> image just created.</p><details><summary>Show me the generated "histostats" plot</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/histostats_plot3.png?raw=true" width="360" /></details><blockquote><p>The version of the plotter script included in this repo is for <strong>educational purposes only</strong>:for general use, please head to<a href="https://pypi.org/project/nb-hdr-plotter/">the official release page</a>.</p></blockquote><p>The timings will be larger than those from the Astra health tab: indeed,these are &quot;as seen on the client side&quot; and include more network hops.</p><h4><a class="anchor" aria-hidden="true" id="hdr-extensive-histogram-data"> </a>HDR extensive histogram data</h4><p>Use this script to generate plots from the detailed &quot;HDR histogram data&quot;generated during the benchmark:</p><pre lang="bash"><code>./hdr_tool/hdr_tool.py \    histogram_hdr_data.log \    -b -c -s \    -p SampleData \    -m cqlkeyvalue2_astra_main.result-success</code></pre><details><summary>Show me the plots generated by the HDR file</summary><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_baseplot2.png?raw=true" width="260"/><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_stabilityplot2.png?raw=true" width="260"/><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_percentileplot2.png?raw=true" width="260"/></details><blockquote><p>The version of the plotter script included in this repo is for <strong>educational purposes only</strong>:for general use, please head to<a href="https://pypi.org/project/nb-hdr-plotter/">the official release page</a>.</p></blockquote><p>Again, the timings are larger than those found on the Astra health tab(i.e. on server-side): thesemeasurements are reported &quot;as seen by the testing client&quot;.</p><h3><a class="anchor" aria-hidden="true" id="metrics-metrics-metrics"> </a>Metrics, metrics, metrics</h3><p>Launch a new benchmark, this time having NoSQLBench start a dockerizedGrafana/Prometheus stack for metrics (it will take a few more seconds to start):</p><pre><code>nb5 cql-keyvalue2                                                         \    astra                                                                 \    username=${ASTRA_DB_CLIENT_ID}                                        \    password=${ASTRA_DB_CLIENT_SECRET}                                    \    secureconnectbundle=${ASTRA_DB_BUNDLE_PATH}                           \    keyspace=${ASTRA_DB_KEYSPACE_NAME}                                    \    cyclerate=50                                                          \    rampup-cycles=15000                                                   \    main-cycles=15000                                                     \    errors='OverloadedException:warn'                                     \    --progress console:5s                                                 \    --docker-metrics</code></pre><details><summary>Show me the run with Docker metrics</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_startingdockermetrics.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="grafana-dashboard"> </a>Grafana dashboard</h4><p>Reach the Grafana container in a new tab, with an URL that has <code>3000-</code>in front of your Gitpod URL (e.g.<code>https://3000-datastaxdevs-workshopnos-[...].gitpod.io</code>).</p><p>The default credentials to log in to Grafana are ... <code>admin/admin</code>. Once you'rein, don't bother to reset your password (click &quot;Skip&quot;). You'll get to the Grafanalanding page. Find the &quot;Dashboards&quot; icon in the leftmost menu bar and pick the&quot;Manage&quot; menu item: finally, click on the &quot;NB4 Dashboard&quot; item you should seelisted there. Congratulations, you are seeing the data coming from NoSQLBench.</p><details><summary>Show me how to get to the Grafana plots</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_dashboard.gif?raw=true" /></details><blockquote><p>You may find it convenient to set the update frequency to something like 10seconds and the displayed time window to 5 minutes or so (upper-right controls).</p></blockquote><p>The dashboard comprises several (interactive) plots, updated in real time.</p><details><summary>Show me the dashboard contents</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_plots.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="a-glance-at-prometheus"> </a>A glance at Prometheus</h4><p>To reach the Prometheus container, which handles the &quot;raw&quot; data behind Grafana,open a modified URL (this time with <code>9090-</code>) in a new tab.</p><details><summary>Show me the Prometheus UI</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/prometheus2.gif?raw=true" /></details><p>Click on the &quot;world&quot; icon next to the &quot;Execute&quot; button in the search bar:in the dialog that appears you can look for specific metrics.Try to look for <code>result_success</code> and confirm, then click &quot;Execute&quot;.</p><blockquote><p><strong>Tip:</strong> switch to the &quot;Graph&quot; view for a more immediate visualization.The graphs display &quot;raw&quot; data, hence are in units of nanoseconds.</p></blockquote><p>To make sense of the (heterogeneous) results, some filtering is in order --but we are not entering too much into the details of Prometheus here.</p><p>Just to pique your interest, try pasting these examples and click &quot;Execute&quot;:</p><pre><code># filtering by metadata{__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}# aggregationavg_over_time({__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}[10m])# another aggregation, + filteringmax_over_time({__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}[10m])</code></pre><h2><a class="anchor" aria-hidden="true" id="workloads"> </a>Workloads</h2><p>This part is about how workloads are defined.</p><blockquote><p><strong>Tip</strong>: feel free to interrupt the previous benchmark, if it still runs,with Ctrl-C. You won't need it anymore.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="inspect-cql-keyvalue"> </a>Inspect &quot;cql-keyvalue&quot;</h3><p>Ask NoSQLBench to dump to a file the <code>yaml</code> defining the workloadyou just ran:</p><pre lang="bash"><code>    nb5 --copy cql-keyvalue2</code></pre><p><em>(you can also get a comprehensive list of all available workloads with<code>nb5 --list-workloads</code>, by the way, and a more fine-grained output with<code>nb5 --list-scenarios</code>.)</em></p><p>A file <code>cql-keyvalue2.yaml</code> is created in the working directory.You can open it (clicking on it in the Gitpod explorer or by running<code>gp open cql-keyvalue2.yaml</code>).</p><p>Have a look at the file and try to identify its structure and the variousphases the benchmark is organized into.</p><p>There are profound differences in the way the same workload is expressedin the NoSQLBench 4 yaml file and the NoSQLBench 5 format.</p><details><summary>Show me the differences</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/cql-keyvalue-nb4-vs-nb5.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="play-with-workloads"> </a>Play with workloads</h3><p>A good way to understand workload construction is to start from simple ones.</p><p>To run the following examples please go to the appropriate subdirectory:</p><pre><code>cd workloads</code></pre><h4><a class="anchor" aria-hidden="true" id="example-1-talking-about-food"> </a>Example 1: talking about food</h4><p>Run the first example (and then look at the corresponding<code>simple-workload.yaml</code>) with:</p><pre><code>nb5 run driver=stdout workload=simple-workload cycles=12</code></pre><p>Look at how <em>bindings</em> connect the sequence of operations to &quot;execute&quot;(in this case, simply print on screen) with the data to be used inthem.</p><h4><a class="anchor" aria-hidden="true" id="example-2-animal-meeting"> </a>Example 2: animal meeting</h4><p>Run the second example, which is an example of structuring a workloadin <em>phases</em> (and then open <code>workload-with-phases.yaml</code>):</p><pre><code>nb5 workload-with-phases default driver=stdout</code></pre><p>Notable features of this workload are its multi-phase structure(a nearly universal feature of actual benchmarks), the useof the <code>ratio</code> parameter, and the usage of template parameters in thedefinition.</p><h2><a class="anchor" aria-hidden="true" id="homework-assignment"> </a>Homework assignment</h2><p>The &quot;Lab&quot; part of the homework, which requires you to finalizea workload <code>yaml</code> and make it work according to specifications,is detailed on <a href="homework/homework.md">this page</a>.</p><p><strong>To submit your homework, please use <a href="https://dtsx.io/homework-nosqlbench">this form</a>.</strong></p>
SUCCESS SAVING README for datastaxdevs-workshop-nosqlbench
Getting astra.json for datastaxdevs/workshop-k8ssandra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="k8ssandra-workshop"> </a>K8ssandra Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workshop-practice"> </a>Workshop Practice</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="resources-and-next-steps"> </a>Resources and next steps</h2>
HTML FOR datastaxdevs-workshop-k8ssandra<h1><a class="anchor" aria-hidden="true" id="k8ssandra-workshop"> </a>K8ssandra Workshop</h1><p>In this repository, you'll find everything for the Cassandra Kubernetes Workshop delivered by DataStax Developers!</p><p>How to do the workshop and learn the new skills? Very easy, just three steps!</p><ol><li>Watch <a href="https://youtu.be/GddqfK8JubA">the workshop</a> on youtube</li><li>Do the <a href="https://github.com/datastaxdevs/k8ssandra-workshop/wiki">practice steps</a></li><li>Ask you questions (<a href="https://bit.ly/cassandra-workshop">chat</a> or <a href="https://community.datastax.com">forum</a>)</li></ol><p>Done! That's it, you are amazing!</p><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2><ul><li><a href="https://youtu.be/GddqfK8JubA">Workshop on YouTube</a></li><li><a href="https://github.com/datastaxdevs/k8ssandra-workshop/raw/main/K8ssandra%20Workshop%20Feb%202021.pdf">Presentation</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com">Q&amp;A: community.datastax.com</a></li></ul><h2><a class="anchor" aria-hidden="true" id="workshop-practice"> </a>Workshop Practice</h2><p>Instructions has been moved to the wiki to ease the progression.</p><p align="left"><a href="https://github.com/datastaxdevs/k8ssandra-workshop/wiki"> <img src="https://dabuttonfactory.com/button.png?t=Open+labs+in+wiki&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798" /></a></p><h2><a class="anchor" aria-hidden="true" id="resources-and-next-steps"> </a>Resources and next steps</h2><ul><li>For further learning from our team, please checkout <a href="https://datastax.com/dev">datastax.com/dev</a> where we keep many resources and hands on labs to help you improve your skill set.</li><li>If you are looking to get certified on Cassandra, please visit <a href="https://datastax.com/dev/certifications">datastax.com/dev/certifications</a>.</li><li>To get involved in the discussion around this project and others, please check out <a href="https://community.datastax.com">community.datastax.com</a>.</li><li>To learn more about K8ssandra, please checkout our website at <a href="https://k8ssandra.io">k8ssandra.io</a> and our project github at <a href="https://github.com/k8ssandra/k8ssandra">github.com</a>.</li><li>Liked the workshop? Subscribe to the next one at <a href="https://datastax.com/workshops">datastax.com/workshops</a>!</li></ul>
SUCCESS SAVING README for datastaxdevs-workshop-k8ssandra
Getting astra.json for datastaxdevs/workshop-battlestax at 277
No astra.json for datastaxdevs/workshop-battlestax at 281
No astrajson for BattleStax
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="jamstack-react-workshop"> </a>🚀 JamStack + 🧑‍🚀 React + 🧑‍💻 Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>ℹ️ Housekeeping</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="chat-with-discord"> </a>💬 Chat with Discord*</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="quizz-with-mentimeter"> </a>❓ Quizz with Mentimeter</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="the-crew"> </a>🧑🏻‍🤝‍🧑🏽 The Crew</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>🗓️ Table of Contents</h2>
HTML FOR datastaxdevs-workshop-battlestax<h1><a class="anchor" aria-hidden="true" id="jamstack-react-workshop"> </a>🚀 JamStack + 🧑‍🚀 React + 🧑‍💻 Workshop</h1><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a><a href="https://app.netlify.com/sites/battlestax-tutorial/deploys"><img src="https://api.netlify.com/api/v1/badges/e265340f-c6a6-4d7b-b24c-438b87c67876/deploy-status" alt="Netlify Status" /></a></p><p>Welcome to <strong>BattleStax</strong>, an online party game that you can enjoy with your friends. BattleStax is implemented as a <a href="https://jamstack.org/">JAMStack</a> app that uses <a href="https://stargate.io">Stargate</a>, <a href="https://www.netlify.com/jamstack/">Netlify</a>, <a href="https://dtsx.io/workshop">Astra</a>, and <a href="https://github.com/">GitHub</a> to demonstrate how to build and deploy an application using modern, scalable architectures.</p><p>In this 3 hour workshop you will create your own <strong>BattleStax</strong> game using <a href="https://reactjs.org/">React</a> and <a href="https://redux.js.org/">Redux</a> implemented with a CI/CD pipeline, global CDN network, and <a href="https://cassandra.apache.org/">Apache Cassandra</a> all using <strong>FREE</strong> tech.</p><p><img src="./tutorial/battlestax.png" alt="log" /></p><h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>ℹ️ Housekeeping</h2><details><summary>Click to view the housekeeping items (<i><!--Youtube stream, -->Discord Chat,  Mentimeter quizz, the crew</i>)</summary><p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop.</p><!-- ### 🎥 Live and questions with Youtube**The workshop is live Streamed on youtube, twitch and linkedin. After the session the recordings will be available on our [`DataStax Developers YouTube channel`](https://www.youtube.com/channel/UCAIQY251avaMv7bBv5PCo-A)*Click The image to join the stream*[![stream](./tutorial/workshop-live.png)](https://vimeo.com/datastax/review/478138764/8983f4fca5)--><h3><a class="anchor" aria-hidden="true" id="chat-with-discord"> </a>💬 Chat with Discord*</h3><p>Join our discord room <a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><em>The Fellowship of the Rings</em></a> to chat with the team and meet our 6k+ community there.</p><p><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="./tutorial/discord.png" alt="stream" /></a></p><h3><a class="anchor" aria-hidden="true" id="quizz-with-mentimeter"> </a>❓ Quizz with Mentimeter</h3><p>This workshop is <em>INTERACTIVE</em>. Not only you interact with the speakers through questions but there is more:</p><ul><li>We want to ask you some questions</li></ul><p><img src="./tutorial/mentimeter.png" alt="stream" /></p><ul><li>We want you to mark when the exercise is complete</li></ul><p><img src="./tutorial/mentimeter2.png" alt="stream" /></p><ul><li>We want you win some SWAG with some competitions and live QUIZZES</li></ul><p><img src="./tutorial/mentimeter3.png" alt="stream" /></p><p>To do so we are using <a href="https://www.mentimeter.com/">Mentimeter</a>. To play with us follow the instructions below. The code is <strong><code>99 02 07 7</code></strong>. You can also <a href="https://www.menti.com/wzz24ja21f">open this link</a> in a new tab.</p><p><img src="./tutorial/mentimeter4.png" alt="stream" /></p><h3><a class="anchor" aria-hidden="true" id="the-crew"> </a>🧑🏻‍🤝‍🧑🏽 The Crew</h3><p>The materials has been prepared with live with our great team</p><table><thead><tr><th><img src="./tutorial/crew/chris.png" alt="B" /></th><th><img src="./tutorial/crew/david.png" alt="B" /></th><th><img src="./tutorial/crew/rebecca.png" alt="B" /></th><th><img src="./tutorial/crew/cedrick.png" alt="B" /></th></tr></thead><tbody><tr><td>Chris Whilhite <br><a href="https://github.com/kidrecursive">@kidrecursive</a></td><td>David Gilardi <br><a href="https://github.com/SonicDMG">@SonicDMG</a></td><td>Rebecca Millis <br><a href="https://github.com/beccam">@beccam</a></td><td>Cedrick Lunven<br><a href="https://github.com/clun">@clun</a></td></tr></tbody></table><p><img src="./tutorial/line.png" alt="stream" /></p><!--## 🚀🚀 🚀  Let's Play the Game !Brace yourselves, everybody goes to [https://battlestax-workshop.netlify.app/](https://battlestax-workshop.netlify.app/). [![.](./tutorial/rocket-animation.gif)](https://battlestax-workshop.netlify.app/)--></p></details><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>🗓️ Table of Contents</h2><p><em>All the tutorials and readme files are on the <strong>master</strong>. Start there and then follow each step to get everything hooked up. Get a look at all branches <a href="https://github.com/datastaxdevs/workshop-battlestax/branches">here</a></em></p><ul><li><strong>Bootstraping</strong><ul><li>📚 <a href="./README_JAM.md">What is the JAMStack</a></li><li>⚒️ <a href="./README_step00.md">Setup and deploy your first app</a> <em>(branch <code>master</code>)</em></li></ul></li><li><strong>Step 1 - Serverless</strong><ul><li>📚 <a href="./README_Netlify.md">What can Netlify do for you</a></li><li>⚒️ <a href="./README_step01.md">Expose your &quot;hello world&quot; API</a> (<em>branch: <code>step-1</code></em>)</li></ul></li><li><strong>Step 2 - Implement a Serverless Data API</strong><ul><li>📚 <a href="./README_Astra_Stargate.md">What are DataStax Astra and Stargate</a></li><li>⚒️ <a href="./README_step02.md">Implement a CRUD Api in Astra</a> (<em>branch: <code>step-2</code></em>)</li></ul></li><li><strong>Step 3 - Client and State Management with Redux</strong><ul><li>📚 <a href="./README_Redux_React.md">What are Redux and React</a></li><li>⚒️ <a href="./README_step03.md">Create client state with Redux</a> (<em>branch: <code>step-3</code></em>)</li></ul></li><li><strong>Step 4 - React stuff</strong><ul><li>⚒️ <a href="./README_step04.md">Bind Redux to the User Interface</a> (<em>branch: <code>step-4</code></em>)</li></ul></li><li><strong>What's NEXT ?</strong> <em>(not the framework</em> 😈)<ul><li>📚 <a href="./README_Resources.md">Extra Resources and certifications</a></li><li>💚 <a href="https://github.com/datastaxdevs/workshop-battlestax/blob/master/README_Resources.md#-share-the-love">Share the love</a></li></ul></li></ul><p><em>click the image to start !</em></p><p><a href="./README_JAM.md"><img src="./tutorial/are-you-ready.gif" alt="BattleStax JAMStack Workshop" /></a></p><p><strong>🏠 <a href="./README.md#%EF%B8%8F-table-of-contents">Table of Contents</a></strong> | <em><strong>next=&gt;</strong> 📚 <a href="./README_JAM.md">What is the JAMStack</a></em></p>
SUCCESS SAVING README for datastaxdevs-workshop-battlestax
Getting astra.json for DataStax-Academy/workshop-cassandra-certification at 277
No astra.json for DataStax-Academy/workshop-cassandra-certification at 281
No astrajson for Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="datastax-certification-for-apache-cassandratm-workshop"> </a>🎓🔥 DataStax Certification for Apache Cassandra™ Workshop 🔥🎓</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="materials"> </a>Materials</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-why-should-i-do-this"> </a>1. Why should I do this?</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-which-certification"> </a>2. Which certification?</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-what-steps-do-i-need-to-take"> </a>3. What steps do I need to take?</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-practice-questions"> </a>4. Practice questions</h2>
HTML FOR DataStax-Academy-workshop-cassandra-certification<h2><a class="anchor" aria-hidden="true" id="datastax-certification-for-apache-cassandratm-workshop"> </a>🎓🔥 DataStax Certification for Apache Cassandra™ Workshop 🔥🎓</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Welcome to The <strong>DataStax Apache Cassandra™ Certification Workshop</strong>! In this two-hour workshop, we'll give you all of the details and resources needed to prepare yourself for both the <strong>Administrator Associate</strong> and <strong>Developer Associate</strong> certification exams. Plus, we'll work through some practice questions and discuss some of the main exam topics you'll encounter on your path towards certification.</p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. If you would like to attend one of our live sessions please register <a href="https://www.eventbrite.co.uk/e/certification-exam-preparation-workshop-tickets-123447365393">HERE</a>. In this repository, you'll find everything you need for this workshop:</p><h3><a class="anchor" aria-hidden="true" id="materials"> </a>Materials</h3><ul><li><a href="slides/Presentation.pdf">Slide deck for the workshop</a></li><li><a href="https://youtu.be/1NSUXcWrkZM?t=554">Workshop Recording</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><strong>1. Why should I do this?</strong></td><td><a href="#1-why-should-I-do-this">Why should I do this</a></td></tr><tr><td><strong>2. Which certification?</strong></td><td><a href="#2-which-certification">Which certification</a></td></tr><tr><td><strong>3. What steps do I need to take?</strong></td><td><a href="#3-what-steps-do-I-need-to-take">What steps do I need to take</a></td></tr><tr><td><strong>4. Practice questions</strong></td><td><a href="#4-practice-questions">📚🔥 Practice questions🔥📚</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="1-why-should-i-do-this"> </a>1. Why should I do this?</h2><p>Stealing an excerpt from <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>...</p><p><em>The demand for Apache Cassandra™ and NoSQL skills is skyrocketing, with Cassandra developers commanding <strong>31% higher salaries</strong>, the highest of any database technology.</em></p><p><em><strong>An Apache Cassandra™ Administrator Associate Certification</strong> or <strong>Apache Cassandra™ Developer Associate Certification</strong> is the best way to get started learning and mastering the popular NoSQL database used by teams at Apple, Netflix, Sony, Uber, and thousands more.</em></p><p><em>An official certification helps you gain confidence in your knowledge of Apache Cassandra™ and increases opportunities for career advancement.</em></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-which-certification"> </a>2. Which certification?</h2><p>Again, stealing from <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>...</p><p><em>The <strong>Developer</strong> Certification is designed for professionals that use Apache Cassandra clusters to manage data. This includes roles such as application developers, data architects, database designers, and database administrators.</em></p><p><em>The <strong>Administrator</strong> Certification is designed for professionals who install, configure, manage and tune the performance of Apache Cassandra clusters, such as database administrators, DevOps engineers and Site Reliability Engineers (SREs).</em></p><p>You can choose one path or do them both, it's up to you. Either way you'll level up your game and give your career an edge up to boot.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-what-steps-do-i-need-to-take"> </a>3. What steps do I need to take?</h2><p><strong>✅ Step 1.</strong></p><p>Go to <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>, read through the material, and take special note of the <strong>Exam Rules and Process</strong> section.</p><p><strong>✅ Step 2.</strong></p><p>Choose a <strong>learning path</strong>, either the <strong>Developer</strong> Certification or the <strong>Administrator</strong> Certification.</p><p><strong>✅ Step 3.</strong></p><p>Go to <a href="https://academy.datastax.com/">DataStax Academy</a> and sign up if you have not already done so. Academy is <strong>FREE</strong> along with all of the course content.</p><p><strong>✅ Step 4.</strong></p><p>Based on the <strong>learning path</strong> you've chosen complete the course material within Academy. These links are provided for you in the <strong>Learning Paths</strong> section at <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>. You can also use the following links:</p><p><strong>✅ Step 4a.</strong></p><p>For the <strong>administrator</strong> path you will need courses <a href="https://academy.datastax.com/#/online-courses/6167eee3-0575-4d88-9f80-f2270587ce23">DS201</a> and <a href="https://academy.datastax.com/#/online-courses/b0ef552b-4f01-4e0e-ac17-6e7ce29ad6f0">DS210</a>.</p><p><strong>OR</strong></p><p>For the <strong>developer</strong> path you will need courses <a href="https://academy.datastax.com/#/online-courses/6167eee3-0575-4d88-9f80-f2270587ce23">DS201</a> and <a href="https://academy.datastax.com/#/online-courses/ca2e1209-510b-44a6-97de-d5219d835319">DS220</a>.</p><p><strong>✅ Step 5.</strong></p><p>At a minimum you will need to watch <strong>ALL</strong> course videos and comfortably <strong>pass practice quizzes</strong> for each course based on your <strong>learning path</strong>.</p><p>In some cases virtual machines are provided that provide exercises and go into significantly more detail on the same topics covered in the videos. <strong>While these are highly recommended they are not absolutely required to pass the exams</strong>.</p><p><em>Note: The VMs can be pretty large both in size and resources for some laptops. You may want to consider our free Katacoda courses as an option, however, these scenarios don't cover ALL material from the Academy courses just yet.</em></p><p><em>For Katacoda, use <a href="https://www.datastax.com/learning-series/cassandra-fundamentals">https://www.datastax.com/learning-series/cassandra-fundamentals</a> for <strong>DS201</strong> and <a href="https://katacoda.com/datastax/courses/cassandra-data-modeling">https://katacoda.com/datastax/courses/cassandra-data-modeling</a> for <strong>DS220</strong>. Again, these don't cover <strong>ALL</strong> of the material the exercise VMs do, but are a great alternative if VMs arent an option.</em></p><p><strong>✅ Step 6.</strong></p><p>Get your exam voucher.</p><p>Complete either the <strong>administrator</strong> or <strong>developer</strong> learning paths within Academy. Then, to receive a free voucher email <strong><a href="mailto:academy@datastax.com">academy@datastax.com</a></strong> using the same email associated with your Academy account and the subject <code>Certification workshop voucher</code>. Be sure to let us know which learning path you've chosen.</p><p><em>Note: the free coupon code can be used <strong>2x</strong>: to retake an exam or if you pass, take a different exam. If you pay for an exam using $145.00, this will allow you to take one exam although you have the ability to retake your exam for an additional $145.00.</em></p><p><strong>✅ Step 7.</strong></p><p>Take your exam.</p><p>Navigate to the <strong>DataStax Certification</strong> course in Academy <a href="https://academy.datastax.com/#/online-courses/c34af0d5-6741-4231-b8ea-79f6c7aafe12">HERE</a></p><p><img src="images/certification-course.png?raw=true" alt="certification course" /></p><p>You will need to register for your exam and follow the instructions to setup your environment. Be sure to <strong>Review the Exam Rules</strong> and <strong>Check your computer for compatibility and install a Google Chrome Extension</strong>. Both options will be presented to you from within the course itself.</p><p><strong>✅ Step 8.</strong></p><p>Celebrate, shout from the rooftoops, and don't forget to tell everyone on your LinkedIn profile.</p><p>If you successfully pass your exam you will receive an email congratulating you on your passing grade. From there log back into your Mettl account <em>(or just login through the <strong>DataStax Certification</strong> course in Academy)</em> to get proof of accomplishment.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-practice-questions"> </a>4. Practice questions</h2><p>As part of this workshop we have provided a set of 20 practice questions that span DS201, DS220, and DS210 material. These questions use the same style and form you can expect in the actual exams and will give you an idea of what to expect.</p><p>We highly suggest you run through these and test yourself. Each question will have a hidden answer. Try and answer them first before revealing the solution.</p><p><a href="./PRACTICE.md">--&gt; Go to the Practice Questions</a></p>
SUCCESS SAVING README for DataStax-Academy-workshop-cassandra-certification
Getting astra.json for DataStax-Academy/workshop-k8ssandra-certification at 277
No astra.json for DataStax-Academy/workshop-k8ssandra-certification at 281
No astrajson for Workshop 1: Cassandra CertificationWorkshop 2: K8ssandra Certification
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="datastax-k8ssandra-certification-workshop"> </a>🎓🔥 DataStax K8ssandra Certification Workshop 🔥🎓</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="materials"> </a>Materials</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-why-should-i-do-this"> </a>1. Why should I do this?</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-what-steps-do-i-need-to-take"> </a>2. What steps do I need to take?</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-practice-questions"> </a>3. Practice questions</h2>
HTML FOR DataStax-Academy-workshop-k8ssandra-certification<h2><a class="anchor" aria-hidden="true" id="datastax-k8ssandra-certification-workshop"> </a>🎓🔥 DataStax K8ssandra Certification Workshop 🔥🎓</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Welcome to The <strong>DataStax K8ssandra Certification Workshop</strong>! In this two-hour workshop, we'll give you all of the details and resources needed to prepare yourself for both the <strong>Administrator Associate</strong> and <strong>Developer Associate</strong> certification exams. Plus, we'll work through some practice questions and discuss some of the main exam topics you'll encounter on your path towards certification.</p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. If you would like to attend one of our live sessions please register <a href="https://www.datastax.com/workshops">HERE</a>. In this repository, you'll find everything you need for this workshop:</p><h3><a class="anchor" aria-hidden="true" id="materials"> </a>Materials</h3><ul><li><a href="./k8ssandra-cert-presentation.pdf">Slide deck for the workshop</a></li><li><a href="https://youtu.be/JT1Dljbfmz8">Workshop Recording</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><strong>1. Why should I do this?</strong></td><td><a href="#1-why-should-I-do-this">Why should I do this</a></td></tr><tr><td><strong>3. What steps do I need to take?</strong></td><td><a href="#3-what-steps-do-I-need-to-take">What steps do I need to take</a></td></tr><tr><td><strong>4. Practice questions</strong></td><td><a href="#4-practice-questions">📚🔥 Practice questions🔥📚</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="1-why-should-i-do-this"> </a>1. Why should I do this?</h2><p>Stealing an excerpt from <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>...</p><p><em>The demand for Apache Cassandra™ and NoSQL skills is skyrocketing, with Cassandra developers commanding <strong>31% higher salaries</strong>, the highest of any database technology.</em></p><p><em><strong>An Apache Cassandra™ Administrator Associate Certification</strong> or <strong>Apache Cassandra™ Developer Associate Certification</strong> is the best way to get started learning and mastering the popular NoSQL database used by teams at Apple, Netflix, Sony, Uber, and thousands more.</em></p><p><em>An official certification helps you gain confidence in your knowledge of Apache Cassandra™ and increases opportunities for career advancement.</em></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-what-steps-do-i-need-to-take"> </a>2. What steps do I need to take?</h2><p><strong>✅ Step 1.</strong></p><p>Go to <a href="https://www.datastax.com/dev/certifications">https://www.datastax.com/dev/certifications</a>, read through the material, and take special note of the <strong>Exam Rules and Process</strong> section.</p><p><strong>✅ Step 2.</strong></p><p>Go to the <a href="https://www.datastax.com/learn/apache-cassandra-operations-in-kubernetes">Apache Cassandra Operations in Kubernetes</a> <strong>Learning Series</strong>.</p><p><strong>✅ Step 3.</strong></p><p>Complete all the scanarios in the <strong>Learning Series</strong>.</p><p><strong>✅ Step 4.</strong></p><p>Get your exam voucher.</p><p>Complete either the <strong>administrator</strong> or <strong>developer</strong> learning paths within Academy. Then, to receive a free voucher email <strong><a href="mailto:academy@datastax.com">academy@datastax.com</a></strong> using the same email associated with your Academy account and the subject <code>Certification workshop voucher</code>. Be sure to let us know which learning path you've chosen.</p><p><em>Note: the free coupon code can be used <strong>2x</strong>: to retake an exam or if you pass, take a different exam. If you pay for an exam using $145.00, this will allow you to take one exam although you have the ability to retake your exam for an additional $145.00.</em></p><p><strong>✅ Step 5.</strong></p><p>Take your exam.</p><p>Navigate to the <strong>DataStax Certification</strong> course in Academy <a href="https://academy.datastax.com/#/online-courses/c34af0d5-6741-4231-b8ea-79f6c7aafe12">HERE</a></p><p><img src="images/certification-course.png?raw=true" alt="certification course" /></p><p>You will need to register for your exam and follow the instructions to setup your environment. Be sure to <strong>Review the Exam Rules</strong> and <strong>Check your computer for compatibility and install a Google Chrome Extension</strong>. Both options will be presented to you from within the course itself.</p><p><strong>✅ Step 6.</strong></p><p>Celebrate, shout from the rooftoops, and don't forget to tell everyone on your LinkedIn profile.</p><p>If you successfully pass your exam you will receive an email congratulating you on your passing grade. From there log back into your Mettl account <em>(or just login through the <strong>DataStax Certification</strong> course in Academy)</em> to get proof of accomplishment.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-practice-questions"> </a>3. Practice questions</h2><p>As part of this workshop we have provided a set of 15 practice questions. These questions use the same style and form you can expect in the actual exams and will give you an idea of what to expect.</p><p>We highly suggest you run through these and test yourself. Each question will have a hidden answer. Try and answer them first before revealing the solution.</p><p><a href="./PRACTICE.md">--&gt; Go to the Practice Questions</a></p>
SUCCESS SAVING README for DataStax-Academy-workshop-k8ssandra-certification
Getting astra.json for datastaxdevs/workshop-your-k8s-to-cloud at 277
No astra.json for datastaxdevs/workshop-your-k8s-to-cloud at 281
No astrajson for Cassandra in the cloud
ERROR SAVING README for datastaxdevs-workshop-your-k8s-to-cloud
Getting astra.json for datastaxdevs/workshop-sql-to-nosql-migration at 277
No astra.json for datastaxdevs/workshop-sql-to-nosql-migration at 281
No astrajson for From SQL to NoSQL
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="from-sql-to-nosql-a-migration-path"> </a>🎓🔥 From SQL to NoSQL, a migration path</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-db-instance"> </a>1. Create your Astra DB instance</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1a-register-if-needed-and-sign-in-to-astra-db-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a. Register (if needed) and Sign In to Astra DB : You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1b-create-a-pay-as-you-go-plan"> </a>✅ Step 1b. Create a &quot;pay as you go&quot; plan</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-petclinic-nosql-data-model"> </a>2. Create petclinic NoSQL data model</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-2a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 2a. Navigate to the CQL Console and login to the database</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-2b-describe-keyspaces-and-use-killrvideo"> </a>✅ Step 2b. Describe keyspaces and USE killrvideo</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2c-create-tables"> </a>✅ 2c. Create tables</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-generate-your-astra-application-token"> </a>3. Generate your Astra application token</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-generate-your-application-token"> </a>✅ 3a. Generate your application token</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-transform-and-load-data-with-dsbulk"> </a>4. Transform and load data with DSBulk</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4a-get-your-secure-connect-bundle"> </a>✅ 4a. Get your secure connect bundle</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4b-load-code-owner-code-table-sql-export-into-code-petclinic-owner-code-nosql-table"> </a>✅ 4b. Load <code>owner</code> table SQL export into <code>petclinic_owner</code> NoSQL table</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4b-let-s-break-this-down-a-bit"> </a>✅ 4b. Let's break this down a bit</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2>
HTML FOR datastaxdevs-workshop-sql-to-nosql-migration<h2><a class="anchor" aria-hidden="true" id="from-sql-to-nosql-a-migration-path"> </a>🎓🔥 From SQL to NoSQL, a migration path</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><img src="https://user-images.githubusercontent.com/23346205/113427767-9f824880-93a3-11eb-8461-3689a13882a6.jpeg?raw=true" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://youtu.be/tNvBjY8izSk">Workshop video</a></li><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="https://user-images.githubusercontent.com/1742301/113891771-aeaf2f00-97c5-11eb-844e-c4df5d7c4cc9.png" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps 1-4 from this repository as described below. Make screenshots of the last step (load data with DSBulk)</li><li>Complete scenario <a href="https://www.datastax.com/dev/scenario/try-it-out-cassandra-data-modeling">Cassandra Data Modeling</a> and make a screenshot of the &quot;congratulations&quot; page.</li><li>Submit your homework <a href="https://github.com/datastaxdevs/workshop-sql-to-nosql-migration/issues/new?assignees=HadesArchitect&amp;labels=homework%2C+pending&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a></li></ol><p>That's it, you are done! Expect an email next week!</p><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2><ol><li><a href="#1-create-your-astra-db-instance">Create your Astra DB Instance</a></li><li><a href="#2-create-petclinic-nosql-data-model">Create petclinic NoSQL data model</a></li><li><a href="#3-generate-your-astra-application-token-and-service-account">Generate your Astra application token and service account</a></li><li><a href="#4-transform-and-load-data-with-dsbulk">Load data into Astra DB with DSBulk</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-db-instance"> </a>1. Create your Astra DB instance</h2><p><code>ASTRA</code> service is available at url <a href="https://dtsx.io/workshop">https://astra.datastax.com</a>. <code>ASTRA</code> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. <strong>No credit card or any payment required</strong>, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - <strong>sufficient to run small production workloads</strong>.</p><h3><a class="anchor" aria-hidden="true" id="step-1a-register-if-needed-and-sign-in-to-astra-db-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a. Register (if needed) and Sign In to Astra DB : You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3><p>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</p><ul><li><a href="https://dtsx.io/workshop">Registration Page</a></li></ul><p><img src="https://user-images.githubusercontent.com/23346205/113758960-84387580-96e2-11eb-96dc-27448cf0d55f.png" alt="Registration Image" /></p><ul><li><a href="https://dtsx.io/workshop">Authentication Page</a></li></ul><p><img src="https://user-images.githubusercontent.com/23346205/113758903-6ec34b80-96e2-11eb-990d-49e8a381cb6d.png" alt="Login Image" /></p><h3><a class="anchor" aria-hidden="true" id="step-1b-create-a-pay-as-you-go-plan"> </a>✅ Step 1b. Create a &quot;pay as you go&quot; plan</h3><p>Follow this <a href="https://docs.datastax.com/en/astra/docs/creating-your-astra-database.html">guide</a> and use the values provided below, to set up a pay as you go database with a <strong>FREE</strong> $25 monthly credit.</p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Database name</td><td>sql_to_nosql_db</td></tr><tr><td>Keyspace name</td><td>spring_petclinic</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="2-create-petclinic-nosql-data-model"> </a>2. Create petclinic NoSQL data model</h2><p>Ok, now that you have a database created the next step is to create a tables to work with.</p><h3><a class="anchor" aria-hidden="true" id="step-2a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 2a. Navigate to the CQL Console and login to the database</h3><p>In the Summary screen for your database, select <strong><em>CQL Console</em></strong> from the top menu in the main window. This will take you to the CQL Console and automatically log you in.</p><h3><a class="anchor" aria-hidden="true" id="step-2b-describe-keyspaces-and-use-killrvideo"> </a>✅ Step 2b. Describe keyspaces and USE killrvideo</h3><p>Ok, now we're ready to rock. Creating tables is quite easy, but before we create one we need to tell the database which keyspace we are working with.</p><p>First, let's <strong><em>DESCRIBE</em></strong> all of the keyspaces that are in the database. This will give us a list of the available keyspaces.</p><p>📘 <strong>Command to execute</strong></p><pre><code>desc KEYSPACES;</code></pre><p><em>&quot;desc&quot; is short for &quot;describe&quot;, either is valid</em></p><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/113758501-f5c3f400-96e1-11eb-8f40-4eb2c9b8c2c4.png" alt="Screen Shot 2021-04-06 at 2 11 09 PM" /></p><p>Depending on your setup you might see a different set of keyspaces then in the image. The one we care about for now is <strong><em>spring_petclinic</em></strong>.</p><p>From here, execute the <strong><em>USE</em></strong> command with the <strong><em>spring_petclinic</em></strong> keyspace to tell the database our context is within <strong><em>spring_petclinic</em></strong>.</p><p>📘 <strong>Command to execute</strong></p><pre><code>use spring_petclinic;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/113758637-2015b180-96e2-11eb-85f0-a53c9a6a604a.png" alt="Screen Shot 2021-04-06 at 2 12 24 PM" /></p><p>Notice how the prompt displays <code>token@cqlsh:spring_petclinic&gt;</code> informing us we are <strong>using</strong> the <strong><em>spring_petclinic</em></strong> keyspace. Now we are ready to create our tables.</p><h3><a class="anchor" aria-hidden="true" id="2c-create-tables"> </a>✅ 2c. Create tables</h3><ul><li><em>Execute the following Cassandra Query Language. Copy and paste the following statements into your CQL Console</em></li></ul><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>use spring_petclinic;DROP INDEX IF EXISTS petclinic_idx_vetname;DROP INDEX IF EXISTS petclinic_idx_ownername;DROP TABLE IF EXISTS petclinic_vet;DROP TABLE IF EXISTS petclinic_vet_by_specialty;DROP TABLE IF EXISTS petclinic_reference_lists;DROP TABLE IF EXISTS petclinic_owner;DROP TABLE IF EXISTS petclinic_pet_by_owner;DROP TABLE IF EXISTS petclinic_visit_by_pet;/** A vet can have multiple specialties. */CREATE TABLE IF NOT EXISTS petclinic_vet (  id          uuid,  first_name  text,  last_name   text,  specialties set&lt;text&gt;,  PRIMARY KEY ((id)));/** We could search veterinarian by their names. */CREATE INDEX IF NOT EXISTS petclinic_idx_vetname ON petclinic_vet(last_name);/** We may want to list all radiologists. */CREATE TABLE IF NOT EXISTS petclinic_vet_by_specialty ( specialty   text, vet_id      uuid, first_name  text, last_name   text, PRIMARY KEY ((specialty), vet_id));/**  * Here we want all values on a single node, avoiding full scan.  * We pick am unordered set to avoid duplication, list to be sorted at ui side.  */CREATE TABLE IF NOT EXISTS petclinic_reference_lists (  list_name text,  values set&lt;text&gt;,  PRIMARY KEY ((list_name)));/** Expecting a combobox list references all specialties. */INSERT INTO petclinic_reference_lists(list_name, values) VALUES ('vet_specialty', {'radiology', 'dentistry', 'surgery'});CREATE TABLE IF NOT EXISTS petclinic_owner (  id         uuid,  first_name text,  last_name  text,  address    text,  city       text,  telephone  text,  PRIMARY KEY ((id)));/** We could search veterinarians by their names. */CREATE INDEX IF NOT EXISTS petclinic_idx_ownername ON petclinic_owner(last_name);CREATE TABLE IF NOT EXISTS petclinic_pet_by_owner (  owner_id   uuid,  pet_id     uuid,  pet_type   text,  name       text,  birth_date date,  PRIMARY KEY ((owner_id), pet_id));CREATE TABLE IF NOT EXISTS petclinic_visit_by_pet (   pet_id      uuid,   visit_id    uuid,   visit_date  date,   description text,   PRIMARY KEY ((pet_id), visit_id));INSERT INTO petclinic_reference_lists(list_name, values) VALUES ('pet_type ', {'bird', 'cat', 'dog', 'lizard','hamster','snake'});</code></pre><ul><li><em>You should now have a set of petclinic tables</em></li></ul><pre lang="sql"><code>describe tables;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/113874468-d2ea1c00-9783-11eb-8f7f-e0438682311c.png" alt="Screen Shot 2021-04-07 at 9 29 25 AM" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-generate-your-astra-application-token"> </a>3. Generate your Astra application token</h2><p>In order for you to securely connect to your Cassandra database on Astra DB you need to generate an application token. The cool thing once you generate this once you can then use it for any of your applications or tools to talk to your database.</p><h3><a class="anchor" aria-hidden="true" id="3a-generate-your-application-token"> </a>✅ 3a. Generate your application token</h3><p>If you don't already have one follow the instructions <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html#_create_application_token"><strong>HERE</strong></a> to generate your new token. <strong>Don't forget to download it once created because you will not be able to see it again</strong> without generating a new one.</p><p>Once you <strong>DOWNLOAD</strong> the token if you view the contents they should look something like this:</p><pre lang="shell"><code>&quot;Client Id&quot;,&quot;Client Secret&quot;,&quot;Token&quot;,&quot;Role&quot;&quot;fdsfdslKFdLFdslDFFDjf&quot;,&quot;aaaaaaadsdadasdasdasdfsadfldsjfldjdsaldjasljdasljdsaljdasljdasljdlasjdal-FLflirFdfl.lfjdfdsljfjdl+fdlffkdsslfd&quot;,&quot;AstraCS:ppppdspfdsdslfjsdlfjdlj:540524888-04384039399999999999999999&quot;,&quot;Admin User&quot;</code></pre><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>You'll need to use this in a moment to authenticate with DSBulk so <strong>keep it handy</strong>.</p><h2><a class="anchor" aria-hidden="true" id="4-transform-and-load-data-with-dsbulk"> </a>4. Transform and load data with DSBulk</h2><p>In order to use DSBulk you need to download and install it. While you can do this locally if you would like following the instructions <a href="https://docs.datastax.com/en/astra/docs/loading-and-unloading-data-with-datastax-bulk-loader.html#_prerequisites"><strong>HERE</strong></a> we've already provided it for you using <strong>GitPod</strong>. Click the button below to launch your instance.</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-sql-to-nosql-migration"><img src="https://img.shields.io/badge/Gitpod-Open--in--Gitpod-blue?logo=gitpod" alt="Open in Gitpod" /></a></p><h3><a class="anchor" aria-hidden="true" id="4a-get-your-secure-connect-bundle"> </a>✅ 4a. Get your secure connect bundle</h3><p>We're going to need a secure connect bundle to talk to our Astra DB instance with an external app. The bundle contains all of the information about where our cluster is up on the cloud and how to securly connect. After you launched GitPod you may have noticed a prompt asking you for your <code>Token</code>.</p><p><img src="https://user-images.githubusercontent.com/23346205/113955083-12971f00-97e9-11eb-8110-a5a7db1b9c83.png" alt="Screen Shot 2021-04-07 at 9 33 16 PM" /></p><p>Now, you will see a prompt asking for your <strong>cluster ID</strong>.</p><p><img src="https://user-images.githubusercontent.com/23346205/113955786-67876500-97ea-11eb-8121-6651d44cc4ad.png" alt="Screen Shot 2021-04-07 at 9 43 15 PM" /></p><p>Go back to the Astra DB UI dashboard screen and:</p><ol><li>choose the <code>sql_to_nosql_db</code> database</li><li>copy the Cluster ID using the copy widget</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/113872647-0e83e680-9782-11eb-9dc3-340633466a41.png" alt="Screen Shot 2021-04-07 at 9 15 26 AM" /></p><p>Finally, paste the DB ID into prompt in GitPod and hit <strong><code>ENTER</code></strong>. That's it, you should have your bundle.</p><p>📗 <strong>Expected output</strong><img src="https://user-images.githubusercontent.com/23346205/113955908-9d2c4e00-97ea-11eb-8d3c-a9ff44c8c35f.png" alt="Screen Shot 2021-04-07 at 9 43 32 PM" /></p><h3><a class="anchor" aria-hidden="true" id="4b-load-code-owner-code-table-sql-export-into-code-petclinic-owner-code-nosql-table"> </a>✅ 4b. Load <code>owner</code> table SQL export into <code>petclinic_owner</code> NoSQL table</h3><p>Ok, we're going to use DSBulk in this section to:</p><ul><li>connect to our Astra DB database using the <strong>CLIENT ID</strong> and <strong>CLIENT SECRET</strong> we created earlier in step 3 and the secure connect bundle <code>astra-creds.zip</code></li><li>load data from the owner.csv file (exported from our relational DB <code>owner</code> table)</li><li>do this using a regular <strong>INSERT</strong> statement that maps values from our CSV file while <strong>transforming</strong> data with <code>UUID()</code></li><li>use CSV file headers to identify what data each delimited column contains</li><li>and finally set our delimiter to use &quot;;&quot;</li></ul><p>Once this command is constructed it should look something like this:<img width="1184" alt="Screen Shot 2021-04-07 at 8 05 22 AM" src="https://user-images.githubusercontent.com/23346205/113863760-0d4dbc00-9778-11eb-95cb-ffdb9742525d.png"></p><p><em>An example of how to construct the above DSBulk command can be found <a href="https://docs.datastax.com/en/dsbulk/doc/dsbulk/reference/dsbulkLoad.html"><strong>HERE</strong></a>.</em></p><p>We've made this a little easier by constructing the command for you. Just run the <code>dsbulk.sh</code> script. This will ask for the <strong>CLIENT ID</strong> and <strong>CLIENT SECRET</strong> you created earlier. When it asks, just paste in your value and hit <strong><code>ENTER</code></strong> to go to the next step.</p><p>📘 <strong>Command to execute</strong></p><pre lang="shell"><code>bash dsbulk.sh</code></pre><p>📗 <strong>Expected output</strong><img src="https://user-images.githubusercontent.com/23346205/113866689-9c100800-977b-11eb-95dc-b990d268ac9d.png" alt="Screen Shot 2021-04-07 at 8 29 07 AM" /></p><p>Now, go back to <code>CQL Console</code> in your Astra DB UI and view the data from the <code>petclinic_owner</code> table.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM petclinic_owner;</code></pre><p>📗 <strong>Expected output</strong><img src="https://user-images.githubusercontent.com/23346205/113867461-91a23e00-977c-11eb-93b9-0da86fe7e2d7.png" alt="Screen Shot 2021-04-07 at 8 37 54 AM" /></p><p>Awesome! You now have data in your new NoSQL table.</p><h3><a class="anchor" aria-hidden="true" id="4b-let-s-break-this-down-a-bit"> </a>✅ 4b. Let's break this down a bit</h3><p>So great, you just ran the DSBulk command and something happened, but lets explain this a bit more.</p><p>First thing, here is the source CSV we are using generated from our SQL relational database for the <code>owner</code> table.<img width="636" alt="Screen Shot 2021-04-07 at 8 11 49 AM" src="https://user-images.githubusercontent.com/23346205/113864466-eba10480-9778-11eb-9324-1fe57aedbc9d.png"></p><p>If you remember from our discussion and the <a href="./slides.pdf"><strong>slide deck</strong></a> when moving into something like Cassandra we don't tend to use INTegers for IDs. We use UUIDs instead. This is to ensure IDs are truly unique when using a distributed system. With that, we need to transform the INT based IDs from the SQL data to UUIDs. We do this by using the <code>**UUID()**</code> function in our <strong>INSERT</strong> statement.</p><img width="855" alt="Screen Shot 2021-04-07 at 9 37 31 AM" src="https://user-images.githubusercontent.com/23346205/113875678-02e5ef00-9785-11eb-9a51-8666cb9bb885.png"><p>This will generate UUIDs for us as data is inserted into our new Cassandra table.</p><p>Also, notice the header line in our CSV.</p><img width="503" alt="Screen Shot 2021-04-07 at 9 44 17 AM" src="https://user-images.githubusercontent.com/23346205/113876552-d7173900-9785-11eb-8745-dad34f18740c.png"><p>If you look back to the <strong>INSERT</strong> statement we used you may have noticed something like</p><pre lang="sql"><code>VALUES (:first_name,:last_name,:address,:city,:telephone,UUID())</code></pre><p>where you see items <code>:first_name</code> and <code>:last_name</code>. These are bindings. They are binding the values passed into the <strong>INSERT</strong> statement to the each column by the name of the column. You can use this to map values all sorts of ways and this just scratches the surface, but I think you get the idea.</p><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2><p>Whoohoo! Congrats on making it to the end. While this workshop just touches on this process from a pretty high level hopefully it gives you an idea of the kinds of things you need to do and where to start. To learn more about what you can do with DSBulk take a look at the docs <a href="https://docs.datastax.com/en/dsbulk/doc/dsbulk/reference/dsbulkCmd.html"><strong>HERE</strong></a>. Also, don't forget that you can use Astra DB to experiment and play around with your data model for <strong>FREE</strong> well within the limits of the $25 monthly credit.</p>
SUCCESS SAVING README for datastaxdevs-workshop-sql-to-nosql-migration
Getting astra.json for datastaxdevs/appdev-week1-todolist at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="todo-astra-cassandra"> </a>TODO + Astra + Cassandra 📒</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="an-introduction-to-web-development"> </a>An introduction to web development</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="codepen-starter-examples"> </a>CodePen starter examples</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-a-table-with-rest-api-using-swagger"> </a>3. Create a table with REST API using Swagger</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-insert-data-in-the-table-with-the-rest-api-using-swagger"> </a>4. Insert data in the Table with the REST API using Swagger</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-retrieving-values"> </a>5. Retrieving values</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-launch-gitpod-ide"> </a>6. Launch GitPod IDE</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-launch-the-todo-app"> </a>7. Launch the TODO app</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3>
HTML FOR datastaxdevs-appdev-week1-todolist<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="todo-astra-cassandra"> </a>TODO + Astra + Cassandra 📒</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites">Start Building</a></em></p><p>This is an example React To-Do application using a <a href="https://astra.dev/9-9">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Create a &quot;from scratch&quot; <strong>React</strong> app using NPX</li><li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li><li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li><li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API</li><li>Leverage Netlify and DataStax Astra DB</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a github account</li><li>You will also need an Astra DB account, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href="https://github.com/datastaxdevs/react-basics">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li><li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li><li>Submit your homework <a href="https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a>. Note:<em>never share your Astra DB tokens!</em></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and create database</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-create-a-table-with-rest-api-using-swagger">Create a table with REST API using Swagger</a></li><li><a href="#4-insert-data-in-the-table-with-the-rest-api-using-swagger">Insert data in the Table with the REST API using Swagger</a></li><li><a href="#5-retrieving-values">Retrieving values</a></li><li><a href="#6-launch-gitpod-ide">Launch GitPod IDE</a></li><li><a href="#7-launch-the-todo-app">Launch the TODO app</a></li></ol><h2><a class="anchor" aria-hidden="true" id="an-introduction-to-web-development"> </a>An introduction to web development</h2><h3><a class="anchor" aria-hidden="true" id="codepen-starter-examples"> </a>CodePen starter examples</h3><ul><li><a href="https://codepen.io/DatastaxDevs/pen/WNjrXXp">HTML</a></li><li><a href="https://codepen.io/DatastaxDevs/pen/QWvyOOv">CSS</a></li><li><a href="https://codepen.io/DatastaxDevs/pen/mdmVRwy">Javascript</a></li></ul><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.</p><h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p><a href="https://astra.dev/9-9"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true" /></a></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true" /></li></ul></details><p><strong>Use the following values when creating the database</strong></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>todos_workshop_db</code></td></tr><tr><td><strong>keypace</strong></td><td><code>todos</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td><em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em></td></tr></tbody></table><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true" alt="image" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><p>✅  <strong>Step 2a:</strong>  <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Create a token for your app</a> to use in the settings screen. Use &quot;Database Administrator&quot; permission.</p><p>✅  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p><p><strong>👁️ Expected output</strong></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true" /></li></ul></details><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-create-a-table-with-rest-api-using-swagger"> </a>3. Create a table with REST API using Swagger</h2><p>✅  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by</p><ol><li>Click on your active database</li><li>Click <code>Connect</code> TAB</li><li>Click <code>REST API</code></li><li>Clik link to your swagger endpoint.</li></ol><p><em>As shown on the picture below.</em><img src="https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true" alt="image" /></p><p>✅  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p><ol><li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true" alt="image" /></p><ol start="2"><li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section.</li></ol><ul><li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>.</li><li>Also take note this is using a <strong>POST</strong> command.</li></ul><p><img src="https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true" alt="image" /></p><ol start="3"><li>Click the &quot;Try it out&quot; button</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true" alt="image" /></p><p>✅  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p><ol><li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li><li>Enter the <strong>keyspaceName</strong> <code>todos</code></li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true" alt="image" /></p><ol start="3"><li>Finally, copy the create table statement using the code below into the <strong>body</strong> field</li></ol><pre lang="json"><code>{  &quot;name&quot;: &quot;restfromreadme_by_id&quot;,  &quot;ifNotExists&quot;: true,  &quot;columnDefinitions&quot;: [    {      &quot;name&quot;: &quot;id&quot;,      &quot;typeDefinition&quot;: &quot;uuid&quot;,      &quot;static&quot;: false    },    {      &quot;name&quot;: &quot;text&quot;,      &quot;typeDefinition&quot;: &quot;text&quot;,      &quot;static&quot;: false    },    {      &quot;name&quot;: &quot;key&quot;,      &quot;typeDefinition&quot;: &quot;text&quot;,      &quot;static&quot;: false    },        {          &quot;name&quot;: &quot;completed&quot;,          &quot;typeDefinition&quot;: &quot;boolean&quot;        }  ],  &quot;primaryKey&quot;: {    &quot;partitionKey&quot;: [      &quot;id&quot;    ]  }}</code></pre><ol start="4"><li>And click <strong>execute</strong> to apply the command and create the table</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true" alt="image" /></p><p>You should see a <strong>201</strong> response telling you it correctly created the &quot;restfromreadme_by_id&quot; table.</p><p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p><p><img src="https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true" alt="image" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-insert-data-in-the-table-with-the-rest-api-using-swagger"> </a>4. Insert data in the Table with the REST API using Swagger</h2><p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p><p>✅  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p><ol><li>Scroll down and navigate to the <strong>data</strong> section</li><li>Then find <strong>Add row</strong> and click it to open the section</li></ol><ul><li>Also take note this is using a <strong>POST</strong> command.</li></ul><ol start="3"><li>Click <strong>Try it out</strong> just like we did previously</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true" alt="image" /></p><p>✅  <strong>Step 4b:</strong> FIll in values and add a row</p><ol><li>Add your Astra token</li><li>Add the keyspaceName <code>todos</code></li><li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true" alt="image" /></p><ol start="4"><li>Copy the following JSON into the <strong>body</strong></li></ol><pre lang="json"><code>{&quot;id&quot;:&quot;57dbd260-d905-11eb-b985-c522859819b9&quot;,&quot;completed&quot;:false,&quot;text&quot;:&quot;TODO FROM README&quot;,&quot;key&quot;:&quot;none&quot;}</code></pre><ol start="5"><li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li></ol><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-retrieving-values"> </a>5. Retrieving values</h2><p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p><p>✅  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p><ol><li>Scroll up within the <strong>data</strong> section</li><li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li></ol><ul><li>Take note this is using a <strong>GET</strong> command.</li></ul><ol start="3"><li>Click <strong>Try it out</strong> just like we did previously</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true" alt="image" /></p><p>✅  <strong>Step 5b:</strong> Execute the command to display the data</p><ol><li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li><li>Enter the <strong>keyspaceName</strong> <code>todos</code></li><li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true" alt="image" /></p><ol start="4"><li>Click <strong>Execute</strong></li><li>View the end result data that should be exactly what we created in the previous step</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true" alt="image" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-launch-gitpod-ide"> </a>6. Launch GitPod IDE</h2><ul><li>Click the button to launch the GitPod IDE.</li></ul><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1><details><summary>Take me to the React stuff</summary>  We've created a separate repo going over the Basics of React. To get there, click the link below.<p><a href="https://github.com/datastaxdevs/react-basics">GOTO React-Basics</a></p><p>When you're done, just click on the &quot;Back to Main&quot; breadcrumb to come back here.</p></details><h2><a class="anchor" aria-hidden="true" id="7-launch-the-todo-app"> </a>7. Launch the TODO app</h2><p>✅  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p><p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href="#2-create-a-security-token">the instructions above</a></p><p>✅  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p><ol><li>Create <code>.env</code> file</li></ol><p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.</p><pre lang="bash"><code>npm exec astra-setup todos_workshop_db todos</code></pre><ol start="2"><li>👩‍💻  Install all the packages</li></ol><pre lang="bash"><code>npm install -g netlify-cli</code></pre><p>✅  <strong>Step 7c:</strong> Launch your app</p><ul><li>Run the application</li></ul><pre><code>netlify dev</code></pre><ul><li>The application should automatically launch in the GitPod preview pane</li></ul><h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3><ul><li>The contents of this repo are based on <a href="https://github.com/tjake/todo-astra-react-serverless/">Jake's port</a> of the <a href="https://github.com/tastejs/todomvc/tree/master/examples/react">TodoMVC code</a> originally written by <a href="https://github.com/petehunt">Pete Hunt</a>.</li><li>The example is modified from <a href="https://github.com/huksley/todo-react-ssr-serverless">https://github.com/huksley/todo-react-ssr-serverless</a>.</li></ul><!--- ENDEXCLUDE --->
SUCCESS SAVING README for datastaxdevs-appdev-week1-todolist
Getting astra.json for datastaxdevs/workshop-social-media-tiktok at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-db-tiktok-clone-workshop"> </a>Astra DB TikTok Clone Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>Housekeeping</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1 - Objectives</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2 - Frequently asked questions</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3 - Materials for the Session</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-homework"> </a>4 - Homework</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-1-getting-started-with-database"> </a>LAB 1 - Getting Started with Database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-1-getting-started-with-database"> </a>1.1 - Getting Started with Database</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-a-code-create-astra-account"> </a><code>✅.1.1.a</code>- Create Astra Account</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-b-code-create-astra-database"> </a><code>✅.1.1.b</code>- Create Astra Database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-c-code-database-was-already-existing"> </a><code>✅.1.1.c</code>- Database was already existing</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-2-document-api"> </a>LAB 2 - Document API</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-1-using-document-api"> </a>2.1 Using Document API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-open-swagger-user-interface"> </a><code>✅.2.1.a</code>- Open Swagger User Interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-lists-collections"> </a><code>✅.2.1.b</code>- Lists Collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-create-collection-code-story-code"> </a><code>✅.2.1.c</code>- Create Collection <code>story</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-create-a-first-document"> </a><code>✅.2.1.d</code>- Create a first document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-e-code-search-documents-in-a-collections"> </a><code>✅.2.1.e</code>- Search documents in a collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-f-code-update-a-document"> </a><code>✅.2.1.f</code>- Update a document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-g-code-delete-a-document"> </a><code>✅.2.1.g</code>- Delete a document</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-2-create-astra-credentials"> </a>2.2 - Create Astra Credentials</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-create-astra-credentials"> </a><code>✅.2.2.a</code>- Create Astra Credentials</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-download-astra-credentials"> </a><code>✅.2.2.b</code>- Download Astra Credentials</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-3-ide-setup"> </a>LAB 3 - IDE Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-1-netlify-site-setup"> </a>3.1 - Netlify Site Setup</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-2-launch-gitpod"> </a>3.2 - Launch GitPod</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-open-your-github-repository-readme"> </a><code>✅.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-open-gitpod-ide"> </a><code>✅.3.2.b</code>- Open Gitpod IDE</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-c-code-validating-your-not-using-code-datastaxdevs-code"> </a><code>✅.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-3-astra-cli-setup"> </a>3.3 - Astra CLI Setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-save-your-token"> </a><code>✅.3.3.a</code>- Save your token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-validate-your-configuration"> </a><code>✅.3.3.b</code>- Validate your configuration</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-c-code-list-database-to-see-code-workshops-code"> </a><code>✅.3.3.c</code>- List Database to see  <code>workshops</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-d-code-get-db-details"> </a><code>✅.3.3.d</code>- Get db details</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-e-code-create-configuration-file"> </a><code>✅.3.3.e</code>- Create configuration file</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-4-netlify-cli-setup"> </a>3.4 - Netlify CLI Setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-install-the-package"> </a><code>✅.3.4.a</code>- Install the package</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-5-launch-your-app"> </a>3.5 Launch your app</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-5-a-code-start-application"> </a><code>✅.3.5.a</code>- Start application</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-4-coding-against-db"> </a>LAB 4 - Coding Against DB</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-1-document-api"> </a>4.1 - Document API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-reopen-swagger"> </a><code>✅.4.1.a</code>- Reopen Swagger</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-list-collections"> </a><code>✅.4.1.a</code>- List Collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-documents-of-code-tktkposts-code"> </a><code>✅.4.1.b</code>- List Documents of <code>tktkposts</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-2-astrajs-client"> </a>4.2 - AstraJS Client</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-1-code-initialization"> </a><code>✅.4.2.1</code> - Initialization</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-create-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-c-code-update-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-d-code-search-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-3-serverless-configuration"> </a>4.3 - Serverless configuration</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-4-react-component"> </a>4.4 - React Component</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-react-router"> </a><code>✅.4.4.a</code> - React Router</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-upload-page"> </a><code>✅.4.4.b</code> - Upload Page</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-home-page"> </a><code>✅.4.4.b</code> - Home Page</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-5-netlify-deployments"> </a>LAB 5 - Netlify Deployments</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-1-connect-netlify-to-your-site"> </a>5.1 - Connect Netlify to your site</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-5-1-a-code-authenticate-in-netlify"> </a><code>✅.5.1.a</code> - Authenticate in Netlify</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-5-1-b-code-import-configuration-in-site"> </a><code>✅.5.1.b</code> - Import configuration in site</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-2-deploy-to-production"> </a>5.2 - Deploy to production</h3>
HTML FOR datastaxdevs-workshop-social-media-tiktok<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="astra-db-tiktok-clone-workshop"> </a>Astra DB TikTok Clone Workshop</h1><p><a href="https://github.com/datastaxdevs/workshop-social-media-tiktok"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level</strong> Beginner to Intermediate</p><p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href="https://fanciful-licorice-ea1437.netlify.app">here</a></p><p><img src="./screenshot.jpg" alt="image" /></p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ul><li><strong>HouseKeeping</strong><ul><li><a href="#1---objectives">1. Objectives</a></li><li><a href="#2---frequently-asked-questions">2. Frequently asked questions</a></li><li><a href="#3---materials-for-the-session">3. Materials for the Session</a></li><li><a href="#4---homework">4. Homework</a></li></ul></li><li><strong><a href="#lab-1---getting-started-with-database">LAB 1 - Getting Started with Database</a></strong><ul><li><a href="#11---getting-started-with-database">1.1 - Create Astra Account</a></li><li><a href="#11---getting-started-with-database">1.2 - Create Astra Database</a></li></ul></li><li><strong><a href="#lab-2---document-api">LAB 2 - Document API</a></strong><ul><li><a href="#21-using-document-api">2.1 - Using Document API</a></li><li><a href="#22---create-astra-credentials">2.2 - Create Astra Credentials</a></li></ul></li><li><strong><a href="#lab-3---ide-setup">LAB 3 - IDE Setup</a></strong><ul><li><a href="#31---netlify-site-setup">3.1 - Netlify site setup</a></li><li><a href="#32---launch-gitpod">3.2 - Launch GitPod</a></li><li><a href="#33---astra-cli-setup">3.3 - Astra CLI Setup</a></li><li><a href="#34---netlify-cli-setup">3.4 - Netlify CLI Setup</a></li><li><a href="#35-launch-your-app">3.5 - Launch the application</a></li></ul></li><li><strong><a href="#lab-4---coding-against-db">LAB 4 - Coding Against DB</a></strong><ul><li><a href="#41---document-api">4.1 - Document API</a></li><li><a href="#42---astrajs-client">4.2 - AstraJS Client</a></li><li><a href="#43---serverless-configuration">4.3 - Serverless configuration</a></li><li><a href="#44---react-component">4.4 - React Component</a></li></ul></li><li><strong><a href="#lab-5---netlify-deployments">LAB 5 - Netlify Deployments</a></strong><ul><li><a href="#51---connect-netlify-to-your-site">5.1 - Connect Netlify to your site</a></li><li><a href="#52---deploy-to-production">5.2 - Deploy to production</a></li></ul></li></ul><h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>Housekeeping</h2><h3><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1 - Objectives</h3><ul><li><p>🎯 How to build a frontend application using React Components</p></li><li><p>🎯 How to build a backend with Javascript without Express.</p></li><li><p>🎯 Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p></li><li><p>🎯 Learn what is gitpod and how you can use it in your projects</p></li></ul><h3><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2 - Frequently asked questions</h3><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git installed on your local system</b><li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are there?</b></summary><hr><ul><li>You will need an <b>Github account</b><li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h3><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3 - Materials for the Session</h3><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="jamstack.md">What is JamStack?</a></li><li><a href="#video-tutorial-with-ania-kubow">Video tutorial with Ania Kubow</a></li></ul><h3><a class="anchor" aria-hidden="true" id="4-homework"> </a>4 - Homework</h3><img src="tutorial/images/tiktok-badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li><li>(Optional extra credit) Watch the 2 hour Ania video <a href="#video-tutorial-with-ania-kubow">HERE</a>, build the app yourself, and show us the completed app.</li><li>Submit your homework <a href="https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys">here</a></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="lab-1-getting-started-with-database"> </a>LAB 1 - Getting Started with Database</h2><h3><a class="anchor" aria-hidden="true" id="1-1-getting-started-with-database"> </a>1.1 - Getting Started with Database</h3><p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p><h4><a class="anchor" aria-hidden="true" id="code-1-1-a-code-create-astra-account"> </a><code>✅.1.1.a</code>- Create Astra Account</h4><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://astra.dev/yt-12-14"><img src="./tutorial/images/create_astra_db.png?raw=true" alt="image" /></a></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-1-1-b-code-create-astra-database"> </a><code>✅.1.1.b</code>- Create Astra Database</h4><ul><li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li></ul><p><img src="./tutorial/images/db-create-button.png?raw=true" alt="image" /></p><ul><li>Use the following values when creating the database:</li></ul><table><thead><tr><th>#</th><th>Field Name</th><th>Field Value</th></tr></thead><tbody><tr><td>1</td><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td>2</td><td><strong>Keyspace Name</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td>3</td><td><strong>Cloud Provider</strong></td><td><code>Google Cloud Plaform</code></td></tr><tr><td>4</td><td><strong>Area</strong></td><td><code>North America</code></td></tr><tr><td>5</td><td><strong>Region</strong></td><td><code>Moncks Corner, South Carolina</code></td></tr></tbody></table><blockquote><p>🖥️ <code>Output</code></p><p><img src="./tutorial/images/db-create.png?raw=true" alt="image" /></p></blockquote><ul><li>Now click <code>[Create Database button]</code> that became blue.</li><li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li></ul><blockquote><p>🖥️ <code>Output</code></p><p><img src="./tutorial/images/db-pending.png?raw=true" alt="image" /></p></blockquote><ul><li>Click <code>[Go to Database]</code></li></ul><h4><a class="anchor" aria-hidden="true" id="code-1-1-c-code-database-was-already-existing"> </a><code>✅.1.1.c</code>- Database was already existing</h4><p>Here are some special situations you might encounter.</p><blockquote><p>ℹ️ <strong>Hibernated Database:</strong></p><p>If the DB workshops already exists but is hibernated (you have not use it for a while):</p><ul><li>Click the <code>[Resume Database]</code> button on the top right-hand corner.</li></ul><p><img src="./tutorial/images/db-resume.png?raw=true" alt="image" /></p></blockquote><blockquote><p>ℹ️ <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p><p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p><ul><li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li><li>Provide the keyspace name <code>tiktok_keyspace</code></li><li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li></ul><p><img src="./tutorial/images/db-create-keyspace.png?raw=true" alt="image" /></p></blockquote><h2><a class="anchor" aria-hidden="true" id="lab-2-document-api"> </a>LAB 2 - Document API</h2><h3><a class="anchor" aria-hidden="true" id="2-1-using-document-api"> </a>2.1 Using Document API</h3><h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-open-swagger-user-interface"> </a><code>✅.2.1.a</code>- Open Swagger User Interface</h4><ul><li>(1) -  Select your database in the left panel (if needed)</li><li>(2) -  Select the tab <code>Connect</code></li><li>(3) -  Select the <code>Document API</code> bloc</li><li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li></ul><p><img src="tutorial/images/access-swagger.png?raw=true" alt="image" /></p><ul><li>You should access this screen</li></ul><blockquote><p>🖥️ <code>Swagger UI</code></p><p><img src="tutorial/images/show-swagger.png?raw=true" alt="image" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-lists-collections"> </a><code>✅.2.1.b</code>- Lists Collections</h4><ul><li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li></ul><p><img src="tutorial/images/list-collections-1.png?raw=true" alt="image" /></p><ul><li>(2) - Click the <code>[Try It Out]</code> button</li></ul><p><img src="tutorial/images/list-collections-2.png?raw=true" alt="image" /></p><ul><li>(3) - Populate the form with the following values</li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr></tbody></table><ul><li>(4) - Click on <code>[Execute]</code> button</li></ul><p>The output is empty (expected):</p><pre lang="json"><code>[]</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-create-collection-code-story-code"> </a><code>✅.2.1.c</code>- Create Collection <code>story</code></h4><ul><li><p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>body</strong></td><td><code>{&quot;name&quot;:&quot;story&quot;}</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You can see the output with <code>201</code> (created) code</p></li></ul><p><img src="tutorial/images/create-collection-1.png?raw=true" alt="image" /></p><ul><li>(6) - Following the steps in previous section list collections again, you should get</li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;data&quot;: [   {     &quot;name&quot;: &quot;story&quot;,     &quot;upgradeAvailable&quot;: false   } ]}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-create-a-first-document"> </a><code>✅.2.1.d</code>- Create a first document</h4><p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p><ul><li><p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr></tbody></table><p><strong>body:</strong></p><pre lang="json"><code>{  &quot;name&quot;: &quot;Mo Farooq&quot;,  &quot;username&quot;: &quot;mofarooq32&quot;,  &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,  &quot;is_followed&quot;: true,  &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;,  &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,  &quot;likes&quot;: 10,  &quot;comments&quot;: 2,  &quot;button_visible&quot;: true}</code></pre><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;documentId&quot;: &quot;8aa07632-4ffb-46e5-9d78-b32e21847221&quot;}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-e-code-search-documents-in-a-collections"> </a><code>✅.2.1.e</code>- Search documents in a collections</h4><ul><li><p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>where</strong></td><td><code>{&quot;username&quot;: {&quot;$eq&quot;: &quot;mofarooq32&quot;}}</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get a result</p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;data&quot;: {   &quot;8aa07632-4ffb-46e5-9d78-b32e21847221&quot;: {     &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,     &quot;button_visible&quot;: true,     &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,     &quot;comments&quot;: 2,     &quot;is_followed&quot;: true,     &quot;likes&quot;: 10,     &quot;name&quot;: &quot;Mo Farooq&quot;,     &quot;username&quot;: &quot;mofarooq32&quot;,     &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;   } }}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-f-code-update-a-document"> </a><code>✅.2.1.f</code>- Update a document</h4><ul><li><p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>document-id</strong></td><td>document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code></td></tr></tbody></table><p><strong>body:</strong></p><pre lang="json"><code>{  &quot;name&quot;: &quot;New Name&quot;,  &quot;username&quot;: &quot;mofarooq32&quot;,  &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,  &quot;is_followed&quot;: true,  &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;,  &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,  &quot;likes&quot;: 10,  &quot;comments&quot;: 2,  &quot;button_visible&quot;: true}</code></pre><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get an updated document</p></li></ul><h4><a class="anchor" aria-hidden="true" id="code-2-1-g-code-delete-a-document"> </a><code>✅.2.1.g</code>- Delete a document</h4><ul><li><p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id} </code> _ Delete a document_</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>document-id</strong></td><td>document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get a result code of <code>204</code></p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre><code>Code 204access-control-allow-credentials: true access-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com access-control-expose-headers: Date date: Mon,12 Dec 2022 18:12:43 GMT vary: Origin </code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="2-2-create-astra-credentials"> </a>2.2 - Create Astra Credentials</h3><p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token.</p><h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-create-astra-credentials"> </a><code>✅.2.2.a</code>- Create Astra Credentials</h4><blockquote><p>ℹ️ <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p></blockquote><ul><li>(1) - Go the <code>Organization Settings</code></li><li>(2) - Go to <code>Token Management</code></li><li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li><li>(4) - Click <code>Generate token</code></li></ul><p><img src="./tutorial/images/astra-create-token.gif?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-download-astra-credentials"> </a><code>✅.2.2.b</code>- Download Astra Credentials</h4><ul><li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li></ul><p><img src="./tutorial/images/astra-token.png?raw=true" alt="image" /></p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>Notice the clipboard icon at the end of each value.</p><ul><li><code>Client ID:</code> We will <em>not</em> use this during this workshop</li><li><code>Client Secret:</code> We will <em>not</em> use this during this workshop</li><li><code>Token:</code> <em><strong>This is your token!</strong></em> We will use it as a api Key to interact with APIS</li></ul><h2><a class="anchor" aria-hidden="true" id="lab-3-ide-setup"> </a>LAB 3 - IDE Setup</h2><h3><a class="anchor" aria-hidden="true" id="3-1-netlify-site-setup"> </a>3.1 - Netlify Site Setup</h3><ul><li>(1) Click the button to deploy.</li></ul><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p></blockquote><ul><li><p>(2) - Authenticate with your github Account</p></li><li><p>(3) - Select an account and the github repository where to clone</p></li></ul><p><img src="./tutorial/images/deploy-to-netlify.gif?raw=true" alt="image" /></p><ul><li>(4) - In netlify user interface click on <code>Site deploy in progress</code></li></ul><blockquote><img src="tutorial/images/deploy-1.png" /></blockquote><ul><li>(5) - Click the top deploy link to see the build process.</li></ul><blockquote><img src="tutorial/images/deploy-2.png" /></blockquote><ul><li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li></ul><blockquote><img src="tutorial/images/deploy-3.png" /></blockquote><ul><li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li></ul><blockquote><img src="tutorial/images/deploy-4.png" /></blockquote><ul><li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li></ul><blockquote><img src="tutorial/images/deploy-5.png" /></blockquote><h3><a class="anchor" aria-hidden="true" id="3-2-launch-gitpod"> </a>3.2 - Launch GitPod</h3><h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-open-your-github-repository-readme"> </a><code>✅.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4><ul><li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li></ul><h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4><p><img src="tutorial/images/correct-not-correct.png?raw=true" alt="correct notcorrect" /></p><p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href="#3-clone-your-github-repository">step3</a> to get to your repo.</p><h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-open-gitpod-ide"> </a><code>✅.3.2.b</code>- Open Gitpod IDE</h4><blockquote><p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-2-c-code-validating-your-not-using-code-datastaxdevs-code"> </a><code>✅.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4><ul><li>From your GitPod terminal execute the following command</li></ul><pre lang="bash"><code>git remote -v</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)origin  https://github.com/clun/workshop-astra-tik-tok.git (push)If the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="3-3-astra-cli-setup"> </a>3.3 - Astra CLI Setup</h3><h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-save-your-token"> </a><code>✅.3.3.a</code>- Save your token</h4><p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p><pre><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-validate-your-configuration"> </a><code>✅.3.3.b</code>- Validate your configuration</h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra user list</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list+--------------------------------------+-----------------------------+---------------------+| User Id                              | User Email                  | Status              |+--------------------------------------+-----------------------------+---------------------+| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |+--------------------------------------+-----------------------------+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-c-code-list-database-to-see-code-workshops-code"> </a><code>✅.3.3.c</code>- List Database to see  <code>workshops</code></h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra db list</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>+---------------------+--------------------------------------+---------------------+----------------+| Name                | id                                   | Default Region      | Status         |+---------------------+--------------------------------------+---------------------+----------------+| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         || workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |+---------------------+--------------------------------------+---------------------+----------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-d-code-get-db-details"> </a><code>✅.3.3.d</code>- Get db details</h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra db get workshops</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops+------------------------+-----------------------------------------+| Attribute              | Value                                   |+------------------------+-----------------------------------------+| Name                   | workshops                               || id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    || Status                 | ACTIVE                                  || Default Cloud Provider | GCP                                     || Default Region         | us-east1                                || Default Keyspace       | tiktok_keyspace                         || Creation Time          | 2022-12-12T11:14:58Z                    ||                        |                                         || Keyspaces              | [0] tiktok_keyspace                     ||                        |                                         ||                        |                                         || Regions                | [0] us-east1                            ||                        |                                         |+------------------------+-----------------------------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-e-code-create-configuration-file"> </a><code>✅.3.3.e</code>- Create configuration file</h4><ul><li>Create <code>.env</code> file</li></ul><pre><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></pre><ul><li>Show content</li></ul><pre><code>cat .env</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>ASTRA_DB_APPLICATION_TOKEN=&quot;AstraCS:gfYSGwpaFNGmUZnZTvaCp......&quot;ASTRA_DB_GRAPHQL_URL=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace&quot;ASTRA_DB_GRAPHQL_URL_ADMIN=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin&quot;ASTRA_DB_GRAPHQL_URL_PLAYGROUND=&quot;https://.....-us-east1.apps.astra.datastax.com/api/playground&quot;ASTRA_DB_GRAPHQL_URL_SCHEMA=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema&quot;ASTRA_DB_ID=&quot;.....&quot;ASTRA_DB_KEYSPACE=&quot;tiktok_keyspace&quot;ASTRA_DB_REGION=&quot;us-east1&quot;ASTRA_DB_REST_URL=&quot;https://.....-us-east1.apps.astra.datastax.com/api/rest&quot;ASTRA_DB_REST_URL_SWAGGER=&quot;https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/&quot;ASTRA_DB_SECURE_BUNDLE_PATH=&quot;/home/gitpod/.astra/scb/scb_....._us-east1.zip&quot;ASTRA_DB_SECURE_BUNDLE_URL=&quot;secured_url&quot;ASTRA_ORG_ID=&quot;f9460f14-9879-4ebe-83f2-48d3f3dce13c&quot;ASTRA_ORG_NAME=&quot;cedrick.lunven@datastax.com&quot;ASTRA_ORG_TOKEN=&quot;AstraCS:gfYSGwpaFNGmUZnZT.....&quot;</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="3-4-netlify-cli-setup"> </a>3.4 - Netlify CLI Setup</h3><h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-install-the-package"> </a><code>✅.3.4.a</code>- Install the package</h4><p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p><pre><code>npm install -g netlify-cli</code></pre><blockquote><p>🖥️ <code>Output</code></p><img src="tutorial/images/netlify-install-cli.png?raw=true" /></blockquote><h3><a class="anchor" aria-hidden="true" id="3-5-launch-your-app"> </a>3.5 Launch your app</h3><h4><a class="anchor" aria-hidden="true" id="code-3-5-a-code-start-application"> </a><code>✅.3.5.a</code>- Start application</h4><pre><code>netlify dev</code></pre><p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p><blockquote><p>🖥️ <code>Output</code></p></blockquote><pre><code>◈ Netlify Dev ◈◈ Ignored general context env var: LANG (defined in process)◈ Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA◈ Injected .env file env var: ASTRA_DB_ID◈ Injected .env file env var: ASTRA_DB_KEYSPACE◈ Injected .env file env var: ASTRA_DB_REGION◈ Injected .env file env var: ASTRA_DB_REST_URL◈ Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER◈ Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH◈ Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL◈ Injected .env file env var: ASTRA_ORG_ID◈ Injected .env file env var: ASTRA_ORG_NAME◈ Injected .env file env var: ASTRA_ORG_TOKEN◈ Loaded function add http://localhost:8888/.netlify/functions/add.◈ Loaded function addData http://localhost:8888/.netlify/functions/addData.◈ Loaded function edit http://localhost:8888/.netlify/functions/edit.◈ Loaded function posts http://localhost:8888/.netlify/functions/posts.◈ Functions server is listening on 36661◈ Setting up local development server────────────────────────────────────────────────────────────────  Netlify Build                                                 ────────────────────────────────────────────────────────────────❯ Version  @netlify/build 28.4.5❯ Flags  {}❯ Current directory  /workspace/workshop-astra-tik-tok❯ Config file  /workspace/workshop-astra-tik-tok/netlify.toml❯ Context  dev────────────────────────────────────────────────────────────────  1. Run command for local development                          ────────────────────────────────────────────────────────────────◈ Starting Netlify Dev with Create React App&gt; tik-tok-stargate@0.1.0 start&gt; react-scripts startℹ ｢wds｣: Project is running at http://10.0.5.2/ℹ ｢wds｣: webpack output is served from ℹ ｢wds｣: Content not from webpack is served from /workspace/workshop-astra-tik-tok/publicℹ ｢wds｣: 404s will fallback to /Starting the development server...Compiled successfully!You can now view tik-tok-stargate in the browser.  Local:            http://localhost:3000  On Your Network:  http://10.0.5.2:3000Note that the development build is not optimized.To create a production build, use npm run build.✔ Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml(dev.command completed in 9.4s)   ┌─────────────────────────────────────────────────┐   │                                                 │   │   ◈ Server now ready on http://localhost:8888   │   │                                                 │   └─────────────────────────────────────────────────┘⠦ Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData⠧ Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts⠙ Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.⠦ Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.✔ Setting up the Edge Functions environment. This may take a couple of minutes.</code></pre><p><img src="./tutorial/images/netlify-start.png?raw=true" alt="start" /></p><h2><a class="anchor" aria-hidden="true" id="lab-4-coding-against-db"> </a>LAB 4 - Coding Against DB</h2><h3><a class="anchor" aria-hidden="true" id="4-1-document-api"> </a>4.1 - Document API</h3><p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p><h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-reopen-swagger"> </a><code>✅.4.1.a</code>- Reopen Swagger</h4><p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href="astra.datastax.com">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p><p><img src="./tutorial/images/db_connect.png?raw=true" alt="db_connect" /></p><p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p><p><img src="./tutorial/images/swaggerui_link.png?raw=true" alt="swaggerui_link" /></p><h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-list-collections"> </a><code>✅.4.1.a</code>- List Collections</h4><p>Open up the first section labelled &quot;List collections in namespace&quot; and click the button &quot;Try it out&quot;.</p><p><img src="./tutorial/images/swaggerui_listcollections_02.png?raw=true" alt="swaggerui_link" /></p><ul><li>Execture with <code>[Execute]</code> button</li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{  &quot;data&quot;: [    {      &quot;name&quot;: &quot;story&quot;,      &quot;upgradeAvailable&quot;: false    },    {      &quot;name&quot;: &quot;tktkposts&quot;,      &quot;upgradeAvailable&quot;: false    }  ]}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-documents-of-code-tktkposts-code"> </a><code>✅.4.1.b</code>- List Documents of <code>tktkposts</code></h4><ul><li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li></ul><p><img src="./tutorial/images/swaggerui_searchdocuments_02.png?raw=true" alt="swaggerui_link" /></p><ul><li>Populate the form with the following values</li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>tktkposts</code></td></tr></tbody></table><p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p><p><img src="./tutorial/images/swaggerui_searchdocuments_04.png?raw=true" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{  &quot;pageState&quot;: &quot;ATIA8H_____wf____w==&quot;,  &quot;data&quot;: {    &quot;0&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/jONHmE5.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;Art is for everyone&quot;,      &quot;comments&quot;: 20,      &quot;id&quot;: 0,      &quot;is_followed&quot;: true,      &quot;likes&quot;: 231,      &quot;name&quot;: &quot;Lana Del Mont&quot;,      &quot;timestamp&quot;: &quot;2020-09-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;lana_del_away&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/H9UX0Jm.mp4&quot;    },    &quot;2&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/eX3hkoc.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;Happiest of Birthdays my Angel&quot;,      &quot;comments&quot;: 4,      &quot;id&quot;: 2,      &quot;is_followed&quot;: true,      &quot;likes&quot;: 2,      &quot;name&quot;: &quot;Angela Lee&quot;,      &quot;timestamp&quot;: &quot;2020-04-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;angiecakes&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/al6MLay.mp4&quot;    },    &quot;3&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/IigY4Hm.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;The new normal&quot;,      &quot;comments&quot;: 2,      &quot;id&quot;: 3,      &quot;is_followed&quot;: false,      &quot;likes&quot;: 10,      &quot;name&quot;: &quot;Nina Xen&quot;,      &quot;timestamp&quot;: &quot;2020-05-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;nina_lina&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/Kzvbeup.mp4&quot;    }  }}</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="4-2-astrajs-client"> </a>4.2 - AstraJS Client</h3><h4><a class="anchor" aria-hidden="true" id="code-4-2-1-code-initialization"> </a><code>✅.4.2.1</code> - Initialization</h4><p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>.</p><p>(See: <a href="./functions/utils/astraClient.js">functions/utils/astraClient.js</a>)</p><pre lang="javascript"><code>const { createClient } = require(&quot;@astrajs/collections&quot;);let astraClient = null;const getAstraClient = async () =&gt; {  if (astraClient === null) {    astraClient = await createClient(      {        astraDatabaseId: process.env.ASTRA_DB_ID,        astraDatabaseRegion: process.env.ASTRA_DB_REGION,        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,      },      30000    );  }  return astraClient;};</code></pre><p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p><ul><li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li><li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li><li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li></ul><p>Then we return the <code>astraClient</code> we can then use in our API calls.</p><p>We also need to create a document collection to store our data.</p><pre lang="javascript"><code>const getCollection = async () =&gt; {  const documentClient = await getAstraClient();  return documentClient    .namespace(process.env.ASTRA_DB_KEYSPACE)    .collection(&quot;tktkposts&quot;);};</code></pre><p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p><ul><li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li></ul><p>We will call the collection <strong>tktkposts</strong>.</p><h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-create-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4><p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p><p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href="https://docs.datastax.com/en/astra/docs/astra-collection-client.html">AstraJS Collections</a></p><p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p><pre lang="javascript"><code>const users = await getCollection();</code></pre><p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p><pre lang="javascript"><code>try {    const user = await users.create(id, event.body);    return {      statusCode: 200,      body: JSON.stringify(user),    };}</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-2-c-code-update-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4><p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p><pre lang="javascript"><code>try {    users.update(body.userId, body.data);    return {      statusCode: 200,    };  }</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-2-d-code-search-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4><p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p><pre lang="javascript"><code>try {    const res = await users.find({});    return {      statusCode: 200,      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),    };  }</code></pre><p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p><h3><a class="anchor" aria-hidden="true" id="4-3-serverless-configuration"> </a>4.3 - Serverless configuration</h3><p>Take a look at <code>netlify.toml</code>.</p><pre lang="init"><code>[build]command = &quot;npm run build&quot;functions = &quot;functions&quot;publish = &quot;build&quot;</code></pre><p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p><p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p><p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href="./functions/posts.js">/.netlify/functions/posts</a></p><pre lang="javascript"><code>// Declaring 'getCollection'const { getCollection } = require(&quot;./utils/astraClient&quot;);// Function exported as a REST APIexports.handler = async function () {  // Accessing the collection tkt  const tktkpostsCollection = await getCollection();  try {    // Access POST    const res = await tktkpostsCollection.find({});    return {      // Return POSTS in the body      statusCode: 200,      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),      [...]</code></pre><p>✅ We can see these functions in our Netlify account.</p><ul><li>Go to netlify.com and sign in.</li><li>Select your site from the list.</li><li>Select the &quot;Functions&quot; tab at the top.</li></ul><p><img src="./tutorial/images/netlify_functions_tab.gif" alt="netlify_functions" /></p><p>From here we can see all our functions and get direct links as well as watch real time logs.</p><p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p><p><img src="./tutorial/images/netlify_endpoint_nav.gif" alt="netlify_endpoint" /></p><h3><a class="anchor" aria-hidden="true" id="4-4-react-component"> </a>4.4 - React Component</h3><p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p><h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-react-router"> </a><code>✅.4.4.a</code> - React Router</h4><p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href="./src/index.js">index.js</a></p><pre lang="xml"><code>&lt;Switch&gt;  &lt;Route path= &quot;/upload&quot; component={Upload}/&gt;  &lt;Route path= &quot;/&quot; component={Home}/&gt;&lt;/Switch&gt;</code></pre><p><img src="./tutorial/images/pages-all.png" alt="netlify_endpoint" /></p><h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-upload-page"> </a><code>✅.4.4.b</code> - Upload Page</h4><p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p><p><img src="./tutorial/images/page-upload.png" alt="netlify_endpoint" /></p><p>As you can see <a href="./src/pages/Upload.js">Upload.js</a> there are no component used.</p><pre lang="html"><code>&lt;form onSubmit={handleSubmit}&gt;    &lt;div className='section'&gt;&lt;!-- rest is omitted --&gt; </code></pre><ul><li>Function to post to backend</li></ul><pre lang="javascript"><code> const handleSubmit = async (e) =&gt; { e.preventDefault() // Create payload const data =  {        id: id,        name: name,        username: username,        avatar: avatar,        is_followed: false,        video: video,        caption: caption,        likes: 0,        comments: 0,        timestamp: timestamp,        button_visible: false    }  // Post Payload to Netlify functions  axios.post('/.netlify/functions/add', data)       .then((response) =&gt; { console.log(response)})       .catch((err) =&gt; { console.error(err)})</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-home-page"> </a><code>✅.4.4.b</code> - Home Page</h4><p>The page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.</p><p><img src="./tutorial/images/react-components.png" alt="netlify_endpoint" /></p><p>More on <a href="./src/pages/Home.js">Home.js</a>.</p><h2><a class="anchor" aria-hidden="true" id="lab-5-netlify-deployments"> </a>LAB 5 - Netlify Deployments</h2><h3><a class="anchor" aria-hidden="true" id="5-1-connect-netlify-to-your-site"> </a>5.1 - Connect Netlify to your site</h3><p>Execute each of the commands below to link your code to your Netlify deployment.</p><ul><li>First thing, we'll need to <strong>STOP</strong> the <code>netlify dev</code> command we issued a moment ago. In the terminal where you executed the netlify command issue a <code>CTRL-C</code> (control key + the C key) in order to stop the process.</li><li>Then continue with the following commands</li><li>This will pop up a browser to authenticate with netlify</li></ul><h4><a class="anchor" aria-hidden="true" id="code-5-1-a-code-authenticate-in-netlify"> </a><code>✅.5.1.a</code> - Authenticate in Netlify</h4><pre><code>netlify login</code></pre><p><em>Note, when using GitPod the preview pane will not display this properly. You must click the &quot;open in a new window&quot; button in the very top right of the preview pane.</em></p><p><img src="./tutorial/images/netlify_login.png" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="bash"><code>Logging into your Netlify account...Opening https://app.netlify.com/authorize?response_type=ticket&amp;ticket=774701161c326912e718b3a86096f375You are now logged into your Netlify account!Run netlify status for account detailsTo see all available commands run: netlify help</code></pre></blockquote><ul><li>Link your workspace to the associated site with the command Below</li></ul><pre><code>netlify link</code></pre><ul><li>It will display a MENU where you can move UP and DOWN with arrows. Pick first choice</li></ul><pre><code>&gt; Use current git remote origin (https://github ...`</code></pre><p><img src="./tutorial/images/netlify-link.png?raw=true" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="bash"><code>netlify link will connect this folder to a site on Netlify? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...Directory LinkedAdmin url: https://app.netlify.com/sites/fanciful-licorice-ea1437Site url:  https://fanciful-licorice-ea1437.netlify.appYou can now run other `netlify` cli commands in this directory</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-5-1-b-code-import-configuration-in-site"> </a><code>✅.5.1.b</code> - Import configuration in site</h4><ul><li>This will take the <code>.env</code> file created by astra-setup and upload it to netlify</li></ul><pre><code>netlify env:import .env</code></pre><h3><a class="anchor" aria-hidden="true" id="5-2-deploy-to-production"> </a>5.2 - Deploy to production</h3><p>Now that you've hooked everything up, time to deploy to production.</p><ul><li>Run</li></ul><pre><code>netlify build</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>────────────────────────────────────────────────────────────────  Netlify Build                                                 ────────────────────────────────────────────────────────────────❯ Version  @netlify/build 28.4.5❯ Flags  dry: false  offline: false❯ Current directory  /workspace/workshop-astra-tik-tok❯ Config file  /workspace/workshop-astra-tik-tok/netlify.toml❯ Context  production────────────────────────────────────────────────────────────────  1. build.command from netlify.toml                            ────────────────────────────────────────────────────────────────$ npm run buildtik-tok-stargate@0.1.0 buildreact-scripts buildCreating an optimized production build...Compiled successfully.File sizes after gzip:  616.87 KB  build/static/js/2.82b8325c.chunk.js  2.32 KB    build/static/js/main.fd7c93f3.chunk.js  966 B      build/static/css/main.9d8c5499.chunk.css  780 B      build/static/js/runtime-main.f09b770f.jsThe project was built assuming it is hosted at /.You can control this with the homepage field in your package.json.The build folder is ready to be deployed.You may serve it with a static server: npm install -g serve serve -s buildFind out more about deployment here:  https://cra.link/deployment(build.command completed in 35.1s)────────────────────────────────────────────────────────────────  2. Functions bundling                                         ────────────────────────────────────────────────────────────────Packaging Functions from functions directory: - add.js - addData.js - edit.js - posts.js(Functions bundling completed in 6.1s)────────────────────────────────────────────────────────────────  Netlify Build Complete                                        ────────────────────────────────────────────────────────────────(Netlify Build completed in 41.3s)</code></pre></blockquote><ul><li>Then run</li></ul><pre><code>netlify deploy --prod</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>Deploy path:        /workspace/workshop-astra-tik-tok/buildFunctions path:     /workspace/workshop-astra-tik-tok/functionsConfiguration path: /workspace/workshop-astra-tik-tok/netlify.tomlDeploying to main site URL...✔ Deploying functions from cache (use --skip-functions-cache to override)✔ Finished hashing 17 files and 4 functions✔ CDN requesting 0 files and 4 functions✔ Finished uploading 4 assets✔ Deploy is live!Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.appWebsite URL:       https://fanciful-licorice-ea1437.netlify.appgitpod /workspace/workshop-astra-tik-tok (master) $ </code></pre></blockquote><pre><code>- Then finally run</code></pre><p>netlify open:site</p><pre><code>&gt; 🖥️ `Output`&gt; ```&gt; Opening &quot;fanciful-licorice-ea1437&quot; site url:&gt; https://fanciful-licorice-ea1437.netlify.app&gt; ```## Extra Resources#### Video tutorial with Ania KubowThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.While we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.#### Running Astra DB Tik-TokWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).Follow the instructions below to get started.#### If you did like this video, please hit the Like and Subscribe button so I know to make more!- Twitter: https://twitter.com/ania_kubow- YouTube: https://youtube.com/aniakubow- Instagram: https://instagram.com/aniakubow</code></pre>
SUCCESS SAVING README for datastaxdevs-workshop-social-media-tiktok
Getting astra.json for datastaxdevs/workshop-graphql-netflix at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2>
HTML FOR datastaxdevs-workshop-graphql-netflix<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1><p><a href="https://gitpod.io/from-referrer/"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><em>50 minutes, Intermediate, <a href="#1-login-or-register-to-astradb-and-create-database">Start Building</a></em></p><p>A simple <strong>ReactJS</strong> Netflix homepage clone running on <em>Astra DB</em> that leverages the GraphQL API with <em>paging</em> and <em>infinite scrolling.</em>This application is the result of the collaboration between <a href="https://www.youtube.com/channel/UC5DNytAJ6_FISueUfzZCVsw">Ania Kubow</a> and the Datastax Developer Advocate team.</p><!--- ENDEXCLUDE ---><p>See the <a href="https://imgur.com/3ns3UJB">Video Walkthrough</a> of what you will build!</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/ui.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Build and run a Netflix clone.</li><li>Learn <strong>GraphQL API</strong> and how to use it with a database to create the tables and navigate the data.</li><li>Learn about <strong>pagination</strong> and <strong>infinite scrolling</strong> in a Web UI.</li><li>Leverage Netlify and DataStax Astra DB.</li><li>Deploy the Netflix clone to production with Netlify.</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><details><summary><strong>Can I run the workshop on my computer?</strong></summary><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></details><details><summary><strong>What other prerequisites are there?</strong></summary><ul><li>You will need a github account</li><li>You will also need Netlify and Astra DB accounts, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></details><details><summary><strong>Do I need to pay for anything for this workshop?</strong></summary><p><strong>No.</strong> All tools and services we provide here are FREE.</p></details><details><summary><strong>Will I get a certificate if I attend this workshop?</strong></summary><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge.</p></details><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra">&quot;cassandra&quot; on StackOverflow</a></li><li><a href="https://dba.stackexchange.com/questions/tagged/cassandra">&quot;cassandra&quot; on DBA StackExchange</a></li></ul><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><p>[TOC]</p><h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Create Astra DB Instance</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-create-table-for-genres-with-graphql">Create table for genres with GraphQL</a></li><li><a href="#4-insert-genre-data-with-graphql">Insert genre data with GraphQL</a></li><li><a href="#5-retrieve-genres-with-graphql">Retrieve genres with GraphQL</a></li><li><a href="#6-create-a-table-for-movies">Create a table for movies</a></li><li><a href="#7-insert-a-few-movies">Insert a few movies</a></li><li><a href="#8-retrieve-movies-pagination">Retrieve movies: Pagination</a></li></ol><h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3><ol><li><a href="#1-deploy-skeletal-gui-to-netlify">Deploy skeletal GUI to Netlify</a></li><li><a href="#2-launch-gitpod-from-your-github-repo">Launch Gitpod from YOUR Github repo</a></li><li><a href="#3-set-up-and-use-astra-cli">Set up and use <code>astra-cli</code></a></li><li><a href="#4-serverless-functions">Serverless Functions</a></li><li><a href="#5-fetching-from-the-front-end">Fetching from the Front-End</a></li><li><a href="#6-install-the-netlify-cli">Install the Netlify CLI</a></li><li><a href="#7-provide-db-connection-parameters">Provide DB connection parameters</a></li><li><a href="#8-run-the-app-in-dev-mode">Run the app in dev mode</a></li><li><a href="#9-connect-to-your-netlify-site">Connect to your Netlify site</a></li><li><a href="#10-deploy-in-production">Deploy in production!</a></li></ol><p><a href="#homework"><strong>🎓 Complete the assignment, receive your Badge!</strong></a></p><h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3><ul><li><a href="https://github.com/datastaxdevs/workshop-intro-to-graphql">Intro to GraphQL Workshop</a></li><li><a href="https://github.com/datastaxdevs/react-basics">React starter using NPX</a></li><li><a href="https://github.com/datastaxdevs/appdev-week1-todolist">React ToDo app</a></li><li><a href="https://github.com/datastaxdevs/workshop-battlestax/blob/master/README_JAM.md">What is JamStack?</a></li><li><a href="#video-tutorial-with-ania-kubow">Video tutorial with Ania Kubow</a></li></ul><h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><blockquote><p>🎁 <em>When creating your instance, use the promotion code <strong>ANIA200</strong> to get 200$ of additional free credit!</em></p></blockquote><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you use up your credits the databases will pause, no charge, and you will be given the option to upgrade to a higher tier.</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <strong>Right-Click</strong> the following button and <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-01-04" target="blank"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>netflix</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCK 🔒 icons: the LOCKed regions are the region not accessible to the Free Tier.</td></tr><tr><td>.</td><td></td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>netflix</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB Dashboard page. You may have to &quot;Resume&quot; the database first in case it is in &quot;hibernated&quot; state.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong> (needed to authenticate with your database and start using it):<strong>please IGNORE THIS ONE, as we will be soon creating a new, more powerful token for today</strong>.</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this usually only takes 2-3 minutes.</p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><blockquote><p>Note: this step is very important, as the token generated automatically for you withthe database lacks some permissions we'll use in the workshop.</p></blockquote><p><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create a token for your app</a>, <em>using the <strong>&quot;Database Administrator&quot;</strong> role</em>.Keep it handy for later use (best to download it in CSV format, as the valueswill not be visible afterward).This will provide authentication later when interacting with the database.Today, in particular, you'll need the string labeled &quot;token&quot; (the one starting with <code>AstraCS:...</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2><p>✅  <strong>Step 3a:</strong> Open <strong>GraphQL Playground</strong>:</p><ol start="0"><li>Ensure you are logged on to your <a href="https://astra.datastax.com">Astra</a> account</li><li>Click on the &quot;workshops&quot; database on the left (expanding the list if needed)</li><li>Click <code>Connect</code> TAB</li><li>Click the <code>APIs</code>  connection method</li><li>Make sure <code>GraphQL API</code> is selected</li><li>Locate the link to your GraphQL Playground in the text</li></ol><p><img src="images/open-playground-2-wh.png" alt="Open Astra DB GraphQL Playground image" /></p><details><summary><strong>Click here if you are not using the "New Astra Experience" UI (yet)</strong></summary><p><img src="images/open-playground-2.png" alt="Open Astra DB GraphQL Playground image, old Astra UI" /></p></details><p><strong>Note</strong>: in the following, we will refer to &quot;playground tabs&quot;. These are <em>not</em> the tabsin your browser, rather they are tabs <em>within</em> the Playground application,to switch between the (logically distinct) realms of &quot;managing schema&quot; and &quot;managing data in the tables&quot;(more on that later).</p><p><img src="images/tabs-vs-playgroundtabs-labeled-2.png" alt="Playground tabs VS Browser tabs" /></p><p>✅  <strong>Step 3b:</strong> Provide the database token as header</p><p>In the GraphQL Playground, <strong>Populate HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your token (including the <code>AstraCS:</code> part).<em>This is the &quot;Database Administrator&quot; token you created earlier on the Astra DB dashboard (Step 2 above).</em></p><details><summary><strong>Note</strong>: make sure you are on the <strong>graphql-schema</strong> playground tab in this step. Click here to show image.</summary><p><img src="images/graphql-playground.png" alt="GraphQL Playground and token header, Schema playground tab" /></p></details><blockquote><p>Note: the GraphQL Playground starts with a ready-to-use <em>temporary token</em> as the <code>x-cassandra-token</code> header. But you want the queries run in the Playgroundto be identical to those that the Netlify functions will run from code, so <strong>please replace the token with your DB token as instructed</strong>.</p></blockquote><p>✅  <strong>Step 3c:</strong> In GraphQL Playground, create the <code>reference_list</code> table:</p><p>Copy the following <strong>mutation</strong> to the left panel</p><pre lang="yaml"><code>mutation createReferenceList {  reference_list: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;reference_list&quot;,    ifNotExists:true    partitionKeys: [       { name: &quot;label&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [      { name: &quot;value&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]  )}</code></pre><details><summary>and then use the big "play button" arrow in the center to execute it. Click for screenshot.</summary><p><img src="images/playground-1.png" alt="image" /></p></details><p><strong>GraphQL Playground troubleshooting</strong> (covers this whole section)</p><table><thead><tr><th>Trouble</th><th>Shooting</th></tr></thead><tbody><tr><td>Server cannot be reached</td><td>Add Astra token to headers (including <code>AstraCS:...</code>; check quotes)</td></tr><tr><td>Server cannot be reached (second playground tab)</td><td>Check playground target URL ends with <code>netflix</code></td></tr><tr><td>Response not successful: Received status code 401</td><td>Same as &quot;server cannot be reached&quot;</td></tr><tr><td>Response not successful: Received status code 404</td><td>Check spelling of keyspace in target URL</td></tr><tr><td>&quot;Play&quot; button does nothing</td><td>Ensure query is syntactically correct</td></tr><tr><td>&quot;Validation error of type FieldUndefined&quot;</td><td>Most likely query in the wrong playground tab, or writing to table not created yet</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2><p>✅  <strong>Step 4a:</strong> Get to the API URL for your keyspace</p><p>In graphQL playground, <strong>change playground tab</strong> to now use <code>graphql</code>. The Playground has its own address bar(<strong>note</strong>: it's <em>not</em> the address bar of your browser). Edit the ending of the URL shown there, from <code>system</code> to thename of the keyspace: <code>netflix</code></p><p>✅  <strong>Step 4b:</strong> Repeat the insertion of the <code>x-cassandra-token</code> header for this playground tab (as you did for the first one):</p><details><summary>Show me!</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>✅  <strong>Step 4c:</strong> In the GraphQL Playground, run the mutation that writes genre data:</p><p>Copy the following mutation on the left panel:</p><pre lang="yaml"><code>mutation insertGenres {  action: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Action&quot;}) {    value{value}  }  anime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Anime&quot;}) {     value{value}  }  award: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Award-Winning&quot;}) {     value{value}  }  children: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Children &amp; Family&quot;}) {     value{value}  }  classic: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Classic&quot;}) {     value{value}  }   comedies: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Comedies&quot;}) {     value{value}  }  crime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Crime&quot;}) {     value{value}  }   cult: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Cult&quot;}) {     value{value}  }    documentaries: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Documentaries&quot;}) {     value{value}  }  drama: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Dramas&quot;}) {     value{value}  }  fantasy: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Fantasy&quot;}) {     value{value}  }  french: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;French&quot;}) {     value{value}  }  horror: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Horror&quot;}) {     value{value}  }  independent: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Independent&quot;}) {     value{value}  }  international: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;International&quot;}) {     value{value}  }   italian: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Italian&quot;}) {     value{value}  }   musicmusicals: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Music &amp; Musicals&quot;}) {     value{value}  }   realitytv: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Reality TV&quot;}) {     value{value}  }   romance: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Romance&quot;}) {     value{value}  }  scifi: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Sci-Fi&quot;}) {     value{value}  }  thriller: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Thriller&quot;}) {     value{value}  }   tvshow: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;TV Show&quot;}) {     value{value}  } }</code></pre><p>then click on the big &quot;play button&quot; arrow in the center to execute the mutation</p><h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2><p>✅  <strong>Step 5a:</strong> In GraphQL Playground, not changing playground tab (stay on the second: &quot;graphql&quot;, yeah) run the following query to read the <code>value</code> column of all table rows:</p><pre lang="yaml"><code>query getAllGenres {    reference_list (value: {label:&quot;genre&quot;}) {      values {      	value      }    }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-3.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2><p>✅  <strong>Step 6a:</strong> Switch back to first playground tab (&quot;graphql-schema&quot;; the token header will be already set).</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-back.png" alt="image" /></p></details><p>Use the following mutation to create a new table:</p><pre lang="yaml"><code>mutation createMoviesTable {  movies_by_genre: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;movies_by_genre&quot;,    ifNotExists: true,    partitionKeys: [      { name: &quot;genre&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [       { name: &quot;year&quot;, type: {basic: INT}, order: &quot;DESC&quot; },      { name: &quot;title&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]    values: [      { name: &quot;synopsis&quot;, type: {basic: TEXT} },      { name: &quot;duration&quot;, type: {basic: INT} },      { name: &quot;thumbnail&quot;, type: {basic: TEXT} }    ]  )}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-4.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2><p>✅  <strong>Step 7a:</strong> Go to playground tab &quot;graphql&quot; again.</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>Use the following mutation to populate the <code>movies_by_genre</code> table with four movies:</p><pre lang="yaml"><code>mutation insertMovies {  inception: insertmovies_by_genre(    value: {       genre:&quot;Sci-Fi&quot;,       year:2010,      title:&quot;Inception&quot;,      synopsis:&quot;Cobb steals information from his targets by entering their dreams.&quot;,      duration:121,      thumbnail:&quot;https://i.imgur.com/RPa4UdO.mp4&quot;}) {        value{title}    }    prometheus: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:2012,      title:&quot;Prometheus&quot;,      synopsis:&quot;After a clue to mankind's origins is discovered, explorers are sent to the darkest corner of the universe.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/L8k6Bau.mp4&quot;}) {        value{title}    }    	aliens: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1986,      title:&quot;Aliens&quot;,      synopsis:&quot;Ellen Ripley is sent back to the planet LV-426 to establish contact with a terraforming colony.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/QvkrnyZ.mp4&quot;}) {        value{title}    }      bladeRunner: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1982,      title:&quot;Blade Runner&quot;,      synopsis:&quot;Young Blade Runner K's discovery of a long-buried secret leads him to track down former Blade Runner Rick Deckard.&quot;,      duration:145,      thumbnail:&quot;https://i.imgur.com/xhhvmj1.mp4&quot;}) {        value{title}    }  }</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-5.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2><p>✅  <strong>Step 8a:</strong> In GraphQL Playground, not changing playground tab (stay on the second tab, &quot;graphql&quot;, yeah) list values from the table with the following command:</p><pre lang="yaml"><code>query getMovieAction {  movies_by_genre (      value: {genre:&quot;Sci-Fi&quot;},      orderBy: [year_DESC]  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }  }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-6.png" alt="image" /></p></details><p>✅ <strong>Step 8b: Enable pagination:</strong> On a small dataset, you can retrieve all values in the table at once; but in general, for performance or network reasons, you'll need pagination. Run a similar query as before, but this time asking for a <em>page size of 2</em>:</p><pre lang="yaml"><code>query getMovieActionPag1 {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-2.png" alt="image" /></p></details><p>✅ <strong>Step 8c: Fetch the next page:</strong></p><p>Notice that <code>pageState</code> now is also returned. Use it to fetch the next 2 items (next page):edit the next query to replace <code>YOUR_PAGE_STATE</code> with your own string value:</p><pre lang="yaml"><code>query getMovieActionNextPage {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2, pageState: &quot;YOUR_PAGE_STATE&quot;},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-3.png" alt="image" /></p></details><p>If you try to paste the <em>newly-obtained</em> value for <code>pageState</code> and re-run the query, you get an empty list and a null <code>pageState</code> in return. D'oh! You had scrolled through all rows already:<em>this is how pagination signals the end of the full results list.</em></p><h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1><h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2><p>✅ <strong>Step 1a: Netlify Button:</strong> Click the following button to deploy the skeletal GUI to Netlify. There is no data since there is no database connected to the app (yet); we will connect the database to the app shortly.</p><p><strong>Note</strong>: preferrably Ctrl-click for a new tab.</p><details><summary>What does the Netlify deploy button do?</summary><p>The Netlify deploy button will:</p><ul><li>Create a new repository for you on Github (Note: it's an unrelated <em>copy</em>, not a fork)</li><li>Create a site on Netlify (and deploy a nonworking build of the app, which lacks the DB connection parameters still)</li><li>Link the two together.</li></ul></details><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-graphql-netflix"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p><details><summary>Show me!</summary><p><img src="images/deploy-to-netlify.gif" alt="Netlify button in action" /></p></details><p>This will take a few minutes:</p><ul><li>you may have to authenticate through Github in the process;</li><li>confirm the repo name and &quot;Save &amp; Deploy&quot; when asked.</li></ul><p><em>Note: if there is an existing account in Netlify, check the settings to make sure the Netlify account is connected to your Github account.</em></p><details><summary>Show me!</summary><p><img src="images/netlify-connect-01.png" alt="Deploy to Netlify, &quot;connected accounts&quot;" /></p></details><p>✅ <strong>Step 1b: Check the deploy logs:</strong> Click on <code>Site deploy in progress</code> within the Netlify UI.</p><details><summary>Show me!</summary><p><img src="images/deploy-1.png" alt="Deploy to Netlify, &quot;site deploy in progress&quot;" /></p></details><p>Then click the top deploy link to see the build process.</p><details><summary>Show me!</summary><p><img src="images/deploy-2.png" alt="Deploy to Netlify, &quot;Production/Building&quot;" /></p></details><p>✅ <strong>Step 1c: Complete the build:</strong> Wait until the build shows <code>Netlify Build Complete</code>,  <strong>When you see &quot;<em>Pushing to repository...</em>&quot;</strong> you're ready to move on.</p><details><summary>Show me!</summary><p><img src="images/deploy-3b.png" alt="Deploy to Netlify, logs showing build finishing" /></p></details><p>✅ <strong>Step 1d: Get back to your new site:</strong> Scroll up to the top and click on the site name (it'll be after &quot;<em>[your login]</em>'s Team&quot; next to the Netlify button). Then locate your app's full URL and click to open it.</p><details><summary>Show me!</summary><p><img src="images/deploy-4.png" alt="Deploy to Netlify, site name next to your team's name" /></p><p>Clicking on the full URL (something like <code>https://YOUR-SITE-NAME.netlify.app</code>) you will see the skeletal GUI (without the data from the database) in a new tab. Here is where to click:</p><p><img src="images/deploy-4sitename.png" alt="Deploy to Netlify, access the skeletal GUI" /></p><p>and here, finally, your skeletal GUI in its full splendour:</p><p><img src="images/deploy-4skeletal.png" alt="Netlify site, no data yet (skeletal GUI)" /></p></details><h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2><p>✅ <strong>Step 2a: Jump to YOUR repo:</strong> Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get to your new repository on Github.Scroll to where you were in the README.</p><details><summary>Show me!</summary><p><img src="images/deploy-5.png" alt="Deploy to Netlify, " /></p></details><blockquote><p><strong>Note</strong> At this point, you MUST be reading this README from <strong>YOUR</strong> Github repository.That is, if the address bar still says <code>https://github.com/datastaxdevs/...</code> pleasehead over to YOUR copy of the repo before going the Gitpod route!</p></blockquote><p>✅ <strong>Step 2b: Launch Gitpod:</strong></p><p>Use this link to open Gitpod from <strong>YOUR</strong> repository! (<em>Tip: Ctrl-click on the button to open in new tab.</em>)</p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><em>Note: the button works on <img src="images/chrome-logo.svg" height="20"/> Chrome and <img src="images/firefox-logo.svg" height="20"/> Firefox.</em></p><details><summary>Click to troubleshoot if you have another browser</summary><img src="images/gitpod_trick.png" /></details><p>ℹ️ <em>It may take a few minutes (approx. 3-5) for GitPod to fully initialize.Please wait until the console in the lower half of Gitpod is responsive.</em></p><blockquote><p>You may see a dialog about &quot;opening this workspace in VS Code Desktop&quot;: you can safely dismiss it.</p></blockquote><p>Gitpod will be your IDE from now on. If you are familiar with VSCode, you can probablyjust use it. Otherwise, take a moment to review a separate page<a href="know_your_gitpod.md">&quot;Know your Gitpod&quot;</a>and then come back here.</p><h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2><p>You are going to use a CLI tool to simplify operations with Astra DB. The toolis <a href="https://docs.datastax.com/en/astra-classic/docs/astra-cli/installation.html">preinstalled</a>on your Gitpod.</p><p>✅ <strong>Step 3a: Set up the CLI:</strong></p><p>Run the following in the Gitpod terminal and,when prompted, enter the <code>AstraCS:...</code> you obtained at the beginning.</p><pre lang="bash"><code>astra setup</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-setup-2.png" alt="astra-cli" /></p></details><p>✅ <strong>Step 3b: Bulk data load:</strong> Load a large movie dataset in the database.This command installs and properly launches the <code>DSBulk</code> tool (<a href="https://docs.datastax.com/en/dsbulk/docs/dsbulkAbout.html">docs</a>):</p><pre lang="bash"><code>astra db load workshops \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-dsbulk-2.png" alt="astra-cli" /></p></details><details><summary>Show the syntax for old versions of astra-cli (click here)</summary><p>Note: you should not need this.</p><pre lang="bash"><code>astra db dsbulk workshops load \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre></details><blockquote><p><em>Note</em>: we mock the trailers for these thousands of movies by using a handfulof them over and over. Don't be surprised if you'll see the wrong trailersfor your favorite movie!</p></blockquote><p>That's it! All 6000+ movies are now loaded and ready to go!</p><h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2><blockquote><p><em>Note</em>: this section and the next one (&quot;Fetching from the Front-End&quot;)are not steps to &quot;perform&quot;, rather suggestions to dive in the appcode and figure out how the various parts (React components, Netlifyfunctions and finally the GraphQL server in Astra DB) fit together.<strong>You can skip these and jump to the <a href="#6-install-the-netlify-cli">next practical step</a></strong>if you are in a hurry, but please come back to thesefor reference if you want to dissect the code!</p></blockquote><details><summary>Show me this section</summary><p>Take a look at <code>functions/getGenres.js</code></p><pre lang="javascript"><code>const fetch = require('node-fetch')exports.handler = async function (event) {  const body = JSON.parse(event.body)  const url = process.env.ASTRA_DB_GRAPHQL_URL  const query = `    query getAllGenres {      reference_list (        value: { label: &quot;genre&quot;},        options: {          pageSize: ${JSON.stringify(body.pageSize)},          pageState: ${JSON.stringify(body.pageState)}        }      ) {        values {          value        }        pageState      }    }  `  const response = await fetch(url, {    method: 'POST',    headers: {      &quot;Content-Type&quot;: &quot;application/json&quot;,      &quot;x-cassandra-token&quot;: process.env.ASTRA_DB_APPLICATION_TOKEN    },    body: JSON.stringify({ query })  })  try {    const responseBody = await response.json()    return {      statusCode: 200,      body: JSON.stringify(responseBody)    }  } catch (e) {    console.log(e)    return {      statusCode: 500,      body: JSON.stringify(e)    }  }}</code></pre><p>You'll notice the familiar GraphQL query &quot;getAllGenres&quot; you used previously in the playground.It's been modified a bit to utilize pagination.When building the GraphQL query, you pass the desired page size and state to the GraphQL API:</p><pre lang="javascript"><code>options: {  pageSize: ${JSON.stringify(body.pageSize)},  pageState: ${JSON.stringify(body.pageState)}}</code></pre><p>You ask the API server to give us back the table column &quot;value&quot; (containing the genre name), but also the page statefor when you'll need the next page:</p><pre lang="javascript"><code>{  values {    value  }  pageState}</code></pre><p>The serverless function <code>functions/getMovies.js</code> works in much the same way, but you provide the specific genre you want and the page size is hardcoded:</p><pre lang="javascript"><code>query {  movies_by_genre (    value: { genre: ${JSON.stringify(genre)}},    orderBy: [year_DESC],    options: { pageSize: 6, pageState: ${JSON.stringify(pageState)} }  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }    pageState  }}</code></pre></details><h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2><details><summary>Show me this section</summary><p>Take a look at how you fetch from these serverless functions from the front-end. Start in <code>src/App.js</code></p><p>There is a fetch method defined, that will retrieve a page of genres by calling the <code>getGenres</code> serverless function.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  if (! isFetching)  {    setIsFetching(true)    const response = await fetch(&quot;/.netlify/functions/getGenres&quot;, {      method: &quot;POST&quot;,      body: JSON.stringify({pageState, pageSize}),    })    const responseBody = await response.json()    setPageState(responseBody.data.reference_list.pageState)    setGenres(gs =&gt; (gs || []).concat(responseBody.data.reference_list.values))    setIsFetching(false)  }}</code></pre><p>You pass in the current <code>pageState</code> and <code>pageSize</code> state variables and receive a response from the serverless function. You then set the <code>pageState</code> var to the new pagestate, and set the <code>genres</code> state variable to the received data. (Note that you are concatenating the new data to the var, since you want to keep all previously fetched data, not replace).</p><p>When rendering the page, you generate a <code>&lt;Section&gt;</code> component for each genre, plus a <code>&lt;div&gt;</code> at the bottom, which will detect a <code>mouseEnter</code> event and trigger the loading of a new pageful of genres:</p><pre lang="javascript"><code>&lt;&gt;  &lt;NavBar /&gt;  &lt;HeroSection /&gt;  {genres &amp;&amp; (    &lt;div className=&quot;container&quot;&gt;      {Object.values(genres).map((genre) =&gt; (        &lt;Section key={genre.value} genre={genre.value} /&gt;      ))}    &lt;/div&gt;  )}  &lt;div    className=&quot;page-end&quot;    onMouseEnter={() =&gt; {      setRequestedPage( np =&gt; np + 1 )    }}  /&gt;&lt;/&gt;</code></pre><p>The <code>&lt;Section&gt;</code> component works in the same way, but you will fully replace the data in the <code>movies</code> variable this time.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  const response = await fetch(&quot;/.netlify/functions/getMovies&quot;, {    method: &quot;POST&quot;,    body: JSON.stringify({ genre: genre, pageState: pageState }),  })  const responseBody = await response.json()  setMovies(responseBody.data.movies_by_genre.values)  setPageState(responseBody.data.movies_by_genre.pageState)}</code></pre><p>Now that you know how the front-end works, launch the app!</p></details><h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2><p>In the <code>workshop-graphql-netflix</code> directory, run the following:</p><pre><code>npm install -g netlify-cli</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-install-cli.png" alt="Install Netlify CLI" /></p></details><p>With the Netlify command-line interface you will build and deploythe application directly from the Gitpod terminal.</p><h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2><p>The &quot;serverless functions&quot; part of your app, in order to speak toyour DB through GraphQL, needs two important pieces of information:the API endpoint and the token. You will now create a <code>.env</code> file whichdefines them as environment variables.</p><p>The quickest way is to have <code>astra-cli</code> generate one for you:</p><pre><code>astra db create-dotenv -k netflix workshops</code></pre><details><summary>I want to do it manually</summary><p>If for some reason you don't use <code>astra-cli</code>, follow these steps:</p><ul><li>copy <code>cp .env.sample .env</code> and open it: <code>gp open .env</code>;</li><li><code>.env</code> is now open in the IDE editor and has two placeholders to replace:</li><li>insert the <code>AstraCS:...</code> database token (keep the quotes);</li><li>insert the GraphQL API address (it will look something like <code>https://b2f[...]/graphql/netflix</code>).</li></ul><p>You can generate a new database token if you want. The GraphQL addresscan be found in the playground: it is the URL you have edited to end in <code>netflix</code>in the second playground tab (<a href="#4-insert-genre-data-with-graphql">Part 1, step 4a</a>).</p></details><h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2><p>✅ <strong>Step 8a: Install dependencies:</strong></p><pre lang="bash"><code>npm install</code></pre><p>✅ <strong>Step 8b: Start the app:</strong> With the command</p><pre><code>netlify dev</code></pre><p>the application should automatically be displayed in GitPod's &quot;simple browser&quot;.Note that in this <strong>dev-mode run</strong> everything is local to your Gitpod instance:<em>the &quot;serverless functions&quot;, in particular, are actually running there,alongside the rest of the application!</em></p><details><summary>Show me!</summary><p><img src="images/preview.png" alt="run-in-preview-pane" /></p></details><p>You can copy the URL found in Gitpod's simple browser and open in a new tab(of your real browser, that is) for abetter experience. But now it's time to move to the actual deploy phase.</p><h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2><p>✅ <strong>Step 9a:</strong> Stop the dev run with <code>Ctrl-C</code>.</p><p>✅ <strong>Step 9b:</strong> Authenticate with Netlify: run</p><pre><code>netlify login</code></pre><p>then grab the URL printed on the console(something like <code>https://app.netlify.com/authorize?response[...]</code>)and manually <strong>open it in a new tab</strong> (Gitpod blocks it for security).You will be asked to authorize &quot;netlify-cli&quot; to access your Netlify accountin the process.</p><details><summary>Show me!</summary><p><img src="images/waiting_for_authorization-2.png" alt="Netlify login" /></p></details><p>Once you complete the login, you will see a console output like this:</p><p><img src="images/netlify-login-2.png" alt="Netlify login" /></p><p>✅ <strong>Step 9c:</strong> Associate to your Netlify site: run</p><pre><code>netlify link</code></pre><p>and make sure you confirm the choice of associating to&quot;current git remote origin&quot;.</p><details><summary>Show me!</summary><p><img src="images/netlify-link-2.png" alt="Netlify link" /></p></details><h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2><p>✅ <strong>Step 10a:</strong> Inject secrets to the Netlify site</p><pre><code>netlify env:import .env</code></pre><p>Now the (actually) serverless functions in Netlify have the connectionparameters they need.</p><details><summary>Show me!</summary><p><em>Note: If you generated the <code>.env</code> with<code>astra-cli</code>, the actual output is much more verbose.</em></p><p><img src="images/netlify_env_import.png" alt="image" /></p></details><p>✅ <strong>Step 10b:</strong> Build the app</p><p>Run</p><pre><code>netlify build</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-build.png" alt="Netlify build" /></p></details><p>✅ <strong>Step 10c:</strong> Deploy!</p><pre><code>netlify deploy --prod</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-deploy-prod-2.png" alt="Netlify deploy in prod" /></p></details><p>✅ <strong>Step 10d:</strong> Visit your site.</p><pre><code>netlify open:site</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-open-site-2.png" alt="Netlify Open site" /></p></details><p>If needed, manually copy-paste your site URL in a new browser tab... and enjoyyour work!</p><p><img src="images/deployed_netflix_clone.png" alt="Netlify Setup Example" /></p><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2><p>Congratulations, you made it!</p><p>Now don't forget to complete your assignment and <a href="#homework">submit it</a>to get your badge of completion!</p><pre><code>       ██╗    ██╗███████╗██╗     ██╗                 ██║    ██║██╔════╝██║     ██║                 ██║ █╗ ██║█████╗  ██║     ██║                 ██║███╗██║██╔══╝  ██║     ██║                 ╚███╔███╔╝███████╗███████╗███████╗             ╚══╝╚══╝ ╚══════╝╚══════╝╚══════╝                                                          ██████╗  ██████╗ ███╗   ██╗███████╗██╗        ██╔══██╗██╔═══██╗████╗  ██║██╔════╝██║        ██║  ██║██║   ██║██╔██╗ ██║█████╗  ██║        ██║  ██║██║   ██║██║╚██╗██║██╔══╝  ╚═╝        ██████╔╝╚██████╔╝██║ ╚████║███████╗██╗        ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝ </code></pre><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="images/netflix-badge.png?raw=true" width="200" align="right" /><p>🎓 Complete your upgrade and get your verified skill badge! Do the assignment and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Insert a movie OR genre of your choice in the database (It's OK to re-use the trailer file URL from another movie! Just make the title recognizable as yours).</li><li>Take a screenshot of your Netflix clone running either from your Gitpod or (better) deployed to production in Netlify (in this case, you could also give us the Netlify URL).</li><li>The screenshot should clearly show the movie/genre you added (make sure you tell us its name when submitting).</li><li>(Optional for extra wisdom) Watch the 2-hour video by Ania <a href="#video-tutorial-with-ania-kubow">HERE</a>, build the app yourself, and show us the running final result.</li><li>Submit your homework <a href="https://dtsx.io/homework-graphql-netflix">here</a>.</li></ol><p>That's it, you are done: expect an email in the next days!</p><h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1><h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2><p>Thank you to our wonderful friend Ania Kubow for producing the Netflix clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.</p><p>While we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.</p><p><a href="https://www.youtube.com/watch?v=g8COh40v2jU">Ania's Netflix Video</a></p>
SUCCESS SAVING README for datastaxdevs-workshop-graphql-netflix
Getting astra.json for datastaxdevs/workshop-todo-native-mobile at 277
No astra.json for datastaxdevs/workshop-todo-native-mobile at 281
No astrajson for React Native
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="react-native-todo-list-astra-db-netlify"> </a>React Native Todo List + Astra DB + Netlify 📒</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a Security Token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-deploy-to-netlify"> </a>3. Deploy to Netlify</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-access-your-github-repository-and-launch-gitpod-ide"> </a>4. Access your GitHub repository and Launch GitPod IDE</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-check-node-and-npm-versions-in-gitpod"> </a>5. Check Node and NPM versions in GitPod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-register-for-an-expo-account-in-gitpod"> </a>6. Register for an Expo Account in GitPod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-install-expo-mobile-application-on-your-phone"> </a>7. Install Expo Mobile Application on Your Phone</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-launch-the-todo-app"> </a>8. Launch the Todo app</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-view-mobile-app"> </a>9. View Mobile App</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-link-to-and-configure-netlify"> </a>10. Link to and Configure Netlify</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-deploy-to-production"> </a>11. Deploy to Production</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3>
HTML FOR datastaxdevs-workshop-todo-native-mobile<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="react-native-todo-list-astra-db-netlify"> </a>React Native Todo List + Astra DB + Netlify 📒</h1><p><em>40 minutes, Beginner/Intermediate</em></p><p>In this workshop, you will learn how to convert the Todo web application from a previous <a href="https://github.com/datastaxdevs/appdev-week1-todolist">DataStaxDevs workshop</a> into a React Native mobile and web application. We will actually be using the same database setup as before, so if you've already created it during the prior workshop, you can skip the Database setup section of this workshop.</p><p>Before going all React Native, if you would like to learn more about React and create your first React app take a look at our previous Todo app workshop. <a href="https://github.com/datastaxdevs/appdev-week1-todolist">HERE</a>.</p><p>This is an example React Native Todo application using a <a href="https://dtsx.io/appdev-7-7">DataStax AstraDB</a> free tier database.</p><!--- ENDEXCLUDE ---><p><strong>Mobile App on Android:</strong></p><img width="45%" alt="AndroidTodoApp" src="https://user-images.githubusercontent.com/82838476/130680926-3cb3732a-e3ef-4167-8f09-0a25bf8732e5.png"><p><strong>Mobile App on iOS:</strong></p><img width="45%" alt="iPhoneTodoApp" src="https://user-images.githubusercontent.com/82838476/130680807-a7108e00-55a2-42c5-a5f0-3f258b6d9d39.png"><p><strong>Web Application in Chrome:</strong></p><img width="1680" alt="WebBrowserToDoApp" src="https://user-images.githubusercontent.com/82838476/129105493-4668143d-a923-437c-b19d-809fa7c55066.png"><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Implement a <strong>React Native</strong> Todo app using Expo</li><li>Learn about <strong>React Native</strong> components and how they are used to dynamically update the DOM with new information</li><li>Learn how to convert a React web app to a <strong>React Native</strong> mobile and web app</li><li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li><li>Leverage Netlify and DataStax AstraDB</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><ul><li><em>Are there any prerequites?</em></li></ul><blockquote><ul><li>You will need a <a href="https://github.com/">GitHub account</a></li><li>You will need to <a href="https://expo.dev/client">download Expo Go</a> on your mobile phone (if you wish to do that part)</li></ul></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will also need an Astra DB account, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></blockquote><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li><li><a href="https://docs.expo.dev/get-started/installation/">Expo CLI, Watchman, Xcode, Android Studio, and an iPhone or Android</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="tutorial/images/react-badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete your mobile app deployment by completing the practice steps below <strong>THROUGH STEP 9</strong> by launching the app in GitPod and viewing it in Expo Go</li><li>A single image of the working mobile app with some fun todo items deployed on your phone is fine (if you cannot do this on your phone a screen of the web app is just fine)</li><li>Extra credit to fully deploy this up on Netlify and access from your mobile device using steps 10 and 11</li><li>Submit your homework <a href="https://github.com/datastaxdevs/workshop-todo-native-mobile/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and Create Database</a></li><li><a href="#2-create-a-security-token">Create a Security Token</a></li><li><a href="#3-deploy-to-netlify">Deploy to Netlify</a></li><li><a href="#4-access-your-github-repository-and-launch-gitpod-ide">Access your GitHub repository and Launch GitPod IDE</a></li><li><a href="#5-check-node-and-npm-versions-in-gitpod">Check Node and NPM versions in GitPod</a></li><li><a href="#6-register-for-an-expo-account-in-gitpod">Register for an Expo Account in GitPod</a></li><li><a href="#7-install-expo-mobile-application-on-your-phone">Install Expo Mobile Application on Your Phone</a></li><li><a href="#8-launch-the-todo-app">Launch the Todo app</a></li><li><a href="#9-view-mobile-app">View Mobile App</a></li><li><a href="#10-link-to-and-configure-netlify">Link to and Configure Netlify</a></li><li><a href="#11-deploy-to-production">Deploy to Production</a></li></ol><p><strong>Part 1: Create the Database</strong></p><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.</p><h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p><a href="https://astra.dev/8-26"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true" /></a></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true" /></li></ul></details><p><strong>Use the following values when creating the database</strong></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>todos_native_workshop_db</code></td></tr><tr><td><strong>keypace</strong></td><td><code>todos</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td><em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em></td></tr></tbody></table><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true" alt="image" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a Security Token</h2><p>✅  <strong>Step 2a:</strong>  <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Create a token for your app</a> to use in the settings screen. Use &quot;Database Administrator&quot; permission.</p><p>✅  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c...</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p><p><strong>👁️ Expected output</strong></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true" /></li></ul></details><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-deploy-to-netlify"> </a>3. Deploy to Netlify</h2><ul><li><details><summary> What does the netlify deploy button do?</summary>The Netlify deploy button will:<ul>  <li>Create a new repository for you on Github</li>  <li>Create a site on Netlify</li>  <li>Link the two together.</li></ul></li></ul></details><ul><li><p>Click the button to deploy</p><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-todo-native-mobile"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p></li></ul><ul><li><details><summary>Show me!</summary> <img src="https://github.com/datastaxdevs/appdev-week2-tiktok/blob/master/tutorial/images/deploy-to-netlify.gif?raw=true" /> </details></li></ul><p>This will take a few minutes.</p><ul><li><p>If there is a pre-existing account in Netlify, make sure the Netlify account settings show that it's connected to the appropriate git repository (and you can ignore the error),</p><details><summary>Show me! </summary><img src="tutorial/images/netlify-connect-01.png" /></details></li><li><p>Click on <code>Site deploy in progress</code> within the Netlify UI,</p><details><summary>Show me! </summary><img src="https://github.com/datastaxdevs/appdev-week2-tiktok/blob/master/tutorial/images/deploy-1.png" /></details></li><li><p>Click the top deploy link to see the build process.</p><details><summary>Show me! </summary><img src="https://github.com/datastaxdevs/appdev-week2-tiktok/blob/master/tutorial/images/deploy-2.png" /></details></li><li><p>Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</p><details><summary>Show me! </summary><img src="https://github.com/datastaxdevs/appdev-week2-tiktok/blob/master/tutorial/images/deploy-3.png" /></details></li><li><p>Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</p><details><summary>Show me! </summary><img src="https://github.com/datastaxdevs/appdev-week2-tiktok/blob/master/tutorial/images/deploy-4.png" /></details></li></ul><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><p><strong>Part 2: Launch the Native Application</strong></p><h2><a class="anchor" aria-hidden="true" id="4-access-your-github-repository-and-launch-gitpod-ide"> </a>4. Access your GitHub repository and Launch GitPod IDE</h2><p>✅  <strong>Step 4a:</strong></p><ul><li>Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.<img src="https://github.com/datastaxdevs/appdev-week3-graphql/blob/main/tutorial/images/deploy-5.png?raw=true" /></li></ul><p>✅  <strong>Step 4b:</strong></p><ul><li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li></ul><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4><ul><li>From your GitPod terminal execute the following command</li></ul><pre><code>git remote -v</code></pre><p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href="#3-deploy-to-netlify">step3</a> to get to your repo.</p><p>ℹ️ <em>It may take 3-5 minutes for GitPod to fully initialize.</em></p><blockquote><p>(<em>Note</em>: if the Gitpod button does not work, for example you are using Safari, don't despair!You can manually build the URL you need and open it in a new tab like this: <code>https://gitpod.io/#&lt;YOUR REPO FULL URL&gt;</code>,pasting in it the full address of <strong>your</strong> GitHub repository. For example,<code>https://gitpod.io/#https://github.com/JohnSmith/workshop-todo-native-mobile</code>, assuming you are &quot;JohnSmith&quot;on Github and your repo is &quot;workshop-todo-native-mobile&quot;).</p></blockquote><ul><li>Check out the <strong>.gitpod.yml</strong> file to see the environment setup. We've installed the Expo CLI, the Netlify CLI, and updated Node and NPM for you already.</li></ul><h2><a class="anchor" aria-hidden="true" id="5-check-node-and-npm-versions-in-gitpod"> </a>5. Check Node and NPM versions in GitPod</h2><p>✅  <strong>Step 5a:</strong></p><ul><li>Create split terminals</li></ul><p><strong>Click on the double-panel icon:</strong></p><img width="567" alt="Screen Shot 2021-08-17 at 2 06 26 PM" src="https://user-images.githubusercontent.com/82838476/130680540-601d7a0c-b30f-4d4a-8ec7-32d930157cec.png"><p><strong>End Result:</strong></p> <img width="1223" alt="Screen Shot 2021-08-24 at 2 39 22 PM" src="https://user-images.githubusercontent.com/82838476/130693619-655e8e6f-9e10-4a6e-969d-b0461a5d77c7.png"><p>✅  <strong>Step 5b:</strong>You will need node 15 and npm 7 or later in both terminals.</p><pre lang="bash"><code>npm -v</code></pre><pre lang="bash"><code>node -v</code></pre><p>If either are not updated, run the following commands respectively.</p><pre lang="bash"><code>nvm install node</code></pre><h2><a class="anchor" aria-hidden="true" id="6-register-for-an-expo-account-in-gitpod"> </a>6. Register for an Expo Account in GitPod</h2><p>If you don't have an account:</p><pre lang="bash"><code>expo register</code></pre><p>Open <a href="https://expo.dev/signup">https://expo.dev/signup</a> <strong>in a new tab</strong>.</p><p><em>Note, when using GitPod the preview pane will not display this properly. You must click the &quot;open in a new window&quot; button in the very top right of the preview pane.</em></p><p>Login to your account in the terminal:</p><pre lang="bash"><code>expo login</code></pre><p>Double check that you are logged in.</p><pre lang="bash"><code>expo whoami </code></pre><p>You should see:</p><img width="427" alt="Screen Shot 2021-08-24 at 12 41 00 PM" src="https://user-images.githubusercontent.com/82838476/130679435-ea46b61a-b7b1-48da-a578-ab84f0a665fe.png"><h2><a class="anchor" aria-hidden="true" id="7-install-expo-mobile-application-on-your-phone"> </a>7. Install Expo Mobile Application on Your Phone</h2><p>Download the Expo App from the Android Play Store or iOS App Store.</p><p><strong>Android:</strong></p><img width="45%" alt="PlayStore" src="https://user-images.githubusercontent.com/82838476/130651174-ed432081-811f-48f9-a161-1175c64a8680.jpg"><p><strong>iOS:</strong></p><img width="45%" alt="AppStore" src="https://user-images.githubusercontent.com/82838476/130651399-649bdc12-5fd4-4760-81a7-5871846091e4.png"><h2><a class="anchor" aria-hidden="true" id="8-launch-the-todo-app"> </a>8. Launch the Todo app</h2><p>✅  <strong>Step 8a:</strong> Retrieve application token to securely connect to the database</p><p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href="#2-create-a-security-token">the instructions above</a></p><p>✅  <strong>Step 8b:</strong> Configure Environment Variables and Install Dependencies</p><ol><li>Set up your Astra Environment</li></ol><p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.</p><pre lang="bash"><code>npm exec astra-setup todos_native_workshop_db todos</code></pre><ul><li>You will be asked to: <strong>Please paste the Database Admin Token here</strong> so copy over the Token you saved earlier, and hit enter. It will start with AstraCSAstraCS:cvdPRONUrUUT:...</li></ul><img width="738" alt="Screen Shot 2021-08-24 at 12 17 57" src="https://user-images.githubusercontent.com/82838476/130652258-5a8a5da0-b2a4-4acf-9d1c-3b3a98a97d6a.png"><p>✅  <strong>Step 8c:</strong> Add Host URL to .env</p><p>Get workspace URL:</p><pre lang="bash"><code>bash hostURL.sh</code></pre><p>Final output should look like the below:</p><img width="452" alt="Screen Shot 2021-08-17 at 9 13 21 PM" src="https://user-images.githubusercontent.com/82838476/129835879-135a30f4-b3bc-4ca5-889b-4483176d77f3.png"><p>You can see the output of the .env file by running <code>cat .env</code>.</p><p>✅  <strong>Step 8d:</strong> Start Netlify and Expo</p><ul><li>Run the application (Ignore the QR code generated here)</li></ul><pre><code>netlify dev ; gp preview $(gp url 8888)</code></pre><p>If this doesn't open in the right port (for example, 19003) - swap the port number to 8888. You will get the right url by running:</p><pre><code>gp preview $(gp url 8888)</code></pre><p>In a new terminal window: (or have a split terminal)</p><pre><code>expo start --tunnel</code></pre><p>Enter 'y' for yes when asked to use another port. Port 19000 is being used for the web app launched with netlify dev, that starts the web app with expo start --web (This opens when you run netlify dev.)</p>  <img width="45%" alt="Screen Shot 2021-08-08 at 11 44 25 PM" src="https://user-images.githubusercontent.com/82838476/128941524-db4b7c9a-d21f-41e8-bc6d-729b189d6325.png"><p>✅  <strong>Step 8e:</strong> Launch your app in the web browser</p><p>Open your web application at the URL specified in the HOST line of your .env file in a new tab in your browser.</p><p><strong>Web Application in Chrome:</strong></p><img width="1680" alt="WebBrowserToDoApp" src="https://user-images.githubusercontent.com/82838476/129105493-4668143d-a923-437c-b19d-809fa7c55066.png"><p>✅  <strong>Step 8f:</strong> Launch your app on your mobile device</p><p><strong>Scan the QR code</strong> with your phone camera to open your application in the Expo App! You may need to resize the terminal to make the QR code render properly. You can also scan the QR code from within the Expo Go app. Once the QR code is scanned, it may take a few minutes for the app to be loaded and run on your phone.</p><p>Scanning in the Expo Go App:</p><img width="45%" alt="WebBrowserTodoApp" src="https://user-images.githubusercontent.com/82838476/130652900-fbdf3874-b014-445d-ba9b-c3a2996defef.jpg"><h2><a class="anchor" aria-hidden="true" id="9-view-mobile-app"> </a>9. View Mobile App</h2><p>✅  <strong>Step 9a:</strong> Launch your app on your mobile device</p><p>You may see this screen for a while -- Expo Go is loading the application.</p><img width="45%" alt="WebBrowserTodoApp" src="https://user-images.githubusercontent.com/82838476/130679108-b6e0ef6f-e9b2-4571-a89b-35f5b98162d4.jpg"><p>Add some items to your Todo list (type in the 'What needs to be done?' input and hit enter)! These get stored in Astra DB.</p><p>See examples of what your finished product should look like:</p><p><strong>Mobile App on Android:</strong></p><img width="45%" alt="AndroidTodoApp" src="https://user-images.githubusercontent.com/82838476/130680926-3cb3732a-e3ef-4167-8f09-0a25bf8732e5.png"><p><strong>Mobile App on iOS:</strong></p><img width="45%" alt="iPhoneTodoApp" src="https://user-images.githubusercontent.com/82838476/130680807-a7108e00-55a2-42c5-a5f0-3f258b6d9d39.png"><p>✅  <strong>Step 9b:</strong> See your Todos in Astra DB.</p><ul><li>Navigate to the Dashboard in Astra DB and click on the todos_native_workshop_db.</li></ul><img width="45%" alt="Screen Shot 2021-08-24 at 9 49 13 AM" src="https://user-images.githubusercontent.com/82838476/130657937-b25aed15-c14a-4e88-b065-b930c475c998.png"><ul><li>Then click on the CQL tab.</li></ul><img width="45%" alt="Screen Shot 2021-08-24 at 9 49 28 AM" src="https://user-images.githubusercontent.com/82838476/130657954-32d9840b-2fff-4783-b171-7ca013cd8062.png"><p>Finally, run the following commands:</p><pre><code>use todos;</code></pre><pre><code>describe tables;</code></pre><pre><code>select * from rest;</code></pre><p>The output should look like the following:</p><img width="45%" alt="Screen Shot 2021-08-24 at 12 33 32" src="https://user-images.githubusercontent.com/82838476/130656955-253b9857-7200-4414-a309-b6acff53cbc8.png"><h2><a class="anchor" aria-hidden="true" id="10-link-to-and-configure-netlify"> </a>10. Link to and Configure Netlify</h2><p>Execute each of the commands below to link your code to your Netlify deployment.</p><ul><li>First thing, we'll need to <strong>STOP</strong> both programs running: the <code>netlify dev</code> command we issued a moment ago, as well as the expo start --tunnel command. In the terminal where you executed the netlify command issue a <code>CTRL-C</code> (control key + the C key) in order to stop the process. From here on, you will only need one console.</li><li>Then continue with the following commands</li><li>This will pop up a browser to authenticate with netlify</li></ul><pre><code>netlify login</code></pre><p><em>Note, when using GitPod the preview pane will not display this properly. You must click the &quot;open in a new window&quot; button in the very top right of the preview pane.</em></p><ul><li>This will link your workspace to the associated site</li></ul><pre><code>netlify link</code></pre><ul><li>Update the environment variables in your .env file - (See generateEndpoint function in api.js to see why we do this).</li></ul><p>Before:</p><pre><code>IS_PROD=&quot;false&quot;GITPOD=&quot;true&quot;</code></pre><p>After:</p><pre><code>IS_PROD=&quot;true&quot;GITPOD=&quot;false&quot;</code></pre><ul><li>This will take the .env file created by astra-setup and upload it to netlify</li></ul><pre><code>netlify env:import .env</code></pre><!--  * Will be used to allow you to execute `netlify open`  ```  netlify sites:list  ```--><h2><a class="anchor" aria-hidden="true" id="11-deploy-to-production"> </a>11. Deploy to Production</h2><p>Now that you've hooked everything up, time to deploy to production.</p><ul><li>Run</li></ul><pre><code>netlify build</code></pre><ul><li>Then run</li></ul><pre><code>netlify deploy --prod</code></pre><ul><li>Then finally run</li></ul><pre><code>netlify open:site</code></pre><p>You've deployed your app to Netlify!</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1><details><summary>Take me to the React stuff</summary>  We've created a separate repo going over the Basics of React. To get there, click the link below.<p><a href="https://github.com/datastaxdevs/react-basics">GOTO React-Basics</a></p><p>When you're done, just click on the &quot;Back to Main&quot; breadcrumb to come back here.</p></details><h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3><ul><li>The contents of this repo are based on <a href="https://github.com/tjake/todo-astra-react-serverless/">Jake's port</a> of the <a href="https://github.com/tastejs/todomvc/tree/master/examples/react">TodoMVC code</a> originally written by <a href="https://github.com/petehunt">Pete Hunt</a>.</li><li>The example is modified from <a href="https://github.com/huksley/todo-react-ssr-serverless">https://github.com/huksley/todo-react-ssr-serverless</a>.</li></ul><!--- ENDEXCLUDE --->
SUCCESS SAVING README for datastaxdevs-workshop-todo-native-mobile
Getting astra.json for datastaxdevs/workshop-vuejs at 277
No astra.json for datastaxdevs/workshop-vuejs at 281
No astrajson for VueJS and TypeScript
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-an-app-with-vuejs-and-typescript"> </a>Build an App with VueJS and Typescript 📒</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="demo"> </a>Demo</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod-ide"> </a>3. Launch GitPod IDE</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-project-overview"> </a>4. Project Overview</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-nuxt-strong"> </a><strong>Nuxt</strong></h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-pages-strong"> </a><strong>Pages</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-pages-index-vue-code-em"> </a><em><code>pages/index.vue</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-cardflip-vue-code-em"> </a><em><code>components/CardFlip.vue</code></em></h5>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-a-vue-component"> </a>5. Create a Vue Component</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-step-5a-strong"> </a>✅  <strong>Step 5a:</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-template-code-em"> </a><em><code>components/HootCard.vue - &lt;template&gt;</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-array-of-5-cards-reference-code-em"> </a><em><code>Array of 5 Cards - Reference</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-style-code-em"> </a><em><code>components/HootCard.vue - &lt;style&gt;</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-code-em"> </a><em><code>Terminal</code></em></h5>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-database-connection-setup"> </a>6. Database Connection Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-step-6a-strong"> </a>✅  <strong>Step 6a:</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-env-code-em"> </a><em><code>.env</code></em></h5>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-step-6b-strong"> </a>✅  <strong>Step 6b:</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-step-6c-strong"> </a>✅  <strong>Step 6c:</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-utils-astraclient-js-code-em"> </a><em><code>functions/utils/astraClient.js</code></em></h5>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="strong-step-6d-strong"> </a>✅  <strong>Step 6d:</strong></h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-create-a-serverless-function"> </a>7. Create a Serverless Function</h2>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="document-api"> </a>Document API</h3>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-calling-serverless-functions-from-the-front-end"> </a>8. Calling Serverless Functions from the Front-End</h2>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-pages-index-vue-code-em"> </a><em><code>pages/index.vue</code></em></h5>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-launching-the-app"> </a>9. Launching the App</h2>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5>
HTML FOR datastaxdevs-workshop-vuejs<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="build-an-app-with-vuejs-and-typescript"> </a>Build an App with VueJS and Typescript 📒</h1><p><em>15 minutes, Beginner</em></p><p>This is an example VueJS application using a <a href="https://astra.dev/10-20">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Learn the basics of building Vue Components and composing a <strong>VueJS</strong> app</li><li>Learn how to implement <strong>serverless functions</strong> and connect the front-end to the back-end</li><li>Learn how to connect a live <strong>NoSQL</strong> database using a <strong>Document API</strong></li><li>Leverage <strong>Netlify</strong> and <strong>DataStax Astra DB</strong></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a github account</li><li>You will also need an Astra DB account, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://dtsx.io/workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="https://github.com/datastaxdevs/workshop-vuejs/blob/main/tutorial/imgs/VueJS_Badge_transparent.png" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Launch the <strong>Vue</strong> app and connect it to the database. <strong>Take a screenshot of your HOOT app with your unique URL</strong>.</li><li>[OPTIONAL] Edit the size of the pack to open more cards each time!</li><li>Submit your homework <a href="https://github.com/datastaxdevs/workshop-vuejs/issues/new?assignees=SonicDMG%2C+RyanWelford&amp;labels=homework&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a>. Note:<em>never share your Astra DB tokens!</em></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and create database</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-launch-gitpod-ide">Launch GitPod IDE</a></li><li><a href="#4-project-overview">Project Overview</a></li><li><a href="#5-create-a-vue-component">Create a Vue Component</a></li><li><a href="#6-database-connection-setup">Database Connection Setup</a></li><li><a href="#7-create-a-serverless-function">Create a Serverless Function</a></li><li><a href="#8-calling-serverless-functions-from-the-front-end">Calling Serverless Functions from the Front-End</a></li><li><a href="#9-launching-the-app">Launching the App</a></li></ol><h3><a class="anchor" aria-hidden="true" id="demo"> </a>Demo</h3><ul><li><a href="http://www.hootcards.io">App Demo</a></li></ul><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.</p><h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p><a href="https://astra.dev/10-20"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true" /></a></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true" /></li></ul></details><p><strong>Use the following values when creating the database</strong></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>vue_workshop_db</code></td></tr><tr><td><strong>keypace</strong></td><td><code>vue_keyspace</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td><em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em></td></tr></tbody></table><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true" alt="image" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><p>✅  <strong>Step 2a:</strong>  <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Create a token for your app</a> to use in the settings screen. Use &quot;Database Administrator&quot; permission.</p><p>✅  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p><p><strong>👁️ Expected output</strong></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true" /></li></ul></details><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod-ide"> </a>3. Launch GitPod IDE</h2><ul><li>Click the button to launch the GitPod IDE.</li></ul><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-vuejs/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-project-overview"> </a>4. Project Overview</h2><p>Let's start by taking a look at the current structure of our app.</p><h3><a class="anchor" aria-hidden="true" id="strong-nuxt-strong"> </a><strong>Nuxt</strong></h3><p>This app was built using <a href="https://nuxtjs.org/">Nuxt</a>, a framework for Vue that helps get a new app up and running quickly. We won't get into too much detail of what Nuxt does, just know that it does a lot of things under the hood so we don't have to worry about them. We can just focus on designing our app experience.</p><h3><a class="anchor" aria-hidden="true" id="strong-pages-strong"> </a><strong>Pages</strong></h3><p>Take a look at <code>pages/index.vue</code>. This is the primary page served by our app. You'll notice it's broken up into 3 main sections. <code>&lt;template&gt;...&lt;/template&gt;</code>, <code>&lt;script&gt;...&lt;/script&gt;</code>, and <code>&lt;style&gt;...&lt;/style&gt;</code>. This is the standard structure of a VueJS 3 component.</p><ul><li>The <code>&lt;template&gt;</code> section contains our <code>HTML</code> layout</li><li>The <code>&lt;script&gt;</code> section contains the <code>Javascript</code> for logic and data management</li><li>The <code>&lt;style&gt;</code> section contains our <code>CSS</code> styles which can be scoped to the current component only if desired.</li></ul><blockquote><p><em>Note that the <code>lang=&quot;ts&quot;</code></em> flag in the <code>&lt;script&gt;</code> section signifies that we are using Typescript. VueJS 3 has built in Typescript support and this flag also enables type-checking.</p></blockquote><p>You'll notice also, in the <code>&lt;script&gt;</code> section we have some hardcoded data:</p><h5><a class="anchor" aria-hidden="true" id="em-code-pages-index-vue-code-em"> </a><em><code>pages/index.vue</code></em></h5><pre lang="javascript"><code>data() {    return {      cards: [        {          &quot;rarityOrder&quot;: 0,          &quot;rarity&quot;: &quot;common&quot;,          &quot;imgURL&quot;: &quot;https://i.imgur.com/Ppl525s.png&quot;        },        {          &quot;rarityOrder&quot;: 0,          &quot;rarity&quot;: &quot;common&quot;,          &quot;imgURL&quot;: &quot;https://i.imgur.com/lFmgnFj.png&quot;        },        {          &quot;rarityOrder&quot;: 1,          &quot;rarity&quot;: &quot;uncommon&quot;,          &quot;imgURL&quot;: &quot;https://i.imgur.com/Xl5borx.png&quot;        },        {          &quot;rarityOrder&quot;: 2,          &quot;rarity&quot;: &quot;rare&quot;,          &quot;imgURL&quot;: &quot;https://i.imgur.com/nfXbo4I.png&quot;        },        {          &quot;rarityOrder&quot;: 3,          &quot;rarity&quot;: &quot;ultra-rare&quot;,          &quot;imgURL&quot;: &quot;https://i.imgur.com/CIV2Yhq.png&quot;        }      ],    }  }</code></pre><p>Right now, this is our array of card objects. It's currently hardcoded for development purposes, but we will be retrieving this data from the database in the end.</p><p>You also might notice some interesting tags in the <code>&lt;template&gt;</code> section. <code>&lt;van-row&gt;</code> is an element from the ui library that we selected while setting up the Nuxt project, called Vant. A UI library provides some out-of-the-box elements we can use to help us with layout and look/feel. Nuxt provides many other selections as well.</p><p><code>&lt;CardFlip :card=&quot;card&quot; /&gt;</code> references another component that is being used on this page. Let's go take a look at that component.</p><p>You'll see the familiar 3-section layout but now the <code>&lt;style&gt;</code> section is <code>scoped</code> to keep any specific styles to this component. There's also a new structure in our <code>&lt;script&gt;</code> section.</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-cardflip-vue-code-em"> </a><em><code>components/CardFlip.vue</code></em></h5><pre lang="javascript"><code>props: {    card: {        type: Object,        default () {            return {                rarity: 'none',                igmURL: ''            }        }    }}</code></pre><p>This section defines the <code>props</code> or properties that can be passed into this component. In this case, we are defining a <code>prop</code> called <code>card</code> that expects an <code>Object</code>. If you remember, our reference to this component looked like this: <code>&lt;CardFlip :card=&quot;card&quot; /&gt;</code>. Here, we are passing in an object (also called <code>card</code>) into that <code>prop</code>.</p><p>If we take a look at the template section, we see a placeholder for another component. The front side of the card.</p><p>Let's make that component.</p><h2><a class="anchor" aria-hidden="true" id="5-create-a-vue-component"> </a>5. Create a Vue Component</h2><h3><a class="anchor" aria-hidden="true" id="strong-step-5a-strong"> </a>✅  <strong>Step 5a:</strong></h3><p>First, let's start by creating a new file in the components folder called <code>HootCard.vue</code>. Then fill in the standard sections; <code>&lt;template&gt;</code>, <code>&lt;script&gt;</code>, and <code>&lt;style&gt;</code>.</p><p>The <code>&lt;template&gt;</code> is going to be very simple. All we want is to display an image, similar to the back side of the card that we saw in the <code>CardFlip.vue</code> component.</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-template-code-em"> </a><em><code>components/HootCard.vue - &lt;template&gt;</code></em></h5><pre lang="html"><code>&lt;template&gt;    &lt;div class=&quot;card&quot; :class=&quot;rarity&quot;&gt;        &lt;img class=&quot;owl&quot; :src=&quot;imgURL&quot; /&gt;    &lt;/div&gt;&lt;/template&gt;</code></pre><p>Notice that we are utilizing a few custom css classes. We'll define those in the <code>&lt;style&gt;</code> section. We also have some data references: <code>:class=&quot;rarity&quot;</code> and <code>:src=&quot;imgURL&quot;</code>. This is so that we can dynamically change the elements based on the type of card.</p><p>Let's get some of that data set up.In the <code>&lt;script&gt;</code> section:</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5><pre lang="html"><code>&lt;script lang=&quot;ts&quot;&gt;import Vue from 'vue';export default Vue.extend({})&lt;/script&gt;</code></pre><p>We know that we are going to pass in a prop for the card data, so let's set that up. We know what the data structure for the pack is, based on our hard-coded example.</p><h5><a class="anchor" aria-hidden="true" id="em-code-array-of-5-cards-reference-code-em"> </a><em><code>Array of 5 Cards - Reference</code></em></h5><p><img src="/tutorial/imgs/card_array.png" alt="image" /></p><p>We are dealing primarily with the <code>rarity</code> and <code>imgURL</code> properties. So, in our <code>props</code> we need to specify an object with those two properties.</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5><pre lang="html"><code>&lt;script lang=&quot;ts&quot;&gt;import Vue from 'vue';export default Vue.extend({    props: {        card: {            type: Object,            default () {                return {                    rarity: 'none',                    imgURL: ''                }            }        }    }})&lt;/script&gt;</code></pre><p>Now we need to return those <code>props</code> as <code>data</code> values so our template can use them.</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-script-code-em"> </a><em><code>components/HootCard.vue - &lt;script&gt;</code></em></h5><pre lang="html"><code>&lt;script lang=&quot;ts&quot;&gt;import Vue from 'vue';export default Vue.extend({    props: {        card: {            type: Object,            default () {                return {                    rarity: 'none',                    imgURL: ''                }            }        }    },    data() {        return {            rarity: this.card.rarity,            imgURL: this.card.imgURL        }    }})&lt;/script&gt;</code></pre><p>And that's it for our logic! Now, the card image will be dynamic based on the card that's passed in, as well as the style. Speaking of which let's get that custom css in here.</p><h5><a class="anchor" aria-hidden="true" id="em-code-components-hootcard-vue-style-code-em"> </a><em><code>components/HootCard.vue - &lt;style&gt;</code></em></h5><pre lang="html"><code>&lt;style scoped&gt;.card {    width: 100%;    border-radius: 12px;    position: relative;    padding-top: 140%}.card.ultra-rare {    background: #f1ba24;    box-shadow: 0px 0px 20px #f1ba24;}.card.rare {    background: #72286d;    box-shadow: 0px 0px 20px #72286d;}.card.uncommon {    background: #b12659;}.card.common {    background: #7f949b; /*84d4d4*/}.owl {    width: 50%;    left: 50%;    top: 50%;    position: absolute;    transform: translate(-50%, -50%);}&lt;/style&gt;</code></pre><p>And that's it! We've just created a custom Vue component to dynamically display our cards! Let's test it out!</p><p>First we need to add the component to <code>CardFlip.vue</code>. Replace the <code>&lt;!-- CARD COMPONENT HERE --&gt;</code> line with this:</p><pre lang="javascript"><code>&lt;HootCard :card=&quot;card&quot; /&gt;   </code></pre><p>In the terminal, run:</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5><pre lang="bash"><code>npm run dev</code></pre><p>A browser window should open automatically.</p><p><img src="/tutorial/imgs/firstRun.png" alt="image" /></p><p>Now we have an interactive experience opening a pack of cards. The cards are always the same though, we'll need to connect our app to our database and get serverless functions up and running to make it more dynamic.</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-code-em"> </a><em><code>Terminal</code></em></h5><p><code>CTRL-C</code> to kill the running service</p><h2><a class="anchor" aria-hidden="true" id="6-database-connection-setup"> </a>6. Database Connection Setup</h2><p>Ok, we have a few things to set up before we can implement our serverless functions.</p><ul><li>Run <code>astra-setup</code></li><li>Install <code>@astrajs/collections</code></li><li>Create <code>astraClient.js</code></li><li>Install <code>netlify-cli</code></li></ul><h3><a class="anchor" aria-hidden="true" id="strong-step-6a-strong"> </a>✅  <strong>Step 6a:</strong></h3><p>First lets run a tool called <code>astra-setup</code>. You will need the authentication token you generated in <a href="#2-create-a-security-token">step 2</a>.</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5><pre lang="bash"><code>npm exec astra-setup vue_workshop_db vue_keyspace</code></pre><p>This tool will create <em><strong>environment variables</strong></em> for you in a new file: <code>.env</code>. These variables are used for authenticating and connecting to your Astra DB. This includes your authentication token, so these variables are only stored locally and should never be stored in a public facing repository.</p><p>It should look something like this. You can run <code>cat /workspace/workshop-vuejs/.env</code> to take a look at yours.</p><h5><a class="anchor" aria-hidden="true" id="em-code-env-code-em"> </a><em><code>.env</code></em></h5><pre><code>ASTRA_DB_ADMIN_TOKEN=&quot;&lt;TOKEN&gt;&quot;ASTRA_DB_APPLICATION_TOKEN=&quot;&lt;TOKEN&gt;&quot;ASTRA_DB_ID=&quot;&lt;ID&gt;&quot;ASTRA_DB_REGION=&quot;&lt;REGION&gt;&quot;ASTRA_DB_KEYSPACE=&quot;vue_keyspace&quot;ASTRA_GRAPHQL_ENDPOINT=&quot;&lt;URL&gt;&quot;</code></pre><h3><a class="anchor" aria-hidden="true" id="strong-step-6b-strong"> </a>✅  <strong>Step 6b:</strong></h3><p>Now let's install the library for connecting to our Astra DB.</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5><pre lang="bash"><code>npm install @astrajs/collections</code></pre><p>We will be using the <em><strong>Document API</strong></em> to store and retrieve <code>JSON</code> Documents to the database. First though, we need to create a utility to create the client that our serverless functions will use.</p><h3><a class="anchor" aria-hidden="true" id="strong-step-6c-strong"> </a>✅  <strong>Step 6c:</strong></h3><p>Create a new file in <code>functions/utils/</code> called <code>astraClient.js</code>.</p><h5><a class="anchor" aria-hidden="true" id="em-code-functions-utils-astraclient-js-code-em"> </a><em><code>functions/utils/astraClient.js</code></em></h5><pre lang="javascript"><code>const { createClient } = require(&quot;@astrajs/collections&quot;);let astraClient = null;const getAstraClient = async () =&gt; {    if (astraClient === null) {        astraClient = await createClient(            {                astraDatabaseId: process.env.ASTRA_DB_ID,                astraDatabaseRegion: process.env.ASTRA_DB_REGION,                applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,            },            30000        );    }    return astraClient;};const getCollection = async () =&gt; {    const documentClient = await getAstraClient();    return documentClient        .namespace(process.env.ASTRA_DB_KEYSPACE)        .collection(&quot;cards&quot;);};module.exports = { getAstraClient, getCollection };</code></pre><p>Okay, this is simpler than it looks. There are two functions here to talk about. The first is <code>getAstraClient</code>. This function initializes the connection to the database using the evironment variables we imported previously (<code>process.env.ASTRA_...</code>).</p><p>The second function get the reference to the document collection we want. It first intitializes the client using the previous function:</p><pre lang="javascript"><code>const documentClient = await getAstraClient();</code></pre><p>Then returns the specified collection <code>&quot;cards&quot;</code>, from the given keyspace:</p><pre lang="javascript"><code>return documentClient.namespace(process.env.ASTRA_DB_KEYSPACE).collection(&quot;cards&quot;);</code></pre><p>This function can now be used anywhere to get a reference to this collection.</p><blockquote><p>*If you want to have a more flexible function, you can replace the <code>&quot;cards&quot;</code> name with a parameter that gets passed in, allowing this one function to reference any specified collection.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="strong-step-6d-strong"> </a>✅  <strong>Step 6d:</strong></h3><p>Alright, one last thing before we can get to our serverless functions is to install <code>netlify-cli</code>. Netlify is a Global CDN that provides hosting solutions to web-apps and also provides a back-end infrastructure to serve up our serverless functions. Our function implementation is not restricted to Netlify, but we have found it to be a very robust and easy-to-use solution. The CLI tool we are installing here will allow us to run a local evironment that emulates the production environment and give us access to the serverless functions.</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5><pre lang="bash"><code>npm install -g netlify-cli</code></pre><p>And that's it! On to our first serverless function!</p><h2><a class="anchor" aria-hidden="true" id="7-create-a-serverless-function"> </a>7. Create a Serverless Function</h2><p>The serverless functions are pretty easy to implement, but there's a few things to note. First is that you want to separate each function into a separate file. This is because Netlify will generate endpoints to your functions based on the files in the <code>functions</code> folder. So, one function, one file, one endpoint.</p><p>Example: we already have a serverless function ready in the functions folder called <code>uploadCards.js</code>. This is for writing all of our cards to the database to make life easier, it isn't needed for the main app. Netlify will generate an endpoint for this function at <code>/.netlify/functions/uploadCards</code>. This will be the pattern for any function we make. <em>(We'll use this path later in the front-end)</em>.</p><p>Let's start our new serverless function. Create a new file in the <code>functions</code> directory called <code>getCards.js</code>.</p><h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5><pre lang="javascript"><code>exports.handler = async function () {    return {        statusCode: 200,        body: '',        headers: {            'Content-type': 'application/json',        },    };};</code></pre><p>This is our simple boiler-plate serverless function. The bare-bones needed for everything to work. Currently though, we are just returning a status 200 (success) and and empty body, so not very helpful.</p><p>Here's what we want to do in our serverless function.</p><ul><li>Retrieve all the cards from the database.</li><li>Randomly select 5 cards</li><li>Send the newly created &quot;pack&quot; back to the front end for display</li></ul><p>Luckily for us, (and for time), we have some pre-made functions for randomly selecting the 5 cards in <code>functions/utils/packBuilder.js</code>. Let's import that into our serverless function so we can use it. We also are going to need our <code>getCollection</code> function from <code>astraClient.js</code> so we can retrieve our cards, so we'll import that as well.</p><pre lang="javascript"><code>const { getCollection } = require(&quot;./utils/astraClient&quot;);const { packBuilder } = require(&quot;./utils/packBuilder&quot;);</code></pre><details><summary>Show me in context</summary><h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5><pre lang="javascript"><code>const { getCollection } = require(&quot;./utils/astraClient&quot;);const { packBuilder } = require(&quot;./utils/packBuilder&quot;);exports.handler = async function () {    return {        statusCode: 200,        body: '',        headers: {            'Content-type': 'application/json',        },    };};</code></pre></details><br><p>So in the function itself, let's start by creating a reference to our collection:</p><pre lang="javascript"><code>const collection = await getCollection();</code></pre><details><summary>Show me in context</summary><h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5><pre lang="javascript"><code>const { getCollection } = require(&quot;./utils/astraClient&quot;);const { packBuilder } = require(&quot;./utils/packBuilder&quot;);exports.handler = async function () {    const collection = await getCollection();    return {        statusCode: 200,        body: '',        headers: {            'Content-type': 'application/json',        },    };};</code></pre></details><br><p>Now we can use <code>collection</code> as our reference and use the <em><strong>Document API</strong></em> to retrieve data. First though, we need to implement a <code>try</code> block to catch any errors that might occur. Here's what it should look like so far.</p><h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5><pre lang="javascript"><code>const { getCollection } = require(&quot;./utils/astraClient&quot;);const { packBuilder } = require(&quot;./utils/packBuilder&quot;);exports.handler = async function () {    const collection = await getCollection();    try {        return {            statusCode: 200,            body: '',            headers: {                'Content-type': 'application/json',            },        };    } catch (e) {        console.error(e);        return {            statusCode: 500,            body: JSON.stringify(e),        };    }};</code></pre><p>So now, within the <code>try</code> block we can retrieve our data, create the pack, and send the response. Any error will be caught and logged.</p><h3><a class="anchor" aria-hidden="true" id="document-api"> </a>Document API</h3><p>There are several methods built into the <em><strong>Document API</strong></em> and are included in the <code>@astrajs/collections</code> library.</p><ul><li><code>create</code> - For inserting documents into the collection</li><li><code>update</code> - For updating/editing a document in the collection</li><li><code>find</code> - For retrieving documents from the collection</li></ul><p>In this serverless function, we just want to retrieve all the cards we have available, so we'll use <code>find</code>.</p><pre lang="javascript"><code>const res = await collection.find({});</code></pre><blockquote><p>*Note that the empty braces - <code>{}</code> - signify that we want <strong>all</strong> the documents from the collection.</p></blockquote><p>Then we can use our <code>packBuilder</code> function to randomly select 5 cards, and create a pack - an array of 5 cards.</p><pre lang="javascript"><code>let pack = packBuilder(Object.keys(res.data).map((key) =&gt; res.data[key]));</code></pre><p>Whoa. Stop. What is <code>Object.keys(res).map((key) =&gt; res[key])</code>??</p><p>Ok. So when we retrieve the documents using <code>collection.find({})</code>, it will return each document with it's auto-generated 'document id'. This is useful if we were looking for a specific document, but we don't care about it in this case. What we need is all the cards in an array. So this crazy line uses the built in methods for Arrays (<code>.map</code>) and Objects (<code>.keys</code>) and creates an array of the documents, while throwing out the document ids that we don't need.</p><p>Now we need to return the resulting <code>pack</code> to the front-end. Let's change our successful return to this:</p><pre lang="javascript"><code>return {    statusCode: 200,    body: JSON.stringify(pack),    headers: {        'Content-type': 'application/json',    },};</code></pre><p>And that's it! This serverless function is done! Here's what it should look like in the end.</p><h5><a class="anchor" aria-hidden="true" id="em-code-functions-getcards-js-code-em"> </a><em><code>functions/getCards.js</code></em></h5><pre lang="javascript"><code>const { getCollection } = require(&quot;./utils/astraClient&quot;);const { packBuilder } = require(&quot;./utils/packBuilder&quot;);exports.handler = async function () {    const collection = await getCollection();    try {        const res = await collection.find({});        let pack = packBuilder(Object.keys(res.data).map((key) =&gt; res.data[key]));                return {            statusCode: 200,            body: JSON.stringify(pack),            headers: {                'Content-type': 'application/json',            },        };    } catch (e) {        console.error(e);        return {            statusCode: 500,            body: JSON.stringify(e),        };    }};</code></pre><h2><a class="anchor" aria-hidden="true" id="8-calling-serverless-functions-from-the-front-end"> </a>8. Calling Serverless Functions from the Front-End</h2><p>Alright! Let's use our new serverless function by calling it from the front-end!</p><p>We'll need to make some changes to <code>index.vue</code>. Namely, getting rid of the hardcoded card array and adding a new fetch method to retrieve our server-generated pack.</p><p>First let's get rid of the hard-coded card array, and replace it with an empty array. This will simply initialize our <code>cards</code> variable.</p><p>Next, let's import a library called <code>axios</code> that will help us with our fetch method.</p><blockquote><p><em>Note: Javascript does have built in fetch capabilities, so this library is technically optional. Axios is a good library though, and provides many other tools as well</em></p></blockquote><pre lang="javascript"><code>import axios from 'axios';</code></pre><p>Now we'll implement a fetch method in our component.</p><pre lang="javascript"><code>async fetch() {    this.cards = await axios.get('/.netlify/functions/getCards').then(res =&gt; res.data);},</code></pre><p>Notice the path to the endpoint - <code>'/.netlify/functions/getCards'</code>. Same as mentioned before, this is the standard path that Netlify will generate for each of our serverless functions.</p><p>So here's what <code>index.vue</code> should look like now. (<code>&lt;script&gt;</code> section)</p><h5><a class="anchor" aria-hidden="true" id="em-code-pages-index-vue-code-em"> </a><em><code>pages/index.vue</code></em></h5><pre lang="html"><code>&lt;script lang=&quot;ts&quot;&gt;import Vue from 'vue';import axios from 'axios';export default Vue.extend({  data() {    return {      cards: [],    }  },  async fetch() {    this.cards = await axios.get('/.netlify/functions/getCards').then(res =&gt; res.data);  },  methods: {    reloadPage() {      window.location.reload();    }  }})&lt;/script&gt;</code></pre><h2><a class="anchor" aria-hidden="true" id="9-launching-the-app"> </a>9. Launching the App</h2><p>Let's launch our site now, using the Netlify CLI to provide our new serverless functions.</p><h5><a class="anchor" aria-hidden="true" id="em-code-terminal-run-code-em"> </a><em><code>Terminal - Run</code></em></h5><pre lang="bash"><code>netlify dev</code></pre><p>You may not be getting any cards yet. That's because we haven't uploaded any to the database! Remember the other function though? We can manually run that function by running <code>curl $(gp url 8888)/.netlify/functions/uploadCards</code> in a new terminal, then refresh the app!</p>
SUCCESS SAVING README for datastaxdevs-workshop-vuejs
Getting astra.json for datastaxdevs/workshop-intro-to-graphql at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="introduction-to-graphql-react-java-astra-db"> </a>🎓 Introduction to GraphQL + React + Java + Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astra-db-and-create-database"> </a>1. Login or Register to Astra DB and create database</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-experiment-with-graphiql"> </a>4. Experiment with GraphiQL</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="now-let-s-try-out-some-graphql-queries"> </a>Now, let's try out some graphQL queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="compare-the-graphql-schema"> </a>Compare the GraphQL schema</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-experiment-with-astra-db-s-graphql-playground"> </a>5. Experiment with Astra DB's GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5a-open-graphql-playground"> </a>✅  Step 5a: Open GraphQL Playground:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5b-insert-the-astra-db-token-to-run-schema-queries"> </a>✅  Step 5b: Insert the Astra DB Token to run schema queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5c-create-a-table-in-the-graphql-playground"> </a>✅  Step 5c: Create a table in the GraphQL Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-insert-data-to-db-using-the-graphql-playground"> </a>6. Insert data to DB using the GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6a-adjust-the-second-playground-tab-to-your-keyspace"> </a>✅  Step 6a: Adjust the second playground tab to your keyspace</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6b-set-the-token-to-run-data-queries"> </a>✅  Step 6b: Set the token to run data queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6c-insert-genre-names-with-the-playground"> </a>✅  Step 6c: Insert genre names with the Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-retrieve-values-from-db-using-the-graphql-playground"> </a>7. Retrieve values from DB using the GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-7a-read-genres-with-a-query-in-the-playground"> </a>✅  Step 7a: Read genres with a query in the Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-start-up-react"> </a>8. Start up React</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-8a-execute-the-following-command"> </a>✅ Step 8a: Execute the following command</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-8b-then-execute"> </a>✅  Step 8b: Then, execute</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="compare-javascript-code-to-our-graphql-queries-from-above"> </a>Compare javascript code to our graphQL queries from above</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="now-for-the-cool-part"> </a>Now for the cool part</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-hook-the-database-up-to-the-react-client-app"> </a>9. Hook the database up to the React client app</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9a-initialize-astra-cli"> </a>✅ Step 9a: Initialize Astra CLI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9b-configure-database-credentials"> </a>✅ Step 9b: Configure database credentials</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9c-start-your-react-app-again"> </a>✅ Step 9c: Start your React app again</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9d-verify-data-load"> </a>✅ Step 9d: Verify data load</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="can-you-figure-out-what-s-going-on-here"> </a>Can you figure out what's going on here?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9e-test-this-query"> </a>✅ Step 9e: Test this query</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="view-results"> </a>View Results</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9f-create-the-missing-table"> </a>✅ Step 9f: Create the missing table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="verify-result"> </a>✅ Verify result</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9g-add-some-data"> </a>✅ Step 9g: Add some data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="check-the-result"> </a>✅ Check the result</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9h-check-the-client-again"> </a>✅ Step 9h: Check the client again</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="play-a-bit-more"> </a>Play a bit more!</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="that-s-it-you-did-it-nice-job"> </a>That's it, you did it! Nice job!</h3>
HTML FOR datastaxdevs-workshop-intro-to-graphql<h1><a class="anchor" aria-hidden="true" id="introduction-to-graphql-react-java-astra-db"> </a>🎓 Introduction to GraphQL + React + Java + Astra DB</h1><p><a href="https://gitpod.io/from-referrer/"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><em>50 minutes, Beginner/Intermediate, <a href="#1-login-or-register-to-astradb-and-create-database">Start Building</a></em></p><p>Both a simple <strong>graphQL</strong> enabled <strong>ReactJS</strong> app built using <a href="https://create-react-app.dev/"><strong>create-react-app</strong></a> AND a simple <strong>Java</strong> backend <strong>graphQL</strong> service built with <a href="https://start.spring.io/"><strong>Spring Initializr</strong></a> and using <a href="https://netflix.github.io/dgs/getting-started/"><strong>The Netflix DGS framework</strong></a> PLUS <strong>Astra DB</strong> hooked up and ready to rock! :heart_eyes_cat:</p><p>This is a companion to our <a href="https://github.com/datastaxdevs/appdev-week3-graphql">Netflix Clone using Astra DB and GraphQL</a> workshop and is essentially a &quot;prologue&quot; to that content. Once complete, feel free to to go deploy a Netflix clone using what you learned here.</p><p>Finally, this content uses <strong>React/JS</strong> concepts. If you are not familiar with those or need a refresher, <a href="https://github.com/datastaxdevs/react-basics">take a look HERE</a> to get up to date.</p><p>The materials have been built by the DataStax developer advocates team.</p><p><img src="./tutorial/images/graphQL_logo.png" alt="GraphQL Logo" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>An overview of what GraphQL is and what makes it cool</li><li>What differs between GraphQL and other APIs (such as REST), including their pros/cons</li><li>Hands-on examples of GraphQL queries and mutations</li><li>How to build GraphQL APIs for mobile and web applications</li><li>Setting up your Astra DB to store application data via GraphQL</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><p/><details><summary><b> 1️⃣ Can I run the code for this workshop on my local computer instead of using Gitpod?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol>  <li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 or 16 and npm 7 or later</a></li>  <li>netlify-cli (use "npm install -g netlify-cli")</li></ol></p>You will have to adapt commands and paths based on your environment (including digging into file ".gitpod.yml") and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful. <strong>This is considered a more advanced path to take.</strong></details><p/><details><summary><b> 2️⃣ What other prerequisites are there?</b></summary><hr><ul><li>You will need a github account</li><li>You should use Chrome or Firefox (other browsers might have trouble displaying Gitpod correctly)</li><li>You will need an Astra DB account, but we'll cover that in the exercises</li></ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also afterwards.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else <strong>(open badge specification)</strong>.</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra">&quot;cassandra&quot; on StackOverflow</a></li><li><a href="https://dba.stackexchange.com/questions/tagged/cassandra">&quot;cassandra&quot; on DBA StackExchange</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="tutorial/images/graphql-badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository, as described below, to the end;</li><li>Insert (mutate) a <strong>new show</strong> or a <strong>new genre</strong> of your choice in the database;</li><li>Take a single <strong>screenshot</strong> of the React app with all of the working Astra DB sections and showing the entry you just added;</li><li>Submit your homework <a href="https://dtsx.io/homework-intro-graphql">here</a>.</li></ol><p>That's it, done.We will then grade the submissions: expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3><p><a href="https://graphql.org/">graphql.org</a> - The first place to learn about GraphQL</p><p><a href="https://netflix.github.io/dgs/getting-started/">The Netflix DGS framework Tutorial</a> - Java/Spring GraphQL backend (used to generate this code)</p><p><a href="https://start.spring.io/">Spring Initializr</a> - Used in the ^above tutorial to generate the Java/Spring backend starter</p><p><a href="https://www.gatsbyjs.com/docs/how-to/querying-data/running-queries-with-graphiql/">GraphiQL</a> - GraphQL IDE included with The Netflix DGS Framework</p><p><a href="https://www.apollographql.com/docs/react/">Apollo client</a> - Awesome GraphQL client for React/JS (not used here, but really solid, Netflix uses this)</p><p><a href="https://hasura.io/blog/top-7-graphql-ides-you-should-know-about-in-2021/">Top 7 GraphQL IDEs</a> - A nice collection of cool GraphQL IDEs to use</p><p><a href="https://create-react-app.dev/">create-react-app tutorial</a> - Create a React app from scratch (used to generate this code)</p><p><a href="https://www.youtube.com/watch?v=c2fJ7T0N1Sk">A Beginner's Guide to GraphQL</a> - Ali Spittel's really awesome GraphQL starter video</p><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astra-db-and-create-database"> </a>1. Login or Register to Astra DB and create database</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you use up your credits the databases will pause, no charge, and you will be given the option to upgrade to a higher tier.</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the following button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-11-23"><img src="tutorial/images/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>intrographql</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCK 🔒 icons: the LOCKed regions are the region not accessible to the Free Tier.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>intrographql</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB Dashboard page. You may have to &quot;Resume&quot; the database first in case it is in &quot;hibernated&quot; state.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong> (needed to authenticate with your database and start using it):<strong>please IGNORE THIS ONE, as we will be soon creating a new, more powerful token for today</strong>.</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this usually only takes 2-3 minutes.</p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><blockquote><p>Note: this step is very important, as the token generated automatically for you withthe database lacks some permissions we'll use in the workshop.</p></blockquote><p><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create a token for your app</a>, <em>using the <strong>&quot;Database Administrator&quot;</strong> role</em>.Keep it handy for later use (best to download it in CSV format, as the valueswill not be visible afterward).This will provide authentication later when interacting with the database.Today, in particular, we will need the string labeled &quot;token&quot; (the one starting with <code>AstraCS:...</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2><p><a href="https://www.gitpod.io/">Gitpod</a> is an 100% online IDE based on <a href="https://github.com/gitpod-io/vscode/blob/gp-code/LICENSE.txt?lang=en-US">Visual Studio Code</a>. To initialize your environment simply click on the button below <em>(CTRL + Click to open in new tab)</em> You will be asked for you github account, as needed.</p><p><strong>Warning</strong>: for best results, open the link with Chrome or Firefox!</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-intro-to-graphql"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>This will bootstrap your demo environment. Be patient, it will take a few minutes as everything loads up.</p><blockquote><p><strong>Note</strong>: during loading of the Gitpod environment, a new tab will be tentatively openedwith an URL such as <code>https://8080-datastaxdev-[...].gitpod.io/graphiql</code>.Please <strong>CHECK YOUR POPUP BLOCKER</strong> and allow it before continuing: this will be your GraphiQL interface!</p></blockquote><details><summary><strong>Show me how Gitpod looks like for this workshop</strong></summary><p>Gitpod starts with a file explorer on the left (1), an editor panel on the top (2),and - in the case of this specific environment - two consoles side by side,one to launch commands and later start the Node app (3) and one busy withrunning the Java backend (4). On the right you will find a console switcher toeasily locate any console and make it active (but even just clickingon the desired console would do the trick).</p><p><img src="tutorial/images/gitpod-shape.png" alt="The shape of Gitpod" /></p></details><h2><a class="anchor" aria-hidden="true" id="4-experiment-with-graphiql"> </a>4. Experiment with GraphiQL</h2><p>It just so happens that <a href="https://netflix.github.io/dgs/getting-started/">The Netflix DGS framework</a> comes with GraphiQL already integrated and ready for use. This is a wonderful tool you can use to explore graphQL queries and mutations. Let's experiment with this now!</p><blockquote><p><em>Note:</em> the GraphiQL should be open already in a new tab for you; in case it isn't for some reason,run this command in a Gitpod console and manually point a new tab to the URL it prints:<code>echo `gp url 8080`/graphiql</code>.</p></blockquote><p>Something to point out here is there is no database just yet. We are powering the graphQL schema via the back-end Java application and the graphQL data is completely hardcoded.Take a look at both <strong><code>ShowsDatafetcher.java</code></strong> and <strong><code>GenresDatafetcher.java</code></strong> located in <strong><code>graphql-backend-examples/src/main/java/com/example/demo</code></strong>to find the simple implementations using DGS annotations <code>@DgsComponent</code> and <code>@DgsQuery</code>.</p><details><summary><strong>Show me how to open these files in Gitpod</strong></summary><p>In the left toolbar, choose the first tool (&quot;Explorer&quot;) and navigate the directory to the desired directory; then, clicking on the files will open them in the editor (topmost panel on the right).</p><p><img src="tutorial/images/open-java-DGS-files-in-gitpod.png" alt="Open files in Gitpod" /></p></details><h4><a class="anchor" aria-hidden="true" id="now-let-s-try-out-some-graphql-queries"> </a>Now, let's try out some graphQL queries</h4><p>Plug these into the GraphiQL IDE that launched into a new tab from GitPod.</p><pre lang="GraphQL"><code>query justTitle {  shows {    title  }}</code></pre><pre lang="GraphQL"><code>query withReleaseYear {  shows {    title    releaseYear  }}</code></pre><pre lang="GraphQL"><code>query getOneShow {  shows (titleFilter: &quot;Ozark&quot;) {      title      releaseYear  }}</code></pre><pre lang="GraphQL"><code>query ShowsAndGenres {  shows {    title    releaseYear  }  genres {    value  }}</code></pre><p><img src="tutorial/images/graphiql-queries.png" alt="GraphiQL queries" /></p><h4><a class="anchor" aria-hidden="true" id="compare-the-graphql-schema"> </a>Compare the GraphQL schema</h4><p>The objects known to a GraphQL API are defined starting from its &quot;Schema&quot;.In the case of our DGS Java application, the schema is found in<code>graphql-backend-examples/src/main/resources/schema/schema.graphqls</code>.Take a look at its contents: notice the special <code>Query</code> item that definesthe possible queries and, after that, the user-defined types available tothe API:</p><pre lang="GraphQL"><code>type Query {    shows(titleFilter: String): [Show]    genres(labelFilter: String): [Genre]}type Show {    title: String    releaseYear: Int}type Genre {    value: String!}</code></pre><h2><a class="anchor" aria-hidden="true" id="5-experiment-with-astra-db-s-graphql-playground"> </a>5. Experiment with Astra DB's GraphQL Playground</h2><p>Ok, let's take this a step further and prepare the data layer for our app.At this point you should have already <a href="#1-login-or-register-to-astradb-and-create-database">created your Astra DB database</a>.Follow the instructions below to launch the <strong>GraphQL Playground</strong> provided in <strong>Astra DB</strong>:</p><h4><a class="anchor" aria-hidden="true" id="step-5a-open-graphql-playground"> </a>✅  Step 5a: Open GraphQL Playground:</h4><ol start="0"><li>Ensure you are logged on to your <a href="https://astra.datastax.com">Astra</a> account</li><li>Click on the &quot;workshops&quot; database on the left (expanding the list if needed)</li><li>Click <code>Connect</code> TAB</li><li>Click the <code>APIs</code>  connection method</li><li>Make sure <code>GraphQL API</code> is selected</li><li>Locate the link to your GraphQL Playground in the text</li></ol><p><img src="tutorial/images/open-playground-2.png" alt="Open Astra DB GraphQL Playground image" /></p><details><summary><strong>Click here if you are using the "New Astra Experience" UI</strong></summary><p><img src="tutorial/images/open-playground-2-wh.png" alt="Open Astra DB GraphQL Playground image, new Astra UI" /></p></details><p><strong>Note</strong>: in the following, we will refer to &quot;playground tabs&quot;. These are <em>not</em> the tabsin your browser, rather they are tabs <em>within</em> the Playground application,to switch between the (logically distinct) realms of &quot;managing schema&quot; and &quot;managing data in the tables&quot;(more on that later).</p><p><img src="tutorial/images/tabs-vs-playgroundtabs-labeled.png" alt="Playground tabs VS Browser tabs" /></p><h4><a class="anchor" aria-hidden="true" id="step-5b-insert-the-astra-db-token-to-run-schema-queries"> </a>✅  Step 5b: Insert the Astra DB Token to run schema queries</h4><p>In the GraphQL Playground, <strong>Populate HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your token (including the <code>AstraCS:</code> part).<em>This is the &quot;Database Administrator&quot; token you created earlier on the Astra DB dashboard (Step 2 above).</em></p><p><strong>Note</strong>: make sure you are on the <strong><code>graphql-schema</code></strong> playground tab in this step, as this image illustrates:</p><p><img src="tutorial/images/graphql-playground.png" alt="GraphQL Playground and token header, Schema playground tab" /></p><blockquote><p>Note: the GraphQL Playground starts with a ready-to-use <em>temporary token</em> as the <code>x-cassandra-token</code> header. But we want the queries run in the Playgroundto be identical to those that the Netlify functions will run from code, so <strong>please replace the token with your DB token as instructed</strong>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-5c-create-a-table-in-the-graphql-playground"> </a>✅  Step 5c: Create a table in the GraphQL Playground</h4><p>Run the following mutation in the <code>graphql-schema</code> playground tab, making sure to replace <code>intrographql</code> in the URL if you used a different keyspace name:</p><ul><li>Copy the following mutation on the left panel</li></ul><pre lang="GraphQL"><code>mutation {  reference_list: createTable(    keyspaceName:&quot;intrographql&quot;,    tableName:&quot;reference_list&quot;,    ifNotExists:true    partitionKeys: [       { name: &quot;label&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [      { name: &quot;value&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]  )}</code></pre><p>Click on the arrow in the middle of the screen to execute the query.</p><p><img src="tutorial/images/playground-1.png" alt="Execute a query in GraphQL Playground" /></p><h2><a class="anchor" aria-hidden="true" id="6-insert-data-to-db-using-the-graphql-playground"> </a>6. Insert data to DB using the GraphQL Playground</h2><h4><a class="anchor" aria-hidden="true" id="step-6a-adjust-the-second-playground-tab-to-your-keyspace"> </a>✅  Step 6a: Adjust the second playground tab to your keyspace</h4><p>In the GraphQL playground, switch to the second Playground tab (<code>graphql</code>). Edit the ending of the URL <em>shown within the Playground page</em> from <code>system</code> to the keyspace name <code>intrographql</code>:</p><p><img src="tutorial/images/graphql-url-ending.png" alt="GraphQL URL ending" /></p><h4><a class="anchor" aria-hidden="true" id="step-6b-set-the-token-to-run-data-queries"> </a>✅  Step 6b: Set the token to run data queries</h4><p>Populate the <strong>HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your DB token as shown below <em>(Note: you did this for the <code>graphql-schema</code> playground tab, now repeat for the <code>graphql</code> playground tab!)</em></p><p><img src="tutorial/images/graphql-playground-2b.png" alt="GraphQL Playground and token header, GraphQL playground tab" /></p><h4><a class="anchor" aria-hidden="true" id="step-6c-insert-genre-names-with-the-playground"> </a>✅  Step 6c: Insert genre names with the Playground</h4><p>In the GraphQL Playground, populate the <code>reference_list</code> table with all values:copy the following mutation on the left panel</p><pre lang="GraphQL"><code>mutation insertGenres {  action: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Action&quot;}) {    value{value}  }  anime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Anime&quot;}) {     value{value}  }  award: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Award-Winning&quot;}) {     value{value}  }  children: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Children &amp; Family&quot;}) {     value{value}  }  comedies: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Comedies&quot;}) {     value{value}  }  documentaries: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Documentaries&quot;}) {     value{value}  }  drama: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Dramas&quot;}) {     value{value}  }  fantasy: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Fantasy&quot;}) {     value{value}  }  french: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;French&quot;}) {     value{value}  }  horror: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Horror&quot;}) {     value{value}  }  independent: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Independent&quot;}) {     value{value}  }  music: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Music &amp; Musicals&quot;}) {     value{value}  }  romance: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Romance&quot;}) {     value{value}  }  scifi: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Sci-Fi&quot;}) {     value{value}  }  thriller: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Thriller&quot;}) {     value{value}  }  }</code></pre><p>Click on the arrow in the middle of the screen to execute the query.</p><h2><a class="anchor" aria-hidden="true" id="7-retrieve-values-from-db-using-the-graphql-playground"> </a>7. Retrieve values from DB using the GraphQL Playground</h2><h4><a class="anchor" aria-hidden="true" id="step-7a-read-genres-with-a-query-in-the-playground"> </a>✅  Step 7a: Read genres with a query in the Playground</h4><p>In the GraphQL Playground (staying on the <code>graphql</code> playground tab), list values from the table with the following query:</p><pre lang="yaml"><code>query getAllGenre {    reference_list (value: {label:&quot;genre&quot;}) {      values {      	value      }    }}</code></pre><p><em>👁️ Expected output</em><img src="tutorial/images/graphql-playground-3.png" alt="Playground getAllGenre query result" /></p><h2><a class="anchor" aria-hidden="true" id="8-start-up-react"> </a>8. Start up React</h2><p>So far we have executed GraphQL queries and mutations by hand from specific UIs.Now it's time to start the React client app and query the GraphQL endpoints from it!</p><blockquote><p>&quot;Endpoints&quot;, two of them. Each GraphQL server exposes a single endpoint for everything,but remember this app will query both the local DGS app and the Astra DB server!</p></blockquote><p>First you need to run a couple commands to get things set up:in your <strong><code>GitPod</code></strong> IDE navigate to the &quot;Client&quot; terminal<em>(it should already be open for you on the bottom left)</em>and make sure you are in the <strong><code>workshop-intro-to-graphql/graphql-client-examples</code></strong> directory.<strong>This is where you'll be running the nodejs/React app.</strong></p><details><summary><strong>Remind me what is this "client terminal" ...</strong></summary><p>It is the block labeled as &quot;3&quot;. Click on it, or use the switcher (5):</p><p><img src="tutorial/images/gitpod-shape.png" alt="The shape of Gitpod" /></p></details><h4><a class="anchor" aria-hidden="true" id="step-8a-execute-the-following-command"> </a>✅ Step 8a: Execute the following command</h4><pre lang="shell"><code>npm install -g netlify-cli</code></pre><p>This will install the <strong>Netlify CLI</strong> (command line interface) which our <strong>React/JS</strong> app uses in conjunction with the serverless functions we've setup to talk to our <strong>graphQL</strong> endpoints.</p><h4><a class="anchor" aria-hidden="true" id="step-8b-then-execute"> </a>✅  Step 8b: Then, execute</h4><pre lang="shell"><code>netlify dev</code></pre><p>This will start the <strong>React/JS</strong> application and display results from both the <strong><code>Shows</code></strong> and <strong><code>Genres</code></strong> <strong>graphQL</strong> queries and endpoints we were just experimenting with.</p><p>You should see Gitpod's mini-browser opening up by itself and showing the client application wihtin Gitpod.</p><blockquote><p><em>Note:</em> the client, at this point, should be opened in the mini-browser within Gitpod; to open it manually,run this command in a Gitpod console and point a new tab to the URL it prints:<code>echo `gp url 8888` </code>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="compare-javascript-code-to-our-graphql-queries-from-above"> </a>Compare javascript code to our graphQL queries from above</h4><p>If you take a look at both <strong><code>getShowsBackend.js</code></strong> and <strong><code>getGenresBackend.js</code></strong> located in <strong><code>graphql-client-examples/functions</code></strong> you should notice that both use the <strong>same exact</strong> <strong>graphQL</strong> queries that we used above.</p><pre lang="javascript"><code>const query = `    query getAllShows {      shows {        title        releaseYear      }    }  `</code></pre><pre lang="javascript"><code>  const query = `    query getAllGenres {      genres {        value      }    }  `</code></pre><p>All of the javascript wrapped around these is simply there to call the <strong>graphQL</strong> endpoint with the given query and pass the responseBody back to the calling function.</p><h4><a class="anchor" aria-hidden="true" id="now-for-the-cool-part"> </a>Now for the cool part</h4><p>Take a look at <strong><code>Shows.js</code></strong> and <strong><code>Genres.js</code></strong> located in <strong><code>graphql-client-examples/src/components/</code></strong>. In both cases they use <strong>React</strong> state, <code>gqlResult</code></p><pre lang="javascript"><code>  const [gqlResult, setGqlResult] = useState(null)</code></pre><p>to receive the responseBody from from our <strong>graphQL</strong> queries, set the <strong>React</strong> state, and inject the values dynamically into the DOM. Check out the following javascript snippet from <strong><code>Shows.js</code></strong>.</p><pre lang="javascript"><code>// Asynchronously fetch any &quot;shows&quot; graphQL data from the Java backend// using the getShowsBackend serverless function to call out to the// Netflix DGS Java graphQL endpointconst response = await fetch(&quot;/.netlify/functions/getShowsBackend&quot;, {    method: &quot;POST&quot;,})const responseBody = await response.json()setGqlResult(responseBody) // on response set our graphQL result state</code></pre><p>Notice how the fields (title, releaseYear) match our <strong>graphQL</strong> <code>Shows</code> schema exactly.</p><pre lang="javascript"><code>// Finally, if all other checks pass get the data// from the payload via gqlResult state and inject it into the DOM// Notice how the payload example below and the fields &quot;title&quot; and &quot;releaseYear&quot; match exactly// {&quot;data&quot;:{&quot;shows&quot;:[{&quot;title&quot;:&quot;Stranger Things&quot;,&quot;releaseYear&quot;:2016},{&quot;title&quot;:&quot;Ozark&quot;,&quot;releaseYear&quot;:2017}...return gqlResult.data.shows.map(({ title, releaseYear }) =&gt; (    &lt;div key={title}&gt;        &lt;p&gt;        {title}: {releaseYear}        &lt;/p&gt;    &lt;/div&gt;  ));</code></pre><p>Notice how the field (value) matches our <strong>graphQL</strong> <code>Genres</code> schema exactly.</p><pre lang="javascript"><code>// Finally, if all other checks pass get the data// from the payload via gqlResult state and inject it into the DOM// Notice how the payload example below and the field &quot;value&quot; match exactly// {&quot;data&quot;:{&quot;genres&quot;:[{&quot;value&quot;:&quot;Action&quot;},{&quot;value&quot;:&quot;Anime&quot;}...return gqlResult.data.genres.map(({ value }) =&gt; (    &lt;div key={value}&gt;        &lt;p&gt;        {value}        &lt;/p&gt;    &lt;/div&gt;  ));</code></pre><h2><a class="anchor" aria-hidden="true" id="9-hook-the-database-up-to-the-react-client-app"> </a>9. Hook the database up to the React client app</h2><p>The next step is to make the client able to retrieve the genres and the showsfrom the database, by querying Astra DB's GraphQL API. To achieve this,it's time to provide connection details (addresses, secrets) to theserverless Netlify functions which will back the React client.</p><h4><a class="anchor" aria-hidden="true" id="step-9a-initialize-astra-cli"> </a>✅ Step 9a: Initialize Astra CLI</h4><p>In the <strong><code>GitPod</code></strong> IDE, click on the &quot;Client&quot; terminal to make it active, hit <code>Ctrl-C</code> to stop the running client, if any, and make sure you are in the <strong><code>workshop-intro-to-graphql/graphql-client-examples</code></strong> directory.</p><p>Now you will create a <code>.env</code> file with connection info (addresses and secrets) for the Netlify function to be able to reach both the local backend and your Astra DB's GraphQL endpoint.You will use the Astra command-line interface to prepare a dot-env file for you; then you will complete it by adding a line defining the address of the local backend (i.e. the DGS locally-running GraphQL API).</p><p>Run the following command and provide your <strong>DB Administrator</strong> token string (starting with <code>AstraCS:...</code>) when prompted:</p><pre><code>astra setup</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9b-configure-database-credentials"> </a>✅ Step 9b: Configure database credentials</h4><p>Once you get a &quot;Configuration has been saved&quot; confirmation, proceed with:</p><pre><code>astra db create-dotenv workshops -k intrographqlcat .local-backend.env &gt;&gt; .envgp open .env</code></pre><p>The credentials are now all set up: your dot-env file should be now shown in the editor for you to check its contents.You will see several lines pertaining to Astra DB (not all of which will be used by today's client)and, at the end, a single setting about the Java GraphQL API you tested earlier.</p><p>Here is how the <code>.env</code> might look like (as a reference, check out the provided <code>.env.sample</code>):</p><p><img src="tutorial/images/dot-env-2.png" alt="Sample dot-env file" /></p><blockquote><p>If you are preparing the file manually (i.e. as opposed to using the <code>astra-cli</code> tool), be aware that the onlyvariables needed by the React client are: <code>ASTRA_DB_APPLICATION_TOKEN</code>, <code>ASTRA_DB_GRAPHQL_URL</code>and <code>JAVA_GRAPHQL_ENDPOINT</code>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-9c-start-your-react-app-again"> </a>✅ Step 9c: Start your React app again</h4><p>Launch the following command once more:</p><pre lang="shell"><code>netlify dev</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9d-verify-data-load"> </a>✅ Step 9d: Verify data load</h4><p>At this point your app should be running with a bunch of data displayed in the <strong><code>Shows</code></strong>, <strong><code>Genres,</code></strong> and <strong><code>ReferenceList</code></strong> sections, but notice the <strong><code>ShowsByName</code></strong> section displays <strong>&quot;Error :(&quot;</strong></p><p><img src="tutorial/images/error_shows_by_name.png" alt="Error in Shows by name" /></p><h4><a class="anchor" aria-hidden="true" id="can-you-figure-out-what-s-going-on-here"> </a>Can you figure out what's going on here?</h4><p>Let's break this down.</p><ul><li><p>We just added the database configuration and the <strong><code>ReferenceList</code></strong> section is populated which tells us our DB config and graphQL endpoints are configured properly</p></li><li><p>In the GraphQL Playground we added a schema for the <strong><code>reference_list</code></strong> table and added some data to the table, but we never created a schema for the <strong><code>ShowsByName</code></strong> section</p></li><li><p>If you take a look at the <strong><code>getShowsAstra.js</code></strong> script in <strong><code>graphql-client-examples/functions</code></strong> you can see the graphQL being used to query for data</p></li></ul><pre lang="javascript"><code>exports.handler = async function (event) {  const query = `    query getAllShows {      show_by_name {        values {          title          releaseYear        }      }    }  `</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9e-test-this-query"> </a>✅ Step 9e: Test this query</h4><p>Go back to the GraphQL <strong><code>graphQL</code></strong> playground tab.</p><p>Copy this into the playground and press the <em>&quot;play&quot;</em> button to execute the query. <strong>NOTE, you can simply append the query to the end of the list and then choose the query you wish to execute when you hit the &quot;play&quot; button.</strong></p><pre lang="GraphQL"><code>query getAllShows {      show_by_name {        values {          title          releaseYear        }      }    }</code></pre><p><img src="tutorial/images/graphql-getallshows.png" alt="GraphQL getAllShows execution" /></p><h4><a class="anchor" aria-hidden="true" id="view-results"> </a>View Results</h4><p>Notice what happened here. We have a validation error because there is no schema associated with the query we just executed. GraphQL uses a typed validation system so this is something to expect if a query is malformed, missing a schema, or something along those lines. You will want to control for this in your code.</p><p><img src="tutorial/images/graphql-field-undefined-error.png" alt="GraphQL &quot;Field undefined&quot; error" /></p><h4><a class="anchor" aria-hidden="true" id="step-9f-create-the-missing-table"> </a>✅ Step 9f: Create the missing table</h4><p>To fix up the schema issue, and resolve the error,create the <strong><code>ShowsByName</code></strong> table with a graphQL mutation to fix the app.Execute the following mutation in the <strong><code>graph-schema</code></strong> Playground tab</p><pre lang="GraphQL"><code>mutation CreateShowsTable {  createTable(    keyspaceName: &quot;intrographql&quot;    tableName: &quot;show_by_name&quot;    partitionKeys: [{      name: &quot;title&quot;, type: {basic:TEXT}    }]    values:[{      name: &quot;releaseYear&quot;, type: {basic:INT}    }]  )}</code></pre><p><img src="tutorial/images/graphql-CreateShowsTable.png" alt="GraphQL CreateShowsTable query" /></p><h4><a class="anchor" aria-hidden="true" id="verify-result"> </a>✅ Verify result</h4><p>Once executed you should see a result like this</p><p><img src="tutorial/images/graphql-CreateShowsTable_result.png" alt="GrahQL CreateShowsTable result" /></p><h4><a class="anchor" aria-hidden="true" id="step-9g-add-some-data"> </a>✅ Step 9g: Add some data</h4><p>Now, go back to the <strong><code>graphql</code></strong> playground tab and add the following mutation</p><pre lang="GraphQL"><code>mutation insertShows {  stranger: insertshow_by_name (    value: {      title: &quot;Stranger Things&quot;,      releaseYear: 2016}) {  	value{title}  }  ozark: insertshow_by_name (    value: {      title: &quot;Ozark&quot;,      releaseYear: 2017}) {  	value{title}  }}</code></pre><p><img src="tutorial/images/graphql-insertShows.png" alt="GraphQL &quot;insertShows&quot;" /></p><h4><a class="anchor" aria-hidden="true" id="check-the-result"> </a>✅ Check the result</h4><p><img src="tutorial/images/graphql-insertShows_result.png" alt="GraphQL insertShows, result" /></p><h4><a class="anchor" aria-hidden="true" id="step-9h-check-the-client-again"> </a>✅ Step 9h: Check the client again</h4><p>Finally, refresh your React app.</p><p>Notice this no longer displays an error. Now it correctly displays the data you just inserted (mutated). It might be fun to add some of your own data to this schema and refresh your page.</p><p><img src="tutorial/images/graphql-client-showing-shows.png" alt="GraphQL, client showing shows from DB" /></p><h4><a class="anchor" aria-hidden="true" id="play-a-bit-more"> </a>Play a bit more!</h4><p>Feel free to experiment with a couple more graphQL queries now that you have some data in the table</p><p>Queries usually offer some way to restrict the results returned,in the form of parameters passed to queries. Recall the original <code>getAllShows</code>, repeated here for convenience:</p><pre lang="GraphQL"><code>query getAllShows {  show_by_name {    values {      title      releaseYear    }  }}</code></pre><p>Now let's see a way to pass a <code>title</code> parameter to the query and just getmatching values (a single entry, in this case):</p><pre lang="GraphQL"><code>query getOneShow {  show_by_name (value: {title: &quot;Ozark&quot;}) {    values {      title      releaseYear    }  }}</code></pre><p>The following query, which uses the <a href="https://docs.datastax.com/en/astra/docs/develop/dev-with-graphql-cql-first.html#_retrieve_data">more general <code>filter</code> syntax</a>,is completely equivalent to the previous one:</p><pre lang="GraphQL"><code>query getOneShowF {  show_by_name(filter: {title: {eq: &quot;Ozark&quot;}}){    values {      title      releaseYear    }  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="that-s-it-you-did-it-nice-job"> </a>That's it, you did it! Nice job!</h3><p>We hope this workshop gave you enough information on GraphQL to be dangerous and start you on a journey to using GraphQL in your own apps.Also, don't forget your <a href="#homework">HOMEWORK</a>.</p>
SUCCESS SAVING README for datastaxdevs-workshop-intro-to-graphql
Getting astra.json for datastaxdevs/workshop-introduction-to-nosql at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="introduction-to-nosql-databases"> </a>🎓🔥 Introduction to NoSQL Databases</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="participation-badge-homework"> </a>Participation Badge / Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="practice"> </a>Practice</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1a-register-a-free-account-on-astra"> </a>✅ 1a. Register a free account on Astra</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-tabular-databases"> </a>2. Tabular databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2a-describe-your-keyspace"> </a>✅ 2a. Describe your Keyspace</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="select-your-db"> </a>Select your db</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="go-to-the-cql-console"> </a>Go to the Cql Console</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="enter-the-describe-command"> </a>Enter the describe command</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2b-create-table"> </a>✅ 2b. Create table</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="table-creation"> </a>Table creation</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="check"> </a>Check</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2c-working-with-data"> </a>✅ 2c. Working with DATA</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="insert-some-entries-into-the-table"> </a>Insert some entries into the table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="read-values"> </a>Read values</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="read-by-primary-key"> </a>Read by primary key</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2d-working-with-partitions"> </a>✅ 2d. Working with PARTITIONS</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="try-a-query-not-compatible-with-the-data-model"> </a>Try a query not compatible with the data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="retrieve-data-from-a-whole-partition"> </a>Retrieve data from a whole partition</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-document-databases"> </a>3. Document Databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-cassandra-native-json-support"> </a>✅ 3a. Cassandra native JSON support</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="json-syntax-for-insertions"> </a>JSON syntax for insertions</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="json-output-when-querying"> </a>JSON output when querying</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3b-create-a-token-and-open-swagger"> </a>✅ 3b. Create a token and open Swagger</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="token-creation"> </a>Token creation</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="swagger-ui"> </a>Swagger UI</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3c-create-a-new-empty-collection"> </a>✅ 3c. Create a new empty collection</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3d-create-new-documents"> </a>✅ 3d. Create new documents</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="add-a-first-document"> </a>Add a first document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="add-another-document"> </a>Add another document</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3e-retrieve-a-document-by-its-id"> </a>✅ 3e. Retrieve a document by its ID</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3f-find-all-documents-in-a-collection"> </a>✅ 3f. Find all documents in a collection</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3g-search-document-with-a-where-clause"> </a>✅ 3g. Search document with a &quot;where&quot; clause</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-key-value-databases"> </a>4. Key/Value Databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4a-create-a-table-for-key-value"> </a>✅ 4a. Create a table for Key/Value</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4b-populate-the-table"> </a>✅ 4b. Populate the table</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4c-update-a-value"> </a>✅ 4c. Update a value</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="alternative-update-syntax"> </a>Alternative update syntax</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-graph-databases"> </a>5. Graph Databases</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2>
HTML FOR datastaxdevs-workshop-introduction-to-nosql<h2><a class="anchor" aria-hidden="true" id="introduction-to-nosql-databases"> </a>🎓🔥 Introduction to NoSQL Databases</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><img src="images/intro-to-nosql-cover.png?raw=true" alt="image" /></p><p>These instructions will lead you step by step for the workshop on introducing the NoSQL Databases technologies.</p><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="#">Workshop video</a></li><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="participation-badge-homework"> </a>Participation Badge / Homework</h2><img src="images/intro-to-nosql-badge.png?raw=true" width="200" align="right" /><p>To get the verified badge, you have to complete the following steps:</p><ol><li>Complete the practice steps of this workshop as explained below. Steps 1-4 (Astra account + tabular/document/key-value databases) are mandatory, step 5 (graph database) is optional. Take a screenshot of completion of the last step for sections 2, 3 and 4 (either a CQL command output or a response in the Swagger UI). <em>NOTE: When taking screenshots ensure NOT to copy your Astra DB secrets!</em></li><li>Submit the practice <a href="https://dtsx.io/nosql-ws-hw">here</a>, answering a few &quot;theory&quot; questions and also attaching the screenshots.</li></ol><!-- x. Complete [try-it-out scenario](https://www.datastax.com/try-it-out) and make a screenshot of the "scenario completed" screen --><h2><a class="anchor" aria-hidden="true" id="practice"> </a>Practice</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and create database</a></li><li><a href="#2-tabular-databases">Tabular Databases</a></li><li><a href="#3-document-databases">Document Databases</a></li><li><a href="#4-keyvalue-databases">Key-Value Databases</a></li><li><a href="#5-graph-databases">Graph Databases</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required,a monthly free credit to use, covering about 20M reads/writes and 80GB storage (sufficient to run small production workloads), all for FREE.</p><h3><a class="anchor" aria-hidden="true" id="1a-register-a-free-account-on-astra"> </a>✅ 1a. Register a free account on Astra</h3><p>Click the button below to login or register on DataStax Astra DB. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><a href="https://astra.dev/5-18"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/img/create_astra_db.png?raw=true" /></a></p><p><strong>Use the following values when creating the database</strong> (this makes your life easier further on):</p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>keyspace</strong></td><td><code>nosql1</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td>Stick to GCP and then pick an &quot;unlocked&quot; region to start immediately</td></tr></tbody></table><p>More info on account creation <a href="https://awesome-astra.github.io/docs/pages/astra/create-account/">here</a>.</p><p>You will see your new database as <code>pending</code> or <code>initializing</code> on the Dashboard.The status will then change to <code>Active</code> when the database is ready: this will only take 2-3 minutes.At that point you will also receive a confirmation email.</p><h2><a class="anchor" aria-hidden="true" id="2-tabular-databases"> </a>2. Tabular databases</h2><p>In a tabular database we will store ... tables! The Astra DB Service is built on Apache Cassandra™, which is tabular. Let's start with this.</p><blockquote><p><strong>Tabular databases</strong> organize data in rows and columns, but with a twist from the traditional RDBMS. Also known as wide-column stores or partitioned row stores, they provide the option to organize related rows in partitions that are stored together on the same replicas to allow fast queries. Unlike RDBMSs, the tabular format is not necessarily strict. For example, Apache Cassandra™ does not require all rows to contain values for all columns in the table. Like Key/Value and Document databases, Tabular databases use hashing to retrieve rows from the table. Examples include: Cassandra, HBase, and Google Bigtable.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="2a-describe-your-keyspace"> </a>✅ 2a. Describe your Keyspace</h3><p>At database creation you provided a keyspace, a logical grouping for tables.Let's visualize it.In Astra DB go to CQL Console to enter the following commands</p><h4><a class="anchor" aria-hidden="true" id="select-your-db"> </a>Select your db</h4><p><img src="images/01.png?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="go-to-the-cql-console"> </a>Go to the Cql Console</h4><p><img src="images/02.png?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="enter-the-describe-command"> </a>Enter the describe command</h4><p>... and press Enter:</p><pre lang="sql"><code>DESCRIBE KEYSPACES;</code></pre><p><img src="images/03.png?raw=true" alt="image" /></p><h3><a class="anchor" aria-hidden="true" id="2b-create-table"> </a>✅ 2b. Create table</h3><h4><a class="anchor" aria-hidden="true" id="table-creation"> </a>Table creation</h4><p>Execute the following Cassandra Query Language commands</p><pre lang="sql"><code>USE nosql1;CREATE TABLE IF NOT EXISTS accounts_by_user (  user_id         UUID,  account_id      UUID,  account_type    TEXT,  account_balance DECIMAL,  user_name       TEXT      STATIC,  user_email      TEXT      STATIC,  PRIMARY KEY ( (user_id), account_id))   WITH CLUSTERING ORDER BY (account_id ASC);</code></pre><h4><a class="anchor" aria-hidden="true" id="check"> </a>Check</h4><p>Check keyspace contents and structure:</p><pre lang="sql"><code>DESCRIBE KEYSPACE nosql1;</code></pre><p><em>👁️ Expected output</em></p><pre><code>CREATE KEYSPACE nosql1 WITH replication = {'class': 'NetworkTopologyStrategy', 'eu-central-1': '3'}  AND durable_writes = true;CREATE TABLE nosql1.accounts_by_user (    user_id uuid,    account_id uuid,    account_balance decimal,    account_type text,    user_email text static,    user_name text static,    PRIMARY KEY (user_id, account_id)) WITH CLUSTERING ORDER BY (account_id ASC)    AND additional_write_policy = '99PERCENTILE'    AND bloom_filter_fp_chance = 0.01    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}    AND comment = ''    AND compaction = {'class': 'org.apache.cassandra.db.compaction.UnifiedCompactionStrategy'}    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}    AND crc_check_chance = 1.0    AND default_time_to_live = 0    AND gc_grace_seconds = 864000    AND max_index_interval = 2048    AND memtable_flush_period_in_ms = 0    AND min_index_interval = 128    AND read_repair = 'BLOCKING'    AND speculative_retry = '99PERCENTILE';</code></pre><h3><a class="anchor" aria-hidden="true" id="2c-working-with-data"> </a>✅ 2c. Working with DATA</h3><h4><a class="anchor" aria-hidden="true" id="insert-some-entries-into-the-table"> </a>Insert some entries into the table</h4><pre lang="sql"><code>INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type, user_email, user_name)VALUES(    1cafb6a4-396c-4da1-8180-83531b6a41e3,    811b56c3-cead-40d9-9a3d-e230dcd64f2f,    1500,    'Savings',    'alice@example.org',    'Alice');INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type)VALUES(    1cafb6a4-396c-4da1-8180-83531b6a41e3,    83428a85-5c8f-4398-8019-918d6e1d3a93,    2500,    'Checking');INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type, user_email, user_name)VALUES(    0d2b2319-9c0b-4ecb-8953-98687f6a99ce,    81def5e2-84f4-4885-a920-1c14d2be3c20,    1000,    'Checking',    'bob@example.org',    'Bob');</code></pre><h4><a class="anchor" aria-hidden="true" id="read-values"> </a>Read values</h4><pre lang="sql"><code>SELECT * FROM accounts_by_user;</code></pre><blockquote><p>Such a full-table query is strongly discouraged in most distributed databasesas it involves contacting many nodes to assemble the whole result dataset:here we are using it for learning purposes, not in production and on a tablewith very few rows!</p></blockquote><p><em>👁️ Expected output</em></p><pre><code> user_id                              | account_id                           | user_email        | user_name | account_balance | account_type--------------------------------------+--------------------------------------+-------------------+-----------+-----------------+-------------- 0d2b2319-9c0b-4ecb-8953-98687f6a99ce | 81def5e2-84f4-4885-a920-1c14d2be3c20 |   bob@example.org |       Bob |            1000 |     Checking 1cafb6a4-396c-4da1-8180-83531b6a41e3 | 811b56c3-cead-40d9-9a3d-e230dcd64f2f | alice@example.org |     Alice |            1500 |      Savings 1cafb6a4-396c-4da1-8180-83531b6a41e3 | 83428a85-5c8f-4398-8019-918d6e1d3a93 | alice@example.org |     Alice |            2500 |     Checking(3 rows)</code></pre><blockquote><p>Notice that all three rows are &quot;filled with data&quot;, despite the second of the insertions above skipping the <code>user_email</code> and <code>user_name</code> columns:this is because these are <strong>static columns</strong> (i.e. associated to the whole partition) and their value had been written already in the first insertion.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="read-by-primary-key"> </a>Read by primary key</h4><pre lang="sql"><code>SELECT user_email, account_type, account_balance  FROM accounts_by_user  WHERE user_id=0d2b2319-9c0b-4ecb-8953-98687f6a99ce    AND account_id=81def5e2-84f4-4885-a920-1c14d2be3c20;</code></pre><p><em>👁️ Expected output</em></p><pre><code> user_email      | account_type | account_balance-----------------+--------------+----------------- bob@example.org |     Checking |            1000(1 rows)</code></pre><h3><a class="anchor" aria-hidden="true" id="2d-working-with-partitions"> </a>✅ 2d. Working with PARTITIONS</h3><p>But data can be grouped, we stored together what should be retrieved together.</p><h4><a class="anchor" aria-hidden="true" id="try-a-query-not-compatible-with-the-data-model"> </a>Try a query not compatible with the data model</h4><details><summary>(Optional: click to expand)</summary><pre><code>SELECT account_id, account_type, account_balance   FROM accounts_by_user   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20;</code></pre><!-- ```InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"``` --><p><strong><code>Yes, we know</code></strong>, and now let's see why.</p><pre><code>TRACING ON;SELECT account_id, account_type, account_balance   FROM accounts_by_user   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20   ALLOW FILTERING;TRACING OFF;</code></pre><blockquote><p><em>Note</em>: <code>ALLOW FILTERING</code> is almost never to be used in production, we use it here to see what happens!</p></blockquote><p><em>👁️ Output</em></p><pre><code> account_id                           | account_type | account_balance--------------------------------------+--------------+----------------- 81def5e2-84f4-4885-a920-1c14d2be3c20 |     Checking |            1000(1 rows)</code></pre><p>But also (<em>&quot;Anatomy of a full-cluster scan&quot;</em>):</p><pre><code>Tracing session: e97b98b0-d146-11ec-a4e5-19251c2b96e1 activity                                                                                                                   | timestamp                  | source      | source_elapsed | client----------------------------------------------------------------------------------------------------------------------------+----------------------------+-------------+----------------+-----------------------------------------                                                                                                         Execute CQL3 query | 2022-05-11 16:25:03.675000 | 10.0.63.218 |              0 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b Parsing SELECT[....]_by_user\n   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20\n   ALLOW FILTERING; [CoreThread-0] | 2022-05-11 16:25:03.676000 | 10.0.63.218 |            229 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                         Preparing statement [CoreThread-0] | 2022-05-11 16:25:03.676000 | 10.0.63.218 |            445 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                Computing ranges to query... [CoreThread-0] | 2022-05-11 16:25:03.681000 | 10.0.63.218 |           5970 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.63.218 [CoreThread-9] | 2022-05-11 16:25:03.682000 | 10.0.31.189 |             -- | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                Submitting range requests on 25 ranges with a concurrency of 1 (0.0 rows per range expected) [CoreThread-0] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6197 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Submitted 1 concurrent range requests [CoreThread-0] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6312 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                             Sending READS.RANGE_READ message to /10.0.32.75, size=227 bytes [CoreThread-9] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6436 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.31.189, size=227 bytes [CoreThread-8] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6436 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.63.218 [CoreThread-4] | 2022-05-11 16:25:03.683000 |  10.0.32.75 |             -- | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b             Executing seq scan across 0 sstables for (min(-9223372036854775808), min(-9223372036854775808)] [CoreThread-4] | 2022-05-11 16:25:03.683000 |  10.0.32.75 |            444 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b             Executing seq scan across 0 sstables for (min(-9223372036854775808), min(-9223372036854775808)] [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            356 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Read 1 live rows and 0 tombstone ones [CoreThread-4] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            789 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Read 1 live rows and 0 tombstone ones [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            731 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                          Enqueuing READS.RANGE_READ response to /10.0.32.75 [CoreThread-4] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            897 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         Enqueuing READS.RANGE_READ response to /10.0.31.189 [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            731 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.63.218, size=212 bytes [CoreThread-7] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            954 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.63.218, size=212 bytes [CoreThread-1] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |           1098 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                          READS.RANGE_READ message received from /10.0.32.75 [CoreThread-9] | 2022-05-11 16:25:03.685000 | 10.0.63.218 |           9626 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.31.189 [CoreThread-1] | 2022-05-11 16:25:03.702000 | 10.0.63.218 |          27526 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                        Processing response from /10.0.32.75 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181075 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Processing response from /10.0.31.189 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181193 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7bDidn't get enough response rows; actual rows per range: 0.04; remaining rows: 99, new concurrent requests: 1 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181384 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                                           Request complete | 2022-05-11 16:25:03.856560 | 10.0.63.218 |         181560 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b</code></pre></details><h4><a class="anchor" aria-hidden="true" id="retrieve-data-from-a-whole-partition"> </a>Retrieve data from a whole partition</h4><pre lang="sql"><code>SELECT account_id, account_type, account_balance  FROM accounts_by_user  WHERE user_id=1cafb6a4-396c-4da1-8180-83531b6a41e3;</code></pre><p><em>👁️ Expected output</em></p><pre><code> account_id                           | account_type | account_balance--------------------------------------+--------------+----------------- 811b56c3-cead-40d9-9a3d-e230dcd64f2f |      Savings |            1500 83428a85-5c8f-4398-8019-918d6e1d3a93 |     Checking |            2500(2 rows)</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-document-databases"> </a>3. Document Databases</h2><p>Let's do some hands-on with document database queries.</p><blockquote><p><strong>Document databases</strong> expand on the basic idea of key-value stores where “documents” are more complex, in that they contain data and each document is assigned a unique key, which is used to retrieve the document. These are designed for storing, retrieving, and managing document-oriented information, often stored as JSON. Since the Document database can inspect the document contents, the database can perform some additional retrieval processing. Unlike RDBMSs which require a static schema, Document databases have a flexible schema as defined by the document contents. Examples include: MongoDB and CouchDB. Note that some RDBMS and NoSQL databases outside of pure document stores are able to store and query JSON documents, including Cassandra.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="3a-cassandra-native-json-support"> </a>✅ 3a. Cassandra native JSON support</h3><p>It is not widely known, but Cassandra accepts JSON queries out of the box. You can find more information <a href="https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useInsertJSON.html">here</a>.</p><details><summary>Show native JSON support</summary><h4><a class="anchor" aria-hidden="true" id="json-syntax-for-insertions"> </a>JSON syntax for insertions</h4><p>Insert data into Cassandra with JSON syntax:</p><pre lang="sql"><code>INSERT INTO accounts_by_user JSON '{  &quot;user_id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,  &quot;account_id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,  &quot;user_email&quot;: &quot;alice@example.org&quot;,  &quot;user_name&quot;: &quot;Alice&quot;,  &quot;account_type&quot;: &quot;Savings&quot;,  &quot;account_balance&quot;: &quot;8500&quot;}' ;</code></pre><blockquote><p>Warning: missing fields in the provided JSON will entail explicit insertion of corresponding <code>null</code> values.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="json-output-when-querying"> </a>JSON output when querying</h4><p>In the same way you can retrieve JSON out of Cassandra (<a href="https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useQueryJSON.html">more info here</a>).</p><pre lang="sql"><code>SELECT JSON account_type, account_balance  FROM accounts_by_user  WHERE user_id=1cafb6a4-396c-4da1-8180-83531b6a41e3;</code></pre><p><em>👁️ Output</em></p><pre><code> [json]-------------------------------------------------------  {&quot;account_type&quot;: &quot;Savings&quot;, &quot;account_balance&quot;: 8500} {&quot;account_type&quot;: &quot;Checking&quot;, &quot;account_balance&quot;: 2500}(2 rows)</code></pre><p>This JSON support is but a wrapper around access to the same fixed-schematables seen in the previous section (&quot;Tabular&quot;).</p></details><h3><a class="anchor" aria-hidden="true" id="3b-create-a-token-and-open-swagger"> </a>✅ 3b. Create a token and open Swagger</h3><p>We now turn to using Astra DB's Document API.</p><h4><a class="anchor" aria-hidden="true" id="token-creation"> </a>Token creation</h4><p>To do so, first you need to create an Astra DB token, which willbe used for authentication to your database.</p><p><strong>Create a token with &quot;Database Administrator&quot; privileges followingthe instructions here: <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create an Astra DB token</a>.</strong>(See also <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">the official docs on tokens</a>.)</p><p>Keep the &quot;token&quot; ready to use (it is the long string starting with <code>AstraCS:.....</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="swagger-ui"> </a>Swagger UI</h4><p>The Document API can be easily accessed through a Swagger UI:go the &quot;Connect&quot; page, stay in the &quot;Document API&quot; subpage, and locate the URL under the &quot;Launching Swagger UI&quot; heading:</p><p><img src="images/connect.png?raw=true" alt="image" /></p><p>Locate the &quot;documents&quot; section in the Swagger UI. You are now ready to fire requests to the Document API.</p><p><img src="images/05.png?raw=true" alt="image" /></p><h3><a class="anchor" aria-hidden="true" id="3c-create-a-new-empty-collection"> </a>✅ 3c. Create a new empty collection</h3><p><img src="images/swagger/swagger_3c.png" alt="Swagger 3c" /></p><ul><li>Access <em><strong>Create a new empty collection in a namespace</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>body</code> use</li></ul><pre lang="json"><code>{ &quot;name&quot;: &quot;users&quot; }</code></pre><ul><li>Click the <code>Execute</code> button</li></ul><p>You will get an <code>HTTP 201 - Created</code> return code.</p><blockquote><p><em>Note:</em> the response you just got from actually calling the API endpointis given under the &quot;Server response&quot; heading. Do not confuse it withthe &quot;Responses&quot; found immediately after, which are simply a documentationof all possible response codes (and the return object they quote are staticexample JSONs).</p></blockquote><details><summary>Click to show a screenshot</summary><p><img src="images/swagger_responses_annotated.png?raw=true" alt="image" /></p></details><h3><a class="anchor" aria-hidden="true" id="3d-create-new-documents"> </a>✅ 3d. Create new documents</h3><h4><a class="anchor" aria-hidden="true" id="add-a-first-document"> </a>Add a first document</h4><p><img src="images/swagger/swagger_3d.png" alt="Swagger 3d" /></p><ul><li>Access <em><strong>Create a new document</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill with Header <code>X-Cassandra-Token</code> with <code>AstraCS:...[your_token]...</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>body</code> use</li></ul><pre lang="json"><code>{    &quot;accounts&quot;: [        {            &quot;balance&quot;: &quot;1000&quot;,            &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,            &quot;type&quot;: &quot;Checking&quot;        }    ],    &quot;email&quot;: &quot;bob@example.org&quot;,    &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,    &quot;name&quot;: &quot;Bob&quot;}</code></pre><ul><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output (your <code>documentId</code> will be different)</em></p><pre lang="json"><code>{  &quot;documentId&quot;: &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;}</code></pre><h4><a class="anchor" aria-hidden="true" id="add-another-document"> </a>Add another document</h4><p>Repeat with the following body, which has <em>a different structure</em>:</p><pre lang="json"><code>{    &quot;accounts&quot;: [        {            &quot;balance&quot;: &quot;2500&quot;,            &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,            &quot;type&quot;: &quot;Checking&quot;        },        {            &quot;balance&quot;: &quot;1500&quot;,            &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,            &quot;type&quot;: &quot;Savings&quot;        }    ],    &quot;email&quot;: &quot;alice@example.org&quot;,    &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,    &quot;name&quot;: &quot;Alice&quot;}</code></pre><p>As before, the document will automatically be given an internal unique <code>documentId</code>.</p><h3><a class="anchor" aria-hidden="true" id="3e-retrieve-a-document-by-its-id"> </a>✅ 3e. Retrieve a document by its ID</h3><p><img src="images/swagger/swagger_3eB.png" alt="Swagger 3e" /></p><ul><li>Access <em><strong>Get a document</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>document-id</code> use Bob's <code>documentId</code> (e.g. <code>137d8609-87f6-4cb7-9506-e52f338e79e9</code> in the above sample output)</li><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output</em></p><pre lang="json"><code>{  &quot;documentId&quot;: &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;,  &quot;data&quot;: {    &quot;accounts&quot;: [      {        &quot;balance&quot;: &quot;1000&quot;,        &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,        &quot;type&quot;: &quot;Checking&quot;      }    ],    &quot;email&quot;: &quot;bob@example.org&quot;,    &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,    &quot;name&quot;: &quot;Bob&quot;  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="3f-find-all-documents-in-a-collection"> </a>✅ 3f. Find all documents in a collection</h3><p><img src="images/swagger/swagger_3fB.png" alt="Swagger 3f" /></p><ul><li>Access <em><strong>Search documents in a collection</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li></ul><p>Leave other fields blank (in particular, every query is paged in Cassandra).</p><ul><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output (take note of the <code>documentId</code>s of your output for later)</em></p><pre lang="json"><code>{  &quot;data&quot;: {    &quot;6d0aafd9-3c2c-461f-92c6-08322eaef5da&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;2500&quot;,          &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,          &quot;type&quot;: &quot;Checking&quot;        },        {          &quot;balance&quot;: &quot;1500&quot;,          &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,          &quot;type&quot;: &quot;Savings&quot;        }      ],      &quot;email&quot;: &quot;alice@example.org&quot;,      &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,      &quot;name&quot;: &quot;Alice&quot;    },    &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;1000&quot;,          &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,          &quot;type&quot;: &quot;Checking&quot;        }      ],      &quot;email&quot;: &quot;bob@example.org&quot;,      &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,      &quot;name&quot;: &quot;Bob&quot;    }  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="3g-search-document-with-a-where-clause"> </a>✅ 3g. Search document with a &quot;where&quot; clause</h3><p>The endpoint you just used can support <a href="https://docs.datastax.com/en/astra/docs/read-documents.html#_retrieving_a_document_using_a_where_clause"><code>where</code> clauses</a> as well,expressed as JSON. You don't need to navigate away from it do try thefollowing:</p><p><img src="images/swagger/swagger_3g.png" alt="Swagger 3g" /></p><ul><li>Access <em><strong>Search documents in a collection</strong></em> (you should be there already)</li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>where</code> use <code>{&quot;name&quot;: {&quot;$eq&quot;: &quot;Alice&quot;}}</code></li><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output</em></p><pre lang="json"><code>{  &quot;data&quot;: {    &quot;6d0aafd9-3c2c-461f-92c6-08322eaef5da&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;2500&quot;,          &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,          &quot;type&quot;: &quot;Checking&quot;        },        {          &quot;balance&quot;: &quot;1500&quot;,          &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,          &quot;type&quot;: &quot;Savings&quot;        }      ],      &quot;email&quot;: &quot;alice@example.org&quot;,      &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,      &quot;name&quot;: &quot;Alice&quot;    }  }}</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-key-value-databases"> </a>4. Key/Value Databases</h2><blockquote><p><strong>Key/Value databases</strong> are some of the simplest and yet powerful as all of the data within consists of an indexed key and a value. Key-value databases use a hashing mechanism, so that that given a key, the database can quickly retrieve the associated value. Hashing mechanisms provide constant time access, which means they maintain high performance even at large scale. The keys can be any type of object, but are typically a string. The values are generally opaque blobs (i.e. a sequence of bytes that the database does not interpret). Examples include: Redis, Amazon DynamoDB, Riak, and Oracle NoSQL database. Some tabular NoSQL databases, like Cassandra, can also service key/value needs.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="4a-create-a-table-for-key-value"> </a>✅ 4a. Create a table for Key/Value</h3><p>Go to the CQL Console again and issue the following commandsto create a new, simple table with just two columns:</p><pre lang="sql"><code>USE nosql1;CREATE TABLE users_kv (  key   TEXT PRIMARY KEY,  value TEXT);</code></pre><h3><a class="anchor" aria-hidden="true" id="4b-populate-the-table"> </a>✅ 4b. Populate the table</h3><p>Insert into the table all the following entries.Note that all inserted values, regardless of their &quot;true&quot; data type,have been coerced into strings according to the table schema.Also note how the keys are structured and how some entries reference other,effectively creating a set of interconnected pieces of information on the users:</p><pre lang="sql"><code>INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:name',       'Alice');INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:email',      'alice@example.org');INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:accounts',   '{83428a85-5c8f-4398-8019-918d6e1d3a93, 811b56c3-cead-40d9-9a3d-e230dcd64f2f}');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:name',       'Bob');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:email',      'bob@example.org');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:accounts',   '{81def5e2-84f4-4885-a920-1c14d2be3c20}');INSERT INTO users_kv (key, value) VALUES ('account:83428a85-5c8f-4398-8019-918d6e1d3a93:type',    'Checking');INSERT INTO users_kv (key, value) VALUES ('account:83428a85-5c8f-4398-8019-918d6e1d3a93:balance', '2500');INSERT INTO users_kv (key, value) VALUES ('account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:type',    'Savings');INSERT INTO users_kv (key, value) VALUES ('account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:balance', '1500');INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:type',    'Checking');INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance', '1000');</code></pre><h3><a class="anchor" aria-hidden="true" id="4c-update-a-value"> </a>✅ 4c. Update a value</h3><p>You can imagine an application &quot;navigating the keys&quot; (e.g, from an user to an account) for instancewhen it must update a balance. The actual update would look like:</p><pre lang="sql"><code>INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance', '9000');</code></pre><p>Let's check:</p><pre lang="sql"><code>SELECT * FROM users_kv WHERE key = 'account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance';</code></pre><p><em>👁️ Expected output</em></p><pre><code> key                                                  | value------------------------------------------------------+------- account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance |  9000(1 rows)</code></pre><h4><a class="anchor" aria-hidden="true" id="alternative-update-syntax"> </a>Alternative update syntax</h4><p>The same result is obtained with</p><pre lang="sql"><code>UPDATE users_kv SET value = '-500' WHERE key = 'account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance';</code></pre><p>indeed, in most key-value data stores, inserting and updating are one and the same operationsince the main goal is usually the highest performance (hence, row-existence checks are skipped altogether).</p><p>Thus, writing entries with the key of a pre-existing entry will simply overwrite the less recent values,enabling a very efficient and simple deduplication strategy.</p><p>Check once more what's in the table:</p><pre lang="sql"><code>SELECT * FROM users_kv ;</code></pre><p><em>👁️ Expected output</em></p><pre><code> key                                                  | value------------------------------------------------------+------------------------------------------------------------------------------ account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance |                                                                         -500   user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:accounts |                                       {81def5e2-84f4-4885-a920-1c14d2be3c20} account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:balance |                                                                         1500   user:1cafb6a4-396c-4da1-8180-83531b6a41e3:accounts | {83428a85-5c8f-4398-8019-918d6e1d3a93, 811b56c3-cead-40d9-9a3d-e230dcd64f2f}      user:1cafb6a4-396c-4da1-8180-83531b6a41e3:email |                                                            alice@example.org       user:1cafb6a4-396c-4da1-8180-83531b6a41e3:name |                                                                        Alice       user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:name |                                                                          Bob      user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:email |                                                              bob@example.org    account:83428a85-5c8f-4398-8019-918d6e1d3a93:type |                                                                     Checking    account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:type |                                                                      Savings    account:81def5e2-84f4-4885-a920-1c14d2be3c20:type |                                                                     Checking account:83428a85-5c8f-4398-8019-918d6e1d3a93:balance |                                                                         2500(12 rows)</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-graph-databases"> </a>5. Graph Databases</h2><blockquote><p><strong>Graph databases</strong> store their data using a graph metaphor to exploit the relationships between data. Nodes in the graph represent data items, and edges represent the relationships between the data items. Graph databases are designed for highly complex and connected data, which outpaces the relationship and JOIN capabilities of an RDBMS. Graph databases are often exceptionally good at finding commonalities and anomalies among large data sets. Examples of Graph databases include DataStax Graph, Neo4J, JanusGraph, and Amazon Neptune.</p></blockquote><p>Astra DB does not contain yet a way to implement Graph Databases use cases. But at Datastax we do have a product called <a href="https://www.datastax.com/products/datastax-graph">DataStax Graph</a> that you can use for free when not in production.</p><p>For graph databases, the presenter will show a demo based on the example in the slides.</p><p>The hands-on practice for you is different. But since it cannot be done in the browser usingAstra DB like the rest, it is kept separate and not included in today's curriculum.</p><p>🔥 Yet, you are strongly encouraged to try it at your own pace, on your own computer,by following the instructions given here: <a href="graph_databases.md">Graph Databases Practice</a>. 🔥</p><blockquote><p>Try it out, it's super cool!</p></blockquote><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2><p>Congratulations! You made it to the END.</p><p>See you next time!</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p>
SUCCESS SAVING README for datastaxdevs-workshop-introduction-to-nosql
Getting astra.json for datastaxdevs/workshop-intro-quarkus-cassandra at 277
No astra.json for datastaxdevs/workshop-intro-quarkus-cassandra at 281
No astrajson for Cassandra and Quarkus
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="img-src-https-github-com-datastax-academy-astraportia-blob-master-0-materials-ico-jpg-raw-true-alt-ok-workshop-containerization-and-intro-to-quarkus-and-cassandra-with-kubernetes-lens"> </a><img src="https://github.com/DataStax-Academy/AstraPortia/blob/master/0_materials/ico.jpg?raw=true" alt="ok" /> Workshop - Containerization and Intro to Quarkus and Cassandra with Kubernetes, Lens</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="alternate-learning-path-s-in-this-workshop"> </a>Alternate Learning Path(s) in this workshop</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="0-table-of-contents"> </a>0. Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-astra-db-instance"> </a>1. Create Astra DB Instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-astra-token"> </a>2. Create Astra Token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-know-your-gitpod"> </a>4. Know your gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-setup-your-application"> </a>5. Setup your application</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-run-some-unit-test-s"> </a>6. Run some unit test(s)</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-quarkus-dev-mode"> </a>7. Quarkus Dev Mode</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-debugging"> </a>8. Debugging</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-packaging"> </a>9. Packaging</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-containerizing"> </a>10. Containerizing</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-native-image"> </a>11. Native Image</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="12-homework"> </a>12. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="13-the-end"> </a>13. The END</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="a-href-0-table-of-contents-back-to-table-of-contents-a"> </a><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></h2>
HTML FOR datastaxdevs-workshop-intro-quarkus-cassandra<h1><a class="anchor" aria-hidden="true" id="img-src-https-github-com-datastax-academy-astraportia-blob-master-0-materials-ico-jpg-raw-true-alt-ok-workshop-containerization-and-intro-to-quarkus-and-cassandra-with-kubernetes-lens"> </a><img src="https://github.com/DataStax-Academy/AstraPortia/blob/master/0_materials/ico.jpg?raw=true" alt="ok" /> Workshop - Containerization and Intro to Quarkus and Cassandra with Kubernetes, Lens</h1><p><a href="https://gitpod.io/#https://github.com/DataStax-Academy/workshop-spring-data-cassandra"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Today we showcase an application using <strong>Apache Cassandra™</strong> as a backend implemented with <strong>Quarkus</strong>, and experience some developer joy with features that often have been an envy for Java programmers - hot reloading, debugging, containerizing and finally generating native code.</p><p>There are many other features of the Quarkus platform that we will not be looking into that are widely considered as unique strengths of the platform including testing.</p><p>We will deploy the app on containers in Kubernetes using Lens.</p><p>The application we will be using is based on <a href="https://github.com/tjake/todo-astra-react-serverless/">Jake's port</a> of the <a href="https://github.com/tastejs/todomvc/tree/master/examples/react">TodoMVC code</a> originally written by <a href="https://github.com/petehunt">Pete Hunt</a>. The example is modified from <a href="https://github.com/huksley/todo-react-ssr-serverless">https://github.com/huksley/todo-react-ssr-serverless</a>.</p><p><img src="images/tutorials/NewSplash.png?raw=true" alt="SplashScreen" /></p><p>a screenshot of this simple app is below.</p><p><img src="images/tutorials/AstraTodos.png?raw=true" alt="AstraTodo" /></p><p>ℹ️ <strong>Objective(s) of workshop</strong></p><p>Whether you're a seasoned developer or relatively new to programming, you will be spending a lot of time in an Integrated Development Environment and the &quot;inner loop&quot; of development with a lightweight CI/CD cycle.</p><p>Once you have a stable environment after repeated iterations in the editor, testing environments, profiler, debugger, etc. you push it to the outer loop which has a more robust CI/CD cycle usually backed by gitops, Jenkins and other CI/CD tools.</p><p>The objective of today's workshop is to understand how the Quarkus platform simplifies the &quot;inner loop&quot; of development which results in huge developer productivity gains. You will see in today's workshop you can go from plain old Java to containers with relative ease and yet not make a significant change in devlopment.</p><p>Although, the Quarkus platform leverages a reactive architecture, the developer tools are drawn from a list that they are familar with and complements them while making those same tools leaner and more performant. This means that Quarkus does not force developers to use reactive programming styles. Additionally, it helps to build better and more performant applications (which is always necessary) and also enhances the day-to-day life of a developer having to bridge the gap between their existing platforms and taking a plunge into microservices, service mesh and so on. Developers can use their current tools and methodologies and let Quarkus take care of being &quot;reactive&quot;, or build new fully-reactive applications that take advantage of Quarkus' reactive core.</p><p>ℹ️ <strong>Frequently asked questions</strong></p><ul><li><em>Can I run the workshop on my computer?</em><blockquote><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need <em>java jdk11+</em>, <em>Graal VM</em>, <em>Maven</em>, an IDE like <em>VSCode, IntelliJ, Eclipse, Spring STS</em>. You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule.</p></blockquote></li></ul><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>We strive to make our hands-on workshops prerequisites free -- who has the time to install prerequistes? :-)</p><p>However, docker login credentials, some familiarity with an IDE like <a href="https://code.visualstudio.com">Visual Studio Code</a> or <a href="https://gitpod.io">Gitpod</a> (although not strictly necessary) might help.</p><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://github.com/datastaxdevs/quarkus-astra-intro-demo">Workshop code</a></li></ul><h2><a class="anchor" aria-hidden="true" id="alternate-learning-path-s-in-this-workshop"> </a>Alternate Learning Path(s) in this workshop</h2><p>If you're primarily interested in containerization (as in <strong>Slay the complexity of Kubernetes Inner Loop Development</strong>), you can skip most of the early steps and jump straight to <a href="#10-containerizing">Containerizing</a>. Summarizing</p><table><thead><tr><th>Focus</th><th>Step(s)</th><th>Verify connection</th><th>Step(s) skipped</th></tr></thead><tbody><tr><td><strong>Containers/Inner loop</strong></td><td>Do steps 1-6 and 10 onwards</td><td><a href="#6-run-some-unit-tests">After steps 1-6, verify connection</a></td><td>Skip steps 7,8,9</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="0-table-of-contents"> </a>0. Table of contents</h2><ol><li><a href="#1-create-astra-db-instance">Create Astra DB Instance</a></li><li><a href="#2-create-astra-token">Create Astra Token</a></li><li><a href="#3-launch-gitpod">Launch Gitpod</a></li><li><a href="#4-know-your-gitpod">Know your Gitpod</a></li><li><a href="#5-setup-your-application">Setup your Application</a></li><li><a href="#6-run-some-unit-tests">Run Unit test(s)</a></li><li><a href="#7-quarkus-dev-mode">Quarkus Dev Mode</a></li><li><a href="#8-debugging">Debugging</a></li><li><a href="#9-packaging">Packaging</a></li><li><a href="#10-containerizing">Containerizing</a></li><li><a href="#11-native-image">Native Image</a></li><li><a href="#12-homework">Homework</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-create-astra-db-instance"> </a>1. Create Astra DB Instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 80GB of storage and 20 million read/write operations storage monthly (numbers that have gone up in the last few days) - sufficient to run small production workloads.</em></p><p>✅ Register (if needed) and Sign In to Astra DB <a href="https://astra.dev/3-23">https://astra.datastax.com</a>: You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p>✅ Choose &quot;Start Free Now&quot;</p><p>Choose the &quot;Start Free Now&quot; plan, then &quot;Get Started&quot; to work in the free tier.</p><p>You will have plenty of free initial credit which is renewed each month!.</p><blockquote><p>If this is not enough for you, congratulations! You are most likely running a mid- to large-sized business! In that case you should switch to a paid plan.</p></blockquote><p>(You can follow this <a href="https://docs.datastax.com/en/astra/docs/creating-your-astra-database.html">guide</a> to set up your free-tier database with the $25 monthly credit.)</p><p><img src="images/tutorials/astra_signup.gif" alt="astra-db-signup" /></p><p>To create the database:</p><ul><li><p><strong>For the database name</strong> - <code>workshops</code>. While Astra DB allows you to fill in these fields with values of your own choosing, please follow our recommendations to ensure the application runs properly.</p></li><li><p><strong>For the keyspace name</strong> - <code>todolist</code>. It's really important that you use the name &quot;todolist&quot; for the code to work. In short:</p></li></ul><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Database name</td><td>workshops</td></tr><tr><td>Keyspace name</td><td>todolist</td></tr></tbody></table><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><ul><li><strong>For provider and region</strong>: Choose any provider (either GCP, AWS or Azure). Region is where your database will reside physically (choose one close to you or your users).</li></ul><blockquote><p><strong>NOTE:</strong> You may see that only certain GCP regions are available unless you go in and unlock all the other GCP regions and AWS/Azure. If you see that, for the purposes of this workshop, please select one of the available GCP regions.</p></blockquote><ul><li><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</li></ul><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/dashboard-pending-1000-update.png?raw=true" alt="db-pending-state" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><strong>👁️ Walkthrough</strong></p><p><img src="images/tutorials/astra-create-db.gif?raw=true" alt="db-creation-walkthrough" /></p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-astra-token"> </a>2. Create Astra Token</h2><p>We need to create a <strong>token</strong> that we will use as our credentials.</p><p>✅ <strong>Step 2a: Generate Token</strong></p><p>Following the <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Manage Application Tokens docs</a> to create a token with <code>Database Administrator</code> roles.</p><ul><li><p>Go the <code>Organization Settings</code></p></li><li><p>Go to <code>Token Management</code></p></li><li><p>Pick the role <code>Database Admnistrator</code> on the select box</p></li><li><p>Click Generate token</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><img src="images/tutorials/astra-create-token.gif?raw=true" alt="image" /></p><p>This is what the token page looks like. You can now download the values as a CSV. We will need those values, but you can also keep this window open for use later.</p><p><img src="images/tutorials/astra-token.png?raw=true" alt="image" /></p><p>Notice the clipboard icon at the end of each value.</p><ul><li><p><code>Client Id:</code> We will use it as a <em>username</em> to contact Cassandra in the field <code>quarkus.cassandra.auth.username</code> in the <code>application.properties</code> file.</p></li><li><p><code>Client Secret:</code> We will use it as a <em>password</em> to contact Cassandra in the field <code>quarkus.cassandra.auth.password</code> in the <code>application.properties</code> file.</p></li><li><p><code>Token:</code> It can be used as an api token key to interact with APIs. We won't use it in the workshop today.</p></li></ul><p>To learn more about roles, tokens, etc. you can lok at <a href="https://www.youtube.com/watch?v=TUTCLsBuUd4">this video.</a></p><blockquote><p><strong>Note: Make sure you don't close the window accidentally or otherwise - if you close this window before you copy the values, the application token is lost forever. They won't be available later for security reasons. You'll have to create a new application token.</strong></p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>We are now set with the database and credentials. Let's start coding with Quarkus!</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2><p><a href="https://www.gitpod.io/">Gitpod</a> is an IDE 100% online based on <a href="https://github.com/gitpod-io/vscode/blob/gp-code/LICENSE.txt?lang=en-US">VS Code</a>. To initialize your environment simply click on the button below<em>(CTRL + Click to open in new tab)</em> You will be asked for you github account, as needed.</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/quarkus-astra-intro-demo"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><strong>👁️ Expected output</strong></p><p><em>The screenshot may be slightly different based on your default skin and a few edits in the read me.</em></p><p><img src="images/tutorials/gitpod-01-home-plain.png?raw=true" alt="gitpod" /></p><p><strong>That's it.</strong> Gitpod provides all tools we will need today including <code>maven</code> and exposing port <code>8080</code>, ports <code>5005</code> which is used for debugging, etc.</p><p><strong>You may safely ignore the error output at the end of the terminal window.</strong></p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-quarkus-1.jpg?raw=true" alt="image" /></p><p>Although GitPod terminal might seem to be available, the setup might still be ongoing. Wait for a few minutes before entering commands in the GitPod terminal window.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-know-your-gitpod"> </a>4. Know your gitpod</h2><p>Take a moment to read this entire section since it'll help you with the rest of the workshop as you'll be spending most of your time in Gitpod. If you're familiar with Gitpod, you can easily skip this entire section.</p><p>The extreme left side has the explorer view(1). The top left, middle to right is where you'll be editing files(2), etc. and the bottom left, middle to right is what we will refer to as the Gitpod terminal window(3) as shown below.</p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-01-home-annotated.png?raw=true" alt="gitpod" /></p><p>You can always get back to the file explorer view whenever by clicking on the hamburger menu on the top left followed by <code>View</code> and <code>Explorer</code> as shown below.</p><p><img src="images/tutorials/Filexplorer0.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 4a: Know your public URL</strong></p><p>The workshop application has opened with an ephemeral URL. To know the URL where your application endpoint will be exposed you can run the following command in the terminal after the build has completed. <strong>Please note this URL and open this up in a new browser window as shown below</strong>.</p><pre lang="bash"><code>gp url 8080</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-02-url.png?raw=true" alt="gitpod" /></p><p>Although the application is not running yet,launch a new browser window (<strong>don't close it for the rest of the workshop since you'll continually keep using this</strong>. If you accidentally close it, just come back to this step. The browser will generate an error (due to application not running yet) which is fine for now as shown below.</p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/newbrowser1.png?raw=true" alt="gitpod" /></p><p>You may encounter the following at different steps and although this may not be applicable right away, the steps are included <strong>in advance</strong> and summarized here so that you can keep an eye out for it. Different paths and different environments might be slightly different although Gipod levels the playing field a bit.</p><p>You can allow cutting and pasting into the window by clicking on <code>Allow</code> as shown below.</p><p><img src="images/tutorials/allow.png?raw=true" alt="gitpod" /></p><p>Or allow ports to be opened by just exiting windows that are informational messages about ports like below.</p><p><img src="images/tutorials/OpenPorts.png?raw=true" alt="gitpod" /></p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-setup-your-application"> </a>5. Setup your application</h2><p>To run the application you need to provide the credentials and identifier to the application.</p><p>Issue the following command from the Gitpod terminal window.</p><pre><code>gp open src/main/resources/application.properties</code></pre><p><img src="images/tutorials/editapplicationproperties1.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 5a: Enter 2 values from the token</strong></p><p>Enter the values of <code>Client Id</code> and <code>Client Secret</code> from values noted earlier for <code>astra-username</code> and <code>astra-password</code> respectively. The two lines with a TBD in comments is shown below.</p><p><img src="images/tutorials/editapplicationproperties2.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 5b: Download the secure connect bundle</strong></p><p>This next step is probably the most involved step in the entire workshop. The goal of this step is to get the customized connect bundle into Gitpod. One of the several ways of doing this is as follows.</p><p>Start with the <a href="https://astra.datastax.com">Astra DB dashboard</a> and for the database workshops,</p><ol><li>Click on <code>Connect</code> tab.</li><li>Click on Connect using a driver <code>Java</code>.</li><li>Click on <code>Download Bundle</code>.</li><li>Click on <code>Secure Connect Bundle</code> to be able to copy the link locally.</li></ol><p>as shown below.</p><p><img src="images/tutorials/secureconnectbundle1.png?raw=true" alt="gitpod" /></p><p>Locate the file locally in the finder/explorer window. Drag and drop the file into the Gitpod explorer window (on the left side, making sure that the cursor, indicating the drop is positioned in the Gitpod explorer window as shown below.</p><p><img src="images/tutorials/secureconnectbundle3.png?raw=true" alt="gitpod" /></p><p>In the Gitpod terminal window, verify that you dropped the right file and at the top level directory</p><pre lang="bash"><code>ls -l secure-connect-workshops.zip</code></pre><p>The file size should be roughly 12K otherwise something may have gone wrong in the process.</p><p><strong>👁️ Expected output</strong></p><pre><code>-rw-r--r-- 1 gitpod gitpod 12231 Oct 26 00:15 secure-connect-workshops.zip</code></pre><p>TADA your application is now configured we can finally play with some code.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-run-some-unit-test-s"> </a>6. Run some unit test(s)</h2><p>The application is now set and you should be able to interact with your DB, although connecting to a &quot;real&quot; DB is not necessary in order to execute tests. The application's tests use the <a href="https://github.com/datastax/cassandra-quarkus/tree/main/test-framework">Quarkus Cassandra Test Framework</a>. Quarkus will automatically bootstrap a Cassandra Docker container and connect it to the application when the tests execute.</p><p>Under the covers, all interaction with Cassandra is implemented in Java through the <code>com.datastax.oss.driver.api.core.CqlSession</code>, part of the <a href="https://docs.datastax.com/en/developer/java-driver/latest">DataStax Java Driver</a>. Higher level frameworks like Quarkus, Spring, Spring Data, rely on this object. The <a href="https://github.com/datastax/cassandra-quarkus/tree/main/test-framework">Quarkus Cassandra Test Framework</a> makes sure its available to the tests.</p><p>Let's run this unit test in the Gitpod terminal window.</p><pre lang="bash"><code>./mvnw test -Dtest=com.datastaxdev.todo.rest.TodoResourceTests</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m[INFO] Scanning for projects...[INFO] [INFO] ---------&lt; quarkus-astra-intro-demo:quarkus-astra-intro-demo &gt;----------[INFO] Building quarkus-astra-intro-demo 0.01[INFO] --------------------------------[ jar ]---------------------------------[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 24 resources[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ quarkus-astra-intro-demo ---[INFO] Nothing to compile - all classes are up to date[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code-tests (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 1 resource[INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ quarkus-astra-intro-demo ---[INFO] Nothing to compile - all classes are up to date[INFO] [INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ quarkus-astra-intro-demo ---[INFO] [INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[ERROR] Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m[INFO] Running com.datastaxdev.todo.rest.TodoResourceTestsINFO  [org.jbo.threads] (main) JBoss Threads version 3.4.2.FinalINFO  [org.tes.uti.ImageNameSubstitutor] (main) Image name substitution will be performed by: DefaultImageNameSubstitutor (composite of 'ConfigurationFileImageNameSubstitutor' and 'PrefixingImageNameSubstitutor')INFO  [org.tes.doc.DockerClientProviderStrategy] (pool-4-thread-1) Loaded org.testcontainers.dockerclient.UnixSocketClientProviderStrategy from ~/.testcontainers.properties, will try it firstINFO  [org.tes.doc.DockerClientProviderStrategy] (pool-4-thread-1) Found Docker environment with local Unix socket (unix:///var/run/docker.sock)INFO  [org.tes.DockerClientFactory] (pool-4-thread-1) Docker host IP address is localhostINFO  [org.tes.DockerClientFactory] (pool-4-thread-1) Connected to docker:   Server Version: 20.10.14  API Version: 1.41  Operating System: Ubuntu 20.04.4 LTS  Total Memory: 64312 MBINFO  [org.tes.uti.RegistryAuthLocator] (pool-4-thread-1) Failure when attempting to lookup auth config. Please ignore if you don't have images in an authenticated registry. Details: (dockerImageName: testcontainers/ryuk:0.3.3, configFile: /home/gitpod/.docker/config.json. Falling back to docker-java default behaviour. Exception message: /home/gitpod/.docker/config.json (No such file or directory)INFO  [org.tes.uti.RyukResourceReaper] (pool-4-thread-1) Ryuk started - will monitor and terminate Testcontainers containers on JVM exitINFO  [org.tes.DockerClientFactory] (pool-4-thread-1) Checking the system...INFO  [org.tes.DockerClientFactory] (pool-4-thread-1) ✔︎ Docker server version should be at least 1.6.0INFO  [org.tes.DockerClientFactory] (pool-4-thread-1) ✔︎ Docker environment should have more than 2GB free disk spaceINFO  [com.dat.oss.qua.tes.CassandraTestResource] (pool-4-thread-1) Container cassandra:latest starting...INFO  [🐳 [cassandra:latest]] (pool-4-thread-1) Creating container for image: cassandra:latestINFO  [🐳 [cassandra:latest]] (pool-4-thread-1) Container cassandra:latest is starting: 001d53b387a0a5861466621f6828e753036bec4d9958562ba24a934442c430e5INFO  [com.dat.dri.core] (ducttape-0) DataStax Java driver 3.7.1 for Apache CassandraINFO  [com.dat.dri.cor.GuavaCompatibility] (ducttape-0) Detected Guava &gt;= 19 in the classpath, using modern compatibility layerINFO  [com.dat.dri.cor.ClockFactory] (ducttape-0) Using native clock to generate timestamps.INFO  [com.dat.dri.cor.NettyUtil] (ducttape-0) Did not find Netty's native epoll transport in the classpath, defaulting to NIO.INFO  [com.dat.dri.cor.ClockFactory] (ducttape-0) Using native clock to generate timestamps.INFO  [com.dat.dri.cor.ClockFactory] (ducttape-0) Using native clock to generate timestamps.WARN  [com.dat.dri.cor.Cluster] (ducttape-0) You listed localhost/127.0.0.1:49156 in your contact points, but it wasn't found in the control host's system.peers at startupINFO  [com.dat.dri.cor.pol.DCAwareRoundRobinPolicy] (ducttape-0) Using data-center name 'datacenter1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)INFO  [com.dat.dri.cor.Cluster] (ducttape-0) New Cassandra host localhost/0:0:0:0:0:0:0:1:49156 addedINFO  [🐳 [cassandra:latest]] (pool-4-thread-1) Container cassandra:latest started in PT9.049449SINFO  [org.tes.ext.ScriptUtils] (pool-4-thread-1) Executing database script from init_script.cqlINFO  [com.dat.dri.cor.ClockFactory] (pool-4-thread-1) Using native clock to generate timestamps.WARN  [com.dat.dri.cor.Cluster] (pool-4-thread-1) You listed localhost/127.0.0.1:49156 in your contact points, but it wasn't found in the control host's system.peers at startupINFO  [com.dat.dri.cor.pol.DCAwareRoundRobinPolicy] (pool-4-thread-1) Using data-center name 'datacenter1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)INFO  [com.dat.dri.cor.Cluster] (pool-4-thread-1) New Cassandra host localhost/0:0:0:0:0:0:0:1:49156 addedINFO  [org.tes.ext.ScriptUtils] (pool-4-thread-1) Executed database script from init_script.cql in 2132 ms.INFO  [com.dat.dri.cor.ClockFactory] (pool-4-thread-1) Using native clock to generate timestamps.WARN  [com.dat.dri.cor.Cluster] (pool-4-thread-1) You listed localhost/0:0:0:0:0:0:0:1:49156 in your contact points, but it wasn't found in the control host's system.peers at startupINFO  [com.dat.dri.cor.pol.DCAwareRoundRobinPolicy] (pool-4-thread-1) Using data-center name 'datacenter1' for DCAwareRoundRobinPolicy (if this is incorrect, please provide the correct datacenter name with DCAwareRoundRobinPolicy constructor)INFO  [com.dat.dri.cor.Cluster] (pool-4-thread-1) New Cassandra host localhost/127.0.0.1:49156 addedINFO  [com.dat.oss.qua.tes.CassandraTestResource] (pool-4-thread-1) Container cassandra:latest listening on 127.0.0.1:49156 (inferred local DC: datacenter1)WARN  [io.qua.config] (main) Unrecognized configuration key &quot;quarkus.kubernetes.service-type&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoWARN  [io.qua.config] (main) Unrecognized configuration key &quot;quarkus.kubernetes.env.secrets&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoINFO  [com.dat.oss.qua.run.int.qua.CassandraClientRecorder] (main) Enabling Cassandra metrics using Micrometer.INFO  [com.dat.oss.qua.run.int.qua.CassandraClientStarter] (main) Eagerly initializing Quarkus Cassandra client.INFO  [com.dat.oss.dri.int.cor.DefaultMavenCoordinates] (main) DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.14.0INFO  [com.dat.oss.dri.int.cor.tim.Clock] (vert.x-eventloop-thread-0) Using native clock for microsecond precisionINFO  [com.dat.tod.res.TodoResource] (main) **** Table created true****INFO  [io.quarkus] (main) quarkus-astra-intro-demo 0.01 on JVM (powered by Quarkus 2.9.1.Final) started in 16.146s. Listening on: http://localhost:41159INFO  [io.quarkus] (main) Profile test activated. INFO  [io.quarkus] (main) Installed features: [cassandra-client, cdi, micrometer, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, swagger-ui, vertx][INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 19.304 s - in com.datastaxdev.todo.rest.TodoResourceTestsINFO  [com.dat.oss.qua.run.int.qua.CassandraClientRecorder] (main) Closing Quarkus Cassandra session.INFO  [io.quarkus] (main) quarkus-astra-intro-demo stopped in 0.039s[INFO] [INFO] Results:[INFO] [INFO] Tests run: 8, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  25.096 s[INFO] Finished at: 2022-05-16T18:22:07Z[INFO] ------------------------------------------------------------------------</code></pre><p>You can see from the output that the <code>cassandra:latest</code> Docker container was started before the tests were executed.</p><p>Verfiy that the table got created with the following command</p><pre lang="bash"><code>./mvnw test -Dcom.datastaxdev.todo.rest.TodoResourceTests | grep -i table</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>INFO  [com.dat.tod.res.TodoResource] (main) **** Table created true****</code></pre><blockquote><p>You will likely see that output repeated more than once.</p></blockquote><p>Although a significant strength of the Quarkus platform is it's <a href="https://quarkus.io/guides/continuous-testing">continuous testing</a> capabilities, we will skip tests going foraward and focus on the other capabilities of the platform (perhaps, another workshop sometime focussed mainly on testing capabilities, assuming there is enough demand).</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-quarkus-dev-mode"> </a>7. Quarkus Dev Mode</h2><p>Before we get started let's check that the Graal VM is available.</p><pre><code>echo $GRAALVM_HOME</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>/home/gitpod/.sdkman/candidates/java/current</code></pre><p>✅ <strong>Step 7a: Begin dev</strong></p><p>In the Gitpod terminal window, We will begin the inner loop journey in dev mode using the following command.</p><pre lang="bash"><code>./mvnw quarkus:dev -DskipTests</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>__  ____  __  _____   ___  __ ____  ______  --/ __ \/ / / / _ | / _ \/ //_/ / / / __/  -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\ \   --\___\_\____/_/ |_/_/|_/_/|_|\____/___/   WARN  [io.qua.config] (Quarkus Main Thread) Unrecognized configuration key &quot;quarkus.kubernetes.service-type&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoWARN  [io.qua.config] (Quarkus Main Thread) Unrecognized configuration key &quot;quarkus.kubernetes.env.secrets&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoINFO  [com.dat.oss.qua.run.int.qua.CassandraClientRecorder] (Quarkus Main Thread) Enabling Cassandra metrics using Micrometer.INFO  [com.dat.oss.qua.run.int.qua.CassandraClientStarter] (Quarkus Main Thread) Eagerly initializing Quarkus Cassandra client.INFO  [com.dat.oss.dri.int.cor.DefaultMavenCoordinates] (Quarkus Main Thread) DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.14.0INFO  [com.dat.oss.dri.int.cor.tim.Clock] (vert.x-eventloop-thread-0) Using native clock for microsecond precisionINFO  [com.dat.oss.dri.int.cor.ses.DefaultSession] (vert.x-eventloop-thread-9) [s0] Negotiated protocol version V4 for the initial contact point, but cluster seems to support V5, keeping the negotiated versionINFO  [com.dat.tod.res.TodoResource] (Quarkus Main Thread) **** Table created true****INFO  [io.quarkus] (Quarkus Main Thread) quarkus-astra-intro-demo 0.01 on JVM (powered by Quarkus 2.9.1.Final) started in 7.383s. Listening on: http://localhost:8080INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cassandra-client, cdi, micrometer, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, swagger-ui, vertx]--Tests pausedPress [r] to resume testing, [o] Toggle test output, [:] for the terminal, [h] for more options&gt;</code></pre><p>✅ <strong>Step 7b: Explore Quarkus dev mode</strong></p><p>Typing <code>h</code> in the terminal window should bring up the following</p><p><strong>👁️ Expected output</strong></p><pre><code>The following commands are currently available:== Continuous Testing[r] - Resume testing[o] - Toggle test output (disabled)== Exceptions[x] - Opens last exception in IDE (None)== HTTP[w] - Open the application in a browser[d] - Open the Dev UI in a browser== System[s] - Force restart[i] - Toggle instrumentation based reload (disabled)[l] - Toggle live reload (enabled)[j] - Toggle log levels (INFO)[h] - Shows this help[:] - Enters terminal mode[q] - Quits the application--Tests pausedPress [r] to resume testing, [o] Toggle test output, [:] for the terminal, [h] for more options&gt;</code></pre><p>You can try the different options available.</p><p>Note that you may have to allow popups from <code>gitpod.io</code> as shown below.</p><p><img src="images/tutorials/quarkus-dev-0.png?raw=true" alt="gitpod" /></p><p>Try connecting to the application in a browser by pressing the <code>w</code> key as indicated above. This should bring up the application as below.</p><blockquote><p><strong>NOTE:</strong> This may not actually work in Gitpod because of the way Gitpod handles links. If the page doesn't open for you simply go to the browser tab you opened back in step 4a.</p></blockquote><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/quarkus-dev-1.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 7c: Hot reload</strong>Now, let's go ahead and make an illustrative change.</p><p>Navigate to the file <code>src/main/java/resources/META-INF/resources/index.html</code> and change the <code>data-ribbon</code> entry from &quot;Fork me on Github&quot; to &quot;Fork me today on Github.&quot;</p><p>Next, refresh the browser page. You should immediately see the update. This hot reloading feature of Quarkus works for more than just static content too!</p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/quarkus-dev-2.png?raw=true" alt="gitpod" /></p><p>You could add a few entries to the &quot;todo list&quot; as shown below.</p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/quarkus-dev-3.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 7d: Quarkus dev metrics</strong></p><p>You can get Quarkus development metrics and so on hitting the <code>d</code> key as indicated in the help and this should bring up a window that looks like below.</p><blockquote><p><strong>NOTE:</strong> Again, because of the way Gitpod works, this may not bring up the window. If it doesn't, go back to the browser window containing the running application and append <code>/q/dev</code> to the URL.</p></blockquote><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/quarkus-dev-4.png?raw=true" alt="gitpod" /></p><blockquote><p>The <code>/q/dev</code> end point can be accessed using the URL below when the application is running in <code>dev</code> mode. You can use another <code>bash</code> tab in the gitpod terminal window to enter the commands while the application is running and switch between tabs as required.</p></blockquote><pre><code>echo $(gp url 8080)/q/dev</code></pre><p>and the <code>openapi</code> spec is at</p><pre><code>echo $(gp url 8080)/q/openapi</code></pre><p>as shown below.</p><p><img src="images/tutorials/quarkus-dev-5.png?raw=true" alt="gitpod" /></p><p>You could continue developing your entire application without ever leaving dev mode! It will even handle refactorings and project dependency changes!</p><p>Let's out of development mode by hitting <code>q</code> or hitting <code>&lt;Ctrl&gt;+C</code>.</p><p>✅ <strong>Step 7e: Quarkus smart dispatch</strong></p><p>Let's quickly examine the <a href="https://quarkus.io/blog/resteasy-reactive-smart-dispatch">Quarkus smart dispatching mechanism</a>. Let's open the <code>com.datastaxdev.todo.rest.TodoResource.java</code> class by executing the following in a terminal:</p><pre><code>gp open src/main/java/com/datastaxdev/todo/rest/TodoResource.java</code></pre><p>Notice some methods return <a href="https://quarkus.io/guides/mutiny-primer">Mutiny reactive types</a> (i.e. <code>Uni</code> and <code>Multi</code>) while others return non-reactive types (i.e. <code>String</code>, <code>Response</code>, and <code>void</code>). Quarkus doesn't care whether you write reactive or blocking code. Quarkus will make sure reactive code runs on the I/O thread while blocking code will be moved off onto worker thread(s). As you can see, you can even mix and match within the same class!</p><p>This application was designed to illustrate both approaches. Which methods are implemented in which manner were randomly chosen.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-debugging"> </a>8. Debugging</h2><p>You can always get back to the file explorer view whenever by clicking on the hamburger menu on the top left followed by <code>View</code> and <code>Explorer</code> as shown below.</p><p><img src="images/tutorials/Filexplorer0.png?raw=true" alt="gitpod" /></p><p>Let's go ahead and hit <code>q</code> or <code>Ctrl+C</code> to exit out of the running application if you have not already.</p><p>Before we set a breakpoint and start debugging, let's explain the application's structure a bit. The <code>TodoResource</code> class (which you saw in the previous section) calls a <code>com.datastaxdev.todo.service.AstraService</code>. <code>AstraService</code> is an interface with 2 implementations:</p><ol><li><code>com.datastaxdev.todo.service.CqlSessionAstraService.java</code><ul><li>Uses the <code>com.datastax.oss.quarkus.runtime.api.session.QuarkusCqlSession</code> directly using CQL queries to implement the operations.</li></ul></li><li><code>com.datastaxdev.todo.service.MapperAstraService.java</code><ul><li>Uses the <a href="https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper">DataStax Object Mapper</a> and <a href="https://quarkus.io/guides/cassandra#creating-the-data-model-and-data-access-objects">Cassandra Entity Modeling</a> to model entities as Java objects, greatly simplifying the application's data access layer by sparing you the hassle of writing CQL queries by hand. This is conceptually similar to how <a href="https://hibernate.org">Hibernate</a> works in the <a href="https://docs.oracle.com/javaee/6/tutorial/doc/bnbpz.html">JPA</a> world.</li><li>Uses <a href="https://mapstruct.org">Mapstruct</a> to easily convert between the <code>com.datastaxdev.todo.dao.TodoItem</code> dao entities and the <code>com.datastaxdev.todo.api.Todo</code> POJO used at the REST layer. See the <code>com.datastaxdev.todo.mapping.TodoMapper</code> class for details.</li></ul></li></ol><p>The application has a <a href="https://quarkus.io/guides/cdi-reference#enable_build_properties">build-time property</a> (not overridable at runtime) called <code>astra-service.type</code>. Resolving dependency injection at build time is one of the key benefits of Quarkus, allowing Quarkus applications to be super small and memory-performant.</p><p>By default, if this property is undefined <em>OR</em> has the value <code>cql-session</code>, <code>com.datastaxdev.todo.service.CqlSessionAstraService</code> will be injected as the implementation for <code>com.datastaxdev.todo.service.AstraService</code>.</p><p>If, at build time, <code>astra-service.type=dao</code>, then <code>com.datastaxdev.todo.service.MapperAstraService</code> will be used instead.</p><p>The <code>com.datastaxdev.todo.config.AstraConfig</code> class contains everything needed for reading the <code>astra-service.type</code> flag at build time and injecting the appropriate <code>com.datastaxdev.todo.service.AstraService</code> implementation.</p><p>There is a full suite of unit tests that cover both implementations! See <code>src/test/java/com/datastaxdev/todo/service/CqlSessionAstraServiceTests.java</code> and  <code>src/test/java/com/datastaxdev/todo/service/MapperAstraServiceTests.java</code> for details.</p><blockquote><p>If you'd like to play around with the mapper implementation, open <code>src/main/resources/application.properties</code> and un-comment the line <code>#astra-service.type=dao</code>.</p></blockquote><p>Since the application, by default, uses the <code>com.datastaxdev.todo.service.CqlSessionAstraService</code> implementation, we'll use that implementation for setting the breakpoint.</p><p>✅ <strong>Step 8a: Set breakpoint</strong></p><p>Now issue the following command to open up the file where we will subsequently set a breakpoint to be hit whenever we create a new todo item.</p><pre><code>gp open src/main/java/com/datastaxdev/todo/service/CqlSessionAstraService.java</code></pre><p>Now navigate to line 52 and set a breakpoint by clicking to the left of the line number 52 and you'll see a stop sign as shown below.</p><p><img src="images/tutorials/debug1.png?raw=true" alt="gitpod" /></p><p>Re-run the application with the following command and we will debug it live.</p><pre lang="bash"><code>./mvnw quarkus:dev</code></pre><p>✅ <strong>Step 8b: Start debugging</strong></p><p>First, click on the debug button on the left towards top.</p><p>Then, click on the arrow on the top left to start debugging as shown below.</p><p><img src="images/tutorials/debug2.png?raw=true" alt="gitpod" /></p><p>Notice debug related information populate in the left side of the window as shown below.</p><p><img src="images/tutorials/debug3.png?raw=true" alt="gitpod" /></p><blockquote><p>If for some reason the debugger doesn't attach, there may be some weirdness going on with the Gitpod IDE. Refreshing the browser tab containing the workspace or restarting the workspace will usually fix it.</p></blockquote><p>We will demonstrate debugging by fixing a todo item that was entered although there are more powerful features that you can try.</p><p>Go to the new browser window you created and the application should be up and running. Hit enter after filling up a todo item as shown below. The application freezes and you see a red square that signals the breakpoint has been hit.</p><p><img src="images/tutorials/debug4.png?raw=true" alt="gitpod" /></p><p>Now that you hit the breakpoint, Cool! Let's go back to the Gitpod window and verify if the breakpoint was really hit. You should see something like below.</p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/debug5.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 8c: Use debugger features</strong></p><p>Now, fix the entry spelling in debug mode by clicking on the left(&gt;) arrow of <code>todo</code>, double clicking on the <code>title</code> entry and entering <code>debugging</code>. Finally, hit arrow button in the top small middle pane in the center which will allow the application to continue as shown below.</p><p><img src="images/tutorials/debug6.png?raw=true" alt="gitpod" /></p><p>Go back to your browser and check the todo item that was added to the list. You should see that the updated entry that you fixed with a debug session is what's persisted.</p><p>Hit <code>q</code> or <code>Ctrl+C</code> in the GitPod terminal window to exit the application.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-packaging"> </a>9. Packaging</h2><p>✅ <strong>Step 9a: Package</strong>You can package up the application with the command below.</p><pre lang="bash"><code>./mvnw clean package -DskipTests</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m[INFO] Scanning for projects...[INFO] [INFO] ---------&lt; quarkus-astra-intro-demo:quarkus-astra-intro-demo &gt;----------[INFO] Building quarkus-astra-intro-demo 0.01[INFO] --------------------------------[ jar ]---------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ quarkus-astra-intro-demo ---[INFO] Deleting /workspace/quarkus-astra-intro-demo/target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 24 resources[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ quarkus-astra-intro-demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 10 source files to /workspace/quarkus-astra-intro-demo/target/classes[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code-tests (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 1 resource[INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ quarkus-astra-intro-demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 6 source files to /workspace/quarkus-astra-intro-demo/target/test-classes[INFO] [INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ quarkus-astra-intro-demo ---[INFO] Tests are skipped.[INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ quarkus-astra-intro-demo ---[INFO] Building jar: /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01.jar[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:build (default) @ quarkus-astra-intro-demo ---[WARNING] [io.quarkus.config] Unrecognized configuration key &quot;quarkus.kubernetes.env.secrets&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo[WARNING] [io.quarkus.config] Unrecognized configuration key &quot;quarkus.kubernetes.service-type&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typo[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 2076ms[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  9.681 s[INFO] Finished at: 2022-05-16T20:21:41Z[INFO] ------------------------------------------------------------------------</code></pre><p>✅ <strong>Step 9b: Run</strong></p><p>You can run the recently packaged application as below.</p><pre lang="bash"><code>java -jar ./target/quarkus-app/quarkus-run.jar</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m__  ____  __  _____   ___  __ ____  ______  --/ __ \/ / / / _ | / _ \/ //_/ / / / __/  -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\ \   --\___\_\____/_/ |_/_/|_/_/|_|\____/___/   WARN  [io.qua.config] (main) Unrecognized configuration key &quot;quarkus.kubernetes.service-type&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoWARN  [io.qua.config] (main) Unrecognized configuration key &quot;quarkus.kubernetes.env.secrets&quot; was provided; it will be ignored; verify that the dependency extension for this configuration is set or that you did not make a typoINFO  [com.dat.oss.qua.run.int.qua.CassandraClientRecorder] (main) Enabling Cassandra metrics using Micrometer.INFO  [io.qua.sma.ope.run.OpenApiRecorder] (main) Default CORS properties will be used, please use 'quarkus.http.cors' properties insteadINFO  [com.dat.oss.qua.run.int.qua.CassandraClientStarter] (main) Eagerly initializing Quarkus Cassandra client.INFO  [com.dat.oss.dri.int.cor.DefaultMavenCoordinates] (main) DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.14.0INFO  [com.dat.oss.dri.int.cor.tim.Clock] (vert.x-eventloop-thread-0) Using native clock for microsecond precisionINFO  [com.dat.oss.dri.int.cor.ses.DefaultSession] (vert.x-eventloop-thread-9) [s0] Negotiated protocol version V4 for the initial contact point, but cluster seems to support V5, keeping the negotiated versionINFO  [com.dat.tod.res.TodoResource] (main) **** Table created true****INFO  [io.quarkus] (main) quarkus-astra-intro-demo 0.01 on JVM (powered by Quarkus 2.9.1.Final) started in 3.882s. Listening on: http://0.0.0.0:8080INFO  [io.quarkus] (main) Profile prod activated. INFO  [io.quarkus] (main) Installed features: [cassandra-client, cdi, micrometer, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, swagger-ui, vertx]</code></pre><p>You can play with the application from the new browser window you created in step 4.</p><p>Hit <code>Ctrl+C</code> in the GitPod terminal window to exit the application.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-containerizing"> </a>10. Containerizing</h2><p>✅ <strong>Step 10a: Adjust for containerization</strong></p><p>We are using the <a href="https://quarkus.io/guides/container-image#jib">Quarkus Jib container extension</a> for easy containerization. Copy the secure connect bundle to the directory that Jib will create on the container as below. We take advantage of the property of Jib plugin which automaticaly includes the relevant artifacts from the <code>src/main/jib</code> sub-directory as part of the process -- we include the secure connect bundle to be able to connect to the Astra database.</p><pre lang="bash"><code>mkdir -p src/main/jib/workspace/quarkus-astra-intro-demo/cp secure-connect-workshops.zip src/main/jib/workspace/quarkus-astra-intro-demo/</code></pre><p>✅ <strong>Step 10b: Containerize</strong></p><p>Let's containerize the application with the following command.</p><pre lang="bash"><code>./mvnw clean package -Dquarkus.container-image.build=true -DskipTests</code></pre><p>Once complete, check that the image exists on your local repository with the following command:</p><pre lang="bash"><code>docker images</code></pre><p><strong>Expected Output</strong></p><pre><code>REPOSITORY                 TAG       IMAGE ID       CREATED          SIZEgitpod/quarkus-cassandra   0.01      77431983359a   26 seconds ago   216MB</code></pre><p>✅ <strong>Step 10c: Run the containerized image</strong></p><p>You can execute the recently generated containerized image with the following command.</p><pre lang="bash"><code>docker run -i --rm -p 8080:8080 gitpod/quarkus-cassandra:0.01</code></pre><p>Hit &lt;Ctrl+C&gt; in the GitPod terminal window to exit the application.</p><p>✅ <strong>Step 10d: docker login</strong></p><p>Login to Dockerhub to be able to push containerized images and to be able for you and the rest of the world to pull them.</p><p>If you do not have a docker login credential you can skip this step and go right to <a href="#11-native-image">Native Image</a></p><pre lang="bash"><code>docker login</code></pre><p><strong>Expected Output</strong></p><pre><code>Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.Username: ragsnsPassword: WARNING! Your password will be stored unencrypted in /home/gitpod/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded</code></pre><p>Get the Docker ID as below.</p><pre lang="bash"><code>docker system info | grep -E 'Username' || echo &quot;you have not done a docker login(yet)&quot;DOCKER_LOGINID=$(docker system info | grep -E 'Username' | awk '{print $2}')echo &quot;Docker login ID that will be used: &quot; &quot;$DOCKER_LOGINID&quot;</code></pre><p>You should see an output of your Docker Login ID. If you do not see this repeat this step from the beginning.</p><pre><code>Docker login ID that will be used:  ragsns</code></pre><p>✅ <strong>Step 10e: Push to Dockerhub</strong></p><p>Let's not only build the containerized image but also push it to DockerHub (<strong>be sure to substitute the group with docker ID</strong>) with the following command.</p><pre lang="bash"><code>./mvnw clean package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.group=$DOCKER_LOGINID -DskipTests</code></pre><p><strong>NOTE:</strong> If the repo in your Docker Hub account didn't previously exist it will be created for you as a <em>private</em> repo. You will need to go into your Docker Hub account and make the repo public.</p><p>In today's world of microservices and service meshes, it's all about deploying to Kubernetes. Quarkus gives us an easy way to do that!</p><p><strong>Step A</strong>: Quarkus includes the <a href="https://quarkus.io/guides/deploying-to-kubernetes">Kubernetes extension</a>, allowing developers to deploy directly to Kubernetes and use Kubernetes <code>ConfigMap</code>s and <code>Secret</code>s as configuration sources. To use this update <code>pom.xml</code> with the following command in the Gitpod ternimal window as below.</p><pre lang="bash"><code>./mvnw quarkus:add-extension -Dextensions=&quot;kubernetes&quot;</code></pre><p>and verify with the following command</p><pre lang="bash"><code>git diff pom.xml</code></pre><p>which should that the <code>io.quarkus:quarkus-kubernetes</code> dependency has been added.</p><pre lang="bash"><code>diff --git a/pom.xml b/pom.xmlindex 371e35e..4b842d8 100644--- a/pom.xml+++ b/pom.xml+    &lt;dependency&gt;+      &lt;groupId&gt;io.quarkus&lt;/groupId&gt;+      &lt;artifactId&gt;quarkus-kubernetes&lt;/artifactId&gt;+    &lt;/dependency&gt;</code></pre><p><strong>Step B</strong>:Ensure that <code>DOCKER_LOGINID</code> was set in the earlier step as below and the command should output the Docker login ID.</p><pre><code>echo $DOCKER_LOGINID</code></pre><p>Next, let's generate the containerized image with the secrets as below.</p><pre><code>./mvnw clean package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=false -Dquarkus.container-image.group=$DOCKER_LOGINID -DskipTests</code></pre><p>Next, let's generate and push the containerized image with the secrets removed as below.</p><pre><code>sed -i '/# TBD Below/,+4 d' ./target/classes/application.properties./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.group=$DOCKER_LOGINID -DskipTests</code></pre><p>✅ <strong>Step 10f: Stand up application in Kubernetes</strong></p><p>Hereafter, there are two paths -- steps prefixed with <code>Lens</code> OR steps prefixed with <code>Okteto</code> as summarized below.</p><table><thead><tr><th>Steps prefixed with</th><th>Details</th><th>First step</th></tr></thead><tbody><tr><td>Lens</td><td>Install on Lens IDE</td><td>Lens.A</td></tr><tr><td>Okteto</td><td>Sample Kubernetes provider</td><td>Okteto.A</td></tr></tbody></table><p>If you're familiar with using <code>kubectl</code> command you can pick either. If you're not you're recommended to use Steps prefixed with <code>Lens</code>.</p><p><strong>Step Lens.A</strong>: Download Lens</p><p><a href="https://k8slens.dev/">Lens</a> is a popular Integrated Development Environment (IDE) for Kubernetes and enables developers and engineers to develop and deploy apps on multiple clusters and adminster them easier than using command line tools like <code>kubectl</code>.</p><p><a href="https://docs.k8slens.dev/main/#downloading-lens">Download</a> Lens on your local system.</p><p><strong>Step Lens.B</strong>: Download, install and run Lens Desktop</p><p>Sign up for a free trial and download Lens desktop and install it as shown below. Make sure you select the tiny icon on the bottom left and click on the free trial as shown below.</p><p><img src="images/tutorials/LensDownload1.png?raw=true" alt="lens" /></p><p>If needed, launch the desktop manually as shown below.</p><p><img src="images/tutorials/LensLaunchManual1.png?raw=true" alt="lens" /></p><p>After the launch the Lens Desktop might be in a stopped state as shown in the bottom left below.</p><p><img src="images/tutorials/LensStop1.png?raw=true" alt="lens" /></p><p>Click on the <code>Lens Desktop Kube: Stopped</code> and pick appropriate values as shown below.</p><p><img src="images/tutorials/LensValues1.png?raw=true" alt="lens" /></p><p>Note that the current state is shown as stopped as shown below.</p><p><img src="images/tutorials/LensStopped1.png?raw=true" alt="lens" /></p><p>Toggle the button as shown below to move it from stopped to running.</p><p><img src="images/tutorials/LensRunning1.png?raw=true" alt="lens" /></p><p>Make sure that Lens is running as shown below. <strong>It might take well over five minutes for the state to move to running.</strong></p><p><img src="images/tutorials/LensRunning2.png?raw=true" alt="lens" /></p><p>You should have Lens desktop in your clusters list as shown below.</p><p><img src="images/tutorials/LensLDK1.png?raw=true" alt="lens" /></p><p>Now that Lens Desktop is installed, up and running we're ready to deploy the ToDo app.</p><p><strong>Step Lens.C</strong>: Set up secrets</p><p>Start by clicking on <code>Config</code>, <code>Secrets</code> and <code>+</code> as shown below.</p><p><img src="images/tutorials/Lenssecret01.png?raw=true" alt="lens" /></p><p>Now add the secret <code>astra</code> and the secrets <code>astra-username</code> and <code>astra-password</code>  as shown below.</p><p><img src="images/tutorials/Lenssecret02.png?raw=true" alt="lens" /></p><p>You can verify you entered the values correctly by hitting the button as shown below which will show the values in clear.</p><p><img src="images/tutorials/Lenssecret03.png?raw=true" alt="lens" /></p><p><strong>Step Lens.D</strong>: Start the workload</p><p>We use the generated <code>kubernetes.yml</code> file to install the workload in Lens.</p><p>Click on <code>+</code> and <code>Create resource</code> as shown below.</p><p><img src="images/tutorials/Lensresource01.png?raw=true" alt="lens" /></p><p>We are going to cut-n-paste the contents from the Gitpod window into Lens.</p><p>Issue the following command in the Gitpod terminal window to look at the Kubernetes manifests that were automatically generated and applied to the cluster.</p><pre><code>gp open target/kubernetes/kubernetes.yml</code></pre><p>and cut-n-paste the contents into Lens as shown below and hit <code>Create</code> as shown below.</p><p><img src="images/tutorials/Lensresource02.png?raw=true" alt="lens" /></p><p>If you dig into <code>Pods</code> you should be see it running as shown below.</p><p><img src="images/tutorials/Lensresource03.png?raw=true" alt="lens" /></p><p>You can look through other Kubernetes artifacts which you can easily navigate via Lens.</p><p><strong>Step Lens.F</strong>: Setup port forwarding</p><p>Click on Network, Services and Forward... as shown below.</p><p><img src="images/tutorials/LensPortForward1.png?raw=true" alt="lens" /></p><p>Next forward to <code>8080</code> as shown below.</p><p><img src="images/tutorials/LensPortForward2.png?raw=true" alt="lens" /></p><p>This will setup the port forwarding to the appropriate pod. Ignore errors if any. You can now access the app via <code>8080</code> on <code>localhost</code>.</p><p><strong>Step Lens.G</strong>: Cleanup</p><p>You can delete the service, deployment and secret using Lens.</p><p>You're now done with Lens deployment and can skip other deployment(s).</p><p><strong>OR</strong></p><p><strong>Step Okteto.A</strong>: Create a cluster</p><p>We've included some steps here using <a href="https://www.okteto.com">okteto</a> (you can modify the steps below depending on your choice of provider).</p><p>Create a Kubernetes cluster. You can get one for free at <a href="https://okteto.com">https://okteto.com</a> with your Github credentials.</p><p><strong>Step Okteto.B</strong>: Download config file</p><p>Download the <code>config</code> file from <a href="https://cloud.okteto.com/#/settings/setup">https://cloud.okteto.com/#/settings/setup</a> locally as shown below.</p><p><img src="images/tutorials/oktetoconfig1.png?raw=true" alt="okteto" /></p><p><strong>Step Okteto.C</strong>: Drag and drop config into Gitpod</p><p>Now &quot;drag and drop&quot; it over to the gitpod window (similar to how we transferred the secure connect bundle) as shown below.</p><p><img src="images/tutorials/oktetoconfig2.png?raw=true" alt="okteto" /></p><p><strong>Step Okteto.D</strong>: Setup config in Gitpod window</p><p>Use the transferred okteto config file with the following command in the Gitpod terminal window and verify</p><pre lang="bash"><code>export KUBECONFIG=okteto-kube.configkubectl config get-contextskubectl get all</code></pre><p>If you get a message like <code>error: You must be logged in to the server (Unauthorized)</code> reauthorize and download the <code>okteto-kube.config</code> file again.</p><p>Since okteto only provides access to your namespace, you should see something like below and you won't be able to run other commands like you would normally with a cluster that you created.</p><pre><code>No resources found in ragsns namespace.</code></pre><p><strong>Step Okteto.E</strong>: Setup secrets</p><p>The <code>application.properties</code> file is setup to use the Kubernetes secrets already (<code>quarkus.kubernetes.env.secrets=astra</code>). Setup the Kubernetes secrets as below from the<code>Client Id</code> and <code>Client Secret</code> respectively as we did earlier.</p><pre><code>kubectl create secret generic astra --from-literal=astra-username=&lt;Client Id&gt; --from-literal=astra-password=&lt;Client Secret&gt;</code></pre><p>Verify the screts are setup properly with the following commands.</p><pre lang="bash"><code>kubectl get secret astra -o jsonpath=&quot;{.data.astra-username}&quot; | base64 --decodekubectl get secret astra -o jsonpath=&quot;{.data.astra-password}&quot; | base64 --decode</code></pre><p>The <code>kubernetes.yml</code> deployment file that will be generated in the next step will be setup to use the secrets.</p><p><strong>Step Okteto.F</strong>: Push image</p><p>You may want to remove the actual values of <code>astra-username</code> and <code>astra-password</code> from the<code>application.properties</code> file as below before pushing the container image to a public registry.</p><pre><code>sed -i '/# TBD Below/,+4 d' ./target/classes/application.properties./mvnw package -Dquarkus.container-image.build=true -Dquarkus.container-image.push=true -Dquarkus.container-image.group=$DOCKER_LOGINID -Dquarkus.kubernetes.deploy=true -DskipTests</code></pre><p>The result of this command will be that your application's container image is built, pushed to the registry, and then deployed on Kubernetes. The Quarkus Kubernetes extension generates all the necessary Kubernetes desriptors for you.</p><p>Issue the following command in the Gitpod terminal window to look at the Kubernetes manifests that were automatically generated and applied to the cluster.</p><pre><code>gp open target/kubernetes/kubernetes.yml</code></pre><p>You should see the following output which indicates the deployment and the service have been created. <strong>You can ignore errors related to webhook.</strong></p><pre><code>[INFO] [io.quarkus.container.image.jib.deployment.JibProcessor] Pushed container image xxx/quarkus-cassandra:0.01 (sha256:xxxxxx)[INFO] [io.quarkus.kubernetes.deployment.KubernetesDeployer] Deploying to kubernetes server: https://a.b.c.d:443/ in namespace: xxxx.[INFO] [io.quarkus.kubernetes.deployment.KubernetesDeployer] Applied: Service quarkus-cassandra.[INFO] [io.quarkus.kubernetes.deployment.KubernetesDeployer] Applied: Deployment quarkus-cassandra.[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 12904ms</code></pre><p>Running the command</p><pre lang="bash"><code>kubectl get all</code></pre><p>should yield a different output as below.</p><pre><code>NAME                                    READY   STATUS    RESTARTS   AGEpod/quarkus-cassandra-5f4d69b8d-lx46l   1/1     Running   0          95sNAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGEservice/quarkus-cassandra   ClusterIP   10.154.219.218   &lt;none&gt;        80/TCP    96sNAME                                READY   UP-TO-DATE   AVAILABLE   AGEdeployment.apps/quarkus-cassandra   1/1     1            1           96sNAME                                          DESIRED   CURRENT   READY   AGEreplicaset.apps/quarkus-cassandra-5f4d69b8d   1         1         1       96s</code></pre><p>You should be able to access the application from the endpoint provided by the <a href="https://cloud.okteto.com/#/spaces">okteto console</a> and also be able to access the application logs as shown below.</p><p><img src="images/tutorials/oktetorunning1.png?raw=true" alt="okteto" /></p><p>Alternately, you can access the application provided by the gitpod URL like we have always been doing throughout the workshop by issuing the following command.</p><pre><code>kubectl port-forward svc/quarkus-cassandra 8080:80 &amp;</code></pre><p><strong>Step Okteto.G</strong>: Cleanup</p><p>You can stop the port forwarding by deleting the background job as below.</p><pre><code>kill -9 %1</code></pre><p>You can go ahead and get rid of the application as well with the following command from the Gitpod terminal window.</p><pre><code>kubectl delete all --all</code></pre><p>and you should see the following output.</p><pre><code>pod &quot;quarkus-cassandra-886d9f8b9-h7tw5&quot; deletedservice &quot;quarkus-cassandra&quot; deleteddeployment.apps &quot;quarkus-cassandra&quot; deleted</code></pre><p>Additionally, you should delete the <code>Secret</code> you created.</p><pre><code>kubectl delete secret astra</code></pre><p>If the public docker image contains the credentials to be able to access the database, it's a good idea to delete the docker image <a href="http://hub.docker.com">from docker hub</a> right away, anyway.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-native-image"> </a>11. Native Image</h2><p>Finally, Quarkus can build a native executable image with the help of the GraalVM that was pre-installed with a simple command as below. <strong>Get yourself some coffee</strong> or water as this will take almost 10 minutes but exceuting this image will be super fast with minimal startup time since it does not depend on the JVM.</p><p>✅ <strong>Step 11a: Generating Native Image</strong></p><pre lang="bash"><code>./mvnw clean package -Pnative -DskipTests</code></pre><p><strong>Expected output:</strong></p><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m[INFO] Scanning for projects...[INFO] [INFO] ---------&lt; quarkus-astra-intro-demo:quarkus-astra-intro-demo &gt;----------[INFO] Building quarkus-astra-intro-demo 0.01[INFO] --------------------------------[ jar ]---------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ quarkus-astra-intro-demo ---[INFO] Deleting /workspace/quarkus-astra-intro-demo/target[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 24 resources[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ quarkus-astra-intro-demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 10 source files to /workspace/quarkus-astra-intro-demo/target/classes[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:generate-code-tests (default) @ quarkus-astra-intro-demo ---[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ quarkus-astra-intro-demo ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 1 resource[INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ quarkus-astra-intro-demo ---[INFO] Changes detected - recompiling the module![INFO] Compiling 6 source files to /workspace/quarkus-astra-intro-demo/target/test-classes[INFO] [INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ quarkus-astra-intro-demo ---[INFO] Tests are skipped.[INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ quarkus-astra-intro-demo ---[INFO] Building jar: /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01.jar[INFO] [INFO] --- quarkus-maven-plugin:2.9.1.Final:build (default) @ quarkus-astra-intro-demo ---[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01-native-image-source-jar/quarkus-astra-intro-demo-0.01-runner.jar[INFO] Checking for existing resources in: /workspace/quarkus-astra-intro-demo/src/main/kubernetes.[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01-native-image-source-jar/quarkus-astra-intro-demo-0.01-runner.jar[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM 22.0.0.2 Java 11 CE (Java Version 11.0.14+9-jvmci-22.0-b05)[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] /home/gitpod/.sdkman/candidates/java/current/bin/native-image -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=3 -J-Duser.language=en -J-Duser.country=US -J-Dfile.encoding=UTF-8 -H:-ParseOnce -J--add-exports=java.security.jgss/sun.security.krb5=ALL-UNNAMED -J--add-opens=java.base/java.text=ALL-UNNAMED -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -H:+AllowFoldMethods -J-Djava.awt.headless=true -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http,https -H:NativeLinkerOption=-no-pie -H:-UseServiceLoaderFeature -H:+StackTrace quarkus-astra-intro-demo-0.01-runner -jar quarkus-astra-intro-demo-0.01-runner.jarPicked up JAVA_TOOL_OPTIONS:  -Xmx3435m========================================================================================================================GraalVM Native Image: Generating 'quarkus-astra-intro-demo-0.01-runner'...========================================================================================================================[1/7] Initializing...                                                                                    (4.9s @ 0.42GB) Version info: 'GraalVM 22.0.0.2 Java 11 CE' 3 user-provided feature(s)  - io.quarkus.runner.AutoFeature  - io.quarkus.runtime.graal.DisableLoggingAutoFeature  - io.quarkus.runtime.graal.ResourcesFeature[2/7] Performing analysis...  [20:33:32,360 INFO  [com.dat.oss.qua.run.int.qua.CassandraClientRecorder] Enabling Cassandra metrics using Micrometer.20:33:36,471 INFO  [com.dat.oss.dri.int.cor.DefaultMavenCoordinates] DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.14.0**********]                                                              (31.7s @ 2.17GB)  14,155 (95.32%) of 14,850 classes reachable  20,586 (66.60%) of 30,912 fields reachable  69,696 (82.00%) of 84,993 methods reachable     482 classes,    39 fields, and   850 methods registered for reflection      68 classes,    88 fields, and    54 methods registered for JNI access[3/7] Building universe...                                                                               (2.0s @ 2.69GB)[4/7] Parsing methods...      [***]                                                                      (5.3s @ 1.81GB)[5/7] Inlining methods...     [*****]                                                                    (4.7s @ 3.18GB)[6/7] Compiling methods...    [*****]                                                                   (22.6s @ 3.42GB)[7/7] Creating image...                                                                                  (4.3s @ 2.54GB)  25.64MB (36.89%) for code area:   46,599 compilation units  37.07MB (53.33%) for image heap:   9,899 classes and 350,222 objects   6.80MB ( 9.78%) for other data  69.50MB in total------------------------------------------------------------------------------------------------------------------------Top 10 packages in code area:                               Top 10 object types in image heap:   1.67MB sun.security.ssl                                    19.83MB byte[] for general heap data   1.03MB java.util                                            3.40MB java.lang.Class 686.94KB com.sun.crypto.provider                              2.65MB java.lang.String 531.52KB io.quarkus.runtime.generated                         2.21MB byte[] for java.lang.String 490.01KB sun.security.x509                                  627.75KB java.util.HashMap$Node 458.87KB java.util.concurrent                               581.63KB java.util.LinkedHashMap 446.33KB io.netty.buffer                                    534.65KB com.oracle.svm.core.util.LazyFinalReference 426.93KB com.oracle.svm.core.reflect                        526.91KB java.lang.String[] 425.74KB com.typesafe.config.impl                           439.28KB byte[] for method metadata 379.99KB java.lang                                          427.69KB c.o.s.c.h.DynamicHub$$Lambda$~31d9af6a7fe68cfc2a1f      ... 661 additional packages                                 ... 3407 additional object types                                           (use GraalVM Dashboard to see all)------------------------------------------------------------------------------------------------------------------------                        6.2s (7.7% of total time) in 40 GCs | Peak RSS: 5.21GB | CPU load: 4.98------------------------------------------------------------------------------------------------------------------------Produced artifacts: /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01-native-image-source-jar/quarkus-astra-intro-demo-0.01-runner (executable) /workspace/quarkus-astra-intro-demo/target/quarkus-astra-intro-demo-0.01-native-image-source-jar/quarkus-astra-intro-demo-0.01-runner.build_artifacts.txt========================================================================================================================Finished generating 'quarkus-astra-intro-demo-0.01-runner' in 1m 20s.[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] objcopy --strip-debug quarkus-astra-intro-demo-0.01-runner[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 83782ms[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  01:29 min[INFO] Finished at: 2022-05-16T20:34:47Z[INFO] ------------------------------------------------------------------------</code></pre><p>✅ <strong>Step 11b: Running Native Image</strong></p><p>Run the native image with the following command:</p><pre lang="bash"><code>./target/quarkus-astra-intro-demo-0.01-runner</code></pre><pre><code>__  ____  __  _____   ___  __ ____  ______  --/ __ \/ / / / _ | / _ \/ //_/ / / / __/  -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\ \   --\___\_\____/_/ |_/_/|_/_/|_|\____/___/   INFO  [io.qua.sma.ope.run.OpenApiRecorder] (main) Default CORS properties will be used, please use 'quarkus.http.cors' properties insteadINFO  [com.dat.oss.qua.run.int.qua.CassandraClientStarter] (main) Eagerly initializing Quarkus Cassandra client.INFO  [com.dat.oss.dri.int.cor.os.Native] (vert.x-eventloop-thread-0) Using Graal-specific native functionsINFO  [com.dat.oss.dri.int.cor.tim.Clock] (vert.x-eventloop-thread-0) Using native clock for microsecond precisionINFO  [com.dat.oss.dri.int.cor.ses.DefaultSession] (vert.x-eventloop-thread-9) [s0] Negotiated protocol version V4 for the initial contact point, but cluster seems to support V5, keeping the negotiated versionINFO  [com.dat.tod.res.TodoResource] (main) **** Table created true****INFO  [io.quarkus] (main) quarkus-astra-intro-demo 0.01 native (powered by Quarkus 2.9.1.Final) started in 2.273s. Listening on: http://0.0.0.0:8080INFO  [io.quarkus] (main) Profile prod activated. INFO  [io.quarkus] (main) Installed features: [cassandra-client, cdi, kubernetes, micrometer, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, swagger-ui, vertx]</code></pre><p>Notice the fast startup time since the image is running as a native image.</p><p>Hit <code>Ctrl+C</code> in the GitPod terminal window to exit the application.</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="12-homework"> </a>12. Homework</h2><img src="images/tutorials/badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework! You have 2 options (option A or Option B). Pick whichever works for you.</p><p>Option A. Complete the practice steps from this repository as described above (including optional steps 10d and 10e) and deploy to a Kubernetes cluster.  Make screenshots of the deployment to a Kubernetes cluster.</p><p>Option B: Learn more about Quarkus and do some development with <a href="https://github.com/datastax/cassandra-quarkus">https://github.com/datastax/cassandra-quarkus</a>. Send a screenshot of the working &quot;Fruits application&quot; with the following entry &quot;Jackfruit&quot; and the correpsonding description as &quot;King/Queen of fruits&quot;.</p><p>Submit your homework <a href="https://docs.google.com/forms/d/e/1FAIpQLSd3hMHgHURsNGq2-jDAIr-XPLJGHqaRAm9CAMkYveybuYfBRw/viewform">here</a></p><p>That's it, you are done! Expect an email next week!</p><p><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="13-the-end"> </a>13. The END</h2><p>Congratulations, your made it to the END of the show.</p><p><strong>🧑🏻‍🤝‍🧑🏽 Let's get in touch</strong></p><table><thead><tr><th><img src="images/tutorials/rags.png" alt="B" /></th></tr></thead><tbody><tr><td>Rags Srinivas <br><a href="https://github.com/ragsns">@ragsns</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="a-href-0-table-of-contents-back-to-table-of-contents-a"> </a><a href="#0-table-of-contents">🏠 Back to Table of Contents</a></h2><p><a href=""><img src="images/tutorials/thankyou.gif" alt="thankyou" /></a></p>
SUCCESS SAVING README for datastaxdevs-workshop-intro-quarkus-cassandra
Getting astra.json for datastaxdevs/workshop-spring-data-cassandra at 277
No astra.json for datastaxdevs/workshop-spring-data-cassandra at 281
No astrajson for Todo Application (Spring Data)
ERROR SAVING README for datastaxdevs-workshop-spring-data-cassandra
Getting astra.json for datastaxdevs/workshop-ecommerce-app at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="building-an-e-commerce-website"> </a>🔥 Building an E-commerce Website 🔥</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-astra-db-and-streaming-instances"> </a>2. Create Astra DB and Streaming Instances</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2a-register"> </a>✅ 2a. Register</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-on-the-free-plan"> </a>✅ 2b. Create a DB on the &quot;FREE&quot; plan</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2c-ensure-the-database-turns-to-active-state"> </a>✅ 2c. Ensure the database turns to active state</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2d-create-a-streaming-tenant-and-topics-on-the-free-plan"> </a>✅ 2d. Create a Streaming Tenant and Topics on the &quot;FREE&quot; plan</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-your-schema"> </a>3. Create your schema</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-1-product-data-model"> </a>Session 1 - Product data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-2-shopping-cart-data-model"> </a>Session 2 - Shopping Cart data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-3-user-profile-data-model"> </a>Session 3 - User Profile data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-4-order-processing-system-data-model"> </a>Session 4 - Order Processing System data model</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-open-the-cqlconsole-on-astra"> </a>✅ 3a. Open the CqlConsole on Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3b-execute-the-following-cql-script-to-create-the-schema"> </a>✅ 3b. Execute the following CQL script to create the schema</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-populate-the-data"> </a>4. Populate the Data</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4a-execute-the-following-script-to-populate-the-tables-with-the-data-below"> </a>✅ 4a. Execute the following script to populate the tables with the data below</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-1-product-data"> </a>Session 1 - Product data</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-your-tokens"> </a>5. Create your tokens</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5a-create-the-astra-db-token"> </a>✅ 5a. Create the Astra DB token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5b-save-your-db-token-locally"> </a>✅ 5b. Save your DB token locally</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5c-view-the-astra-streaming-token-and-connection-details"> </a>✅ 5c. View the Astra Streaming token and connection details</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5d-save-your-streaming-token-locally"> </a>✅ 5d. Save your Streaming token locally</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-setup-your-application"> </a>6. Setup your application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="know-your-gitpod"> </a>Know your Gitpod</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-enable-social-login"> </a>7. Enable Social Login</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-unit-tests"> </a>8. Run Unit Tests</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-start-the-application"> </a>9. Start the Application</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="done"> </a>Done?</h1>
HTML FOR datastaxdevs-workshop-ecommerce-app<!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="building-an-e-commerce-website"> </a>🔥 Building an E-commerce Website 🔥</h2><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ecommerce-app"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="data/img/splash.png?raw=true" align="right" width="400px"/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides_wk1.pdf">Slide deck - week 1</a></li><li><a href="./slides_wk2.pdf">Slide deck - week 2</a></li><li><a href="./slides_wk3.pdf">Slide deck - week 3</a></li><li><a href="./slides_wk4.pdf">Slide deck - week 4</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li>[Worskhop code] (<a href="https://github.com/datastaxdevs/workshop-ecommerce-app">https://github.com/datastaxdevs/workshop-ecommerce-app</a>)</li></ul><p>If you cannot attend this workshop live, recordings of this workshop and many more is available on <a href="https://youtube.com/datastaxdevs">Youtube</a>.</p><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="data/img/build-an-ecommerce-app.png" width="200" align=right /><p>Complete the homework to earn the badge for this workshop (<strong>awarded only at the end of the series</strong>).</p><ol><li>Implement Google login and take SCREENSHOT(s).</li><li>Don't worry about submitting it just yet.  We'll have instructions on how to do that at the end of the series!</li></ol><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#1-introduction">Introduction</a></li><li><a href="#2-create-astra-db-instance">Create your Database</a></li><li><a href="#3-create-your-schema">Create your schema</a></li><li><a href="#4-populate-the-data">Populate the dataset</a></li><li><a href="#5-create-your-token">Create a token</a></li><li><a href="#6-setup-your-application">Setup your application</a></li><li><a href="#7-enable-social-login">Enable Social Login</a></li><li><a href="#8-run-unit-tests">Run Unit Tests</a></li><li><a href="#9-start-the-application">Start the Application</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2><p>Are you building or do you support an e-commerce website?  If so, then this content is for <strong>you</strong>!</p><p>Worldwide digital sales in 2020 eclipsed four trillion dollars (USD).  Businesses that want to compete, need a high performing e-commerce website.  Here, we will demonstrate how to build a high performing persistence layer with DataStax <strong><code>ASTRA DB</code></strong>.</p><p>Why does an e-commerce site need to be fast?  Because most consumers will leave a web page or a mobile app if it takes longer than a few seconds to load.  In the content below, we will cover how to build high-performing data models and services, helping you to build a e-commerce site with high throughput and low latency.</p><h2><a class="anchor" aria-hidden="true" id="2-create-astra-db-and-streaming-instances"> </a>2. Create Astra DB and Streaming Instances</h2><p>You can skip to step 2c if you have already created a keyspace <code>ecommerce</code> in database <code>demos</code>. Otherwise (if you did not attend the previous installment of the e-commerce worksop):</p><p><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations, 80GB storage monthly - sufficient to run small production workloads.</p><h4><a class="anchor" aria-hidden="true" id="2a-register"> </a>✅ 2a. Register</h4><p>If you do not have an account yet, register and sign in to Astra DB: This is FREE and NO CREDIT CARD is required. <a href="https://astra.dev/yt-11-30">https://astra.datastax.com</a>: You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-on-the-free-plan"> </a>✅ 2b. Create a DB on the &quot;FREE&quot; plan</h4><p>Follow this <a href="https://docs.datastax.com/en/astra/docs/creating-your-astra-database.html">guide</a>, to set up a pay as you go database with a free $25 monthly credit. You will find below recommended values to enter:</p><ul><li><p><strong>For the database name</strong> - <code>demos</code></p></li><li><p><strong>For the keyspace name</strong> - <code>ecommerce</code></p></li></ul><p><em>You can technically use whatever name(s) you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><ul><li><p><strong>For provider and region</strong>: For Astra DB, select GCP as a provider and then the related region is where your database will reside physically (choose one close to you or your users).</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><em>The Walkthrough mentions a different keyspace, make sure to use <code>ecommerce</code></em></p><p><img src="data/img/astra-create-db.gif?raw=true" alt="image" />You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="data/img/db-pending.png?raw=true" alt="my-pic" /></p><h4><a class="anchor" aria-hidden="true" id="2c-ensure-the-database-turns-to-active-state"> </a>✅ 2c. Ensure the database turns to active state</h4><p>To connect to the database programmatically, you need to make sure the status will change to <code>Active</code>. This happens when the database is ready, and will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><strong>👁️ Expected Output</strong></p><p><img src="data/img/db-active.png?raw=true" alt="my-pic" /></p><p>If it's in a <code>standby</code> state you can hit <code>Connect</code> and <code>CQL Console</code> on top.</p><p>You should see a message something like below.</p><p><strong>👁️ Expected Output</strong></p><pre lang="cql"><code>{&quot;message&quot;:&quot;Resuming your database, please try again shortly.&quot;}</code></pre><h4><a class="anchor" aria-hidden="true" id="2d-create-a-streaming-tenant-and-topics-on-the-free-plan"> </a>✅ 2d. Create a Streaming Tenant and Topics on the &quot;FREE&quot; plan</h4><p>Here we will walk through how to create an Astra Streaming Tenant.  Start by clicking the &quot;Create Stream&quot; button in the left navigation pane.</p><p><img src="data/img/create-stream.png?raw=true" alt="image" /></p><p>On the next page, provide a name for your tenant and select a provider/region.  Click the blue &quot;Create Tenant&quot; button when complete.</p><p><img src="data/img/create_streaming_tenant.png?raw=true" alt="image" /></p><p>Note that Tenant Names must be unique across providers.  To ensure uniqueness, name it &quot;ecommerce-&quot; followed by your name or company.</p><p>Now we need to create topics <em>within</em> our tenant.  Click on the link or on the &quot;Topics&quot; tab.  You should see the &quot;default&quot; namespace with an &quot;Add Topic&quot; button (on the right).  Click the &quot;Add Topic&quot; button.</p><p><img src="data/img/add_topic1.png?raw=true" alt="image" /></p><p>Name the topic &quot;pending-orders&quot; and make sure that the &quot;Persistent&quot; switch is selected.  Don't worry about the &quot;Partitioned&quot; switch for now.  Click the &quot;Add Topic&quot; button when ready.</p><p><img src="data/img/add_topic2.png?raw=true" alt="image" /></p><p>Repeat this process to add 3 more topics:</p><ul><li>picked-orders</li><li>shipped-orders</li><li>completed-orders</li></ul><p>When you are done, your &quot;Topics&quot; tab should look similar to this:</p><p><img src="data/img/streaming_topics_final.png?raw=true" alt="image" /></p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-create-your-schema"> </a>3. Create your schema</h2><p><strong>Introduction</strong>This section will provide DDL to create three tables inside the &quot;ecommerce&quot; keyspace: category, price, and product.</p><h4><a class="anchor" aria-hidden="true" id="session-1-product-data-model"> </a>Session 1 - Product data model</h4><p>The <code>product</code> table supports all product data queries, and uses <code>product_id</code> as a single key.  It has a few columns for specific product data, but any ad-hoc or non-standard properties can be added to the <code>specifications</code> map.</p><p>The <code>category</code> table will support all product navigation service calls.  It is designed to provide recursive, hierarchical navigation without a pre-set limit on the number of levels.  The top-most level only exists as a <code>parent_id</code>, and the bottom-most level contains products.</p><p>The <code>price</code> table was intentionally split-off from product.  There are several reasons for this.  Price data is much more likely to change than pure product data (different read/write patterns).  Also, large enterprises typically have separate teams for product and price, meaning they will usually have different micro-service layers and data stores.</p><p>The <code>featured_product_groups</code> table was a late-add, to be able to provide some extra &quot;atmosphere&quot; of an e-commerce website.  This way, the UI has a means by which to highlight a few, select products.</p><h4><a class="anchor" aria-hidden="true" id="session-2-shopping-cart-data-model"> </a>Session 2 - Shopping Cart data model</h4><p>The <code>user_carts</code> table supports cart metadata.  Carts are not expected to be long-lived, so they have a default TTL (time to live) of 60 days (5,184,000 seconds).  Carts also have a <code>name</code> as a part of the key, so that the user can have multiple carts (think &quot;wish lists&quot;).</p><p>The <code>cart_products</code> table holds data on the products added to the cart.  The cart uses <code>product_timestamp</code> as the first clustering key in descending order; this way products in the cart will be listed with the most-recently-added products at the top.  Like <code>user_carts</code>, each entry has a 60 day TTL.</p><h4><a class="anchor" aria-hidden="true" id="session-3-user-profile-data-model"> </a>Session 3 - User Profile data model</h4><p>The <code>user</code> table holds all data on the user, keyed by a single PRIMARY KEY on <code>user_id</code>.  It's main features contain TEXT (string) data for common user properties, as well as a collection of <code>addresses</code>.  This is because users (especially B-to-B) may have multiple addresses (mail-to, ship-to, bill-to, etc).  The <code>addresses</code> collection is built on a special user defined type (UDT) and <code>FROZEN</code> to treat the collection as a Binary Large OBject (BLOB) to reduce tombstones (required by CQL).</p><p>As mentioned above, the <code>address</code> UDT contains properties used for postal contacts.  All properties are of the TEXT datatype.</p><p>The <code>user_by_email</code> table is intended to be used as a &quot;manual index&quot; on email address. Essentially, it is a lookup table returning the <code>user_id</code> associated with an email address.  This is necessary as <code>user_email</code> is nigh-unique (in terms of cardinality of values), and thus a CQL secondary index would perform quite poorly.</p><h4><a class="anchor" aria-hidden="true" id="session-4-order-processing-system-data-model"> </a>Session 4 - Order Processing System data model</h4><p>The <code>order_by_id</code> table holds detail on each order.  It partitions on <code>order_id</code> for optimal data distribution, and clusters on <code>product_name</code> and <code>product_id</code> for sort order.  The columns specific to the order itself (and not a product) are <code>STATIC</code> so that they are only stored once (with the partition key).</p><p>The <code>order_by_user</code> table holds a reference to each order by <code>user_id</code>.  The idea, is that this table is queried by <code>user_id</code> and the results are shown on an &quot;order history&quot; page for that user.  Then, each order can be clicked-on, revealing the detail contained in the <code>order_by_id</code> table.  <code>order_id</code> is a TimeUUID (version 1 UUID) type, which is converted into a human-readable timestamp in the service layer.</p><p>The <code>order_status_history</code> table maintains a history of each status for an order.  It is meant to be used with queries to the <code>order_by_id</code> table, so that a user may see the status progression of their order.</p><h3><a class="anchor" aria-hidden="true" id="3a-open-the-cqlconsole-on-astra"> </a>✅ 3a. Open the CqlConsole on Astra</h3><pre lang="sql"><code>use ecommerce;</code></pre><h3><a class="anchor" aria-hidden="true" id="3b-execute-the-following-cql-script-to-create-the-schema"> </a>✅ 3b. Execute the following CQL script to create the schema</h3><pre lang="sql"><code>/* Session 1 - Product data model *//* category table */CREATE TABLE IF NOT EXISTS category (    parent_id UUID,    category_id UUID,    name TEXT,    image TEXT,    products LIST&lt;TEXT&gt;,PRIMARY KEY (parent_id,category_id));/* price table */CREATE TABLE IF NOT EXISTS price (    product_id TEXT,    store_id TEXT,    value DECIMAL,PRIMARY KEY(product_id,store_id));/* product table */CREATE TABLE IF NOT EXISTS product (    product_id TEXT,    product_group TEXT,    name TEXT,    brand TEXT,    model_number TEXT,    short_desc TEXT,    long_desc TEXT,    specifications MAP&lt;TEXT,TEXT&gt;,    linked_documents MAP&lt;TEXT,TEXT&gt;,    images SET&lt;TEXT&gt;,PRIMARY KEY(product_id));/* featured product groups table */CREATE TABLE IF NOT EXISTS featured_product_groups (    feature_id INT,    category_id UUID,    name TEXT,    image TEXT,    parent_id UUID,    price DECIMAL,PRIMARY KEY (feature_id,category_id));/* Session 2 - Shopping Cart data model */CREATE TABLE IF NOT EXISTS user_carts (    user_id uuid,    cart_name text,    cart_id uuid,    cart_is_active boolean,    user_email text,    PRIMARY KEY (user_id, cart_name, cart_id)) WITH default_time_to_live = 5184000;CREATE TABLE IF NOT EXISTS cart_products (    cart_id uuid,    product_timestamp timestamp,    product_id text,    product_description text,    product_name text,    quantity int,    PRIMARY KEY (cart_id, product_timestamp, product_id)) WITH CLUSTERING ORDER BY (product_timestamp DESC, product_id ASC)  AND default_time_to_live = 5184000;/* Session 3 - User Profile data model */CREATE TYPE IF NOT EXISTS address (  type TEXT,  mailto_name TEXT,  street TEXT,  street2 TEXT,  city TEXT,  state_province TEXT,  postal_code TEXT,  country TEXT);CREATE TABLE IF NOT EXISTS user (  user_id UUID,  user_email TEXT,  picture_url TEXT,  first_name TEXT,  last_name TEXT,  locale TEXT,  addresses LIST&lt;FROZEN&lt;address&gt;&gt;,  session_id TEXT,  password TEXT,  password_timestamp TIMESTAMP,  PRIMARY KEY (user_id));CREATE TABLE IF NOT EXISTS user_by_email (  user_email TEXT PRIMARY KEY,  user_id UUID);/* Session 4 - Order Processing System data model */CREATE TABLE IF NOT EXISTS order_by_id (    order_id timeuuid,    product_name text,    product_id text,    order_shipping_handling decimal static,    order_status text static,    order_subtotal decimal static,    order_tax decimal static,    order_total decimal static,    payment_method text static,    product_price decimal,    product_qty int,    shipping_address address static,    PRIMARY KEY (order_id, product_name, product_id)) WITH CLUSTERING ORDER BY (product_name ASC, product_id ASC);CREATE TABLE IF NOT EXISTS order_by_user (    user_id uuid,    order_id timeuuid,    order_status text,    order_total decimal,    PRIMARY KEY (user_id, order_id)) WITH CLUSTERING ORDER BY (order_id DESC);CREATE TABLE IF NOT EXISTS order_status_history (    order_id timeuuid,    status_timestamp timestamp,    order_status text,    PRIMARY KEY (order_id, status_timestamp)) WITH CLUSTERING ORDER BY (status_timestamp DESC);</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-populate-the-data"> </a>4. Populate the Data</h2><h4><a class="anchor" aria-hidden="true" id="4a-execute-the-following-script-to-populate-the-tables-with-the-data-below"> </a>✅ 4a. Execute the following script to populate the tables with the data below</h4><h4><a class="anchor" aria-hidden="true" id="session-1-product-data"> </a>Session 1 - Product data</h4><pre lang="sql"><code>INSERT INTO category (name,category_id,image,parent_id) VALUES ('Clothing',18105592-77aa-4469-8556-833b419dacf4,'ls534.png',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Tech Accessories',5929e846-53e8-473e-8525-80b666c46a83,'',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Cups and Mugs',675cf3a2-2752-4de7-ae2e-849471c29f51,'',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wall Decor',591bf485-de09-4b46-8fd2-5d9dc7ca101e,'bh001.png',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('T-Shirts',91455473-212e-4c6e-8bec-1da06779ae10,'ls534.png',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Hoodies',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,'',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Jackets',d887b049-d16c-46e1-8c94-0a1280dedc30,'',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Mousepads',d04dfb5b-69c6-4e97-b572-e9e390165a84,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wrist Rests',aa161129-d456-45ba-b1f0-fac7898b6d06,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Laptop Covers',1c4b8599-78df-4f93-9c52-578bd959a3a5,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Cups',7536fdef-fcd9-44a3-9360-0bffd2904408,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Coffee Mugs',20374300-185c-4ee5-b0bc-77fbdc3a21ed,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Travel Mugs',0660483e-2fad-447b-b19a-63ab4935e482,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Posters',fdbe9dcb-6878-4216-a64d-27c094b1b075,'',591bf485-de09-4b46-8fd2-5d9dc7ca101e);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wall Art',943482f9-070c-4390-bb30-2107b6fe653a,'bh001.png',591bf485-de09-4b46-8fd2-5d9dc7ca101e);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Men''s &quot;Go Away...Annotation&quot; T-Shirt',99c4d825-d262-4a95-a04e-cc72e7e273c1,'ls534.png',91455473-212e-4c6e-8bec-1da06779ae10,['LS534S','LS534M','LS534L','LS534XL','LS5342XL','LS5343XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Men''s &quot;Your Face...Autowired&quot; T-Shirt',3fa13eee-d057-48d0-b0ae-2d83af9e3e3e,'ln355.png',91455473-212e-4c6e-8bec-1da06779ae10,['LN355S','LN355M','LN355L','LN355XL','LN3552XL','LN3553XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Bigheads',2f25a732-0744-406d-baee-3e8131cbe500,'bh001.png',943482f9-070c-4390-bb30-2107b6fe653a,['bh001','bh002','bh003']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Gray Track Jacket',f629e107-b219-4563-a852-6909fd246949,'dss821.jpg',d887b049-d16c-46e1-8c94-0a1280dedc30,['DSS821S','DSS821M','DSS821L','DSS821XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Vintage 2015 MVP Hoodie',86d234a4-6b97-476c-ada8-efb344d39743,'dsh915.jpg',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,['DSH915S','DSH915M','DSH915L','DSH915XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Black Hoodie',b9bed3c0-0a76-44ea-bce6-f5f21611a3f1,'dsh916.jpg',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,['DSH916S','DSH916M','DSH916L','DSH916XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Apache Cassandra 3.0 Contributor T-Shirt',95ae4613-0184-46ee-b4b0-adfe882754a8,'apc30a.jpg',91455473-212e-4c6e-8bec-1da06779ae10,['APC30S','APC30M','APC30L','APC30XL','APC302XL','APC303XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Astra &quot;One Team&quot; Long Sleeve Tee',775be203-1a84-4822-9645-4da98ca2b2d8,'dsa1121.jpg',91455473-212e-4c6e-8bec-1da06779ae10,['DSA1121S','DSA1121M','DSA1121L','DSA1121XL','DSA11212XL','DSA11213XL']);INSERT INTO price(product_id,store_id,value) VALUES ('LS534S','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534M','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534L','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534XL','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS5342XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS5343XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355S','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355M','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355L','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355XL','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN3552XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN3553XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121S','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121M','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121L','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121XL','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA11212XL','web',23.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA11213XL','web',23.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821S','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821M','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821L','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821XL','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915S','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915M','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915L','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915XL','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916S','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916M','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916L','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916XL','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30S','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30M','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30L','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30XL','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC302XL','web',17.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC303XL','web',17.99);INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534S','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Small &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Small','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534M','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Medium &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Medium','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534L','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Extra Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Extra Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS5342XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s 2x Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'2x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS5343XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s 3x Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'3x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355S','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Small &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Small','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355M','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Medium &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Medium','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355L','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Extra Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Extra Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN3552XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s 2x Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'2x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s 3x Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'3x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121S','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Small','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Small','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121M','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Medium','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Medium','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121L','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Extra Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Extra Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA11212XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - 2X Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'2X Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA11213XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - 3X Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'3X Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30S','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Small','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Small','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30M','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Medium','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Medium','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30L','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Extra Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Extra Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC302XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - 2X Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'2X Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC303XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - 3X Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'3X Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821S','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Small','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Small','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821M','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Medium','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Medium','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821L','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Large','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Large','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821XL','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Extra Large','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Extra Large','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915S','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Small','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Small','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915M','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Medium','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Medium','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915L','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Large','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Large','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915XL','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Extra Large','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Extra Large','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916S','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Small','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Small','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916M','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Medium','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Medium','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916L','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Large','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Large','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916XL','DSH916','DataStax Black Hoodie','DataStax','DSS916','DataStax Black Hoodie - Extra Large','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Extra Large','color':'black'},{'dsh916.jpg'});INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Gray Track Jacket',f629e107-b219-4563-a852-6909fd246949,'dss821.jpg',44.99,d887b049-d16c-46e1-8c94-0a1280dedc30);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Black Hoodie',b9bed3c0-0a76-44ea-bce6-f5f21611a3f1,'dsh916.jpg',35.99,6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'Apache Cassandra 3.0 Contributor T-Shirt',95ae4613-0184-46ee-b4b0-adfe882754a8,'apc30a.jpg',15.99,91455473-212e-4c6e-8bec-1da06779ae10);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Astra &quot;One Team&quot; Long Sleeve Tee',775be203-1a84-4822-9645-4da98ca2b2d8,'dsa1121.jpg',21.99,91455473-212e-4c6e-8bec-1da06779ae10);</code></pre><p>Although it's not advised to use wildcards as below, you can verify the data has been created with the following command.</p><pre><code>select * from CATEGORY;</code></pre><p><strong>Notes:</strong></p><ul><li>The &quot;top&quot; categories of the product hierarchy can be retrieved using a <code>parent_id</code> of &quot;ffdac25a-0244-4894-bb31-a0884bc82aa9&quot;.</li><li>Without specifying a <code>category_id</code>, all categories for the <code>parent_id</code> are returned.</li><li>When a category from the &quot;bottom&quot; of the hierarchy is queried, a populated <code>products</code> ArrayList will be returned.  From there, the returned <code>product_id</code>s can be used with the <code>/product</code> service.</li><li>Category navigation is achieved by using the <code>parent_id</code> and <code>category_id</code> properties returned for each category (to build the &quot;next level&quot; category links).</li><li><code>/category/ffdac25a-0244-4894-bb31-a0884bc82aa9</code>  =&gt;  Category[Clothing, Cups and Mugs, Tech Accessories, Wall Decor]</li><li><code>/category/ffdac25a-0244-4894-bb31-a0884bc82aa9/18105592-77aa-4469-8556-833b419dacf4</code>  =&gt;  Category[Clothing]</li><li><code>/category/18105592-77aa-4469-8556-833b419dacf4</code>  =&gt;  Category[T-Shirts, Hoodies, Jackets]</li><li><code>/category/91455473-212e-4c6e-8bec-1da06779ae10</code>  =&gt;  Category[Men's &quot;Your Face...Autowired&quot; T-Shirt, Men's &quot;Go Away...Annotation&quot; T-Shirt]</li><li>The featured products table is a simple way for web marketers to promote small numbers of products, and have them appear in an organized fashion on the main page.  The <code>feature_id</code> key is simply an integer, with the default being <code>202112</code> (for December, 2021).  You can (of course) use other numeric naming schemes.</li></ul><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-create-your-tokens"> </a>5. Create your tokens</h2><h4><a class="anchor" aria-hidden="true" id="5a-create-the-astra-db-token"> </a>✅ 5a. Create the Astra DB token</h4><p>Following the <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Manage Application Tokens docs</a> create a token with <code>Database Admnistrator</code> roles.</p><ul><li><p>Go the <code>Organization Settings</code></p></li><li><p>Go to <code>Token Management</code></p></li><li><p>Pick the role <code>Database Administrator</code> on the select box</p></li><li><p>Click Generate token</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><img src="data/img/astra-create-token.gif?raw=true" alt="image" /></p><p>This is what the token page looks like. You can now download the values as a CSV. We will need those values but you can also keep this window open for use later.</p><p><img src="data/img/astra-token.png?raw=true" alt="image" /></p><ul><li><code>appToken:</code> We will use it as a api token Key to interact with APIs.</li></ul><h4><a class="anchor" aria-hidden="true" id="5b-save-your-db-token-locally"> </a>✅ 5b. Save your DB token locally</h4><p>To know more about roles of each token you can have a look to <a href="https://www.youtube.com/watch?v=TUTCLsBuUd4&amp;list=PL2g2h-wyI4SpWK1G3UaxXhzZc6aUFXbvL&amp;index=8">this video.</a></p><p><strong>Note: Make sure you don't close the window accidentally or otherwise - if you close this window before you copy the values, the application token is lost forever. They won't be available later for security reasons.</strong></p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a tokenbut will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>We are now set with the database and credentials and will incorporate them into the application as we will see below.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h4><a class="anchor" aria-hidden="true" id="5c-view-the-astra-streaming-token-and-connection-details"> </a>✅ 5c. View the Astra Streaming token and connection details</h4><p>Click on the &quot;Connect&quot; tab.  Take note of your tenant name and broker service URL.  It's a good idea to copy/paste those into a text editor for now.  When you're ready, click on the &quot;Token Manager&quot; link.</p><p><img src="data/img/broker_service_url.png?raw=true" alt="image" /></p><p>You should have one token created by default.  Click on the copy icon on the right.  Paste your token into a text editor for now.</p><p><img src="data/img/copy_stream_token.png?raw=true" alt="image" /></p><p>Later on, we will use this information to populate environment variables, allowing us to connect to our Astra Streaming tenant.  It will be similar to the example below:</p><pre><code>export ASTRA_STREAM_TENANT=ecommerce-aaronexport ASTRA_STREAM_URL=&quot;pulsar+ssl://pulsar-gcp-uscentral1.streaming.datastax.com:6651&quot;export ASTRA_STREAM_TOKEN=&quot;eyJhMBhGYBlahBlahBlahNotARealToken37hOAv9t1fHIhJLAHw&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="5d-save-your-streaming-token-locally"> </a>✅ 5d. Save your Streaming token locally</h4><h2><a class="anchor" aria-hidden="true" id="6-setup-your-application"> </a>6. Setup your application</h2><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ecommerce-app"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h3><a class="anchor" aria-hidden="true" id="know-your-gitpod"> </a>Know your Gitpod</h3><p>Take a moment to read this entire section since it'll help you with the rest of the workshop as you'll be spending most of your time in Gitpod. If you're familiar with Gitpod, you can easily skip this entire section.</p><p>The extreme left side has the explorer view(1). The top left, middle to right is where you'll be editing files(2), etc. and the bottom left, middle to right is what we will refer to as the Gitpod terminal window(3) as shown below.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-01-home-annotated.png?raw=true" alt="gitpod" /></p><p>You can always get back to the file explorer view whenever by clicking on the hamburger menu on the top left followed by <code>View</code> and <code>Explorer</code> as shown below.</p><p><img src="data/img/Filexplorer0.png?raw=true" alt="gitpod" /></p><p>You can allow cutting and pasting into the window by clicking on <code>Allow</code> as shown below.</p><p><img src="data/img/allow.png?raw=true" alt="gitpod" /></p><p>✅ <strong>6a: Enter the token</strong></p><p>To run the application you need to provide the credentials and identifier to the application. you will have to provide 4 values in total as shown below</p><p>Copy the environment sample file as below.</p><pre><code>cp .env.example .env</code></pre><p>Open the <code>.env</code> file as below.</p><pre><code>gp open .env</code></pre><ul><li><p>In Astra DB go back to home page by clicking the logo</p></li><li><p>Select you database <code>demos</code> in the left panel and then copy values for <code>cloud-region</code> and <code>database-id</code> (clusterID) from the details page as shown below.</p></li><li><p><em>The DatabaseID is located on the home page</em></p></li></ul><p><img src="data/img/astra-config-1.png?raw=true" alt="Ecom Welcome Screen" /></p><ul><li><em>The Database region (and keyspace) are located in the details page</em></li></ul><p><img src="data/img/astra-config-2.png?raw=true" alt="Ecom Welcome Screen" /></p><ul><li><p>Replace <code>application-token</code> with values shown on the Astra token screen or picking the values from the CSV token file your dowloaded before including the AstraCS: part of the token.</p></li><li><p><em>Make sure the Token looks something like (with AstraCS: preceeding <code>AstraCS:xxxxxxxxxxx:yyyyyyyyyyy</code></em></p></li></ul><pre lang="yaml"><code># Copy this file to .env and fill in the appropriate values. Refer to README.md# for instructions on where to find them.export ASTRA_DB_ID=export ASTRA_DB_REGION=export ASTRA_DB_APP_TOKEN=export ASTRA_DB_KEYSPACE=ecommerceexport ASTRA_STREAM_TENANT=export ASTRA_STREAM_URL=export ASTRA_STREAM_TOKEN=export GOOGLE_CLIENT_ID=export GOOGLE_CLIENT_SECRET=</code></pre><p>Make sure to inject the environment variables by running the following command</p><pre><code>source .env</code></pre><p>Verify that the environment variables are properly setup with the following command</p><pre><code>env | grep -i astra</code></pre><p>You should see four environment variables (not shown here).</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-enable-social-login"> </a>7. Enable Social Login</h2><p>Now that we're done with tests, let's <code>cd</code> to the top directory.</p><pre><code>/workspace/workshop-ecommerce-app/</code></pre><p>On a tab in a browser navigate to <a href="https://console.cloud.google.com/apis/credentials">https://console.cloud.google.com/apis/credentials</a>.</p><p>Consent to using APIs and services and you should finally be presented a screen that looks like below and pick values as shown.</p><p><img src="data/img/Oauthconsent1.png?raw=true" alt="ouath" /></p><p>Pick the appropriate values as shown below and complete the consent.</p><p><img src="data/img/Oauthconsent2.png?raw=true" alt="ouath" /></p><p>Make sure the project is setup for internal testing (and not for production) as shown below with the &quot;MAKE INTERNAL&quot;.</p><p><img src="data/img/Oauthconsent3.png?raw=true" alt="ouath" /></p><p>Now click on the <code>credentials</code> tab, <code>+ CREATE CREDENTIALS</code> tab and finally the <code>OAuth Client ID</code> dropdown as shown in the following screen.</p><p><img src="data/img/Oauthcred0.png?raw=true" alt="ouath" /></p><p>You will be presented with a screen for entering the <code>Authorized JavaScript Origins</code> and <code>Authorized redirect URIs</code> as shown below.</p><p>You'll need the following URIs. Make a note of this. We will use <code>http</code> instead of <code>https</code> as illustrated below.</p><p>For the <code>Authorized JavaScript Origins</code> use the following value from the Gitpod terminal window,</p><pre lang="bash"><code>echo $(gp url 8080 | sed 's/https/http/')</code></pre><p>For the <code>Authorized redirect URIs</code> use the following from the GitPod terminal window.</p><pre lang="bash"><code>echo $(gp url 8080 | sed 's/https/http/')/login/oauth2/code/google</code></pre><p>Enter the respective values as shown below which enables URI redirection and SSO for the app.</p><p><img src="data/img/Oauthcred1.png?raw=true" alt="ouath" /></p><p>Make sure you enter the above values correctly as shown and hit <code>CREATE</code> on bottom as shown.</p><p><img src="data/img/Oauthcred2.png?raw=true" alt="ouath" /></p><p>Now you're ready to fetch the credentials  by using the copy 'n paste icons on right as shown below.</p><p><img src="data/img/Oauthcred3.png?raw=true" alt="ouath" /></p><p>You can copy and paste them in the <code>.env</code> file as entries for Google <code>GOOGLE_CLIENT_ID</code> and <code>GOOGLE_CLIENT_SECRET</code>.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-run-unit-tests"> </a>8. Run Unit Tests</h2><p>The application is now set you should be able to interact with your DB. Let's demonstrate some capabilities.</p><p>✅ <strong>8a: Use CqlSession</strong></p><p>Interaction with Cassandra are implemented in Java through drivers and the main Class is <code>CqlSession</code>.</p><p>Higher level frameworks like Spring, Spring Data, or even quarkus will rely on this object so let's make sure it is part of your Spring context with a <code>@SpringBootTest</code>.</p><p>Let's change to the sub-directory from the terminal window as shown below.</p><pre><code>cd backend</code></pre><p>Let's run the first test with the following command.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test01_Connectivity</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>[..init...]Execute some Cql (CqlSession)+ Your Keyspace: sag_ecommerce+ Product Categories:ClothingCups and MugsTech AccessoriesWall DecorList Databases available in your Organization (AstraClient)+ Your OrganizationID: e195fbea-79b6-4d60-9291-063d8c9e6364+ Your Databases:workshops	 : id=8c98b922-aeb0-4435-a0d5-a2788e23dff8, region=eu-central-1sample_apps	 : id=c2d6bd3d-6112-47f6-9b66-b033e6174f0e, region=us-east-1sdk_tests	 : id=a52f5879-3476-42d2-b5c9-81b18fc6d103, region=us-east-1metrics	 : id=d7ded041-3cfb-4dd4-9957-e20003c3ebe2, region=us-east-1</code></pre><p>✅ <strong>8b: Working With Spring Data</strong></p><p>Spring Data allows Mapping <code>Object &lt;=&gt; Table</code> based on annotation at the java bean level. Then by convention CQL query will be executed under the hood.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test02_SpringData</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>Categories:- Clothing with children:[T-Shirts, Hoodies, Jackets]- Cups and Mugs with children:[Cups, Coffee Mugs, Travel Mugs]- Tech Accessories with children:[Mousepads, Wrist Rests, Laptop Covers]- Wall Decor with children:[Posters, Wall Art]</code></pre><p>✅ <strong>8c: Working With Rest Controller</strong></p><p><code>TestRestTemplate</code> is a neat way to test a web controller. The application will start on a random port with <code>@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)</code></p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test03_RestController</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>List Categories:ClothingCups and MugsTech AccessoriesWall Decor</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-start-the-application"> </a>9. Start the Application</h2><p>You can install the backend with the credentials using the following command</p><pre><code>cd /workspace/workshop-ecommerce-appmvn install -f backend/pom.xml -DskipTests</code></pre><p>✅ <strong>9a: Know your public URL</strong></p><p>The workshop application has opened with an ephemeral URL. To know the URL where your application endpoint will be exposed you can run the following command in the terminal after the build has completed. **Please note this URL and we will open this up in a new browser window if required later **.</p><pre lang="bash"><code>gp url 8080</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-02-url.png?raw=true" alt="gitpod" /></p><p>✅ <strong>9b: Check APIs are not available (yet)</strong></p><p>Run the following command in the Gitpod terminal window</p><pre><code>curl localhost:8080/api/v1/products/product/LS534S</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>curl: (7) Failed to connect to localhost port 8080: Connection refused</code></pre><p>Not to be overly concerned as we're going to be starting the application that will be served from the port.</p><p>✅ <strong>9c: Start the application</strong></p><p>To start the application, we've provided a very simple convenience script that can be run as below.</p><pre lang="bash"><code>./start.sh</code></pre><p>Pay attention to popups being blocked as shown below and allow the popups.</p><p><img src="data/img/PopupBlocked.png?raw=true" alt="gitpod" /></p><p>You may encounter the following at different steps and although this may not be applicable right away, the steps are included <strong>in advance</strong> and summarized here so that you can keep an eye out for it. Different paths and different environments might be slightly different although Gitpod levels the playing field a bit.</p><p>Your e-commerce application should be up and running.</p><p>✅ <strong>9d: Check APIs are now available</strong></p><p>Get back to Gitpod tab/window.</p><p>Leave the application running and open up another <code>shell</code> in the Gitpod terminal window by clicking on <code>+</code> and clicking on <code>bash</code> dropdown as shown below.</p><p><img src="data/img/gitpod-newbash1.png?raw=true" alt="gitpod" /></p><p>This will bring up a new <code>bash</code> shell as shown below.</p><p><img src="data/img/gitpod-newbash2.png?raw=true" alt="gitpod" /></p><p>Issue the following command in that shell as you did earlier.</p><pre><code>curl localhost:8080/api/v1/products/product/LS534S</code></pre><p>and you should see some output indicating that the API server is serving our ecommerce APIs.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-newbash3.png?raw=true" alt="gitpod" /></p><p>Try a few other APIs (<strong>Hint: Look for the <code>RestController</code> java files in the respective sub-directories.</strong>).</p><p>✅ <strong>9e: OPTIONAL - Open in Gitpod preview window</strong></p><p>This might be useful for troubleshooting if your application does not automatically open up a browser tab.</p><p>If you want, you can run the following command to open your application in the preview window of Gitpod (it's much easier to use the app running in browser, though).</p><pre><code>gp preview $(gp url 8080)</code></pre><p>As indicated in the output below it's a very <code>Simple Browser</code>.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-preview-1.png?raw=true" alt="gitpod" /></p><p>If your application is running in the preview window but you have difficulty accessing it from the browser pay attention to popups being blocked by the browser as explained before.</p><p>✅ <strong>9f: Get the Open API specification</strong></p><p>In the new shell window open the specification in the preview or browser with the following command</p><pre><code>gp preview $(gp url 8080)/swagger-ui/index.html</code></pre><p>The preview window looks like below. <strong>It might help to close all the tabs or open this URL in a browser by clicking on the <code>open in browser</code> tab on the top right as shown</strong>.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/swagger2.png?raw=true" alt="image" /></p><p>Here's how it looks in the browser tab.</p><p><img src="data/img/swagger.png?raw=true" alt="image" /></p><p>This is the docs for the open APIs that enables the frontend or any other program to obtain the data and manipulate it with REST-based CRUD operations.</p><p>The complete app is running in the browser as shown below.</p><p><img src="data/img/splash.png?raw=true" alt="image" /></p><p>✅ <strong>9g: Use your social login</strong></p><p>Hit login as shown below</p><p><img src="data/img/Oauthlogin0.png?raw=true" alt="login" /></p><p>You should be presented with the Google SSO Login option. Click on the icon as shown below.</p><p><img src="data/img/Oauthlogin1.png?raw=true" alt="login" /></p><p>Pick the Google user account and proceed to login as you would with Google.</p><p><img src="data/img/Oauthlogin2.png?raw=true" alt="login" /></p><p>If all the values are wired properly you should see the following screen with the icon above showing that the authentication worked as below and the <code>Logout</code> button now available.</p><p><img src="data/img/Oauthauthenticated.png?raw=true" alt="ouath" /></p><p>and voila, just like that we are done setting up user profile with Google. We can implement Github and other social logins similarly.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><p>✅ <strong>9h: Process your order(s)</strong></p><p>Did you put items in your cart and check out?  You will likely have an order waiting in your &quot;pending-orders&quot; topic.  To simulate moving the orders between topics, a small Order Processor was created.  To build and run:</p><pre><code>source .envcd orderProcessormvn clean install</code></pre><p>Once that process completes, have a look at the <code>target/</code> directory.  You should see a JAR named <code>ecom-0.0.1-SNAPSHOT-spring-boot.jar</code>.  To process an order on the &quot;pending-orders&quot; topic, you need to have it &quot;picked.&quot;  To simulate a picking process, try this:</p><pre><code>java -jar target/ecom-0.0.1-SNAPSHOT-spring-boot.jar pick</code></pre><p>If an order is present, you should see the order JSON get processed and moved to the next topic:</p><pre><code>{&quot;cartId&quot;:&quot;b8a5bd07-2337-44de-8890-582e88e29754&quot;,&quot;cartName&quot;:&quot;b8a5bd07-2337-44de-8890-582e88e29754&quot;,&quot;orderId&quot;:&quot;e8ecd3b0-498b-11ed-b5a7-fbd1f5143654&quot;,&quot;userId&quot;:&quot;f1dbd2c0-bda4-4ccc-93dd-4aecd78758f5&quot;,&quot;productList&quot;:[{&quot;productId&quot;:&quot;DSS821XL&quot;,&quot;productName&quot;:&quot;DataStax Gray Track Jacket&quot;,&quot;productQty&quot;:1,&quot;productPrice&quot;:44.99},{&quot;productId&quot;:&quot;APC30XL&quot;,&quot;productName&quot;:&quot;Apache Cassandra 3.0 Contributor T-Shirt&quot;,&quot;productQty&quot;:1,&quot;productPrice&quot;:15.99}],&quot;orderStatus&quot;:&quot;PENDING&quot;,&quot;orderTimestamp&quot;:&quot;Oct 11, 2022, 5:41:17 PM&quot;,&quot;orderSubtotal&quot;:60.98,&quot;orderShippingHandling&quot;:4,&quot;orderTax&quot;:3.05,&quot;orderTotal&quot;:68.03,&quot;shippingAddress&quot;:{&quot;street&quot;:&quot;123 Limon Gala Rd.&quot;,&quot;city&quot;:&quot;Maple Grove&quot;,&quot;stateProvince&quot;:&quot;Minnesota&quot;,&quot;postalCode&quot;:&quot;55369&quot;,&quot;country&quot;:&quot;United States&quot;}}Pushed order e8ecd3b0-498b-11ed-b5a7-fbd1f5143654 to ecommerce-aaron/default/picked-orders</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h1><a class="anchor" aria-hidden="true" id="done"> </a>Done?</h1><p>Congratulations: you made it to the end of today's workshop. You will notice that the application is still incomplete as we're evolving it. More building to follow!!!</p><p><img src="data/img/build-an-ecommerce-app.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-ecommerce-app
Getting astra.json for datastaxdevs/workshop-spring-stargate at 277
No astra.json for datastaxdevs/workshop-spring-stargate at 281
No astrajson for Stargate Wheel App (Spring Data)
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="img-src-https-github-com-datastax-academy-astraportia-blob-master-0-materials-ico-jpg-raw-true-alt-ok-workshop-spring-data-cassandra-and-stargate"> </a><img src="https://github.com/DataStax-Academy/AstraPortia/blob/master/0_materials/ico.jpg?raw=true" alt="ok" /> Workshop Spring Data Cassandra and Stargate</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-astra-db-instance"> </a>1. Create Astra DB Instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-table-and-insert-data"> </a>2. Create Table and insert data</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-load-dataset-as-a-csv"> </a>3. Load dataSet as a CSV</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-astra-token"> </a>4. Create Astra Token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-launch-gitpod"> </a>5. Launch Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-know-your-gitpod"> </a>6. Know your gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-setup-your-application"> </a>7. Setup your application</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-some-unit-tests"> </a>8. Run some unit tests</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-run-the-application"> </a>9. Run the application</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-using-stargate-rest-api"> </a>10. Using Stargate Rest API</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-using-stargate-document-api"> </a>11. Using Stargate Document API</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="12-walkthrough-sdk"> </a>12. Walkthrough SDK</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="14-the-end"> </a>14. The END</h2>
HTML FOR datastaxdevs-workshop-spring-stargate<h1><a class="anchor" aria-hidden="true" id="img-src-https-github-com-datastax-academy-astraportia-blob-master-0-materials-ico-jpg-raw-true-alt-ok-workshop-spring-data-cassandra-and-stargate"> </a><img src="https://github.com/DataStax-Academy/AstraPortia/blob/master/0_materials/ico.jpg?raw=true" alt="ok" /> Workshop Spring Data Cassandra and Stargate</h1><p><a href="https://gitpod.io/#https://github.com/DataStax-Academy/workshop-spring-data-cassandra"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Today we showcase an application using <strong>Apache Cassandra™</strong> as a backend implemented with <strong>Spring Boot</strong>, <strong>Spring Data</strong>, the <strong><a href="http://stargate.io">Stargate</a></strong> and related SDK.</p><p><img src="images/tutorials/splash.png?raw=true" alt="SplashScreen" /></p><p>Which better business domain than the TV Show <strong>Stargate</strong> hoping it will not bring any confusion ^^.</p><p><img src="images/tutorials/pic-travel.png?raw=true" alt="SplashScreen" /></p><p>ℹ️ <strong>Frequently asked questions</strong></p><ul><li><em>Can I run the workshop on my computer?</em><blockquote><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need <em>java jdk11+</em>, <em>Maven</em>, an IDE like <em>VSCode, IntelliJ, Eclipse, Spring STS</em>. You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule.</p></blockquote></li></ul><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://www.youtube.com/watch?v=mL9oDZPJfwk">Workshop video</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-create-astra-db-instance">Create Astra DB Instance</a></li><li><a href="#2-create-table-and-insert-data">Create Tables and insert data</a></li><li><a href="#3-load-dataset-as-a-csv">Load dataSet as a CSV</a></li><li><a href="#4-create-astra-token">Create Astra Token</a></li><li><a href="#5-launch-gitpod">Launch Gitpod</a></li><li><a href="#6-know-your-gitpod">Know your Gitpod</a></li><li><a href="#7-setup-your-application">Setup your Application</a></li><li><a href="#8-run-some-unit-tests">Run Unit tests</a></li><li><a href="#9-run-the-application">Run the Application</a></li><li><a href="#10-using-stargate-rest-api">Using Stargate Rest API</a></li><li><a href="#11-using-stargate-document-api">Using Stargate Document API</a></li><li><a href="#12-walkthrough-sdk">Walkthrough Stargate SDK</a></li><li><a href="#13-homeworks">Homeworks</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-create-astra-db-instance"> </a>1. Create Astra DB Instance</h2><p><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.</p><p>✅ <strong>Step 1a. If you do have an account yet register and sign In to Astra DB this is FREE and NO CREDIT CARD asked</strong> <a href="https://astra.dev/9-2">https://astra.datastax.com</a>: You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p>✅ <strong>Step 1b. Create a &quot;pay as you go&quot; plan</strong></p><p>Follow this <a href="https://docs.datastax.com/en/astra/docs/creating-your-astra-database.html">guide</a>, to set up a pay as you go database with a free $25 monthly credit. You will find below recommended values to enter:</p><ul><li><p><strong>For the database name</strong> - <code>workshops</code></p></li><li><p><strong>For the keyspace name</strong> - <code>stargate</code></p></li></ul><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><ul><li><p><strong>For provider and region</strong>: Choose a provider (GCP, Azure or AWS) and then the related region is where your database will reside physically (choose one close to you or your users).</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</p></li></ul><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="images/tutorials/db-pending.png?raw=true" alt="my-pic" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><strong>👁️ Walkthrough</strong></p><p><img src="images/tutorials/astra-create-db.gif?raw=true" alt="image" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-table-and-insert-data"> </a>2. Create Table and insert data</h2><p>Once the database is created we want to create the tables to insert Data.</p><p>✅ <strong>Step2a: Locate and open CQLConsole</strong></p><ul><li><p>Click the name of you database <code>workshops</code> in the panel on the left</p></li><li><p>Locate the tab <code>CQL Console</code>, the prompt will open, there is no need to enter credentials here.</p></li></ul><p><img src="images/tutorials/cqlshconsole.png?raw=true" alt="image" /></p><p>✅ <strong>Step 2b: Navigate to your keyspace</strong></p><blockquote><p>To ease the copy-paste you can use the small clipboard icons as show in the walkthrough. If the CTL+C and CTRL+V does not work in your browser you can also <em>right-click</em> and then select <em>paste</em>.</p></blockquote><ul><li>Enter the following statement in CQL console to list existing keyspaces, you should see the one you created with the database.</li></ul><pre lang="sql"><code>describe keyspaces;</code></pre><ul><li>Enter the following statement in CQL console to select your keyspace:</li></ul><pre lang="sql"><code>use stargate;</code></pre><p>✅ <strong>Step 2c: Create Entities</strong></p><ul><li>Enter the following statement in CQL console to Create a table <code>chevrons</code> with the following fields</li></ul><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS stargate.chevrons(   area text,   code int ,   name text,   picture text,   PRIMARY KEY ((area), code)) WITH CLUSTERING ORDER BY (code ASC);</code></pre><p>✅ <strong>Step 2d: Populate entries</strong></p><ul><li>Enter the following statement in CqlSH console to enter the different chevrons in the database</li></ul><pre lang="sql"><code>INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 1, 'Earth', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/001glyph-earth.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 2, 'Crater', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/002glyph-crater.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 3, 'Virgo', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/003glyph-virgo.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 4, 'Bootes', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/004glyph-bootes.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 5, 'Centaurus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/005glyph-centarus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 6, 'Libra', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/006glyph-libra.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 7, 'Serpenscaput', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/007glyph-serpenscaput.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 8, 'Norma', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/008glyph-norma.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 9, 'Scorpio', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/009glyph-scorpio.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 10, 'Cra', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/010glyph-cra.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 11, 'Scutum', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/011glyph-scutum.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 12, 'Sagitarus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/012glyph-sagittarius.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 13, 'Aquila', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/013glyph-aquila.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 14, 'Mic', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/014glyph-mic.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 15, 'Capricorn', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/015glyph-capricorn.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 16, 'Piscesaustrinus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/016glyph-piscesaustrinus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 17, 'Equuleus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/017glyph-equuleus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 18, 'Aquarius', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/018glyph-aquarius.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 19, 'Pegasus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/019glyph-pegasus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 20, 'Sculptor', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/020glyph-sculptor.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 21, 'Pisces', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/021glyph-pisces.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 22, 'Andromeda', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/022glyph-andromeda.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 23, 'Triangulum', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/023glyph-triangulum.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 24, 'Aries', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/024glyph-aries.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 25, 'Perseus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/025glyph-perseus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 26, 'Cetus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/026glyph-cetus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 27, 'Taurus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/027glyph-taurus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 28, 'Auriga', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/028glyph-auriga.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 29, 'Eridanus', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/029glyph-eridanus.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 30, 'Orion', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/030glyph-orion.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 31, 'Canisminor', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/031glyph-canisminor.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 32, 'Monoceros', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/032glyph-monoceros.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 33, 'Gemini', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/033glyph-gemini.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 34, 'Hydra', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/034glyph-hydra.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 35, 'Lynx', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/035glyph-lynx.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 36, 'Cancer', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/036glyph-cancer.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 37, 'Sextans', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/037glyph-sextans.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 38, 'Leominor', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/038glyph-leominor.jpg?raw=true');INSERT INTO chevrons (area, code, name, picture) VALUES ('Milky Way', 39, 'Leo', 'https://github.com/datastaxdevs/workshop-spring-stargate/blob/main/images/glyphs/039glyph-leo.jpg?raw=true');</code></pre><p>You can notice than those are real images, thanks to <a href="http://stargate-sg1-solutions.com/wiki/Main_Page">StargateWiki</a>.</p><p><img src="images/glyphs/001glyph-earth.jpg?raw=true" alt="#" /><img src="images/glyphs/002glyph-crater.jpg?raw=true" alt="#" /><img src="images/glyphs/003glyph-virgo.jpg?raw=true" alt="#" /><img src="images/glyphs/004glyph-bootes.jpg?raw=true" alt="#" />...</p><p>✅ <strong>Step 2e: Show the results</strong></p><p>We have inserted 39 symbols of the <code>Milky Way</code> galaxy with <code>INSERT</code> statements but we could have used other solutions like <a href="https://github.com/datastax/dsbulk">dsbulk</a>, Spark, Apis or Astra Data Loader. We will show some of them to you later.</p><ul><li>Validate the number of chevrons</li></ul><pre lang="sql"><code>select count(*) from stargate.chevrons;</code></pre><ul><li>Show the chevrons known for the <code>Milky Way</code> galaxy</li></ul><pre lang="sql"><code>select code,name from stargate.chevrons where area='Milky Way';</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-load-dataset-as-a-csv"> </a>3. Load dataSet as a CSV</h2><p>Inserting a couple of values with CQL console is great but quite verbose, correct? We created the table and inserted a few values.</p><p>In Astra DB there is a tool to speed up that process and both create and import data from a CSV, instead.</p><p>✅ <strong>Step 3a: Download the dataset</strong></p><p>To download the DATASET, <strong>right-click</strong> <em>(or CTRL + Click to open in new tab)</em> the button below and download the target file on your machine.</p><blockquote><p><em>If the file opens in the browser save it with the name <code>destinations.csv</code>. The name is important as the filename will be the table name.</em></p></blockquote><p align="left"><a href="https://raw.githubusercontent.com/datastaxdevs/workshop-spring-stargate/main/dataset/destinations.csv"> <img src="https://dabuttonfactory.com/button.png?t=Download Dataset&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798" /></a></p><p>✅ <strong>Step 3b: Open Astra Data Loader</strong></p><p>Locate the <code>Upload Data</code> button to open the Data Loader.</p><p><img src="images/tutorials/dataloader-01-button.png" alt="#" /></p><p>✅ <strong>Step 3c: Upload the dataset</strong></p><p>Click on the area <em>Drag n drop a single file</em> and look for the file <code>destinations.csv</code> on your machine, this file has been downloaded in step <strong>3a</strong>.</p><p><img src="images/tutorials/dataloader-02-upload.png" alt="#" /></p><p>Once the file has been uploaded notice the <code>Upload Successful</code> message in green. You can now click <code>NEXT</code></p><p>✅ <strong>Step 3d: Define the target table</strong></p><ul><li>Locate the field Table Name and make sure it is set to <code>destinations</code></li></ul><p><img src="images/tutorials/dataloader-03-parsed.png" alt="#" /></p><p>Scroll down to show the the <strong>Keys and Clustering</strong> part of the screen and enter the following</p><ul><li><p>use the dropdown <code>galaxy</code> which will be our partition key (assuming there are less than 100,000 stargates in our galaxy) and a lot of galaxy ^^.</p></li><li><p><code>name</code> will be our clustering key in order to ensure a unique name of the planet in the galaxy.</p></li><li><p>You can now click <code>NEXT</code></p></li></ul><p><img src="images/tutorials/dataloader-04-datamodel.png" alt="#" /></p><p>✅ <strong>Step 3e: Define the target keyspace</strong></p><ul><li><p>In the <strong>Target Keyspace</strong> combo box find and select our keyspace <code>stargate</code></p></li><li><p>Then click <code>NEXT</code></p></li></ul><p><img src="images/tutorials/dataloader-05-keyspace.png" alt="#" /></p><p>✅ <strong>Step 3f: Show Data</strong></p><p>After a few seconds (about 30s),you will get an email informing you that the batch has been scheduled.</p><p><img src="images/tutorials/dataloader-06-mail1.png" alt="#" /></p><p>As you can see the operation here is asynchronous. About a minute later your will get another email to tell you the data has been inserted.</p><p><img src="images/tutorials/dataloader-07-mail2.png" alt="#" /></p><p>Using the CQL Console enter the CQL command that was suggested in the email as below.</p><pre lang="sql"><code>SELECT * FROM stargate.destinations LIMIT 10;</code></pre><p><strong>👁️ Expected output</strong><img src="images/tutorials/dataloader-08-data.png" alt="#" /></p><p>❓ <strong>QUIZ:</strong> Try to find by the correct CQL statement to retrieve the coordinates of planet Chulak in our galaxy.</p><details><summary><b>Click to view Solution</b></summary><p><pre lang="sql"><code>SELECT chevron1,chevron2,chevron3,chevron4,chevron5,chevron6 FROM stargate.destinations WHERE galaxy='Milky Way' and name='Chulak';</code></pre></p></details><p>Yes now we do have the cartouche (a carved tablet or drawing representing a scroll with rolled-up ends) - <code>9,2,23,16,37,20</code> (<a href="http://stargate-sg1-solutions.com/wiki/Chulak">You can check that we are correct</a>)</p><p><img src="images/glyphs/009glyph-scorpio.jpg?raw=true" alt="#" /><img src="images/glyphs/002glyph-crater.jpg?raw=true" alt="#" /><img src="images/glyphs/023glyph-triangulum.jpg?raw=true" alt="#" /><img src="images/glyphs/016glyph-piscesaustrinus.jpg?raw=true" alt="#" /><img src="images/glyphs/037glyph-sextans.jpg?raw=true" alt="#" /><img src="images/glyphs/020glyph-sculptor.jpg?raw=true" alt="#" /><img src="images/glyphs/001glyph-earth.jpg?raw=true" alt="#" /></p><p>🎉🎉 <strong>Congratulations</strong> we do have both chevrons and coordinates of our destination.</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-create-astra-token"> </a>4. Create Astra Token</h2><p>However, to save <em>Teal'c</em> from <em>Apophysis</em> we still need to create a <strong>token</strong> that we will use as our credentials.</p><p>✅ <strong>Step 4a: Generate Token</strong></p><p>Following the <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Manage Application Tokens docs</a> create a token with <code>Database Admnistrator</code> roles.</p><ul><li><p>Go the <code>Organization Settings</code></p></li><li><p>Go to <code>Token Management</code></p></li><li><p>Pick the role <code>Database Admnistrator</code> on the select box</p></li><li><p>Click Generate token</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><img src="images/tutorials/astra-create-token.gif?raw=true" alt="image" /></p><p>This is what the token page looks like. You can now download the values as a CSV. We will need those values but you can also keep this window open for use later.</p><p><img src="images/tutorials/astra-token.png?raw=true" alt="image" /></p><p>Notice the clipboard icon at the end of each value.</p><ul><li><p><code>clientId:</code> We will use it as a <em>username</em> to contact Cassandra</p></li><li><p><code>clientSecret:</code> We will use it as a <em>password</em> to contact Cassandra</p></li><li><p><code>appToken:</code> We will use it as a api token Key to interact with APIs.</p></li></ul><p>To know more about roles of each token you can have a look to <a href="https://www.youtube.com/watch?v=nRqu44W-bMU">this video.</a></p><p><strong>Note: Make sure you don't close the window accidentally or otherwise - if you close this window before you copy the values, the application token is lost forever. They won't be available later for security reasons.</strong></p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>We are now set with the database and credentials. Let's start coding with Spring !</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-launch-gitpod"> </a>5. Launch Gitpod</h2><p><a href="https://www.gitpod.io/">Gitpod</a> is an IDE 100% online based on <a href="https://github.com/gitpod-io/vscode/blob/gp-code/LICENSE.txt?lang=en-US">VS Code</a>. To initialize your environment simply click on the button below <em>(CTRL + Click to open in new tab)</em> You will be asked for you github account, as needed.</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-spring-stargate"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><strong>👁️ Expected output</strong></p><p><em>The screenshot may be slightly different based on your default skin and a few edits in the read me.</em></p><p><img src="images/tutorials/gitpod-01-home.png?raw=true" alt="gitpod" /></p><p><strong>That's it.</strong> Gitpod provides all tools we will need today including <code>Maven</code> and exporting port <code>8080</code>. At initialization of the workspace we schedule a <code>mvn clean install</code> to download dependencies.</p><p>Also you may have noticed that a build is happening - even before we get started. The sample project already exists and loading the developer enviroment triggers a build to download all the maven dependencies so you don't have to.</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-know-your-gitpod"> </a>6. Know your gitpod</h2><p>✅ <strong>Step 6a: Know your public URL</strong></p><p>The workshop application has opened with an ephemeral URL. To know the URL where your application endpoint will be exposed you can run the following command in the terminal after the build has completed.</p><pre lang="bash"><code>gp url 8080</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-02-url.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 6b: Build the project</strong></p><ul><li>Using maven build the project and download its dependencies.</li></ul><pre lang="bash"><code>cd /workspace/workshop-spring-stargate/stargate-demo &amp;&amp; mvn clean package install -Dmaven.test.skip=true</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-04-build.png?raw=true" alt="gitpod" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-setup-your-application"> </a>7. Setup your application</h2><p>To run the application you need to provide the credentials and identifier to the application. you will have to provide 6 values in total as shown below</p><p><img src="images/tutorials/gitpod-05-appyml.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 7a: Enter 3 values from the token</strong></p><ul><li><p>Open the file <code>stargate-demo/src/main/resources/application.yml</code> as show below.</p></li><li><p>Replace <code>client-id</code>, <code>clientSecret</code>, <code>application-token</code> with values shown on the Astra token screen or picking the values from the CSV token file your dowloaded before including the AstraCS: part of the token.</p></li></ul><blockquote><p>To ease the copy-paste you can use the small clipboard icons as show in the walkthrough.</p></blockquote><p>✅ <strong>Step 7b: Enter 3 values related to your DB</strong></p><ul><li><p>In Astra DB go back to home page by clicking the logo</p></li><li><p>Select you database <code>workshops</code> in the left panel and then copy values for <code>cloud-region</code> and <code>database-id</code> (clusterID) from the details page.</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><img src="images/tutorials/copy-credentials.gif?raw=true" alt="gitpod" /></p><p>TADA your application is now configured we can finally play with some code.</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-run-some-unit-tests"> </a>8. Run some unit tests</h2><p>The application is now set you should be able to interact with your DB. Let's demonstrate some capabilities.</p><p>✅ <strong>Step 8a: Use CqlSession</strong></p><p>Interaction with Cassandra are implemented in Java through drivers and the main Class is <code>CqlSession</code>.</p><p>Higher level frameworks like Spring, Spring Data, or even quarkus will rely on this object so let's make sure it is part of your Spring context with a <code>@SpringBootTest</code>.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.demo.stargate.Ex1_UseCqlSessionTest</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>[..]+ Code=38, name='Leominor',+ Code=39, name='Leo',[OK] - Test Successfully you ROCK ![INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.42 s - in com.datastax.demo.stargate.Ex1_UseCqlSessionTest18:23:34.167 INFO  com.datastax.stargate.sdk.StargateClient      : Closing CqlSession.[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0-----------------------------------------------------------------------[INFO] BUILD SUCCESS-----------------------------------------------------------------------[INFO] Total time:  13.985 s[INFO] Finished at: 2021-04-27T18:23:34+02:00------------------------------------------------------------------------</code></pre><p>✅ <strong>Step 8b: Working With Spring Data</strong></p><p>Spring Data allows Mapping <code>Object &lt;=&gt; Table</code> based on annotation at the java bean level. Then by convention CQL query will be executed under the hood.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.demo.stargate.Ex2_UseSpringDataChevronTest</code></pre><p>This test perform 3 operations:</p><ul><li>Find all Chevrons in the table</li><li>Find a chevron by its primary key</li><li>Find all chevrons in our galaxy (partition key)</li></ul><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>[...] [OK]  - Test #2.1 Successful - you ROCK ![...][OK]  - Test #2.2 Successful - you ROCK ![...][OK]  - Test #2.3 Successful - you ROCK !</code></pre><p>We can also query the destination table to find coordinates:</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.demo.stargate.Ex3_UseSpringDataDestinationTest</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-run-the-application"> </a>9. Run the application</h2><p>✅ <strong>Step 9a: Start the application</strong></p><p>Navigate to the folder and simply start the application with the following command.</p><pre lang="bash"><code>cd /workspace/workshop-spring-stargate/stargate-demomvn spring-boot:run</code></pre><p>Your application is now started you should have a peek at the logs here</p><pre lang="bash"><code>Picked up JAVA_TOOL_OPTIONS: -Xmx1879m  _________ __                             __  /   _____//  |______ _______  _________ _/  |_  ____  \_____  \\   __\__  \\_  __ \/ ___\__  \\   __\/ __ \  /        \|  |  / __ \|  | \/ /_/  &gt; __ \|  | \  ___/ /_______  /|__| (____  /__|  \___  (____  /__|  \___  &gt;        \/           \/     /_____/     \/          \/ ________ \______ \   ____   _____   ____  |    |  \_/ __ \ /     \ /  _ \  |    `   \  ___/|  Y Y  (  &lt;_&gt; ) /_______  /\___  &gt;__|_|  /\____/         \/     \/      \/ DataStax Developer Advocate teamStarting StargateDemoApplication using Java 11.0.10 onNo active profile set, falling back to default profiles: default+ Load Environment Variables+ Load Builder parameters+ HttpClient Initialized+ API(s) Devops is [ENABLED]+ Load Secure Connect: /home/gitpod/.astra/secure_connect_bundle_58a2e502-fccf-4524-ac22-e59277e63edc.zip+ CQL Credentials: ${clientId}${/clientSecret}+ API(s) Document is [ENABLED] https://58a2e502-fccf-4524-ac22-e59277e63edc-us-east-1.apps.astra.datastax.com/api/rest+ API(s) REST Data is [ENABLED] https://58a2e502-fccf-4524-ac22-e59277e63edc-us-east-1.apps.astra.datastax.com/api/rest+ API(s) GraphQL [ENABLED] https://58a2e502-fccf-4524-ac22-e59277e63edc-us-east-1.apps.astra.datastax.com/api/graphql+ API(s) Cql is [ENABLED]+ Keyspace stargate[StargateClient] has been initialized[AstraClient] has been initialized.[THYMELEAF][restartedMain] Template Mode 'XHTML' is deprecated. Using Template Mode 'HTML' instead.Started StargateDemoApplication in 7.883 seconds (JVM running for 8.497)</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-06-start.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 9b: Open a new terminal in gitpod</strong></p><p>The application is running on our first terminal. To enter new commands please create a new terminal in gitpod.</p><p><img src="images/tutorials/new-terminal.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 9c: Open the application</strong></p><p>Are you ready? Now is the time to play the demo.</p><p>It is better to use a dedicated TAB in the browser to open the application in full screen. Use this command to show the URL.</p><pre lang="bash"><code>gp url 8080</code></pre><p>If you have the link in the terminal gitpod, it's a lot easier to create a new tab by clicking <code>Follow link</code>.</p><p><img src="images/tutorials/follow-link.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 9d: Play the demo</strong></p><ul><li>Click the Stargate logo, the music starts if it did not start automatically</li></ul><p><img src="images/tutorials/demo-home.png?raw=true" alt="SplashScreen" /></p><ul><li><p>Click on the planet name you want to reach here <code>CHULAK</code> the coordinates are not entered in the Stargate.</p></li><li><p>Click on one orange <code>chrevron</code> in the order to make the wheel start spinning. Click the chevrons one after the other to simulate the dialing. As soon as all chevrons are engaged the vortex will open.</p></li></ul><p><img src="images/tutorials/demo-home-2.png?raw=true" alt="SplashScreen" /></p><p>Activate the rest of the chevrons to open the stargate...Buckle up !</p><p><img src="images/tutorials/demo-home-3.png?raw=true" alt="SplashScreen" /></p><p>Congratulations you Played the demo !</p><p><img src="images/demo.gif?raw=true" alt="demo" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-using-stargate-rest-api"> </a>10. Using Stargate Rest API</h2><p>The gateway <a href="stargate.io">Stargate</a> allows you to execute the operations through a REST API. Let's list the chevrons.</p><p>✅ <strong>Step 10a: Open swagger</strong></p><p>In a terminal that is not running the demo enter the command in order to open the swagger UI from Astra (URL has been built based on the values you entered in <code>application.yaml</code>)</p><pre lang="bash"><code>/workspace/workshop-spring-stargate/open-swagger.sh</code></pre><p><strong>👁️ Script output</strong></p><p><img src="images/tutorials/open-swagger.png?raw=true" alt="SplashScreen" /></p><p><strong>👁️ Expected output</strong></p><p><img src="images/tutorials/gitpod-07-swagger.png?raw=true" alt="gitpod" /></p><p>✅ <strong>Step 10b: List Chevrons</strong></p><ul><li>In the Swagger UI page locate the blue line <code>/v1/keyspaces/{keyspaceName}/tables/{tableName}/rows</code> in the block <code>DATA</code></li></ul><p><img src="images/tutorials/restapi-retrieve-rows.png?raw=true" alt="gitpod" /></p><ul><li><p>Click the button <code>Try it Out</code> on the top right hand corner.</p></li><li><p>Enter the following values</p></li></ul><table><thead><tr><th>FIELD</th><th>VALUE</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><code>AstraCS....</code> (<em>your token</em>)</td></tr><tr><td><strong>keyspaceName</strong></td><td><code>stargate</code></td></tr><tr><td><strong>tableName</strong></td><td><code>chevrons</code></td></tr><tr><td><strong>pageSize</strong></td><td><em>let it blank</em></td></tr><tr><td><strong>pageState</strong></td><td><em>let it blank</em></td></tr></tbody></table><ul><li>Click the button <code>Execute</code></li></ul><p><strong>Expected output</strong></p><p><img src="images/tutorials/restapi-retrieve-rows-2.png?raw=true" alt="gitpod" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-using-stargate-document-api"> </a>11. Using Stargate Document API</h2><p>The REST API covers the same features as the CQL interface and you need to know your schema.</p><p>Stargate also provide a way to insert <strong>schemaless</strong> JSON Document as you would do with a document oriented datbase, you are welcomed.</p><p>✅ <strong>Step 11a: Create a document</strong></p><ul><li><p>Locate <code> ​/v2​/namespaces​/{namespace-id}​/collections​/{collection-id} Create a new document</code> in the block <code>DOCUMENT</code></p></li><li><p>Click the button <code>Try it Out</code> on the top right hand corner.</p></li><li><p>Enter the following values</p></li></ul><table><thead><tr><th>FIELD</th><th>VALUE</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><code>AstraCS....</code> (<em>your token</em>)</td></tr><tr><td><strong>namespace-id</strong></td><td><code>stargate</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>sampledoc</code></td></tr><tr><td><strong>pageSize</strong></td><td><em>let it blank</em></td></tr><tr><td><strong>body</strong></td><td></td></tr></tbody></table><pre lang="json"><code>{  &quot;videoid&quot;: &quot;e466f561-4ea4-4eb7-8dcc-126e0fbfd573&quot;,  &quot;email&quot;: &quot;clunven@sample.com&quot;,  &quot;title&quot;: &quot;A video&quot;,  &quot;upload&quot;: &quot;2020-02-26 15:09:22 +00:00&quot;,  &quot;url&quot;: &quot;http://google.fr&quot;,  &quot;frames&quot;: [1, 2, 3, 4],  &quot;tags&quot;: [&quot;cassandra&quot;, &quot;accelerate&quot;, &quot;2020&quot;],  &quot;formats&quot;: {    &quot;mp4&quot;: { &quot;width&quot;: 1, &quot;height&quot;: 1 },    &quot;ogg&quot;: { &quot;width&quot;: 1, &quot;height&quot;: 1 }  }}</code></pre><p><strong>Expected output</strong></p><p><img src="images/tutorials/docapi-createdoc.png?raw=true" alt="gitpod" /></p><ul><li>Click the button <code>Execute</code></li></ul><p>The api will create a new table for the collection and insert the JSON document. A new unique identifier is generated and returned as <code>documentId</code>.</p><p><strong>Expected output</strong><img src="images/tutorials/docapi-createdoc-2.png?raw=true" alt="gitpod" /></p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="12-walkthrough-sdk"> </a>12. Walkthrough SDK</h2><p>Well you had an overview about the APIs exposed by Stargate. There is also a <a href="https://docs.datastax.com/en/astra/docs/using-the-astra-graphql-api.html">GraphQL API if you want to know more</a>.</p><p>A SDK or <em>Software Developement Kit</em> is used here to ease the usage of each API. It is also the one creating a bean <code>CqlSession</code> that will be used with Spring Data Cassandra as is.</p><p>The Astra SDK has been installed with a single starter dependency. More information is <a href="https://github.com/datastax/astra-sdk-java/wiki">here</a></p><pre lang="xml"><code>&lt;dependency&gt;  &lt;groupId&gt;com.datastax.astra&lt;/groupId&gt;  &lt;artifactId&gt;astra-spring-boot-starter&lt;/artifactId&gt;  &lt;version&gt;0.1.14&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>✅ <strong>Step 12a: Using devops API with SDK</strong></p><p>In a gitpod terminal use Maven to execute a unit test illustrating the usage of the <code>Devops API</code> from the SDK.</p><pre lang="bash"><code>cd /workspace/workshop-spring-stargate/stargate-demomvn test -Dtest=com.datastax.demo.stargate.Ex4_SdkDevopsApi</code></pre><p><strong>Expected Output</strong></p><pre lang="bash"><code>13:48:16.753 INFO  com.datastax.demo.stargate.Ex4_SdkDevopsApi   : Started Ex4_SdkDevopsApi in 6.184 seconds (JVM running for 7.136)Database 'workshops'+ id=3c7fc647-c03b-4a0c-aa6b-a00dd677ac53+ region=eu-central-1+ keyspace=stargate</code></pre><p>✅ <strong>Step 12b: Using REST API with SDK</strong></p><p>In a gitpod terminal use Maven to execute a unit test illustrating the usage of the <code>REST API</code> from the SDK.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.demo.stargate.Ex5_SdkRestApi</code></pre><p><strong>Expected Output</strong></p><pre lang="bash"><code>13:47:38.123 INFO  com.datastax.demo.stargate.Ex5_SdkRestApi     : Started Ex5_SdkRestApi in 6.375 seconds (JVM running for 7.375)EarthCraterVirgoBootesCentaurusLibraSerpenscaputNormaScorpioCraScutumSagitarusAquilaMicCapricornPiscesaustrinusEquuleusAquariusPegasusSculptor13:47:41.173 INFO  com.datastax.stargate.sdk.StargateClient      : Closing CqlSession.</code></pre><p>✅ <strong>Step 12c: Using DOC API with SDK</strong></p><p>In a gitpod terminal use Maven to execute a unit test illustrating the usage of the <code>DOC API</code> from the SDK.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.demo.stargate.Ex6_SdkDocApi</code></pre><p><strong>Expected Output</strong></p><pre lang="bash"><code>13:46:43.360 INFO  com.datastax.demo.stargate.Ex6_SdkDocApi      : Started Ex6_SdkDocApi in 5.935 seconds (JVM running for 6.887)Document:+ id=063d3fe9-8ec0-4b9b-887a-90da52ee0f51+ email= clunven@sample.com</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2><img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described above. Make screenshots alongside the steps</li><li>Learn more about spring in the <a href="https://www.datastax.com/dev/spring">course</a> and complete scenario <code>Build a Spring Boot REST Service</code> at the bottom of the page and make a screenshot of the &quot;congratulations&quot; page.</li><li>Submit your homework <a href="https://github.com/datastaxdevs/workshop-spring-stargate/issues/new?assignees=HadesArchitect&amp;labels=homework%2Cpending&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a></li></ol><p>That's it, you are done! Expect an email next week!</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="14-the-end"> </a>14. The END</h2><p>Congratulations, your made it to the END of the show.</p><p><strong>💚 Share the love</strong></p><p><a href="https://www.facebook.com/sharer/sharer.php?u=https://github.com/datastaxdevs/workshop-spring-stargate"><img src="images/tutorials/share-facebook.png"/></a></p><p><a href="https://twitter.com/intent/tweet?url=https://github.com/datastaxdevs/workshop-spring-stargate&text=I attended a wonderful workshop today , thank you @Datastax, @clunven, @sonicdmg"><img src="images/tutorials//share-twitter.png"/></a></p><p><a href="https://www.linkedin.com/shareArticle?mini=true&url=https://github.com/datastaxdevs/workshop-spring-stargate&title=&summary=I attended a wonderful workshop today , thank you @Datastax, @clunven, @sonicdmg&source="><img src="images/tutorials/share-linkedin.png"/></a></p><p><strong>🧑🏻‍🤝‍🧑🏽 Let's get in touch</strong></p><table><thead><tr><th><img src="images/tutorials/david.png" alt="B" /></th><th><img src="images/tutorials/cedrick.png" alt="B" /></th></tr></thead><tbody><tr><td>David Gilardi <br><a href="https://github.com/SonicDMG">@SonicDMG</a></td><td>Cedrick Lunven<br><a href="https://github.com/clun">@clun</a></td></tr></tbody></table><hr /><p><a href=""><img src="images/tutorials/thankyou.gif" alt="thankyou" /></a></p>
SUCCESS SAVING README for datastaxdevs-workshop-spring-stargate
Getting astra.json for datastaxdevs/workshop-spring-reactive at 277
No astra.json for datastaxdevs/workshop-spring-reactive at 281
No astrajson for PetClinic App (Spring, Reactive)
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="workshop-spring-petclinic-reactive"> </a>Workshop 🐈 Spring PetClinic Reactive 🐕</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-astra-db-instance"> </a>4. Create Astra DB Instance</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4a-register-or-sign-to-astra"> </a>✅ 4a.Register or Sign to Astra</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4c-create-a-database-or-resume-your-database"> </a>✅ 4c.Create a Database (or resume your database)</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-astra-token"> </a>5. Create Astra Token</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="6-start-and-setup-gitpod"> </a>6. Start and Setup Gitpod</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6a-open-gitpod"> </a>✅ 6a. Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6b-setup-cqlsh"> </a>✅ 6b. Setup Cqlsh</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="copy-paste-in-gitpod"> </a>⚠️ COPY-PASTE IN GITPOD</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6c-validate-cqlsh"> </a>✅ 6c. Validate CqlSH</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6d-know-your-gitpod"> </a>✅ 6d. Know your gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6e-validate-your-setup"> </a>✅ 6e. Validate your setup</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-create-your-schema-with-cql-console"> </a>7. Create your schema with CQL Console</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7a-open-cqlsh-console"> </a>✅ 7a. Open cqlSH Console</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7b-use-the-proper-keyspace"> </a>✅ 7b. Use the proper keyspace</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7c-create-your-objects"> </a>✅ 7c. Create your objects</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7d-check-our-6-tables"> </a>✅ 7d. Check our 6 tables</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7e-insert-reference-data"> </a>✅ 7e. Insert Reference Data</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-working-with-cassandra-drivers"> </a>8. Working with Cassandra Drivers</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8a-the-cqlsession"> </a>✅ 8a. The CqlSession</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8b-the-driver-object-mapping-layer"> </a>✅ 8b. The Driver Object Mapping Layer</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-working-with-spring-data"> </a>9. Working with Spring Data</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="9a-execute-the-unit-test"> </a>✅ 9a. Execute the unit test</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-working-with-spring-webflux"> </a>10. Working with Spring WebFlux</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="10a-execute-the-unit-test"> </a>✅ 10a. Execute the unit test</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="10b-start-the-application-with-swagger-ui"> </a>✅ 10b. Start the application with Swagger UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="10c-use-api"> </a>✅ 10c. Use API</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-angular-user-interface"> </a>11. Angular User Interface</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="11a-start-the-front-end"> </a>✅ 11a. Start the front end</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="11b-open-the-user-interface"> </a>✅ 11b. Open the user interface</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="12-homeworks"> </a>12. Homeworks</h2>
HTML FOR datastaxdevs-workshop-spring-reactive<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="workshop-spring-petclinic-reactive"> </a>Workshop 🐈 Spring PetClinic Reactive 🐕</h1><img src="doc/img/badge-petclinic.png?raw=true" width="200" align="right" /><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-spring-reactive"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><blockquote><p>⚠️ Difficulty: <strong><code>Intermediate</code>, we expect you to already know Java and Spring.</strong></p></blockquote><p><img src="doc/img/banner.png?raw=true" alt="banner" /></p><p>This sample is a fully reactive version of the <a href="https://projects.spring.io/spring-petclinic/">Spring PetClinic</a> application using <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">Spring WebFlux</a></p><!--- ENDEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><img src="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/doc/img/ui-veterinarians.png?raw=true" align="right" width="400px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-astra-db-instance">Create your Database</a></li><li><a href="#5-create-astra-token">Create your Token</a></li><li><a href="#6-start-and-setup-gitpod">Start and setup Gitpod</a></li><li><a href="#7-create-your-schema-with-cql-console">Create your Schema</a></li><li><a href="#8-working-with-cassandra-drivers">Working with Cassandra Drivers</a></li><li><a href="#9-working-with-spring-data">Working with Spring Data</a></li><li><a href="#10-working-with-spring-webflux">Working with Spring WebFlux</a></li><li><a href="#11-angular-user-interface">Working with Angular UI</a></li><li><a href="#12-homeworks">Homeworks</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>✅ Learn how Apache Cassandra <strong>data modelling</strong> is different from relational</p><p>✅ Understand how <strong>Java Applications</strong> connect to Apache Cassandra™</p><p>✅ Learn about <strong>Spring and Spring Boot</strong> Microservices</p><p>✅ Understand what are the benefits of <strong>Reactive Programming</strong></p><p>✅ <strong>Get a working full stack application Spring Boot-Data-Reactive including a Node.js application for populating data</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine, If you do so, you will need the following<ol><li><b>git</b> installed on your local system<li><b>JDK 8+</b> installed on your local system<li><b>Maven 3.6+</b> installed on your local system<li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/" >Node 15 and npm 7 or later</a></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>We can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need a GitHub account<li>You will also need an Astra account: don't worry, we'll work through that in the following</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge.</details><p/><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="doc/slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Datastax Developers Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="4-create-astra-db-instance"> </a>4. Create Astra DB Instance</h2><h4><a class="anchor" aria-hidden="true" id="4a-register-or-sign-to-astra"> </a>✅ 4a.Register or Sign to Astra</h4><blockquote><p>📖 DOCUMENTATION: <a href="https://awesome-astra.github.io/docs/pages/astra/create-account/">How to create an Astra Account</a></p></blockquote><p><a href="https://astra.dev/4-6"><img src="https://dabuttonfactory.com/button.png?t=+Connect+to+Astra&amp;f=Open+Sans-Bold&amp;ts=12&amp;tc=fff&amp;hp=23&amp;vp=16&amp;c=11&amp;bgt=gradient&amp;bgc=0b5394&amp;ebgc=073763" alt="" /></a></p><h4><a class="anchor" aria-hidden="true" id="4c-create-a-database-or-resume-your-database"> </a>✅ 4c.Create a Database (or resume your database)</h4><blockquote><p>📖 DOCUMENTATION: <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/">How create a Database</a></p></blockquote><p>Use the following values:</p><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Database name</td><td><code>workshops</code></td></tr><tr><td>Keyspace name</td><td><code>spring_petclinic</code></td></tr><tr><td>Region name</td><td>The one you like, no difference</td></tr></tbody></table><p><strong>Walkthrough:</strong> <em>The Walkthrough mentions the wrong keyspace, make sure to use <code>spring_petclinic</code></em></p><p><img src="doc/img/astra-create-db.gif?raw=true" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="5-create-astra-token"> </a>5. Create Astra Token</h2><p>To connect to the database from Java code we need some credentials, this is what we are going to do here.</p><blockquote><p>📖 DOCUMENTATION: <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">How to create an Astra Token</a></p></blockquote><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Role</td><td><code>Database Administrator</code></td></tr></tbody></table><p><strong>👁️ Walkthrough</strong></p><p><img src="doc/img/astra-create-token.gif?raw=true" alt="image" /></p><blockquote><p>⚠️ We will use the third argument called <code>TOKEN</code> that looks like <code>AstraCS:...</code> make sure you copy it in the clipboard.</p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="6-start-and-setup-gitpod"> </a>6. Start and Setup Gitpod</h3><h4><a class="anchor" aria-hidden="true" id="6a-open-gitpod"> </a>✅ 6a. Open Gitpod</h4><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-spring-reactive"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>When you first launch gitpod, it builds the image.<img src="doc/img/building-workspace.png?raw=true" alt="image" /></p><p>This is the home Screen. It is a VSCode instance in the cloud. As you can see, notice multiple panels are open with 2 terminals, the readme and the explorer.</p><h4><a class="anchor" aria-hidden="true" id="6b-setup-cqlsh"> </a>✅ 6b. Setup Cqlsh</h4><h4><a class="anchor" aria-hidden="true" id="copy-paste-in-gitpod"> </a>⚠️ COPY-PASTE IN GITPOD</h4><blockquote><p><em>Some browsers might block the CTRL+C and CRTL+V if that happen you can paste with right-click and paste.</em></p></blockquote><blockquote><p><em>The first time you paste something in Gitpod your might have a pop-up telling you to accept the command</em></p></blockquote><ul><li>There 3 terminal panel on the bottom right hand corner. The last <code>setup-cqlsh:bash</code> got the focus.</li></ul><p><img src="doc/img/setup-cqlsh.png?raw=true" alt="cqlsh" /></p><ul><li>If you look at the terminal windows it is asking for your Astra TOKEN. Please enter the value of your Token it should look like <code>AstraCS....</code> then press enter.</li></ul><p><img src="doc/img/gitpod-home.png?raw=true" alt="image" /></p><ul><li>The initialization will go on for you to get access to <code>CQLSH</code> directly.</li></ul><pre><code>--------------------------------------------------------------            Installation of Cqlsh                      ---------------------------------------------------------------[OK] - Tools folder has been created[OK] - Package has been downloaded[OK] - We will now as you about your ASTRA TOKEN (AstraCS....)Checking your credentials...Login to Astra at https://dstx.io/workshopsAfter login, you can create a database.Click on your name in the left-hand columnIn the dropdown, select &quot;Organization Settings&quot;    Select &quot;Token Management&quot; from the left-hand column    Select &quot;Database Administrator&quot; in the Role dropdown    Click &quot;Generate Token&quot;    Save to CSV if you want to access it later✔ Please paste the Database Admin Token here***********Credentials set up, checking databaseLooking for workshops     workshops: Current status is ACTIVE         ... status is ACTIVE    existing workshops database found.Looking for spring_petclinic keyspace    keyspace spring_petclinic already existsSetting up secure bundleDeleted file: cqlshrc[OK] - Database ID is 3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23[OK] - Database REGION is eu-west-1[OK] - Database TOKEN is ************Picked up JAVA_TOOL_OPTIONS:  -Xmx3435m[OK] - Secure Connect Bundle downloaded[OK] - Launching CQLSH....Connected to cndb at 127.0.0.1:9042.[cqlsh 6.8.0 | Cassandra 4.0.0.6816 | CQL spec 3.4.5 | Native protocol v4]Use HELP for help.token@cqlsh&gt;</code></pre><h4><a class="anchor" aria-hidden="true" id="6c-validate-cqlsh"> </a>✅ 6c. Validate CqlSH</h4><ul><li>You can now list the keyspaces (like oracle schemas) available.</li></ul><pre lang="sql"><code>describe keyspaces;</code></pre><p>Output:</p><pre><code>system_virtual_schema  system_auth   data_endpoint_auth  system_tracestemporal_visibility    system_views  better_reads        ecommercenetflix                system        spring_petclinic    todossystem_schema          datastax_sla  native_java         feeds_reader</code></pre><ul><li>Select the keyspace we will work with today <code>spring_petclinic</code></li></ul><pre lang="sql"><code>use spring_petclinic;</code></pre><ul><li>You can quit wit</li></ul><pre lang="sql"><code>quit</code></pre><ul><li>You can now open the console any time with</li></ul><pre><code>/workspace/workshop-spring-reactive/cqlsh</code></pre><p>The other Terminal are dedicated for the frontend and the backend.</p><h4><a class="anchor" aria-hidden="true" id="6d-know-your-gitpod"> </a>✅ 6d. Know your gitpod</h4><ul><li><strong>📘 All tools are installed</strong></li></ul><p>Gitpod provides everything you need to work with JAVA, Node.JS (but also python, docker and many more). Open a new <strong>TERMINAL</strong> and enter the following command.</p><ul><li>Check Java Version</li></ul><pre lang="bash"><code>java --version</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre><code>Picked up JAVA_TOOL_OPTIONS: -Xmx2576mopenjdk 11.0.11 2021-04-20 LTSOpenJDK Runtime Environment Zulu11.48+21-CA (build 11.0.11+9-LTS)OpenJDK 64-Bit Server VM Zulu11.48+21-CA (build 11.0.11+9-LTS, mixed mode)</code></pre><ul><li>Check Maven version</li></ul><pre lang="bash"><code>mvn -v</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre><code>Picked up JAVA_TOOL_OPTIONS: -Xmx2576mApache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)Maven home: /home/gitpod/.sdkman/candidates/maven/currentJava version: 11.0.11, vendor: Azul Systems, Inc., runtime: /home/gitpod/.sdkman/candidates/java/11.0.11.fx-zuluDefault locale: en_US, platform encoding: UTF-8OS name: &quot;linux&quot;, version: &quot;5.4.0-1051-gke&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;</code></pre><ul><li>Check Node version</li></ul><pre lang="bash"><code>node -v</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre><code>v14.17.0</code></pre><ul><li>Check NPM version</li></ul><pre lang="bash"><code>npm -v</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre><code>6.14.13</code></pre><ul><li><strong>📘 Remote explorer</strong></li></ul><p>In the tutorial we will also work with the preview and the remote explorer. To switch from source explorer to remote explorer click on dekstop icon on the menu bar in the left (6th item from top).</p><p><img src="doc/img/gitpod-remote-explorer.png?raw=true" alt="image" /></p><ul><li><strong>📘 Simple Browser preview</strong></li></ul><p>As of now <strong>nothing IS running</strong> but if you want to open a preview or a new browser use the icons as shown below.</p><p><img src="doc/img/gitpod-preview.png?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="6e-validate-your-setup"> </a>✅ 6e. Validate your setup</h4><ul><li>All variables you will need are in file called <code>.env </code>. We will source this file to define the env variables when needed.</li></ul><pre lang="bash"><code>cat /workspace/workshop-spring-reactive/.env</code></pre><ul><li>Take a look at the code of <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/test/java/com/datastax/workshop/petclinic/Test01_Connectivity.java"><code>Test01_Connectivity</code></a> here we use the <code>CqlSession</code> and <code>AstraClient</code> to show some infromation regarding your Astra DB.</li></ul><pre><code>gp open gp open /workspace/workshop-spring-reactive/src/test/java/com/datastax/workshop/petclinic/Test01_Connectivity.java</code></pre><p>Execute the test with:</p><pre lang="bash"><code>cd /workspace/workshop-spring-reactiveset -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test01_Connectivity</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre lang="bash"><code>== CQL_SESSION ==+ Your Keyspace: spring_petclinic+ Vet Specialty:[dentistry, radiology, surgery]== ASTRA ==+ Your OrganizationID: f9460f14-9879-4ebe-83f2-48d3f3dce13c+ Your Databases:workshops : id=3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23, region=eu-west-1</code></pre><p>You are all set.</p><h2><a class="anchor" aria-hidden="true" id="7-create-your-schema-with-cql-console"> </a>7. Create your schema with CQL Console</h2><h4><a class="anchor" aria-hidden="true" id="7a-open-cqlsh-console"> </a>✅ 7a. Open cqlSH Console</h4><pre><code>set -asource /workspace/workshop-spring-reactive/.envset +a/workspace/workshop-spring-reactive/cqlsh</code></pre><h4><a class="anchor" aria-hidden="true" id="7b-use-the-proper-keyspace"> </a>✅ 7b. Use the proper keyspace</h4><pre lang="sql"><code>use spring_petclinic;</code></pre><h4><a class="anchor" aria-hidden="true" id="7c-create-your-objects"> </a>✅ 7c. Create your objects</h4><pre lang="sql"><code>use spring_petclinic;DROP INDEX IF EXISTS petclinic_idx_vetname;DROP INDEX IF EXISTS petclinic_idx_ownername;DROP TABLE IF EXISTS petclinic_vet;DROP TABLE IF EXISTS petclinic_vet_by_specialty;DROP TABLE IF EXISTS petclinic_reference_lists;DROP TABLE IF EXISTS petclinic_owner;DROP TABLE IF EXISTS petclinic_pet_by_owner;DROP TABLE IF EXISTS petclinic_visit_by_pet;CREATE TABLE IF NOT EXISTS petclinic_vet (  id          uuid,  first_name  text,  last_name   text,  specialties set&lt;text&gt;,  PRIMARY KEY ((id)));CREATE TABLE IF NOT EXISTS petclinic_vet_by_specialty ( specialty   text, vet_id      uuid, first_name  text, last_name   text, PRIMARY KEY ((specialty), vet_id));CREATE TABLE IF NOT EXISTS petclinic_owner (  id         uuid,  first_name text,  last_name  text,  address    text,  city       text,  telephone  text,  PRIMARY KEY ((id)));CREATE TABLE IF NOT EXISTS petclinic_pet_by_owner (  owner_id   uuid,  pet_id     uuid,  pet_type   text,  name       text,  birth_date date,  PRIMARY KEY ((owner_id), pet_id));CREATE TABLE IF NOT EXISTS petclinic_visit_by_pet (   pet_id      uuid,   visit_id    uuid,   visit_date  date,   description text,   PRIMARY KEY ((pet_id), visit_id));CREATE TABLE IF NOT EXISTS petclinic_reference_lists (  list_name text,  values set&lt;text&gt;,  PRIMARY KEY ((list_name)));/** We could search veterinarians by their names. */CREATE INDEX IF NOT EXISTS petclinic_idx_ownername ON petclinic_owner(last_name);/** We could search vet by their names. */CREATE INDEX IF NOT EXISTS petclinic_idx_vetname ON petclinic_vet(last_name);</code></pre><h4><a class="anchor" aria-hidden="true" id="7d-check-our-6-tables"> </a>✅ 7d. Check our 6 tables</h4><pre lang="sql"><code>describe tables;</code></pre><h4><a class="anchor" aria-hidden="true" id="7e-insert-reference-data"> </a>✅ 7e. Insert Reference Data</h4><pre lang="sql"><code>INSERT INTO petclinic_reference_lists(list_name, values)VALUES ('pet_type ', {'bird', 'cat', 'dog', 'lizard','hamster','snake'});INSERT INTO petclinic_reference_lists(list_name, values)VALUES ('vet_specialty', {'radiology', 'dentistry', 'surgery'});</code></pre><h2><a class="anchor" aria-hidden="true" id="8-working-with-cassandra-drivers"> </a>8. Working with Cassandra Drivers</h2><h4><a class="anchor" aria-hidden="true" id="8a-the-cqlsession"> </a>✅ 8a. The CqlSession</h4><ul><li>Exist the CqlSH or open a new terminal to take a look on configuration file <code>application.yml</code>.</li></ul><pre lang="bash"><code>gp open /workspace/workshop-spring-reactive/src/main/resources/application.yml</code></pre><ul><li><p>The spring Configuration will use load keys coming from <code>astra.*</code> and initialize the object <code>CqlSession</code>. A first way to implement a DAO is to use this object explicitly. Check the code at <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/test/java/com/datastax/workshop/petclinic/Test02_DaoWithCqlSession.java"><code>Test02_DaoWithCqlSession</code></a></p></li><li><p>Take a look at the <code>DAO</code> with <code>CqlSession</code></p></li></ul><pre lang="bash"><code> gp open /workspace/workshop-spring-reactive/src/main/java/com/datastax/workshop/petclinic/reflist/ReferenceListReactiveDao.java</code></pre><ul><li>Test source code (invoking the dao)</li></ul><pre lang="bash"><code>gp open gp open /workspace/workshop-spring-reactive/src/test/java/com/datastax/workshop/petclinic/Test02_DaoWithCqlSession.java</code></pre><ul><li>Execute the test with the following:</li></ul><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test02_DaoWithCqlSession</code></pre><ol><li>Notice how you needed to put a terminal call <code>block()</code> on line 21 or the program is not started.</li></ol><p>Project <a href="https://projectreactor.io/">Reactor</a> is a fourth-generation reactive library, based on the Reactive Streams specification, for building non-blocking applications on the JVM. We are using the library reactor-test introducing <code>StepVerifier</code> to ease the coding of unit tests:</p><pre lang="java"><code>@Testpublic void should_list_vet_specialies() { System.out.println(referenceListDao   .findReferenceList(&quot;vet_specialty&quot;).block()); StepVerifier  .create(referenceListDao.findReferenceList(&quot;vet_specialty&quot;))  .expectNext(Set.of(&quot;dentistry&quot;, &quot;radiology&quot;, &quot;surgery&quot;))  .expectComplete()  .verify();}</code></pre><blockquote><p>🖥️ Expected output</p></blockquote><pre><code>15:34:33.926 INFO  com.datastax.workshop.petclinic.Test02_DaoWithCqlSession : Started Test02_DaoWithCqlSession in 14.782 seconds (JVM running for 16.99)[dentistry, radiology, surgery][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 16.42 s - in com.datastax.workshop.petclinic.Test02_DaoWithCqlSession</code></pre><h4><a class="anchor" aria-hidden="true" id="8b-the-driver-object-mapping-layer"> </a>✅ 8b. The Driver Object Mapping Layer</h4><p>We will illustrate this with the <code>Vet</code> in this <a href="https://github.com/datastaxdevs/workshop-spring-reactive/tree/master/src/main/java/com/datastax/workshop/petclinic/vet/db">package</a></p><ol><li><p>Define an <code>@Entity</code> where object attributes matches the table columns <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/main/java/com/datastax/workshop/petclinic/vet/db/VetEntity.java"><code>VetEntity</code></a></p></li><li><p>Define an <code>@Dao</code> interface with only the method you want to implements <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/main/java/com/datastax/workshop/petclinic/vet/db/VetReactiveDao.java"><code>VetReactiveDao</code></a></p></li></ol><pre lang="java"><code>@Daopublic interface VetReactiveDao { @Select MappedReactiveResultSet&lt;VetEntity&gt; findById(@NotNull UUID vetId); // More methods....}</code></pre><ol start="3"><li>Define the <code>@Mapper</code> to explain how to create the <code>Dao</code> from the the Cqlsession. <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/main/java/com/datastax/workshop/petclinic/vet/db/VetReactiveDaoMapper.java"><code>VetReactiveDaoMapper</code></a></li></ol><pre lang="java"><code>@Mapperpublic interface VetReactiveDaoMapper {  @DaoFactory  VetReactiveDao vetDao(@DaoKeyspace CqlIdentifier keyspace);}</code></pre><p>Now execute the test to work with the DAO <code>Test03_DaoWithDriverObjectMapping</code></p><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test03_DaoWithDriverObjectMapping</code></pre><h2><a class="anchor" aria-hidden="true" id="9-working-with-spring-data"> </a>9. Working with Spring Data</h2><p><a href="https://spring.io/projects/spring-data">Spring Data</a> provides a common abstraction on top of multiple databases leveraging JPA. The quantity of code is greatly reduced by working with interfaces <code>CrudRepository</code> and entities.</p><ul><li><p>Define an entity <a href=""><code>VetEntitySpring</code></a> where object attributes matches the table columns. You can notice that the set of annotations is not the same as with java driver mapper.</p></li><li><p>Define an interface extending the <code>ReactiveCassandraRepository</code> named <code>VetRepositorySpring</code></p></li></ul><pre lang="java"><code>@Repositorypublic interface VetRepositorySpring   extends ReactiveCassandraRepository&lt;VetEntitySpring, UUID&gt; {}</code></pre><h4><a class="anchor" aria-hidden="true" id="9a-execute-the-unit-test"> </a>✅ 9a. Execute the unit test</h4><p>Execute the test to work with the DAO <code>Test04_DaoWithSpringData</code></p><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test04_DaoWithSpringData</code></pre><p>Execute the test to work with the DAO <code>Test05_DaoWithSpringDataSimple</code></p><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test05_DaoWithSpringDataSimple</code></pre><h2><a class="anchor" aria-hidden="true" id="10-working-with-spring-webflux"> </a>10. Working with Spring WebFlux</h2><blockquote><p><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">Reference Documentation</a></p></blockquote><p><em>The original web framework included in the Spring Framework, Spring Web MVC, was purpose-built for the Servlet API and Servlet containers. The reactive-stack web framework, Spring WebFlux, was added later in version 5.0. It is fully non-blocking, supports Reactive Streams back pressure, and runs on such servers as Netty, Undertow, and Servlet 3.1+ containers.</em></p><p><em>Both web frameworks mirror the names of their source modules (spring-webmvc and spring-webflux) and co-exist side by side in the Spring Framework. Each module is optional. Applications can use one or the other module or, in some cases, both — for example, Spring MVC controllers with the reactive WebClient.</em></p><p>The different DAO we created is injected into a Rest controller. (same as Spring WEB)</p><pre lang="java"><code>@RestController@RequestMapping(&quot;/petclinic/api/specialties&quot;)public class VetSpecialtyController { @Autowired ReferenceListReactiveDao dao; @GetMapping(produces = APPLICATION_JSON_VALUE) public Mono&lt;ResponseEntity&lt;Set&lt;VetSpecialty&gt;&gt;&gt; getAllVetsSpecialties() {   return refDao.findReferenceList(&quot;vet_specialty&quot;)    .map(Set::stream)    .map(s -&gt; s.map(VetSpecialty::new)    .collect(Collectors.toSet()))    .map(ResponseEntity::ok); }}</code></pre><h4><a class="anchor" aria-hidden="true" id="10a-execute-the-unit-test"> </a>✅ 10a. Execute the unit test</h4><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn test -Dtest=com.datastax.workshop.petclinic.Test06_ApiController</code></pre><h4><a class="anchor" aria-hidden="true" id="10b-start-the-application-with-swagger-ui"> </a>✅ 10b. Start the application with Swagger UI</h4><p>We also used SpringDOC to generate a Swagger UI interface. For more information check the class <a href="https://github.com/datastaxdevs/workshop-spring-reactive/blob/master/src/main/java/com/datastax/workshop/petclinic/conf/ApiDocumentationConfig.java"><code>ApiDocumentationConfig</code></a></p><pre lang="java"><code>@RestController@RequestMapping(&quot;/petclinic/api/specialties&quot;)@Api(value=&quot;/petclinic/api/specialties&quot;, tags = {&quot;Veterinarian Specialties Api&quot;})public class VetSpecialtyController {  //...}</code></pre><p>You can now go ahead and start the application. The application is listening on port <code>9966</code> as defined in <code>application.yaml</code> <em>(Please do not change this, this is what the user interface is looking for)</em></p><p>Start the application;</p><pre lang="bash"><code>set -asource /workspace/workshop-spring-reactive/.envset +amvn spring-boot:run</code></pre><p>Open your browser on port <code>9966</code> using the the remote explorer or entering in a new terminal.</p><pre lang="bash"><code>gp preview &quot;$(gp url 9966)&quot;</code></pre><p>You should find the Nice user interface:</p><p><img src="doc/img/swagger.png?raw=true" alt="Pet Clinic Welcome Screen" /></p><h4><a class="anchor" aria-hidden="true" id="10c-use-api"> </a>✅ 10c. Use API</h4><p>Locate the resource <code>Veterinarian Specialties Api</code> and method the specialities endpoint below to test the service.</p><pre lang="bash"><code>GET ​/petclinic​/api​/specialties</code></pre><p>To execute the service expand the method, locate the button <code>[TRY IT OUT]</code></p><p><img src="doc/img/tryit-1.png?raw=true" alt="Pet Clinic Welcome Screen" /></p><p>Click <code>[Execute]</code>, this particular method does not take any argument.</p><p><img src="doc/img/tryit-2.png?raw=true" alt="Pet Clinic Welcome Screen" /></p><p>You should see a response something like below.</p><p><img src="doc/img/tryit-3.png?raw=true" alt="Pet Clinic Welcome Screen" /><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-angular-user-interface"> </a>11. Angular User Interface</h2><blockquote><p><a href="https://spring-petclinic.github.io/spring-petclinic-angular/">Reference Documentation</a></p></blockquote><blockquote><p><a href="https://github.com/spring-petclinic/spring-petclinic-angular/tree/4f58177e29476a4866723a7edc6dab614e96eec0">Source Code</a></p></blockquote><p>Keep the application running on the first terminal. We need our backend. Let'us start the user interface.</p><h4><a class="anchor" aria-hidden="true" id="11a-start-the-front-end"> </a>✅ 11a. Start the front end</h4><p>On the terminal <code>spring-petclinic-angular:npm</code> navigate to the Angular application.</p><pre lang="bash"><code>chunk {main} main.js, main.js.map (main) 331 kB [initial] [rendered]chunk {polyfills} polyfills.js, polyfills.js.map (polyfills) 293 kB [initial] [rendered]chunk {polyfills-es5} polyfills-es5.js, polyfills-es5.js.map (polyfills-es5) 463 kB [initial] [rendered]chunk {runtime} runtime.js, runtime.js.map (runtime) 6.08 kB [entry] [rendered]chunk {scripts} scripts.js, scripts.js.map (scripts) 411 kB [entry] [rendered]chunk {styles} styles.js, styles.js.map (styles) 1.16 MB [initial] [rendered]chunk {vendor} vendor.js, vendor.js.map (vendor) 6.87 MB [initial] [rendered]** Angular Live Development Server is listening on localhost:4200, open your browser on http://localhost:4200/ **ℹ ｢wdm｣: Compiled successfully.</code></pre><ul><li>Kill the running application (the frontend must start after the backend here)</li></ul><pre><code>CTRL+C</code></pre><ul><li>Start the application again</li></ul><pre><code> cd /workspace/workshop-spring-reactive/spring-petclinic-angular npm run start</code></pre><h4><a class="anchor" aria-hidden="true" id="11b-open-the-user-interface"> </a>✅ 11b. Open the user interface</h4><p>Open your browser on port <code>4200</code> using the the remote explorer or entering in a new terminal.</p><pre lang="bash"><code>gp preview &quot;$(gp url 4200)&quot;</code></pre><p><img src="doc/img/ui-top.png?raw=true" alt="Pet Clinic Welcome Screen" /></p><p>This is it for the Hands-on TODAY. The angular project is a separate project on its own and we simply reuse it as a submodule but did not code anything there.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="12-homeworks"> </a>12. Homeworks</h2><img src="doc/img/badge-petclinic.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your verified skill badge! Finish and submit your homework!</p><ol><li><p>Complete the practice steps as described below until you have your own app running in Gitpod.</p></li><li><p>Answer the technical questions in the form (We promise, it is NOT difficult if you follow the workshop).</p></li><li><p>Add a funny PET TYPE in the DATABASE and take a SCREENSHOT of the running app with your data.</p></li><li><p>Submit your homework <a href="https://dtsx.io/homework-spring-reactive">here</a></p></li><li><p><em>(totally optional)</em> Challenge for 🌶️🌶️🌶️ EXTRA SPICE 🌶️🌶️🌶️. Fork the project, change the code for more repositories to use Spring Data (replacing the Java drivers) and do a pull request. 👕 If the submission has a good quality we will ship a SWAG BOX for free.</p></li></ol><p>Congratulations you made it to the END !!</p>
SUCCESS SAVING README for datastaxdevs-workshop-spring-reactive
Getting astra.json for datastaxdevs/workshop-ai-as-api at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="during-this-hands-on-workshop-you-will"> </a>During this hands-on workshop, you will:</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="credits-and-acknowledgements"> </a>Credits and Acknowledgements</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="resources-and-homework"> </a>Resources and Homework</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="create-and-setup-astra-db"> </a>Create and setup Astra DB</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="load-the-project-into-gitpod"> </a>Load the project into Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-the-starting-dataset"> </a>Inspect the starting dataset</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="prepare-the-dataset-for-training"> </a>Prepare the dataset for training</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="the-training-process"> </a>The training process</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="test-the-trained-model"> </a>Test the trained model</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="expose-as-api"> </a>Expose as API</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-dot-env-file"> </a>Configure dot-env file</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="baby-steps-a-minimal-api"> </a>Baby steps: a minimal API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="query-the-minimal-api"> </a>Query the minimal API</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="inspect-the-minimal-api-code"> </a>Inspect the minimal API code</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-the-full-api"> </a>Inspect the full API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-and-caching"> </a>Database and Caching</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="documentation-and-typed-response"> </a>Documentation and typed response</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="call-logging-and-streamingresponse"> </a>Call logging and StreamingResponse</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="support-for-a-get-endpoint"> </a>Support for a GET endpoint</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="launch-the-full-api"> </a>Launch the full API</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="use-the-api"> </a>Use the API</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="open-the-swagger-ui"> </a>Open the Swagger UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="fun-with-caching"> </a>Fun with caching</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="call-log"> </a>Call log</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="inspect-the-database"> </a>Inspect the database</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-detailed-instructions"> </a>Homework detailed instructions</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="appendix-i-deploy-behind-a-reverse-proxy-nginx"> </a>Appendix I: deploy behind a reverse proxy (nginx)</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="appendix-ii-model-versioning-with-fastapi"> </a>Appendix II: model versioning with FastAPI</h3>
HTML FOR datastaxdevs-workshop-ai-as-api<h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ai-as-api"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Time: <em>50 minutes</em>. Difficulty: <em>Intermediate</em>. <a href="#lets-start">Start Building!</a></p><p>Learn to build your own NLP text classifier and expose it as an API: aninteractive workshop featuring</p><ul><li>AI-based text analysis with Tensorflow/Keras</li><li>Astra DB, a Database-as-a-Service built on Apache Cassandra™</li><li>FastAPI, the high-performance Python framework for creating APIs</li><li>lots of useful Python libraries and packages (<code>pandas</code>, <code>pydantic</code>, <code>dotenv</code>, <code>sklearn</code>, <code>uvicorn</code>, ...)</li></ul><p><img src="images/nlp-classifier-api-cover.png" alt="Workshop cover" /></p><h2><a class="anchor" aria-hidden="true" id="during-this-hands-on-workshop-you-will"> </a>During this hands-on workshop, you will:</h2><ul><li>prepare the labeled dataset for model training;</li><li>train the model to classify any input text;</li><li>export the trained model and test it interactively;</li><li>create your free NoSQL database for data storage;</li><li>set up and start an API exposing the classifier as a reusable class;</li><li>learn how to speed up the API with DB-based caching;</li><li>inspect how a streaming response is handled in the API.</li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#frequently-asked-questions">FAQ</a></li><li><a href="#credits-and-acknowledgements">Credits/Acknowledgements</a></li><li><a href="#resources-and-homework">Resources &amp; Homework</a></li><li><a href="#create-and-setup-astra-db">Create your Astra DB instance</a></li><li><a href="#load-the-project-into-gitpod">Load the project into Gitpod</a></li><li><a href="#train-the-model">Train the model</a></li><li><a href="#expose-as-api">Expose as API</a></li><li><a href="#use-the-api">Use the API</a></li><li><a href="#homework-detailed-instructions">Homework instructions</a></li></ol><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>You don't have to, <strong>you can do everything in the cloud from the comfort of your browser</strong>! But there is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li><code>git</code> installed on your local system;</li><li><a href="https://www.python.org/downloads/">Python v3.6+ installed on your local system</a>.</li></ul><p>In this readme, we try to provide instructions for local development as well - but keep in mind thatthe main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local developmentin order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a GitHub account;</li><li>You will also need an Astra account: don't worry, we'll work through that in the following.</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice participation certificate a.k.a. badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="credits-and-acknowledgements"> </a>Credits and Acknowledgements</h2><img src="images/coding_enterpreneurs.jpg?raw=true" width="100" align="right" /><p>The core of this workshop is an adaptation from the excellent content <a href="https://www.youtube.com/watch?v=56qQNcHJxyQ">&quot;AI as an API,&quot;</a>created by <a href="https://www.youtube.com/channel/UCWEHue8kksIaktO8KTTN_zg">CodingEntrepreneurs</a>.You are very much encouraged to watch it, as it touches on more topicsand includes steps that unavoidably had to be taken out when converting tothis shorter format.</p><p>However, the opposite is also true: the code you'll see here is almost completelyrewritten from scratch, generally using different tools or techniques;the API has a different structure and offers differentendpoints, which better fit the particular pedagogical intent we had in mindand highlight some best practices for using databases such as Cassandra for storage.</p><p>So, all in all, you'd be better off by watching both contents!</p><h2><a class="anchor" aria-hidden="true" id="resources-and-homework"> </a>Resources and Homework</h2><h3><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h3><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://www.youtube.com/watch?v=3LQBJP3JL6A">Workshop Video</a></li><li><a href="slides/AI-as-API-Python-FastAPI-text-classifier.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3><img src="images/ai_as_api_badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your <strong>verified skill badge</strong>:</p><ol><li>Do all practice steps described below until you can query your API running in Gitpod.</li><li>Now roll up your sleeves and modify the code as follows: add an endpoint that exposes the neural net configuration of the classifier model. <a href="#homework-detailed-instructions"><strong>See below for detailed explanations</strong></a>.</li><li>Take a SCREENSHOT of requests/responses showing the new endpoint at work. <em>Note: you will have to restart the API for the changes to take effect.</em></li><li>Submit your homework <a href="https://dtsx.io/homework-ai-as-api">here</a>.</li></ol><p>That's it, you are done! Expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="create-and-setup-astra-db"> </a>Create and setup Astra DB</h2><p>You will now create a database with a keyspace in it (a <em>keyspace</em> can contain <em>tables</em>).The API needs a couple of tables for persistent storage: they will be created programmatically on startupif they don't exist, so there's no need to worry too much about them.</p><p>Besides creating the database, you need to retrieve a &quot;Token&quot;, that is,a set of credentials used later to connect to it in a secure and authenticated way.</p><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations and 80GB storage monthly - sufficient to run small production workloads.</em></p><p><img src="images/astranaut.png?raw=true" width="50" /> Start by Ctrl-clicking on the orange button (to open in a new tab)and then follow the instructions below:</p><p><a href="https://astra.dev/yt-11-09"><img src="images/create_astra_db_button.png?raw=true" /></a></p><ul><li>create an Astra DB instance <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/">as explained here</a>, in the GCP cloud provider, with database name = <code>workshops</code> and keyspace = <code>spamclassifier</code>.;</li><li>generate and retrieve a DB Token <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">as explained here</a>. <strong>Important</strong>: use the role &quot;DB Administrator&quot; for the token. Save the token in a secure place for later use. <em>Note: the token auto-generated while creating the database has not enough permissions for our purposes today, you can disregard it.</em></li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="load-the-project-into-gitpod"> </a>Load the project into Gitpod</h2><p>Gitpod is an IDE in the cloud (modeled after VSCode). It comes with a full&quot;virtual machine&quot; (actually a Kubernetes-managed container), which you willuse as if it were your own computer (e.g. downloading files, executing programsand scripts, training the model and eventually starting the API from it).</p><p>The button below will:</p><ul><li>spawn your own Gitpod container;</li><li>clone this repository in it and open it in the IDE;</li><li>preinstall the required dependencies.</li></ul><p><img src="images/astranaut.png?raw=true" width="50" /> <strong>ctrl-click on the Gitpod button</strong> to make sure you &quot;Open in new tab&quot;(Note: you may have to authenticatethrough Github in the process):</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ai-as-api"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>In a few minutes, a full IDE will be ready in the browser, with a fileexplorer on the left, a file editor on the top(with this very README open for convenience), and a console (<code>bash</code>) below it.Actually three consoles will be spawned for later convenience, called<code>work-shell</code> (where the main work is done including running the API),<code>curl-shell</code> (to later issue <code>curl</code> commands to the API),and <code>notebook-shell</code> (where Jupyter will keep running).</p><blockquote><p>If you want to work on your laptop, make sure you install all Pythondependencies listed in <code>requirements.txt</code> (doing so in a Python virtualenvironment is <em>strongly suggested</em>) and add the main repo rootto the <code>PYTHONPATH</code>. (You might see &quot;errors&quot; related to mismatching versionsbetween the <code>tensorflow</code> package and others, notably <code>numpy</code>: you shouldbe able to ignore them and just go ahead.)If you are on Python 3.6, you will additionally need toinstall the <code>dataclasses</code> package (i.e. <code>pip install dataclasses</code>).Also, please note that the model training phase may takemuch longer than ten minutes, depending on your processing power.</p></blockquote><details><summary>Show me a map of the Gitpod starting layout</summary><img src="images/gitpod_view.png?raw=true" /><ol><li>File explorer</li><li>Editor</li><li>Panel for console(s)</li><li>Console switcher</li></ol><p>There are many more other features, probably familiar to those who haveexperience with VSCode. Feel free to play around a bit!</p></details><h2><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h2><p>The goal of this phase is to have your text classifier model readyto be used: that means, not only will you train it on a labeled dataset,but also you will take care of exporting it in a format suitablefor later loading by the API.</p><h3><a class="anchor" aria-hidden="true" id="inspect-the-starting-dataset"> </a>Inspect the starting dataset</h3><p>Open the file <code>training/dataset/spam-dataset.csv</code> and have a lookat the lines there. (<em>Tip</em>: you can open a file in Gitpod by locatingit with the &quot;File Explorer&quot; on your left, but if you like using the keyboardyou may simply issue the command <code>gp open training/dataset/spam-dataset.csv</code>from the <code>bash</code> Console at the bottom.)</p><p>This is a CSV file with three columns (separated by commas):</p><ul><li>whether the line is spam or &quot;ham&quot; (i.e. the opposite of spam),</li><li>a short piece of text (a &quot;message&quot;),</li><li>the tag identifying the source of this datapoint (this will be ignored by the scripts).</li></ul><p>The third column betrays the mixed origin of the data: in order tocreate a labeled dataset of around 7.5K messages marked as spam/ham,two different (publicly available) sets have been merged(namely <a href="https://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection">this one</a>and <a href="https://archive.ics.uci.edu/ml/datasets/YouTube+Spam+Collection">this one</a>,made available by the <a href="https://archive.ics.uci.edu/ml/index.php">UCI Machine Learning Repository</a>).</p><p>Luckily, the (not always fun) task of cleaning, validating and normalizing theheterogeneous (and usually imperfect) data has been already done for you -- somethingthat is seldom the case, alas, in a real-world task.</p><p>Look at line 352 of this file for example:is that message spam or ham? (<em>Tip</em>: hit Ctrl-G in the Gitpod editor tojump to a specific line number.)</p><details><summary>Show me that line in Gitpod's editor</summary>    <img src="images/gitpod_gotoline.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="prepare-the-dataset-for-training"> </a>Prepare the dataset for training</h3><blockquote><p><strong>Note</strong>: this step is meant to run as an <strong>interactive Jupyter notebook</strong>.In case you run into trouble with Jupyter, you can equivalentlyjust run the command <code>python prepareDataset.py -v</code> and watch theshow (<code>-v</code> stands for &quot;verbose&quot;, to catch a glimpse at what it does).</p></blockquote><p>You want to &quot;teach&quot; a machine to distinguish between spam and ham: unfortunately,machines prefer to speak numbers rather than words.You then need to transform the human-readable CSV file above into a formatthat, albeit less readable by us puny humans, is more suited to the subsequent taskof training the classifier.You will express (a cleaned-out version of) the text into a sequenceof numbers, each representing a token (one word) forming the message text.</p><p>More precisely:</p><ol><li>first you'll initialize a &quot;tokenizer&quot;, asking it to build a dictionary (i.e. a token/number mapping) best suited for the texts at hand;</li><li>then, you'll use the tokenizer to reduce all messages into (variable-length) sequences of numbers;</li><li>these sequences will be &quot;padded&quot;, i.e. you'll make sure they end up all having the same length: in this way, the whole dataset will be represented by a rectangular matrix of integer numbers, each row possibly having leading zeroes;</li><li>the &quot;spam/ham&quot; column of the input dataset is recast with the <strong>&quot;one-hot encoding&quot;</strong>: that is, it will become two columns, one for &quot;spamminess&quot; and one for &quot;hamminess&quot;, both admitting the values zero or one (but with a single &quot;one&quot; per row): this turns out to be a formulation much friendlier to categorical classification tasks in general;</li><li>finally you'll split the labeled dataset into a &quot;training&quot; and a &quot;testing&quot; disjoint parts. This is a very important concept: the effectiveness of a model should always be validated on data points <strong>not used during training</strong>.</li></ol><p>All these steps can be largely automated by using data-science Python packagessuch as <code>pandas</code>, <code>numpy</code>, <code>tensorflow/keras</code>.</p><p>The above steps are accomplished by running a <strong>Jupyter interactive notebook</strong>(which you should inspect closely to learn more)as described below.In this way, you can run the steps one at a time and explore the contentsof the variables you create, for a better understanding of the transformationsbeing applied to the data.</p><p><img src="images/astranaut.png?raw=true" width="50" /> In the Gitpod environment, we started Jupyter for you (it is running in the <code>notebook-shell</code> console).To open it, run the following command, which will open the domain corresponding, in Gitpod, to the local portwith the notebook server listening:</p><pre><code>gp preview --external `gp url 8888`</code></pre><p>Now, <strong>CHECK YOUR POPUP BLOCKER</strong> to let the tab with the notebook get through.</p><blockquote><p>The password to unlock the notebooks is <code>spamclassifier</code>.</p></blockquote><p>Once the notebook is available, navigate to the <code>notebook</code> directory and click on <code>prepareDataset.ipynb</code> to open it (in yet another tab).</p><p>Run one cell at a time, in sequence, by selecting it and hitting <code>Shift-Enter</code>. <strong>There are cells with the sole purpose of inspecting the contents of some variables</strong>: take your time, use them to better understand what's going on.</p><blockquote><p><em>Note</em>: don't worry if you see a message such as <code>Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory</code>. It just means that this environment lacks the CUDA libraries, hence most Tensorflow tasks will be considerably slower than on a GPU. If you work on your laptop, you may want to switch to using a GPU for the training task, if you have the option to do so.</p></blockquote><p>The dataset preparation starts with the CSV file you saw earlierand ends up exporting the new data format in the <code>training/prepared_dataset</code>directory. Two observations are in order:</p><ul><li>the &quot;big matrix of numbers&quot; encoding the messages and the (narrower) one containing their spam/ham status are useless without the tokenizer: after all, to process a new message you would need to make it into a sequence of numbers using the same mapping. For this reason, it is important to export the tokenizer as well, in order to later <em>use</em> the classifier.</li><li>the <code>pickle</code> protocol used in writing the reformulated data is strictly Python-specific and should not be treated as a long-term (or interoperable!) format. Please see next step (below) for a sensible way to store model, tokenizer and metadata on disk.</li></ul><p>Try to have a look at the <code>pickle</code> file created by the <code>prepareDataset.py</code> script. Well,it's a binary file indeed, and there is not much to be seen there. Let's move along.</p><p>When you are finished, choose &quot;Close and Halt&quot; from the notebook &quot;File&quot; menu;</p><p>At the end, close main Jupyter the browser tab and stop the notebook backend that was running in the console (<code>Ctrl-C</code> + <code>y</code> for confirmation);</p><blockquote><p>If you are running <strong>on your local machine</strong>, simply run <code>jupyter notebook</code> in a terminal window and the main Jupyter browser tab should open already for you.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h3><p>It is time to train the model, i.e. fit a neural network to the task ofassociating <em>a spam/ham label to a text message</em>.Well, actually the task is now more like &quot;associating probabilities for 0/1 to a sequenceof integer numbers (padded to fixed length with leading zeroes)&quot;.</p><p><img src="images/astranaut.png?raw=true" width="50" /> The code for creating and training the model is very short (a handful of lines of code,excluding loading from disk and writing to it), but running it will take several minutes:launch the script</p><pre><code>python trainModel.py</code></pre><p>and wait for it to finish (it will take probably eight minutes or so on Gitpod,possibly more on your own computer, depending on the specs).</p><p>The training script works as follows:</p><ol><li>all variables created and stored in the previous steps are loaded back to memory;</li><li>a specific architecture of a neural network is created, still a &quot;blank slate&quot; in terms of what it &quot;knows&quot;. Its core structure is that of a LSTM (<a href="https://en.wikipedia.org/wiki/Long_short-term_memory">long-short-term-memory</a>), a <a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTM">specific kind</a> of recurrent neural network with some clever modifications aimed at enhancing its ability to &quot;remember&quot; things between non-adjacent locations in a sequence, such as two displaced positions in a string of text;</li><li>the network (your classifier) is trained: that means it will progressively adapt its internal (many thousands of) parameters in order to best reproduce the input training set. Each individual neuron in the network is a relatively simple component - the &quot;intelligence&quot; coming from their sheer quantity and the particular choice of parameters determining which neurons affect which other and by how much;</li><li>Once the training process has finished, the script carefully saves everything (model, tokenizer and associated metadata) in a format that can be later loaded by the API in a stand-alone way.</li></ol><details><summary>Show me Gitpod during training</summary><h4><a class="anchor" aria-hidden="true" id="the-training-process"> </a>The training process</h4><p>Training progresses in &quot;epochs&quot;, each epoch representing a complete sweepthrough the input dataset. Several metrics are printed during training:</p><ul><li><code>accuracy</code>: this is the fraction of predictions that match the labeled input (higher is better);</li><li><code>loss</code>: the value of the &quot;loss function&quot;, which measures how close are the predictions to the input data (lower is better). The precise definition of the loss function is derived from information theory: the idea is to quantify &quot;departure from ideal predictions&quot; fairly in all directions and in a way that favors gradual improvement of the parameters. <em>In <a href="https://keras.io/api/losses/probabilistic_losses/#categoricalcrossentropy-class">our case</a>, we employ the <a href="https://en.wikipedia.org/wiki/Cross_entropy">&quot;categorical cross-entropy&quot;</a> loss function, particularly suitable for models that choose between two or more output labels</em>;</li><li><code>val_accuracy</code>, <code>val_loss</code>: the same quantities as above, but calculated at end of epoch on the validation dataset (i.e. the <code>X_test</code> and <code>y_test</code> portion of the input labeled data).</li></ul><img src="images/during_training.png?raw=true" /></details><p>Perhaps by now the training process is completed and everything has beensaved in the <code>training/trained_model_v1</code> directory.</p><blockquote><p><strong>Note</strong>: it's advisable to keep a versionnumber in the model to be able to seamlessly switch to a newer classifier, or evenhypothetically to expose several of them at once in a single API._This aspect, and its implications in how to design the API, is examinedin more detail in the example found at<a href="https://github.com/hemidactylus/mlops-speedrun-spamclassifier">hemidactylus/mlops-speedrun-spamclassifier</a>,which builds from the one you are reading.</p></blockquote><p>Take a look in the output directory: there should be</p><ul><li>a (small) JSON file with some metadata describing some features of the model;</li><li>a (larger) JSON file containing the full definition of the tokenizer. This has been created, and will be loaded, using helper functions provided with the tokenizer itself for our convenience;</li><li>a (rather large) binary file containing &quot;the model&quot;. That means, among other things, the shape and topology of the neural network and all &quot;weights&quot;, i.e. the parameters dictating which neurons will affect which others, and by how much. Saving and loading this file, which is in the <a href="https://www.tensorflow.org/tutorials/keras/save_and_load#hdf5_format">HDF5 format</a>, is best left to routines kindly offered by Keras.</li></ul><blockquote><p><strong>Note</strong>: if it is not possible to train the model (it takes too long, orthe hardware resources are not enough, whatever), no fear! You will still beable to complete the practice and play with the API using a lightweight<em>mock model class</em>. Just remember, when starting the API, to edit the <code>.env</code>file so that it reads <code>MOCK_MODEL_CLASS=&quot;0&quot;</code>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="test-the-trained-model"> </a>Test the trained model</h3><p>Before moving on to the API section, make sure that the savedtrained model is self-contained: that is, check that by loadingthe contents of <code>training/trained_model_v1</code>, and nothing else, you are ableto perform meaningful estimates of the spam/ham status for a new arbitrarypiece of text.</p><p><img src="images/astranaut.png?raw=true" width="50" /> The script <code>loadTestModel.py</code> does exactly that: it loads the saved modeland uses that to &quot;predict&quot; the ham/spam labels for new texts. Try it with</p><pre><code>python loadTestModel.py</code></pre><p>or even, if you feel creative, something like</p><pre><code>python loadTestModel.py This is my example sentence and let us see if this is ham</code></pre><p>Note that the output is given in terms of &quot;probabilities&quot;, or &quot;confidence&quot;:one can interpret a result like <code>{'ham': 0.92, 'spam': 0.08}</code> as meaning<em><strong>the input is ham with 92% confidence</strong></em>. Indeed, generally speaking,ML-based classifiers are very sophisticated and specialized machinesfor statistical inference.</p><p>If you look at the (very simple) code of this function, you will see how themodel, once loaded, is used to make predictions (it all boils down to the model's<code>predict</code> method, but first the input text must be recast as sequence of numberswith the aid of the tokenizer,and likewise the result must be made readable by humans again).</p><p><em>Note</em>: the model lends itself very well to processing several input textsin parallel (which generally is a big advantage in terms of performance);this fact will be exploited in the API as well. <strong>Can you see where this is apparentin this test code?</strong></p><details><summary>Tell me the answer</summary><p><strong>Answer:</strong> The function <code>predictSpamStatus</code> always receives a single text as input,but this text is made into a one-element list before encoding as numbers(<code>pTokenizer.texts_to_sequences([text])</code>). Much in the same way,once the model has emitted its prediction, the code gets the first (and only)element of a list of results (<code>yOutput[0]</code>).</p><p>Just by looking at these manipulations one can guess that multiple textscan be processed in parallel with negligible changes to the code, which indeedturns out to be the case.</p></details><h2><a class="anchor" aria-hidden="true" id="expose-as-api"> </a>Expose as API</h2><p>Now your model is trained and saved to disk, ready to be used.It is time to expose it with FastAPI in the form of easy-to-useHTTP requests.</p><p>You'll first look at a minimal version of the API, just to get ataste of how FastAPI works, and then turn to a full-fledged version,with more endpoints and a database-backed caching layer.</p><h3><a class="anchor" aria-hidden="true" id="configure-dot-env-file"> </a>Configure dot-env file</h3><p>Now you need to prepare a configuration file to give the API all requiredparameters to connect to the database. Fortunately, the Astra CLI has youcovered and will automate most of it for you: all you need is to run a coupleof commands.</p><p><img src="images/astranaut.png?raw=true" width="50" /> First, configure the Astra CLI so that it knows the &quot;token&quot; partof your DB Admin Token (i.e. the string starting with <code>AstraCS:...</code>):</p><pre><code>astra setup</code></pre><blockquote><p>If you get a &quot;command not found&quot; error, please install Astra CLI manuallywith <code>curl -Ls &quot;https://dtsx.io/get-astra-cli&quot; | bash</code>and retry the above commands after running <code>source ~/.bashrc</code>.</p></blockquote><details><summary>Show me the setup step</summary>    <img src="images/astra-setup-token.png?raw=true" /></details><p>You can test that everything works by inspecting your database:</p><pre><code>astra db get workshops</code></pre><details><summary>Show me a typical output</summary>    <img src="images/astra-db-get.png?raw=true" /></details><p><img src="images/astranaut.png?raw=true" width="50" /> At this point you can have the CLI prepare a <code>.env</code> file with all requiredconnection information (keyspace name, access token, location of the<a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">secure connect bundle</a> which it downloads automatically)available as environment variables:</p><pre><code>astra db create-dotenv -k spamclassifier workshops</code></pre><details><summary>Show me an alternative to the above command</summary><p>The <code>create-dotenv</code> runs only with the newest Astra CLI. In case you experience trouble,make sure you have a working CLI (<code>curl -Ls &quot;https://dtsx.io/get-astra-cli&quot; | bash</code>and then <code>source ~/.bashrc</code>) and then run the following:</p><pre><code>astra db download-scb workshops -f secure-connect-workshops.zipecho &quot;ASTRA_DB_SECURE_BUNDLE_PATH=\&quot;$PWD/secure-connect-workshops.zip\&quot;&quot; &gt; .envecho &quot;ASTRA_DB_KEYSPACE=\&quot;spamclassifier\&quot;&quot; &gt;&gt; .env# REPLACE YOUR &quot;AstraCS:...&quot; TOKEN IN THE FOLLOWINGecho &quot;ASTRA_DB_APPLICATION_TOKEN=\&quot;AstraCS:...\&quot;&quot; &gt;&gt; .env</code></pre><p>You are now good to go, as long as your <code>.env</code> defines the following variables:<code>ASTRA_DB_SECURE_BUNDLE_PATH</code>, <code>ASTRA_DB_KEYSPACE</code>, <code>ASTRA_DB_APPLICATION_TOKEN</code>.</p></details><p><img src="images/astranaut.png?raw=true" width="50" /> Let us add to this file a couple of settings specific to our API:</p><pre><code>cat .app-env.sample &gt;&gt; .env</code></pre><p>At this point, the <code>.env</code> file should be OK. If you are curious, have a lookat what's in it: there will be keyspace name, connection secrets, APIsettings and so on.</p><details><summary>Show me what the dot-env file might look like</summary>    <img src="images/dot-env-2.png?raw=true" /></details><blockquote><p>If you don't have (or don't want to use) the actual trained model at hand,you can switch to a lightweight mock by setting<code>MOCK_MODEL_CLASS=&quot;1&quot;</code> in this dot-env file. The API part of the practicewould &quot;not even notice the change&quot;.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="baby-steps-a-minimal-api"> </a>Baby steps: a minimal API</h3><p><img src="images/astranaut.png?raw=true" width="50" /> Now that the trained model is there, the <code>.env</code> file is ready and thesecure bundle is in place, you can start a minimal form of the API with:</p><pre><code>uvicorn api.minimain:miniapp --reload</code></pre><blockquote><p>In this command, you are telling <code>uvicorn</code> (an <a href="https://www.uvicorn.org/">ASGI server</a>capable of runningasynchronous Python APIs) to launch the <code>miniapp</code> API found in the <code>minimain</code> module;you also ask it to keep a watch on all involved files and auto-reload on anyfile change.</p></blockquote><p>After some (rather verbose) output from Tensorflow, you should see the<code>INFO: Application startup complete.</code> notice: the API has loaded the classifierand is ready to acceptrequests (on localhost and port 8000, as per defaults).You will first fire some requests and then have a quick look at howthe code is structured.</p><blockquote><p>Note that this code is purposefully kept very simple: besidesnot implementing all the features, it also refrains from using some of the facilitiesprovided by FastAPI to better focus on the basics. Look at the full API belowfor a more comprehensive usage of the framework.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="query-the-minimal-api"> </a>Query the minimal API</h4><p>You'll use the command-line tool <code>curl</code> to issue simple HTTP requests at yourrunning API (but, of course, any tool capable of doing GETs and POSTs would do).</p><p><img src="images/astranaut.png?raw=true" width="50" /> While the API is running, switch to the other <code>bash</code> console in Gitpod (usingthe console switcher at the bottom right of your IDE) and try the following command:</p><pre><code>curl -s http://localhost:8000 | python -mjson.tool</code></pre><p>This issues a GET request to the <code>&quot;/&quot;</code> API endpoint. The result is a smallsummary, in JSON form, of some of the API parameters inherited through the<code>.env</code> file.</p><p>The logic to retrieve these settings and make them available to the APIis in the <code>config.py</code> module and relies on the <code>pydantic</code> package,that excels at data validation while allowing for surprisingly short and cleancode. <code>pydantic</code> pairs very well with FastAPI (<a href="https://fastapi.tiangolo.com/advanced/settings/">documentation</a>).</p><blockquote><p>If you are feeling adventurous, try stopping the API (Ctrl-C in the APIshell) and re-starting as<code>API_NAME=&quot;Fire Dragon!&quot; uvicorn api.minimain:miniapp --reload</code>.Try again the above <code>curl</code> command to see the redefined environmentvariable <code>API_NAME</code> taking precedence over the dot-env file.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> This minimal API already accomplishes the basic task for today: namely,it makes the spam classifier available as an API. Let's try with some POST requests:</p><pre><code># single-text endpointcurl -s -XPOST \  localhost:8000/prediction \  -d '{&quot;text&quot;: &quot;Click TO WIN a FREE CAR&quot;}' \  -H 'Content-Type: application/json' | python -mjson.tool# multiple-texts endpointcurl -s -XPOST \  localhost:8000/predictions \  -d '{&quot;texts&quot;: [&quot;Click TO WIN a FREE CAR&quot;, &quot;I like this endpoint&quot;]}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>That's it: the API correctly receives requests, uses the model to getpredictions (i.e. spam/ham scores for each message), and returnsthem back to the caller.</p><details><summary>Show me what the output could look like</summary><p><strong>Note</strong>: since training is a randomized process, the actual numbers you willobtain will not necessarily match what you see here. But you can expecta broad agreement, with the first text being seen as &quot;spam&quot; with at least 80%confidence and the second one being labeled &quot;ham&quot; at least as clearly.</p><img src="images/miniapi_requests.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="inspect-the-minimal-api-code"> </a>Inspect the minimal API code</h4><p>What is running now is a basic API architecture, which makes use of justthe fundamental features of FastAPI: you will shortly launch a moresophisticated one. But first we want to make some observations on thecode structure:</p><p>The main object is the <code>FastAPI</code> instance called <code>miniapp</code>: this exposes a<em>decorator</em> that can be used to <a href="https://fastapi.tiangolo.com/tutorial/first-steps/#define-a-path-operation-decorator">attach a Python function</a>to an API endpoint(see e.g. the <code>@miniapp.get('/')</code> preceding the function definition).FastAPI will try to match the function arguments with the request parameters.</p><p>To make this matching more effective, and gain input validation &quot;for free&quot; withthat, the code defines &quot;models&quot; in the <code>pydantic</code> sense and specifies them as the typesfor the endpoint functions. Try to invoke the API as follows and see what happens(note the empty body):</p><pre><code>curl -v -s -XPOST \  localhost:8000/prediction -d '{}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>The core of the API, the classifier model, is conveniently wrapped into a separateclass, <code>AIModel</code>, that takes care of loading from files and predicting; it alsoperforms the necessary conversions to offer a friendlier interface to the caller.The model is instantiated within a special <code>@miniapp.on_event(&quot;startup&quot;)</code>utility decorator offered by FastAPI whichis used to &quot;register&quot; some operations, effectively scheduling them for executionas soon as the rest of the API is loaded. Then, the model will live as a globalvariable accessible from the various endpoint functions.</p><p><strong>Note</strong>: have a look at the class in <code>AIModel.py</code>: there is nothing specificto spam classification there. Indeed, this is a widely <strong>reusable class</strong>, that canload and expose any text classifier based on a similar tokenizer-then-predictstructure as it is.</p><h3><a class="anchor" aria-hidden="true" id="inspect-the-full-api"> </a>Inspect the full API</h3><p>You can now stop the minimal API (Ctrl-C in its console) and get ready to startthe full API. This is your &quot;production-ready&quot; result and, as such, has many morenice features that we will now list (just giving pointers for those interestedin knowing more):</p><details><summary>Tell me about the nice features of this API</summary><h4><a class="anchor" aria-hidden="true" id="database-and-caching"> </a>Database and Caching</h4><p>In general, running a classifier on some input can be expensive in terms of CPUand time. Since,once the model is trained, predictions are deterministic, it would make senseto introduce a caching mechanism, whereby texts that were already processedand cached are not computed again.</p><p>You happen to have a database, our Astra DB instance, and you'll use itto store all predictions for later querying and retrieval. To do so, you need:a table, containing processed text data; a connection to the database,that will be kept alive throughout the life of the API; and methods to write,and read, entries in that table.</p><p>Technically, you will use the Cassandra Python drivers, and in particularthe <a href="https://docs.datastax.com/en/developer/python-driver/3.25/object_mapper/">Object Mapper facility</a>they offer. Look into <code>api/database/*.py</code>:there is a module that <a href="https://docs.datastax.com/en/developer/python-driver/3.25/getting_started/#connecting-to-astra">sets up the connection</a>, using the secrets found in the <code>.env</code>,and another where the models are defined - in particular the <code>SpamCacheItem</code> model, representing an entry in the cache.</p><p>The database initialization will go together with the spam-model loading intothe API &quot;startup&quot; hook.Note that there is no need to explicitly create the table: creation,when needed, is handledautomatically by the <code>sync_table</code> calls in the <code>onStartup()</code> method.</p><p>This table is a Cassandra table: we have modeled it according to the query it needsto support. In this case that means that &quot;model version&quot; and &quot;input text&quot;form the primary key (also partition key), and the prediction outputs are additional data columns.(Note: using the object mapper, the structure of the table is impliedin the attributes given to the fields in the corresponding model).</p><p>At this point, the endpoint functions can use the <code>cachePrediction</code> and<code>readCachedPrediction</code> functions to look for entries in the cache and store them.</p><p>Note that caching introduces a nontrivial possibility in the multi-input endpoint:namely, only some of the input texts may be cached: as a demonstration, and assumingthe cost of computation is way higher than the cost of development/maintenance(which in many cases is true, especially with ML!), the code goes to great lengthsto ensure this is handled sparingly and transparently to the caller. See the logicin <code>multiple_text_predictions</code> for the details.</p><h4><a class="anchor" aria-hidden="true" id="documentation-and-typed-response"> </a>Documentation and typed response</h4><p>We all love well-documented APIs. And FastAPI makes it pretty easy to do so:</p><ul><li>when instantiating the main <code>FastAPI</code> object, all sorts of properties (version number, grouping of endpoints, API title and so on) <a href="https://fastapi.tiangolo.com/tutorial/metadata/">can be passed to it</a>;</li><li>docstrings in the endpoint functions, and even the function names themselves, <a href="https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#description-from-docstring">are known to FastAPI</a>;</li><li>additional annotations can be passed to the endpoint decorators, such as the expected structure of the <a href="https://fastapi.tiangolo.com/tutorial/response-model/#response-model">response JSON</a> (for this reason, we took the extra care of defining <code>pydantic</code> models for the responses as well, for instance <code>PredictionResult</code>).</li></ul><p>This is all used by FastAPI to automatically expose a Swagger UI that makes it easyto experiment with the running API and test it(you'll later see how this makes developers' lives easier).Also a machine-readable description of the APIconforming to the OpenAPI specifications is produced and made available.</p><h4><a class="anchor" aria-hidden="true" id="call-logging-and-streamingresponse"> </a>Call logging and StreamingResponse</h4><p>Caching is not the only use you'll make of a database: also alltext classification requests are logged to a table, keeping track of the time, the textthat was requested and the identity of the caller.</p><blockquote><p>This may be useful, for instance, to implement rate limiting; in this APIyou simply expose the datum back to the caller, who is able to issue a requestsuch as <code>curl -s http://localhost:8000/recent_log | python -mjson.tool</code> andexamine their own recent calls.</p></blockquote><p>The problem is, in principle this may be a huge list, and you do notwant to have it all in memory on the API side before sending out a giant responseto the caller. Especially considering the data from the database will be paginated(in a way that is handled automatically for us by the Cassandra drivers' object models).</p><p>So what do you do here? It would be nice to start streaming out the API responseas the first chunk of data arrives from the database ... and that is exactly what we do,with the <code>StreamingResponse</code> construct <a href="https://fastapi.tiangolo.com/advanced/custom-response/?h=streamingresponse#streamingresponse">provided by FastAPI</a>.</p><p>The idea is very simple: you wrap something like a generator with <code>StreamingResponse</code> and FastAPI handles the rest.In this case, however, you want the full response to also be a valid JSON, so you do some tricks to ensure that(taking care of the opening/closing square brackets, to avoid a trailing comma at end of list, etc).In practice the full JSON response is crafted semi-manually (see function <code>formatCallerLogJSON</code> for the gory details).</p><p>For a look at the structure and contents of the database table with the call log data,and a short account on the reason for that choice, see below (section &quot;Inspect the database&quot;).</p><h4><a class="anchor" aria-hidden="true" id="support-for-a-get-endpoint"> </a>Support for a GET endpoint</h4><p>For illustrative purposes, the API also has a GET endpoint for requesting(single-)text classification. A useful feature is that the <code>pydantic</code> modelsdeclared as endpoint dependencies will be filled also using queryparameters, if they are available and the names match. In this way, theGET endpoint will work, and will internally be able to use a <code>SingleTextQuery</code>,even when invoked as follows (try it!)</p><pre><code>curl -s \    &quot;localhost:8000/prediction?text=This+is+a+nice+day&amp;skip_cache=true&amp;echo_input=1&quot; \    | python -mjson.tool</code></pre><p>(The way to have this mechanism working goes through the topic of dependency injectionin FastAPI and in particular the &quot;classes as dependencies&quot; part. See<a href="https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies#shortcut">here</a>for more details on this).</p></details><h3><a class="anchor" aria-hidden="true" id="launch-the-full-api"> </a>Launch the full API</h3><p>Without further ado, it is time to start the full-fledged API.</p><p><img src="images/astranaut.png?raw=true" width="50" /> Hit Ctrl-C in the API console (if you didn't already stop the &quot;minimal API&quot;)and launch the following command this time (you're now closer to &quot;production&quot;,so you do not want the <code>--reload</code> flag any more):</p><pre><code>uvicorn api.main:app</code></pre><p>The full API is starting (and again, after a somewhat lengthy output you willsee something like <code>Uvicorn running on http://127.0.0.1:8000</code> being printed).</p><blockquote><p>If the API cannot start and you see an error such as<code>urllib.error.HTTPError: HTTP Error 503: Service Unavailable</code> while connectingto the DB, most likely your Astra DB instance is currently hibernated. In that case, just open the CQLConsole on the Astra UI to bring your DB back to operation.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> Quickly launch a couple of requests with <code>curl</code> on the <code>bash</code> console(the same requests already sent to the minimal API earlier) and check theoutput:</p><pre><code># get basic infocurl -s http://localhost:8000 | python -mjson.tool</code></pre><p>This output has been enriched with the &quot;ID of the caller&quot; (actually the IPthe call comes from). To access this piece of information from within the route,you make use of the very flexible dependency system offered by FastAPI, simplydeclaring the endpoint function as having a parameter of type <code>Request</code>:you will be then able to read its <code>client</code> member to access the caller IP address.</p><blockquote><p>Note: when running behind a reverse-proxy one would have to configurethe latter so that it makes use of the <code>X-Forwarded-For</code> header, and it is thatheader instead that has to be read within the Python code.See <a href="https://stackoverflow.com/questions/60098005/fastapi-starlette-get-client-real-ip">this</a> for more information.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> Now for an actual request to process some text:</p><pre><code># single-text endpointcurl -s -XPOST \  localhost:8000/prediction \  -d '{&quot;text&quot;: &quot;Click TO WIN a FREE CAR&quot;}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>Also this output is somewhat richer: there is an <code>&quot;input&quot;</code> field (not filledby default) and, most important, a <code>&quot;from_cache&quot;</code> field - presumably <code>false</code>.But, if you re-launch the very same <code>curl</code> command (try it!), the responsewill have <code>&quot;from_cache&quot;</code> set to <code>true</code>: this is the caching mechanism at work.</p><p>You could play a bit more with the API, but to do so, let us move to a friendlierinterface, offered for free by FastAPI: the Swagger UI.</p><h2><a class="anchor" aria-hidden="true" id="use-the-api"> </a>Use the API</h2><h4><a class="anchor" aria-hidden="true" id="open-the-swagger-ui"> </a>Open the Swagger UI</h4><p>In principle, you <em>could</em> access the Swagger UI by visiting <code>http://127.0.0.1:8000/docs</code>.If you are running locally that's the URL you should open, end of story.</p><p>If you are working in Gitpod, however, the notion of &quot;localhost&quot; makes senseonly within Gitpod itself. Luckily for you, Gitpod maps local ports to actual domainnames (that can optionally be made publicly accessible as well).</p><p><img src="images/astranaut.png?raw=true" width="50" /> To find out the URL for your docs, then, run this command in the <code>bash</code> shell:</p><pre><code>echo `gp url 8000`/docs</code></pre><p>and open the output URL in a new tab (it would look more or lesslike <code>https://8000-&lt;something-something&gt;.gitpod.io/docs</code>).You will see the Swagger UI: you can now browse the API documentation and eventry the endpoints out.</p><details><summary>Show me the Swagger UI main page</summary><img src="images/swagger_ui.png?raw=true" /></details><p>Take a moment to look around: look at the details for an endpoint and noticethat schema description are provided for both the payload and the responses.</p><h4><a class="anchor" aria-hidden="true" id="fun-with-caching"> </a>Fun with caching</h4><p>Let's have some fun with the caching mechanism and the multiple-text endpoint.For this experiment you will borrow a few lines from a famous poem by T. S. Eliot.</p><p><img src="images/astranaut.png?raw=true" width="50" /> First locate the <code>/predictions</code> endpoint, expand it and click &quot;Try it out&quot;to access the interactive form. Edit the &quot;Request Body&quot; field pasting thefollowing:</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;When the wind blows the water white and black.&quot;  ]}</code></pre><p>Click the big &quot;Execute&quot; blue button and look for the &quot;Response body&quot; below.You will see that both lines are new to the classifier, indeed their <code>from_cache</code>returns <code>false</code>.</p><p>Now add a third line and re-issue the request, with body</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;When the wind blows the water white and black.&quot;,    &quot;By sea-girls wreathed with seaweed red and brown&quot;  ]}</code></pre><p>and check the response this time: the <code>from_cache</code> will have a <code>true-true-false</code>pattern this time. (You can also try adding <code>&quot;skip_cache&quot;: true</code> to the bodyand see what happens to the response).</p><p>Finally, reinstate all lines of the stanza (so far only the odd ones were passed!):</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;Combing the white hair of the waves blown back&quot;,    &quot;When the wind blows the water white and black.&quot;,    &quot;We have lingered in the chambers of the sea&quot;,    &quot;By sea-girls wreathed with seaweed red and brown&quot;,    &quot;Till human voices wake us, and we drown.&quot;  ]}</code></pre><p>How do the values of <code>from_cache</code> look like now? (well, no surprises here).</p><p>Take a look at the cache-reading logic in the <code>multiple_text_predictions</code>function code in <code>main.py</code>. Sometimes it pays off to carefully avoid wasting CPUcycles.</p><h4><a class="anchor" aria-hidden="true" id="call-log"> </a>Call log</h4><p>You can also try the <code>recent_log</code> endpoint in Swagger to have a (time-ordered)listing of all the classification requests you issued recently.</p><p>As you saw earlier, behind the scenes this is a <code>StreamingResponse</code> and,instead of relying on FastAPI to package your response as JSON, you manuallyconstruct its pieces as the data arrives from the database.</p><p><img src="images/astranaut.png?raw=true" width="50" /> Try the <code>/recent_log</code>endpoint in Swagger and check the output matches your previous experiments.</p><p>Go back, for this endpoint, to the <code>bash</code> console as well,and check the result of:</p><pre><code>curl -s localhost:8000/recent_log | python -mjson.tool</code></pre><p>Surprise! Most likely you are not seeing your Eliot lines being listed,at least not on Gitpod (but you may see the calls you issued earlier with <code>curl</code>).The reason is that requests coming from the Swagger UI pass through Gitpod'sport and domain mappings and appear to come from a different IP than thosefrom &quot;the local localhost&quot;.</p><p>You may want to verify this by comparing the <code>caller_id</code> returned by theSwagger invocation of the <code>/</code> endpoint and the result of<code>curl -s localhost:8000 | python -mjson.tool</code>.</p><h4><a class="anchor" aria-hidden="true" id="inspect-the-database"> </a>Inspect the database</h4><p><img src="images/astranaut.png?raw=true" width="50" /> You can alsodirectly look at the contents of the tables on Astra DB. To do so,invoke the Astra CLI to open a <code>cqlsh</code> console connected to the database:</p><pre><code>. ~/.bashrcastra db cqlsh workshops</code></pre><details><summary>Click for an alternative way: the CQL Web Console in Astra</summary><p>A Web-based CQL Console is available in the browser within the Astra UI as well.</p><p>Choose your database in the Astra main dashboard and click on it;next, go to the &quot;CQL Console&quot; tab in the main panel. In a few seconds theconsole will open in your browser, already connected to your database andwaiting for your input.</p><img src="images/astra_get_to_cql_console.gif?raw=true" /></details><blockquote><p>Commands entered in the CQL Console are terminated with a semicolon (<code>;</code>)and can span multiple lines. Run them with the <code>Enter</code> key. If you want tointerrupt the command you are entering, hit <code>Ctrl-C</code> to be brought backto the prompt. To leave <code>cqlsh</code>, use the <code>EXIT</code> command.See <a href="https://docs.datastax.com/en/cql-oss/3.x/cql/cql_reference/cqlCommandsTOC.html">here</a>for more references to the CQL language commands.</p></blockquote><p>Start by telling the console that you will be using the <code>spamclassifier</code> keyspace:</p><pre><code>USE spamclassifier;</code></pre><p>Which tables are there?</p><pre><code>DESC TABLES;</code></pre><p>List some sample records from the cache table:</p><pre><code>SELECT * FROM spam_cache_items LIMIT 10;</code></pre><p>And, similarly, look at the recent call log for the &quot;localhost&quot; caller:</p><pre><code>SELECT * FROM spam_calls_per_caller    WHERE caller_id = '127.0.0.1'    AND called_hour='2022-11-09 17:00:00.000Z';</code></pre><blockquote><p>For the above to show results, you have to take care of adapting thedate and (whole) hour to current time, and possibly the <code>caller_id</code>could be edited to reflect what you see from the Swagger <code>/</code> response.</p></blockquote><p>The reason why the call log is partitioned in hourly chunks (and not onlyby <code>caller_id</code>) has to do with the way the Cassandra database, on which Astra DBis built, works: in short we do not want our partitions to grow indefinitely.Unfortunately a thorough discussion of this topic would lead us too far away.If you are curious, we strongly recommend you start from the exercises <a href="https://www.datastax.com/learn/data-modeling-by-example">Data modeling by example</a>and <a href="https://www.datastax.com/cassandra">What is Cassandra?</a>.You will embark on a long and exciting journey!</p><h2><a class="anchor" aria-hidden="true" id="homework-detailed-instructions"> </a>Homework detailed instructions</h2><p>You are asked to add a new GET endpoint in the API that takes no arguments and returnsa description of how the neural net of the spam classifier model is structured.</p><p>Luckily for you, the <code>tensorflow/keras</code> model (that gets loaded from disk withinthe <code>AIModel</code> class at startup) already has a <code>to_json()</code> method that returnsa long JSON string similar to:</p><pre><code>{    &quot;class_name&quot;: &quot;Sequential&quot;,    &quot;config&quot;: {        &quot;name&quot;: &quot;sequential&quot;,        &quot;layers&quot;: [            {                &quot;class_name&quot;: &quot;InputLayer&quot;,                &quot;config&quot;: {                    &quot;batch_input_shape&quot;: [                        null,                        300                    ],                    &quot;dtype&quot;: &quot;float32&quot;,    ...    ...</code></pre><p>Your task is to expose this JSON object to the user, who might legitimately beinterested in what choice of network topology is the classifier based on.</p><details><summary>Show me how that could look like</summary>    <img src="images/neural_config.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="appendix-i-deploy-behind-a-reverse-proxy-nginx"> </a>Appendix I: deploy behind a reverse proxy (nginx)</h3><p>So far, you've been running the API with <code>uvicorn</code> from the command line.For a final deploy to production (on a Linux box), some last steps are missing.These are not covered in the practice of this interactive workshops, howeverwe outline them here, assuming you are using <code>nginx</code> as reverse proxy,and you do have a domain name (but no HTTPS configured):</p><p><strong>First</strong> ensure your Python virtualenv, say <code>spamclassifier</code>, is availableon the server.</p><p><strong>Second</strong> you will create a service file, <code>/etc/systemd/system/spamclassifier.service</code>,tasked with keeping the <code>uvicorn</code> instance running. Here we assume the service manager is <code>systemd</code>.</p><pre><code>[Unit]Description= ...After=network.target[Service]User=...Group=...WorkingDirectory=/path/to/repo_dir# these may be here and override the .envEnvironment=&quot;API_NAME=Deployed Spam Classifier&quot;ExecStart=/path/to/virtual/environments/spamclassifier/bin/uvicorn api.main:app --host 127.0.0.1 --port 9999 --workers 4[Install]WantedBy=multi-user.target</code></pre><p>(<code>9999</code> is an internal port you may choose at will, but it must match the file below;<code>4</code> is the number of workers <code>uvicorn</code> will spawnand should be tuned to your predicted workload and the server capacity.<strong>Note</strong> that you will have a set of resources, model and DB connection, per each worker).</p><p><strong>Third</strong>, after starting the service (<code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl start spamclassifier</code>),make your API known to <code>nginx</code> by creating a file <code>/etc/nginx/sites-available/spamclassifier_api</code>:</p><pre><code>server {    listen 80;    server_name api.myspamclassifier.com;    location / {        proxy_set_header Host $http_host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_redirect off;        proxy_buffering off;        proxy_pass http://uvicorn_spamclassifier;    }}upstream uvicorn_spamclassifier {  server 127.0.0.1:9999;  keepalive 64;}</code></pre><p><strong>Fourth</strong>, create a symlink to the above file in <code>/etc/nginx/sites-available/</code> and restart <code>nginx</code>(<code>sudo systemctl restart nginx</code>).</p><p>This should get the API running and accessible from outside. As mentioned earlier, to properly identifythe <code>caller_id</code> at API level, your code should be modified to inspect the <code>X-Forwarded-For</code> headerinstead of the actual caller IP address. Access to request headers in FastAPIis described <a href="https://fastapi.tiangolo.com/tutorial/header-params/#header-parameters">here</a>.</p><h3><a class="anchor" aria-hidden="true" id="appendix-ii-model-versioning-with-fastapi"> </a>Appendix II: model versioning with FastAPI</h3><p>It is a standard requirement in production-grade ML to have several versionsof a model, which possibly have to be exposed at the same time by the API.Of course, in that case a clear labeling of the endpoints(e.g. <code>/v1/predict</code> vs. <code>/v2/predict</code>) is essential to avoid messing up!</p><p>This topic is not examined in detail here, but if you want to know moreyou are encouraged to look at the<a href="https://github.com/hemidactylus/mlops-speedrun-spamclassifier">hemidactylus/mlops-speedrun-spamclassifier</a>repository, which shows a possible way to build re-usable standardized routeswhich can be attached to different models in a single API.</p>
SUCCESS SAVING README for datastaxdevs-workshop-ai-as-api
Getting astra.json for datastaxdevs/workshop-streaming-game at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="drapetisca-a-multiplayer-online-game-with-astra-streaming-and-websockets"> </a>Drapetisca: a multiplayer online game with Astra Streaming and Websockets</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="astra-setup"> </a>Astra setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-create-your-astra-streaming-instance"> </a>1. Create your Astra Streaming instance</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1a-register"> </a>1a. Register</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1b-create-streaming"> </a>1b. Create streaming</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1c-retrieve-streaming-connection-parameters"> </a>1c. Retrieve streaming connection parameters</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-create-your-astra-db-instance"> </a>2. Create your Astra DB instance</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2a-create-the-database"> </a>2a. Create the database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-token"> </a>2b. Create a DB Token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2c-download-the-db-secure-connection-bundle"> </a>2c. Download the DB Secure Connection Bundle</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="configure-and-run-the-application"> </a>Configure and run the application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-load-the-project-into-gitpod"> </a>3. Load the project into Gitpod</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="3a-open-gitpod"> </a>3a. Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="3b-gitpod-interface"> </a>3b. Gitpod interface</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-api-setup"> </a>4. API setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4a-streaming-environment-variables-code-env-code-part-i"> </a>4a. Streaming environment variables (<code>.env</code>, part I)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4b-upload-the-db-secure-bundle-code-env-code-part-ii"> </a>4b. Upload the DB secure bundle (<code>.env</code>, part II)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4c-database-access-secrets-code-env-code-part-iii"> </a>4c. Database access secrets (<code>.env</code>, part III)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4d-start-the-api"> </a>4d. Start the API</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-client-setup"> </a>5. Client setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5a-install-dependencies"> </a>5a. Install dependencies</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5b-start-the-client"> </a>5b. Start the client</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="6-play-the-game"> </a>6. Play the game!</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6a-enter-the-game"> </a>6a. Enter the game</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6b-try-to-cheat"> </a>6b. Try to cheat</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6c-bring-your-friends"> </a>6c. Bring your friends</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6d-fun-with-the-streaming-ui"> </a>6d. Fun with the Streaming UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6e-a-quick-look-at-the-data-on-db"> </a>6e. A quick look at the data on DB</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="7-homework-instructions"> </a>7. Homework instructions</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7a-server-side"> </a>7a. Server side</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7b-client-side"> </a>7b. Client side</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7c-restart-test-and-take-a-screenshot"> </a>7c. Restart, test and take a screenshot</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="8-selected-topics"> </a>8. Selected topics</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8a-websockets-and-react"> </a>8a. WebSockets and React</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8b-fastapi"> </a>8b. FastAPI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8c-svg-tricks"> </a>8c. SVG Tricks</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2>
HTML FOR datastaxdevs-workshop-streaming-game<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="drapetisca-a-multiplayer-online-game-with-astra-streaming-and-websockets"> </a>Drapetisca: a multiplayer online game with Astra Streaming and Websockets</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-streaming-game"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Time: <em>50 minutes</em>. Difficulty: <em>Intermediate</em>. <a href="#lets-start">Start Building!</a></p><p>A simple multiplayer online game featuring</p><ul><li>Astra Streaming (a messaging system in the cloud, built on top of Apache Pulsar)</li><li>Astra DB (a Database-as-a-service built on Apache Cassandra)</li><li>WebSockets</li><li>React.js for the front-end</li><li>the Python FastAPI framework for the back-end</li></ul><!--- ENDEXCLUDE ---><p><img src="images/drapetisca_intro_v2.png" alt="Drapetisca screenshot" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Understand the architecture of a streaming-based application</li><li>Learn how Apache Pulsar works</li><li>See the interplay between streaming and persistent storage (a.k.a. database)</li><li>Learn about Websockets on client- and server-side</li><li>Understand how a FastAPI server can bridge Pulsar topics and WebSockets</li><li>Understand the structure of a Websocket React.js application</li><li><strong>get your very own online gaming platform to share with your friends!</strong></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>You don't have to, it's all already in the cloud! But there is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li><li><a href="https://www.python.org/downloads/">Python v3.8+ installed on your local system</a></li></ul><p>In this readme, we try to provide instructions for local development as well - but keep in mind thatthe main focus is development on Gitpod, hence <strong>We can't guarantee live support</strong> about local developmentin order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a GitHub account</li><li>You will also need an Astra account: don't worry, we'll work through that in the following</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice participation certificate a.k.a. badge.</p></blockquote><ul><li><em>Why &quot;Drapetisca&quot;?</em></li></ul><blockquote><p><em>Drapetisca socialis</em>, known as &quot;invisible spider&quot;, is a very small and hard-to-notice spider found throughout Europe.Since this is a multiplayer game that lets players have social interactions in the play area, why not choose a spiderwith &quot;socialis&quot; in its name?</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://youtu.be/jfOBPlcd9eA">Workshop Video</a></li><li><a href="slides/DataStaxDevs-workshop-Build_a_Multiplayer_Game_with_Streaming.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="images/streaming-workshop.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps as described below until you have your own app running in Gitpod.</li><li>Now roll up your sleeves and modify the code in two ways: (1) we want the API to send a greeting to each new player in the chat box, and (2) we want the player names in the game area to match the icon color. <em>Please read the detailed guidance found <a href="#7-homework-instructions">below</a></em>.</li><li>Take a SCREENSHOT of the running app modified this way. <em>Note: you will have to restart the API and reload the client to see all changes!</em></li><li>Submit your homework <a href="https://dtsx.io/streaming-game-homework">here</a>.</li></ol><p>That's it, you are done! Expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-create-your-astra-streaming-instance">Create your Astra Streaming instance</a></li><li><a href="#2-create-your-astra-db-instance">Create your Astra DB instance</a></li><li><a href="#3-load-the-project-into-gitpod">Load the project into Gitpod</a></li><li><a href="#4-api-setup">Set up/start the API</a></li><li><a href="#5-client-setup">Set up/start the client</a></li><li><a href="#6-play-the-game">Play!</a></li><li><a href="#7-homework-instructions">Homework instructions</a></li><li><a href="#8-selected-topics">Selected topics</a></li></ol><h2><a class="anchor" aria-hidden="true" id="astra-setup"> </a>Astra setup</h2><h3><a class="anchor" aria-hidden="true" id="1-create-your-astra-streaming-instance"> </a>1. Create your Astra Streaming instance</h3><p><em><strong><code>Astra Streaming</code></strong> is the simplest way to get a streaming infrastructure based on Apache Pulsarwith zero operations at all - just push the button and get your streaming.No credit card required - with the <strong>free tier</strong> comes a generous monthly-renewed credit for you to use.</em></p><p><em><strong><code>Astra Streaming</code></strong> is tightly integrated with <code>Astra DB</code>, the database-as-a-serviceused in most of our workshops (see below, we will use it momentarily).<strong>If you already have an Astra account for Astra DB, you can use thatone in the following (and jump to &quot;Create streaming&quot; below)!</strong></em></p><p>For more information on Astra Streaming, look at <a href="https://docs.datastax.com/en/astra-streaming/docs/">the docs</a>.For more information on Apache Pulsar, here is <a href="https://pulsar.apache.org/docs/en/concepts-overview/">the documentation</a>.</p><h4><a class="anchor" aria-hidden="true" id="1a-register"> </a>1a. Register</h4><p>Register and sign in to Astra at <code>astra.datastax.com</code> by clicking this button (better in a new tab with Ctrl-click or right-click):</p><p><a href="https://astra.dev/multiplayer-game"><img src="images/create_astra_button.png" /></a></p><p><em>you can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.Choose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character.You may be asked to verify your email, so make sure you have access to it.</em></p><details><summary>Show me the steps</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_signup.gif?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="1b-create-streaming"> </a>1b. Create streaming</h4><p>Once registered and logged in, you will be able to create a new Astra Streaming topic: it will convey all messages for this app.</p><p>You can find the instructions in <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraStreaming-Topic">this wiki</a>: in our case, the parameters to use are:</p><ul><li>tenant name: <code>gameserver-&lt;something&gt;</code> (you have to make it unique, so attach a suffix of your choice)</li><li>namespace: <code>default</code> (we will NOT need to create a new one)</li><li>topic name: <code>worldupdates</code> (persistent=yes, partitioned=no)</li></ul><blockquote><p>Note: technically you can name your namespace and topic anything you want - but then you have to make surethe environment settings for your API code are changed accordingly (see later).</p></blockquote><details><summary>Show me the steps</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_create_streaming_topic_v2.gif?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="1c-retrieve-streaming-connection-parameters"> </a>1c. Retrieve streaming connection parameters</h4><p>While you are at it, you should get two pieces of information needed later to connect to the topic from the API code. Those are the &quot;Broker Service URL&quot; and the &quot;Token&quot;,which can be obtained as described in <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraStreaming-Topic#-step-4-retrieve-the-broker-url">this wiki article</a>.</p><details><summary>Show me how to get the topic connection parameters</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/streaming_secrets.png?raw=true" /></details><blockquote><p>The service URL looks something like <code>pulsar+ssl://pulsar-[...].streaming.datastax.com:6651</code>,while the token is a very long string such as <code>eyJhbGci [...] cpNpX_qN68Q</code>.<strong>The token is a secret string and you should keep it for yourself!</strong></p></blockquote><h3><a class="anchor" aria-hidden="true" id="2-create-your-astra-db-instance"> </a>2. Create your Astra DB instance</h3><p>Besides the streaming platform, you'll also need a database for persistence of somegame data (the server-side representation of the &quot;game world&quot;).</p><p>Correspondingly, you will need some connection parameters and secrets in orderto later be able to access the database.</p><h4><a class="anchor" aria-hidden="true" id="2a-create-the-database"> </a>2a. Create the database</h4><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations and 80GB storage monthly - sufficient to run small production workloads.</em></p><p>You will now create a database with a keyspace in it (a <em>keyspace</em> can contain <em>tables</em>.Today's application needs just a single table: it will be created for you the first time youwill launch it, so don't worry too much).</p><img src="images/create_database_button.png" width="250" align=right /><p>To create the database, locate the &quot;Create database&quot; button on the navigation bar on the left of the Astra UI, click on it and fill the requiredvalues:</p><ul><li><p><strong>For the database name</strong> - use <code>workshops</code>. While Astra DB allows you to fill in these fields with values of your own choosing, please follow our recommendations to ensure the application runs properly.</p></li><li><p><strong>For the keyspace name</strong> - use <code>drapetisca</code>. Please stick to this name, it will make the following steps much easier (you have to customize here and there otherwise). In short:</p></li><li><p><strong>For provider and region</strong>: Choose <strong>GCP</strong>, which is immediately available to a fresh account (AWS and Azure would have to be unlocked, <em>for free</em>, by contacting Support). Region is where your database will reside physically (choose one close to you or your users).</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button. You will be on the <strong>Free</strong> plan.</p></li></ul><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Database name</td><td>workshops</td></tr><tr><td>Keyspace name</td><td>drapetisca</td></tr></tbody></table><p>You will see your new database as <code>Pending</code> in the Dashboard;the status will change to <code>Active</code> when the database is ready. This will only take 2-3 minutes(you will also receive an email when it is ready).</p><details><summary>Show me the how to create my Astra DB</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_create_db.gif?raw=true" />To create the database, please note that _the `db_name` and `ks_name` in the above image are just placeholders_.</details><blockquote><p><em>Note</em>: if you already have a <code>workshops</code> database, for instance from a previous workshop with us, you can simply create the keyspace with the <code>Add Keyspace</code> button in your Astra DB dashboard: the new keyspace will be available in few seconds.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-token"> </a>2b. Create a DB Token</h4><p>You need to create a <strong>DB token</strong>, which the API will later use as credentials to access the DB.</p><p>From the Astra DB UI, <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">create a token</a>with <code>Database Administrator</code> roles.</p><img src="images/orgsettings.png" width="250" align=right /><ul><li>Locate the &quot;Current Organization&quot; menu in the top-left of the Astra UI and select <code>Organization Settings</code></li><li>Go to <code>Token Management</code></li><li>Pick the role <code>Database Administrator</code> on the select box</li><li>Click Generate token</li></ul><details><summary>Show me the Astra DB token creation</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra-create-token.gif?raw=true" /></details><blockquote><p><strong>Tip</strong>: you can quickly get to the &quot;Token Management&quot; also through the &quot;...&quot;menu next to the list of databases in your main Astra DB UI.</p></blockquote><p>The &quot;token&quot; is composed by three parts:</p><ul><li><code>Client ID</code>: it plays the role of <em>username</em> to connect to Astra DB;</li><li><code>Client Secret</code>: it plays the role of a <em>password</em>;</li><li><code>Token</code> (proper): <em>not needed today</em>. It would be used as API key to access Astra via the API Gateway.</li></ul><blockquote><p>You can either copy and paste the values or download them as a CSV (you'll need the <code>Client ID</code> and <code>Client Secret</code>momentarily). <em>To copy the values you can click on the clipboard icons.</em></p></blockquote><details><summary>Show me the generated Astra DB token</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra-token.png?raw=true" /></details><blockquote><p>Make sure you download the CSV or copy the token values you need: once this page is closed,you won't be able to see your token again for security reasons! (then again, you can always issue a new token).</p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show token creation on screen,but will then immediately destroy the token for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="2c-download-the-db-secure-connection-bundle"> </a>2c. Download the DB Secure Connection Bundle</h4><p>There's a last missing piece needed for the application to successfully connectto Astra DB: the &quot;secure connect bundle&quot;. You have to download it from the Astra UIand keep it ready for later usage.</p><blockquote><p>The secure bundle, a zipfile containing certificates and server address information,will have to be provided to the Cassandra driver when the connection is established(see later steps).</p></blockquote><p>Go to the Astra DB UI, find the <code>workshops</code> database and click on it:</p><ol><li>click on <code>Connect</code> tab;</li><li>click on <code>Connect using a driver</code> (any language will do);</li><li>click on the <code>Download Bundle</code> drop-down on the right;</li><li>finally click on <code>Secure Connect Bundle (&lt;region&gt;)</code> to start the download. The bundle file should have a name such as <code>secure-connect-workshops.zip</code> and be around 12KB in size. <em>Note: make sure you &quot;Save&quot; the zipfile whole, without unzipping/opening it (as some browser might suggest you to do.</em></li></ol><details><summary>Show me how to get the Astra DB bundle</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_bundle.png?raw=true" /></details><h2><a class="anchor" aria-hidden="true" id="configure-and-run-the-application"> </a>Configure and run the application</h2><h3><a class="anchor" aria-hidden="true" id="3-load-the-project-into-gitpod"> </a>3. Load the project into Gitpod</h3><p>Development and running will be done within a Gitpod instance (more on that in a second).</p><h4><a class="anchor" aria-hidden="true" id="3a-open-gitpod"> </a>3a. Open Gitpod</h4><p>To load the whole project (API + client) in your personal Gitpod workspace, pleaseCtrl-click (or right-click and open in new tab) on the following button:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-streaming-game"><img src="images/open_in_gitpod_button.svg" /></a></p><p>(You may have to authenticate with Github or other providers along the process).Then wait a couple of minutes for the installations to complete, at which point youwill see a message such as <code>CLIENT/API READY TO START</code> in the Gitpod console.</p><details><summary>Tell me what the Gitpod button does</summary><ul><li>An IDE is started on a containerized machine image in the cloud</li><li>there, this repo is cloned</li><li>some initialization scripts are run (in particular, dependencies get installed)</li><li>Gitpod offers a full IDE: you can work there, edit files, run commands in the console, use an internal browser, etc.</li></ul></details><blockquote><p>In case you prefer to work <em>on your local computer</em>, no fear! You can simply keepa console open to run the React client (<code>cd client</code>) and another for thePython API (<code>cd api</code>). For the formeryou will have to <code>npm install</code> and for the latter (preferrably in a virtual environmentto keep things tidy and clean) you will have to install the required dependenciese.g. with <code>pip install -r requirements.txt</code>.(Mac users will also have to do a <code>brew install libpulsar</code> for the API to work.)The rest of this readme will draw yourattention to the occasional differences between the Gitpod and the local routes, butwe'll generally assume that if you work locally you know what you are doing. Good luck!</p></blockquote><h4><a class="anchor" aria-hidden="true" id="3b-gitpod-interface"> </a>3b. Gitpod interface</h4><p>This project is composed of two parts: client and API. For this reason, Gitpodis configured to spawn <em>three</em> different consoles: the &quot;default&quot; one forgeneral-purpose actions, an &quot;api&quot; console and a &quot;client&quot; console (these twowill start in the <code>api</code> and <code>client</code> subdirectories for you).<strong>You can switch between consoles by clicking on the items in the lower-right panels in your Gitpod</strong>.</p><details><summary>Show me a map of the Gitpod starting layout</summary><img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/gitpod_view.png?raw=true" /><ol><li>File explorer</li><li>Editor</li><li>Panel for console(s)</li><li>Console switcher</li></ol></details><blockquote><p>Note: for your convenience, you find this very README open within the Gitpodtext editor.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="4-api-setup"> </a>4. API setup</h3><p>Before you can launch the API, you have to configure connection details to it:you will do it through the dotenv file <code>.env</code>.</p><h4><a class="anchor" aria-hidden="true" id="4a-streaming-environment-variables-code-env-code-part-i"> </a>4a. Streaming environment variables (<code>.env</code>, part I)</h4><p>You need to pass the streaming connection URL and streaming token to the API forit to be able to speak to the Streaming topic. To do so, first <strong>go to the API console</strong>and make sure you are in the <code>api</code> subdirectory.</p><blockquote><p>The <code>pwd</code> command should output <code>/workspace/workshop-streaming-game/api</code>.</p></blockquote><blockquote><p>If you are working locally, make sure you are in the <code>/api</code> subdirectoryof the project for the following commands to work properly. Later anyway,in order to have both the API and the client running, you will need twoconsoles, one in each of the two <code>api</code> and <code>client</code> subdirectories.</p></blockquote><p>Then create a file <code>.env</code> by copying the <code>.env.sample</code> in the same directory,with the commands</p><pre><code># In the 'api' subdirectorycp .env.sample .envgp open .env</code></pre><p>(the second line will simply open the <code>.env</code> file in the editor: you can also simply locate the file in Gitpod's file explorer and click on it).Fill the first lines in the file with the values found earlieron your Astra Streaming &quot;Connect&quot; tab (<em>keep the quotes in the file</em>):</p><ul><li><code>STREAMING_TENANT</code>: your very own tenant name as chosen earlier when creating the topic (step <code>1b</code>); it should be something like <code>gameserver-abc</code>.</li><li><code>STREAMING_SERVICE_URL</code>: it looks similar to <code>pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651</code></li><li><code>ASTRA_STREAMING_TOKEN</code>: a very long string (about 500 random-looking chars), see step <code>1c</code>. You can copy it on the Astra UI without showing it.</li></ul><blockquote><p>Note: treat your token as a personal secret: do not share it, do not commit it to the repo, store it in a safe place!</p></blockquote><blockquote><p>Note: in case you gave a different namespace/name to your topic, update <code>.env</code> correspondingly.If, moreover, you work locally you may have to check the <code>TRUST_CERTS</code> variable as well, dependingon your OS distribution. Look into the <code>.env</code> file for some suggestions.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="4b-upload-the-db-secure-bundle-code-env-code-part-ii"> </a>4b. Upload the DB secure bundle (<code>.env</code>, part II)</h4><p>Remember the secure connect bundle you downloaded earlier from the Astra DB UI?It's time to upload it to Gitpod.</p><blockquote><p>If you work locally, skip the upload and just be aware of the full path to it for what comes next in the <code>.env</code> file.</p></blockquote><p>Locate the file on your computer using the &quot;finder/explorer&quot;.Drag and drop the bundle into the Gitpod explorer window: <em>make sure you drop it on thefile explorer window in Gitpod.</em></p><details><summary>Show me how to drag-and-drop the bundle to Gitpod</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drag-and-drop-bundle.png?raw=true" /></details><p>As a check, you may want to verify the file is available in the right location with:</p><pre><code>ls -lh /workspace/workshop-streaming-game/secure-connect-*.zip</code></pre><p>The output should tell you the exact path to the file (you can also make sure the file size is around 12KBwhile you are at it).</p><p><strong>This exact path to the file must go to line <code>ASTRA_DB_SECURE_CONNECT_BUNDLE</code> of the <code>.env</code> file.</strong>The line has been pre-filled for you already, but if the bundle has a different name or is at adifferent location (e.g. if you work locally, or your DB has another name),make sure you change the value accordingly.</p><h4><a class="anchor" aria-hidden="true" id="4c-database-access-secrets-code-env-code-part-iii"> </a>4c. Database access secrets (<code>.env</code>, part III)</h4><p>With the secure bundle in place and set up in the <code>.env</code>, you can turn to the last missingpiece: the secrets to access the DB.</p><p>Insert the Astra DB <code>Client ID</code> and <code>Client Secret</code> you obtained earlier as parts of the &quot;Astra DB Token&quot;in the <code>.env</code> file (again, keep the quotes around the values):</p><pre><code>ASTRA_DB_USERNAME=&quot;tByuQfj...&quot;ASTRA_DB_PASSWORD=&quot;lGzF5,L...&quot;</code></pre><blockquote><p>In case your keyspace has a name other than <code>drapetisca</code>, check the <code>ASTRA_DB_KEYSPACE</code> in your <code>.env</code> as well.</p></blockquote><p>Congratulations: you should now have completed the <code>.env</code> setup!</p><h4><a class="anchor" aria-hidden="true" id="4d-start-the-api"> </a>4d. Start the API</h4><p>Make sure you are in the API console and in the <code>api</code> subdirectory.You can now <strong>start the API</strong>:</p><pre><code># In the 'api' subdirectoryuvicorn api:app</code></pre><p>You should see the API start and log some messages in the console, in particular</p><pre><code>INFO:     Application startup complete.INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</code></pre><p>Congratulations: the API is up and is ready to accept client requests.Leave it running and turn your attention to the client.</p><blockquote><p>Note: this is how you start the API in a development environment. To deployto production, you should set up a multi-process system service for <code>uvicorn</code>with the <code>--workers</code> option and put the whole thing behind areverse proxy. <em>This is not covered here</em>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="5-client-setup"> </a>5. Client setup</h3><p>Make sure you <strong>go to the client console</strong> for the following(to switch consoles, look at the lower-right panel in your Gitpod layout).You should be in the <code>client</code> project subdirectory (i.e. the <code>pwd</code> command should print <code>/workspace/workshop-streaming-game/client</code>).</p><h4><a class="anchor" aria-hidden="true" id="5a-install-dependencies"> </a>5a. Install dependencies</h4><p>First ensure all required dependencies are installed:</p><pre><code># In the 'client' subdirectorynpm install</code></pre><blockquote><p>Note: the command would take a few minutes on a fresh directory; we secretly instructed Gitpodto preinstall them just to save you some time in this step - still, we wantyou to go through it. Obviously, if you are working on your local environment,this will be slower.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="5b-start-the-client"> </a>5b. Start the client</h4><p>The client is ready to go! <strong>Launch it</strong> in development mode with:</p><pre><code># In the 'client' subdirectorynpm start</code></pre><p>Let's assume you are working within Gitpod, which wraps locally-exposed portsand makes them accessible through ordinary HTTPS domain names.As the client is available, Gitpod will automatically open it in its &quot;simple browser&quot;,using a domain such as <code>https://3000-tan-swallow-2yz174hp.ws-eu17.gitpod.io</code>.This URL can be obtained also by typing, in the general-purpose Gitpod console,</p><pre><code>gp url 3000</code></pre><p>(3000 being the port number locally used by npm to serve the client).This will match the URL shown in the address bar of your simple browser.</p><p>Note that you can also take this URL and open the application in a new tab,<strong>which you are encouraged to do to use your full screen</strong>.</p><blockquote><p>Note: we set up Gitpod for this workshop so as to make this URL accessible by anyone, to allow youto paste the link to your friends, thereby inviting them to your own game instance!</p></blockquote><blockquote><p>If you are running everything locally on your computer, instead, you canopen the client on <code>http://localhost:3000</code> and use thedefault API location of <code>ws://localhost:8000</code> to enter the game.</p></blockquote><blockquote><p>Note: this is how you launch the client in development mode. For deployingto production, you should first build the project and then serve it froma static Web server. <em>This is not covered here</em>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="6-play-the-game"> </a>6. Play the game!</h3><p>We finally have all pieces in place:</p><ul><li>an Astra Streaming topic;</li><li>an API bridging it to ...</li><li>... a client ready to establish WebSocket connections.</li><li>(and an Astra DB instance acting as persistent storage to back the API)</li></ul><p>It is time to play!</p><h4><a class="anchor" aria-hidden="true" id="6a-enter-the-game"> </a>6a. Enter the game</h4><p>Change your name if you desire (a spider name is drawn at random for you).You will also see that you are given a (read-only) unique player ID and that an API addressis configured for the client to establish WebSocket connections to.</p><blockquote><p>The API location points to the instance of the API running alongside the client:you should generally not have to change it (but please notice the protocol iseither <code>ws</code> or <code>wss</code>, which stand for WebSocket and Secure WebSocket respectively).</p></blockquote><p>To enter the game, click the &quot;Enter Game&quot; button.</p><details><summary>Show me the "Enter Game" form</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_2.png?raw=true" /></details><p>Well done: you are in the game. You should see your player appear in the arena!</p><ul><li>To control your player, either use the on-screen arrow buttons or, after bringing the game field into focus, your keyboard's arrow keys;</li><li>you can use the in-game chat box on the left.</li></ul><details><summary>Show me the player after entering the game</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_3_v2.png?raw=true" /></details><blockquote><p><strong>Note</strong>: if you experience a laggy game, especially with several players at once,it is probably due to the fact that you have no control over the physical location of your Gitpod instance:it may have been deployed far from the database. Remember that in a real-life online game great careis taken to keep all parts close to each other to keep latencies under control.If you want to play the game nevertheless, you can set the <code>USE_IN_MEMORY_STORAGE</code> variableto <code>&quot;1&quot;</code> in your <code>.env</code> and then stop-and-restart the API: this will replace usage of Astra DBwith an in-memory local store; it is a development-only solution, however, that would of coursenot work were you to scale to several running instances of the API.</p></blockquote><p>Anything your player does is sent to the API through a WebSocket in the form of an &quot;update message&quot;;from there, it is published to the Astra Streaming topic (and persisted to the database).The API will then pick up the updateand broadcast to all players, whose client will process it, eventually leading to a refresh of the game statuson the front-end. All this happens in a near-real-time fashion at every action by every player.</p><blockquote><p>Note that the game shows the last sent message and the last received messages for you to better inspectthe messaging pattern at play.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="6b-try-to-cheat"> </a>6b. Try to cheat</h4><p>Let's be honest: there's no multiplayer game without cheaters - at least, cheat attempts.So, for example, try to <em>walk beyond the boundaries of the play area</em>, to see what happens.Notice the &quot;Position&quot; caption on the left sidebar? If you keep an arrow key pressedlong enough, you will sure be able to bring that position to an illegal value such as <code>(-1, 0)</code>.But as soon as you release the key, the position bounces back to a valid state.</p><p>Here's the trick: this &quot;position&quot;, shown in the client, is nothing more than a variablein the client's memory. Every update (including <code>(-1, 0)</code>) is sent to the API, whichis the sole actor in charge of validation: an illegal value will be corrected and sent backto all clients (<em>consider the API has access to the game-world state persisted on DBand can handle collisions and the like</em>).In particular, your own client will adjust knowledge of its own positionbased on this feedback from the API - which is why you see the illegal value only briefly.</p><p>All of this must happen asynchronously, as is the nature of the communication between clientand API. There is a lesson here, which has been hard-earned by online game devs over the years:<em>never leave validity checks in the hand of the client</em>.</p><blockquote><p>Remember the hordes of cheaters in ... er ... Diablo I ?</p></blockquote><p><strong>Implications on the architecture</strong></p><p>Unfortunately such an all-server architecture is more complex to achieve.One has to introduce a &quot;generation counter&quot; to avoid accidentally triggeringinfinite loops of spurious player-position updates - you can see thisever-increasing generation counter (<code>generation</code>) if you inspect theplayer-position updates shown at the bottom of the application.</p><p>In the client code, the crucial bit is to accept updates to your-own-positioncoming from the server, <em>only if they are recent enough</em>. For further inspection,have a look at:</p><ul><li>API: usage of <code>validatePosition</code> at line 66 of <code>api.py</code>;</li><li>Client: condition on <code>generation</code> at line 109 of <code>App.js</code> before invoking <code>setPlayerX</code> and <code>setPlayerY</code>.</li></ul><blockquote><p>Note: in this architecture, we very much <strong>want</strong> to have a server betweenclients and Pulsar topic, with the responsibility of performing validations.Even more so in a complex game, where each client action (message) triggerspotentially several actions in the world. But we want to mention, in passing by,that Pulsar also offers its own<a href="https://pulsar.apache.org/docs/en/client-libraries-websocket/">native WebSocket interface</a>(and so does Astra Streaming),for clients to directly connect to topics using that protocol.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="6c-bring-your-friends"> </a>6c. Bring your friends</h4><p>But wait ... this is a <em>multiplayer</em> game, isn't it? So, go ahead and open a newbrowser tab, then enter the game as someone else.</p><p>Hooray! As soon as you move around with this new player,you will see the whole architecture at work:</p><ol><li>client sends updates on your player's position through the &quot;player websocket&quot;;</li><li>API checks game state on DB and validates this update, taking action if needed;</li><li>API (a) publishes the validated player update to the Astra Streaming topic and (b) persists new game-state to DB;</li><li>API receives back new messages by listening to this same Astra Streaming topic;</li><li>API broadcasts updates on any player to all connected clients through the &quot;world websocket&quot;;</li><li>at each such update, the client's game arena is adjusted (for all connected clients).</li></ol><p>What is really cool is that <strong>you can give this URL to your friends</strong> and have thementer your very own game!</p><p><em>Please do this and tell the world about how easy it is to build a multiplayer real-timegame with Astra Streaming!</em></p><h4><a class="anchor" aria-hidden="true" id="6d-fun-with-the-streaming-ui"> </a>6d. Fun with the Streaming UI</h4><p>The Astra Streaming interface makes it possible to eavesdrop on the topic andobserve the messages passing through it. This may prove very useful fordebugging.</p><p>In the Astra Streaming UI, head to the &quot;Try Me&quot; tab and make sure:</p><ul><li>the namespace and the (producer, consumer) topics are set to the values used earlier;</li><li>connection type is &quot;Read&quot;;</li><li>read position is &quot;Latest&quot;</li></ul><p>Good, now click &quot;Connect&quot;.</p><details><summary>Show me the "Try Me" interface</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/eavesdrop_streaming.gif?raw=true" /></details><details><summary>A demo video of the "Try Me" feature (Youtube)</summary>    <a href="https://youtu.be/WWYXeZh0S9k">        <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/try-me-demo-video-thumbnail.png?raw=true" />    </a></details><p>You now have a privileged view over the messages flowing through the Streamingtopic. Now try writing something in the Chat box: can you see the correspondingmessage in the Streaming UI?</p><p>What kind of message do you see, instead, if you move you player?</p><p>But wait, there's more: now you can <strong>hack the system</strong>! Indeed, this same interface lets youproduce surreptitious messages into the topic (&quot;Send&quot; button on the Streaming UI).Try to insert a message such as:</p><pre><code>{    &quot;messageType&quot;: &quot;chat&quot;,    &quot;payload&quot;: {        &quot;id&quot;: &quot;000&quot;,        &quot;name&quot;: &quot;Phantom!&quot;,        &quot;text&quot;: &quot;Booo!&quot;    },    &quot;playerID&quot;: &quot;nonexistent&quot;}</code></pre><p>and keep an eye on the chat box.</p><p>Even better, try to inject a message such as <em>(you may have to adjust the <code>x</code>, <code>y</code> coordinates for this to be real fun)</em>:</p><pre><code>{    &quot;messageType&quot;: &quot;brick&quot;,    &quot;payload&quot;: {        &quot;name&quot;: &quot;phantom brick!&quot;,        &quot;x&quot;: 0,        &quot;y&quot;: 0    }}</code></pre><p>what happens in the game UI when you to this? Can you walk to that spot? (Why?)</p><blockquote><p>Also, have you noticed that the &quot;Try Me&quot; interface shows how each message you publish to the topic is echoed back to you?This is done by the API logic and is part of the game design.</p></blockquote><p>Now, you just had a little fun: but, seriously speaking, this ability to manually intervene in the stream of messages makes for a valuable debugging tool.</p><h4><a class="anchor" aria-hidden="true" id="6e-a-quick-look-at-the-data-on-db"> </a>6e. A quick look at the data on DB</h4><p>Any change to the game-world, either originated in the API or coming froma player (and then just validated at API level) is persisted on database.If you are curious, you can look at the raw data directly within the Astra DB UI.</p><p>Each time the API starts, it will generate a new &quot;game ID&quot;, under which all infopertaining to this particular game will be stored. In fact, <code>game_id</code> plays therole of<a href="https://docs.datastax.com/en/astra-cql/doc/cql/ddl/dataModelingApproach.html">partition key</a> in the underlying <code>drapetisca.objects_by_game_id</code> table.</p><blockquote><p>The topic of data storage and data modeling in Cassandra is huge and we won'tdo it justice here. Just bear with us to see the game data, and if you wantto know more you can start from <a href="https://www.datastax.com/learn/data-modeling-by-example">Data modeling by example</a> and <a href="https://www.datastax.com/cassandra">What is Cassandra?</a>. You will embark on a long and exciting journey!</p></blockquote><p>Locate the &quot;CQL Console&quot; tab for the <code>workshops</code> database in your Astra DB dashboardand click on it. An interactive shell will be spawned for you, to type the following commands:</p><pre lang="sql"><code>USE drapetisca ;SELECT * FROM objects_by_game_id ;</code></pre><p>You should see several lines in the output, corresponding to the objects present in the game(s)and their properties.</p><blockquote><p>If you already started several games (e.g. by hitting Ctrl-C and restarting <code>uvicorn</code> in the API console), notice that the info for each of them is neatly grouped by the value of the <code>game_id</code> column.</p></blockquote><details><summary>Show me the game data in the Astra DB CQL Console</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/cql_console.gif?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="7-homework-instructions"> </a>7. Homework instructions</h3><p>Here are some more details on how to do the homework. We require two modificationsto the code, one on the API and one on the client. Once you change both, and restart,you will be able to take a screenshot showing the new game appearance and submitit to us!</p><h4><a class="anchor" aria-hidden="true" id="7a-server-side"> </a>7a. Server side</h4><p>We want a greeting message to be sent from the API to a new client right afterthey join. To do so, the <code>api.py</code> already imports a function <code>makeWelcomeUpdate</code>that returns a &quot;chat message&quot; ready to be sent through the WebSocket.You may also want to make use of variable <code>newPlayerName</code> that is made availablein the API code.</p><p><strong>You should add a line in the function <code>playerWSRoute</code> that creates the welcomechat message and sends it to the WebSocket</strong>. <em>Suggestion: this is really notso different from the geometry update any new client receives upon connecting.</em></p><h4><a class="anchor" aria-hidden="true" id="7b-client-side"> </a>7b. Client side</h4><p>We want the player names on the game field to have the same color as the playericons instead of always dark grey as they are now. If you look into <code>GameField.js</code>,you'll notice that the SVG <code>text</code> element currently has a class name <code>&quot;player-name&quot;</code>.</p><p><strong>Make it so that players (self/other) use different class names in their <code>text</code>element and have a color matching their icon</strong>. <em>Suggestion: the right class nameis already calculated a few lines above for you to use (you can check in <code>App.css</code> as well)</em>.</p><h4><a class="anchor" aria-hidden="true" id="7c-restart-test-and-take-a-screenshot"> </a>7c. Restart, test and take a screenshot</h4><p>Remember to stop and restart the API: go to its console, hit Ctrl-C andre-run <code>uvicorn api:app</code> to do so. All current WebSocket connections willbe lost.</p><p>The client is running in development mode, so it should pick up any changeslive and be immediately ready to serve the new version: reloading the app page(and re-entering the game) should be enough.</p><p>At that point you will be playing the improved game: homework completed!</p><details><summary>Show me the new features in the game</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_homework.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="8-selected-topics"> </a>8. Selected topics</h3><p>Let us briefly mention some specific parts of the implementation of this game.</p><h4><a class="anchor" aria-hidden="true" id="8a-websockets-and-react"> </a>8a. WebSockets and React</h4><p>API and client communicate through WebSockets: in this way, we have a connectionthat is kept open for a long time and allows for a fast exchange of messageswithout the overhead of establishing a new connection for each message;moreover, this allows the server to push data without waiting for the clientto initiate the exchange (as in the obsolete technique of client-side polling).WebSockets follow a robust and standardized <a href="https://datatracker.ietf.org/doc/html/rfc6455">protocol</a>which makes it possible for us developers to concentrate on our game logicinstead of having to worry about the communication internals.</p><p>In particular, this game uses two WebSockets:</p><ul><li>a &quot;player&quot; one for bidirectional client/server data transmission in a direct fashion;</li><li>a &quot;world&quot; one where the API route all messages picked up by the streaming topic. Most game status updates go through this route (with the exception of those directed at an individual player).</li></ul><p>You can find the corresponding variables <code>pws</code> and <code>wws</code> in the client code, respectively.</p><p>In Javascript, one <em>subscribes to an event</em> on an open WebSocket, providinga callback function with <code>webSocket.onmessage = &lt;callback&gt;</code>. But beware:if you simply try to read a React state (such as <code>generation</code>) from withinthe callback, you will generally get a stale value, <em>corresponding to thestate when the subscription was made</em>. In practice, the state variableis &quot;closed over&quot;. To overcome this problem, and be able to access the latestupdated value of the state, we declare a React &quot;reference&quot; with <code>useRef</code>and, after linking it to the state we want to read, we use this referencewithin the callback to dynamically retrieve the current value of the state.</p><details><summary>Look at lines 49-50 and then 103 of `App.js`, for example.</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/ref_code_1.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="8b-fastapi"> </a>8b. FastAPI</h4><p>This game's architecture involves a server. Indeed, we would not be ableto implement it using only serverless functions, at least not in a way similarto what you see here, because of statefulness. We need a server able to sustainthe WebSocket connections for a long time, on one side, and to maintainlong-running subscriptions to the Pulsar topics on the other side.</p><p>We chose to create the API in Python, and to use<a href="https://fastapi.tiangolo.com/">FastAPI</a>, for a couple of very validreasons. FastAPI integrates very well with the async/await features of modernPython, which results in a more efficient handling of concurrency. Moreover,it supports WebSockets (through its integration with<a href="https://www.starlette.io/">Starlette</a>) with a natural syntax that reducesthe need for boilerplate code to near zero.</p><blockquote><p>There are other cool features of FastAPI (besides its namesake high performance),which we do not employ here but make it a prime choice. There is a clevermechanism to handle route dependencies aimed at reducing the amount of &quot;boring&quot;code one has to write; and there is native support for those small tasksthat sometimes you have to trigger asynchronously right after a request completes,those that in other frameworks would have required to set up machinery like Celery.</p></blockquote><p>Have a look at <code>api.py</code> to see how a WebSocket connection is handled: decoratinga certain function with <code>@app.websocket(...)</code> is almost everything you need toget started. One of the arguments of the function will represent the WebSocketitself, supporting methods such as <code>send_text</code> and <code>receive_text</code>. Eachactive WebSocket connection to the server will spawn an invocation of thisfunction, which will run as long as the connection is maintained: the supportfor async/await guarantees that these concurrent executions of theWebSocket function will be scheduled efficiently with no deadlocks.</p><h4><a class="anchor" aria-hidden="true" id="8c-svg-tricks"> </a>8c. SVG Tricks</h4><p>One of the React components in the client code is the <code>GameField</code>, whichrepresents an area where we draw the players. This is a single large SVGelement, whose child elements are managed with the usual <code>jsx</code> syntax.</p><p>A technique that proved useful in this game is that of defining, and thenre-using multiple times, &quot;patterns&quot;, basically as sprites. If you lookat the <code>GameField.js</code> render code, you notice that the SVG first declaressome <code>pattern</code> elements with certain <code>id</code>s (such as <code>lyco_other</code>).These patterns are then employed in various parts of the SVG to &quot;fill&quot;rectangles, which effectively makes it possible to use them as repeated sprites:</p><pre><code>    &lt;rect .... fill=&quot;url(#lyco_other)&quot;&gt;&lt;/rect&gt;</code></pre><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2><p>Congratulations, you made it to the end! Please share the URL of your game withyour friends: who does not love a little cozy spider gathering?</p><p><em>(Please notice that after some inactivity your Gitpod instance will be hibernated:you will need to re-start client and server to be able to play again.)</em></p><p>Don't forget to complete and submit your <a href="#homework">homework</a> to claimyour badge, and see you next time!</p><blockquote><p>DataStax Developers</p></blockquote><p><img src="images/Theridion_grallator.png" alt="Theridion grallator" /></p>
SUCCESS SAVING README for datastaxdevs-workshop-streaming-game
Getting astra.json for datastaxdevs/workshop-betterreads at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="workshops-better-reads"> </a>Workshops 📘 Better Reads 📘 !</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-acknowledgements"> </a>2. Acknowledgements</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-frequently-asked-questions"> </a>3. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-materials-for-the-session"> </a>4. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-astra-db-instance"> </a>5. Create Astra DB Instance</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-create-astra-token"> </a>6. Create Astra Token</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-start-and-setup-gitpod"> </a>7. Start and setup Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-work-with-cqlsh"> </a>8. Work with CqlSh</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8a-open-new-terminal"> </a>✅ 8a. Open new Terminal</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8b-enter-the-interactive-cqlsh-em-it-is-a-script-we-have-created-for-you-em"> </a>✅ 8b. Enter the interactive Cqlsh <em>(it is a script we have created for you)</em></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-load-data-with-dsbulk"> </a>9. Load Data with DSBulk</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-use-application-as-anonymous"> </a>10. Use Application as anonymous</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-setup-authentication"> </a>11. Setup Authentication</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="11a-setup-google-oauth2-optional"> </a>✅ 11a. Setup Google OAuth2 (optional)</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="11b-setup-up-github"> </a>✅ 11b. Setup up Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="12-authenticate-and-use-application"> </a>12. Authenticate and use application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="12a-authenticate-with-github"> </a>✅ 12a. Authenticate with Github</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="12b-authenticate-with-google"> </a>✅ 12b. Authenticate with Google.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2>
HTML FOR datastaxdevs-workshop-betterreads<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="workshops-better-reads"> </a>Workshops 📘 Better Reads 📘 !</h1><img src="img/badge.png?raw=true" width="150" align="right" /><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-goodreads-clone"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><blockquote><p>⚠️ Difficulty: <strong><code>Intermediate</code>, we expect you to already know Java and Spring.</strong></p></blockquote><p>Learn how to build an app end-to-end application with Spring ecosystem <em>(boot, mvc, security, data, test, thymeleaf)</em> and Apache Cassandra™.</p><p><a href="#-start-hands-on">🏁 Access HANDS-ON</a></p><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/screenshot.png?raw=true" align="right" width="400px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-acknowledgements">Acknowledgements</a></li><li><a href="#3-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#4-materials-for-the-session">Materials for the Session</a></li><li><a href="#5-create-astra-db-instance">Create your Database</a></li><li><a href="#6-create-astra-token">Create your Token</a></li><li><a href="#7-start-and-setup-gitpod">Start and setup Gitpod</a></li><li><a href="#8-work-with-cqlsh">Work with CqlSh</a></li><li><a href="#9-load-data-with-dsbulk">Load Data with DSBulk</a></li><li><a href="#10-use-application-as-anonymous">Use Application as anonymous</a></li><li><a href="#11-setup-authentication">Setup Authentication</a></li><li><a href="#12-authenticate-and-use-application">Authenticate and use application</a></li><li><a href="#13-homeworks">Homeworks</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><ul><li>Discover how to use the following technologies:<ul><li><strong>Spring Data:</strong> the Object Mapping layer of Spring</li><li><strong>Spring Data Cassandra:</strong> what traps to avoid</li><li><strong>Spring Security:</strong> how to handle authentication with OAuth2</li><li><strong>Spring MVC:</strong> how to expose REST API and controllers</li><li><strong>Spring Webflux:</strong> how to use the new <code>WebClient</code></li><li><strong>Thymeleaf:</strong> how to build a user interface with Spring</li><li><strong>Spring Test:</strong> How to run tests</li><li><strong>Astra DB</strong> (a Database-as-a-service built on Apache Cassandra)</li></ul></li><li>Han fun with an interactive session</li></ul><h2><a class="anchor" aria-hidden="true" id="2-acknowledgements"> </a>2. Acknowledgements</h2><p>This application has been built based on the work of <a href="https://www.youtube.com/channel/UCYt1sfh5464XaDBH0oH_o7Q"><strong>Java Brains</strong></a>, a famous youtuber <em>(500k+ subscribers)</em>. On his channel you can find the full <a href="https://www.youtube.com/watch?v=LxVGFBRpEFM"><em>Code with me Series</em></a>, 16 episodes for building this application step-by-step. The link to each episode is provided at the end of this readme.</p><h2><a class="anchor" aria-hidden="true" id="3-frequently-asked-questions"> </a>3. Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine, If you do so, you will need the following<ol><li><b>git</b> installed on your local system<li><b>JDK 8+</b> installed on your local system<li><b>Maven 3.6+</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>We can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need an enough *real estate* on screen, we will ask you to open a few windows and it does not file mobiles (tablets should be OK)<li>You will need a GitHub account eventually a google account for the Google Authentication (optional)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As Intermediate level we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open api badge)*</details><p/><blockquote><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="4-materials-for-the-session"> </a>4. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="5-create-astra-db-instance"> </a>5. Create Astra DB Instance</h2><blockquote><p>Leveraging <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraDB-Instance">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p></blockquote><p><a href="https://astra.dev/2-16"><img src="img/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>better_reads</code></td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4><ul><li>If you already have a DB, you may need to resume it using the <a href="https://github.com/datastaxdevs/awesome-astra/wiki/How-to-resume-a-database">Resuming Guide</a>.</li><li>If yout already have an active DB, simply add a keyspace <code>better_reads</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</li></ul><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-create-astra-token"> </a>6. Create Astra Token</h2><blockquote><p>Leveraging <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-Astra-Token">Token creation guide</a> create a token. (<code>AstraCS:blablablabla</code>)</p></blockquote><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Role</strong></td><td><code>Database Administrator</code></td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4><ul><li>If you already have a token from previous session you can use it. A token is not related to a particular DB by default but to organization.</li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="7-start-and-setup-gitpod"> </a>7. Start and setup Gitpod</h2><ul><li>Start gitpod with the button below <em>(right-click open in new tab)</em></li></ul><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-betterreads"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><ul><li>Wait for the environment to initialize until you are asked to provide your token:</li></ul><pre><code>✔ Please paste the Database Admin Token here</code></pre><ul><li>Enter your token <code>AstraCS;blahblahblah</code> and press enter. Wait for all the operations to complete.</li></ul><pre lang="bash"><code>[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  18.676 s[INFO] Finished at: 2022-02-14T13:00:07Z[INFO] ------------------------------------------------------------------------</code></pre><h2><a class="anchor" aria-hidden="true" id="8-work-with-cqlsh"> </a>8. Work with CqlSh</h2><h4><a class="anchor" aria-hidden="true" id="8a-open-new-terminal"> </a>✅ 8a. Open new Terminal</h4><p>It would be handy to have access to this CQLSH while doing the exercises and check the content of the database.</p><ul><li>Open a new terminal with the icon looking like a small table on top right hand corner of the Terminal Panel in gitpod (as shown below)</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/new-terminal1.png?raw=true" alt="new_terminal2" /></p><p>... zooming in:</p><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/new-terminal2.png?raw=true" alt="new_terminal" /></p><h4><a class="anchor" aria-hidden="true" id="8b-enter-the-interactive-cqlsh-em-it-is-a-script-we-have-created-for-you-em"> </a>✅ 8b. Enter the interactive Cqlsh <em>(it is a script we have created for you)</em></h4><pre><code>/workspace/workshop-betterreads/cqlsh</code></pre><ul><li>It should look like</li></ul><pre><code>Connected to cndb at 127.0.0.1:9042.[cqlsh 6.8.0 | Cassandra 4.0.0.6816 | CQL spec 3.4.5 | Native protocol v4]Use HELP for help.token@cqlsh&gt;</code></pre><ul><li>List Keyspaces with</li></ul><pre lang="sql"><code>describe keyspaces;</code></pre><ul><li>Check that our keyspace <code>better_reads</code> is there</li></ul><pre><code>token@cqlsh&gt; describe keyspaces;system_virtual_schema  system_auth   data_endpoint_auth  system_tracestemporal_visibility    system_views  better_reads        ecommerce    netflix                system        spring_petclinic    todos        system_schema          datastax_sla  native_java         feeds_reader token@cqlsh&gt; </code></pre><ul><li>List <code>better_reads</code> tables</li></ul><pre><code>use better_reads;describe tables;</code></pre><ul><li>Check that expected tables are there</li></ul><pre lang="bash"><code>token@cqlsh:better_reads&gt; describe tables;author_by_id  books_by_user  book_by_id  book_by_user_and_bookid</code></pre><ul><li>Let this panel opened but for following command we will be back to the termimal</li><li></li></ul><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-load-data-with-dsbulk"> </a>9. Load Data with DSBulk</h2><ul><li>Check you have the dataset ready. In the <code>BASH</code> terminal <strong>(⚠️ = NOT the cqlsh)</strong>. You should see the cql file <code>book_by_id_0.csv</code>.</li></ul><pre><code>ls -l /workspace/workshop-betterreads/dataset/</code></pre><ul><li>Check how many rows. It should have more than 250k.</li></ul><pre><code>wc -l /workspace/workshop-betterreads/dataset/book_by_id_0.csv</code></pre><ul><li>Check that Datastax bulk loader is properly installed <em>(It has been installed for you at startup)</em></li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk --version</code></pre><ul><li>Import the DataSet with the following command</li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk load \   -c csv \   -k better_reads \   -t book_by_id \   -u token \   -p ${ASTRA_DB_ADMIN_TOKEN} \   -maxErrors -1 \   -b /home/gitpod/.astra/scb_${ASTRA_DB_ID}_${ASTRA_DB_REGION}.zip \   -url /workspace/workshop-betterreads/dataset/book_by_id_0.csv</code></pre><ul><li>The batch is running and should be able to see the throughput at ~3k records per second.</li></ul><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx2576mUsername and password provided but auth provider not specified, inferring PlainTextAuthProviderA cloud secure connect bundle was provided: ignoring all explicit contact points.A cloud secure connect bundle was provided and selected operation performs writes: changing default consistency level to LOCAL_QUORUM.Operation directory: /workspace/workshop-betterreads/logs/LOAD_20220214-132501-509314 total | failed | rows/s | p50ms | p99ms | p999ms | batches17,152 |      0 |  3,074 | 22.68 | 58.98 | 103.81 |    1.00</code></pre><ul><li>The operation should take about 1 minute to complete. The file can have some errors like invalid title with special characters. IT IS NOT A PROBLEM the dataset is not perfect we will have some failed rows.</li></ul><pre><code>  total | failed | rows/s | p50ms | p99ms | p999ms | batches250,000 |    183 |  3,684 | 21.44 | 56.10 |  66.32 |    1.00Operation LOAD_20220214-185449-001328 completed with 183 errors in 1 minute and 7 seconds.</code></pre><ul><li><p>In the same way - you can also now import <code>book_by_id_1.csv</code>.</p></li><li><p>Count Records in the table <code>book_by_id</code></p></li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk count \   -k better_reads \   -t book_by_id \   -u token \   -p ${ASTRA_DB_ADMIN_TOKEN} \   -b /home/gitpod/.astra/scb_${ASTRA_DB_ID}_${ASTRA_DB_REGION}.zip</code></pre><ul><li>Expected output (about 500.000k), during the live speaker will have more because he imported way more files.</li></ul><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx2576mUsername and password provided but auth provider not specified, inferring PlainTextAuthProviderA cloud secure connect bundle was provided: ignoring all explicit contact points.Operation directory: /workspace/workshop-betterreads/logs/COUNT_20220214-190203-775866  total | failed | rows/s |  p50ms |    p99ms |   p999ms499,679 |      0 | 57,806 | 210.15 | 6,207.57 | 6,207.57Operation COUNT_20220214-190203-775866 completed successfully in 8 seconds.499679</code></pre><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-use-application-as-anonymous"> </a>10. Use Application as anonymous</h2><ul><li>It would be handy to know the URL of the application</li></ul><pre><code>gp url 8080</code></pre><ul><li>Start the app</li></ul><pre><code>cd /workspace/workshop-betterreads/better-reads-webappmvn spring-boot:run</code></pre><ul><li>Output</li></ul><pre><code> ________          __                   __                  ________                     .__                                      \______ \ _____ _/  |______    _______/  |______  ___  ___ \______ \   _______  __ ____ |  |   ____ ______   ___________  ______  |    |  \\__  \\   __\__  \  /  ___/\   __\__  \ \  \/  /  |    |  \_/ __ \  \/ // __ \|  |  /  _ \\____ \_/ __ \_  __ \/  ___/  |    `   \/ __ \|  |  / __ \_\___ \  |  |  / __ \_&gt;    &lt;   |    `   \  ___/\   /\  ___/|  |_(  &lt;_&gt; )  |_&gt; &gt;  ___/|  | \/\___ \  /_______  (____  /__| (____  /____  &gt; |__| (____  /__/\_ \ /_______  /\___  &gt;\_/  \___  &gt;____/\____/|   __/ \___  &gt;__|  /____  &gt;         \/     \/          \/     \/            \/      \/         \/     \/          \/            |__|        \/           \/  BetterReads with Spring Boot, String Data, Spring NVC, Spring security An application by JabaBrains. The application will start at http://localhost:808013:37:20.276 INFO  com.datastax.astra.sdk.AstraClient              : Setup of AstraClient from application.yml13:37:20.280 INFO  com.datastax.astra.sdk.config.AstraClientConfig : Initializing [AstraClient]13:37:20.459 INFO  com.datastax.astra.sdk.AstraClient              : + API(s) Devops     [ENABLED]13:37:20.459 INFO  com.datastax.astra.sdk.AstraClient              : + Db: id [3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23] and region [eu-west-1]13:37:20.460 INFO  com.datastax.astra.sdk.AstraClient              : + Downloading bundles in: [/home/gitpod/.astra]13:37:21.124 INFO  com.datastax.astra.sdk.databases.DatabaseClient : + SecureBundle found : scb_3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23_eu-west-1.zip13:37:21.124 INFO  com.datastax.astra.sdk.databases.DatabaseClient : + SecureBundle found : scb_3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23_eu-central-1.zip13:37:23.041 INFO  com.datastax.astra.sdk.AstraClient              : [AstraClient] has been initialized.</code></pre><ul><li>Open a new terminal (yes a 3rd one again, 2 previous are busy, same icon) and enter the command.</li></ul><pre><code>gp preview $(gp url 8080)</code></pre><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app1.png?raw=true" alt="new_terminal" /></p><ul><li>In the search item look for <code>Glimpses of ancient Sowams</code> you can search to whatever you want it will request open library ut during this workshop you only imported a subset of books, let us pick one you imported.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app2.png?raw=true" alt="new_terminal" /></p><ul><li>Select the first item, if you select the second you will hit the page book not found as this book is not in the DB.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app3.png?raw=true" alt="new_terminal" /></p><p>This is only what we can do at this point. To mark the book as read we will need to authenticate with <code>Google</code> or <code>Github</code>.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-setup-authentication"> </a>11. Setup Authentication</h2><h3><a class="anchor" aria-hidden="true" id="11a-setup-google-oauth2-optional"> </a>✅ 11a. Setup Google OAuth2 (optional)</h3><ul><li><p>Connect to <a href="https://console.cloud.google.com">Google Cloud Platform</a></p></li><li><p>Create a new project if needed, on the screens i put <code>BetterReadsDemoApps</code> and click <code>[CREATE]]</code></p></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp1.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>[ENABLE APIS AND SERVICES]</code> in menu</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp2.png?raw=true" alt="new_terminal" /></p><ul><li>Search for Gmail and Google Analytics Apis and add them to your project.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp3.png?raw=true" alt="new_terminal" /></p><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp4.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>[OAuth consent screen]</code> in the menu on the left. Provide your application name, a support email and the application logo.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp5.png?raw=true" alt="new_terminal" /></p><ul><li>Check <code>External</code> (or internal as you prefer to limit scope).</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp6.png?raw=true" alt="new_terminal" /></p><ul><li>On menu in the left select <em>Credentials</em> and use the button on top <code>[CREATE CREDENTIALS]</code>/ OAuth ClientID.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp7.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>Web Application</code> and provide it a name</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp8.png?raw=true" alt="new_terminal" /></p><ul><li>Add the URL home page. It will the result of <code>gp url 8080</code> command on gitpod or <em><a href="http://localhost:8080">http://localhost:8080</a></em> if you work locally.</li></ul><p><strong>The screenshots below show <code>Google</code> authentication when the app is running on <code>localhost</code>. Carefully adjust the URLs accordingly to the Gitpod URL when application is running on Gitpod.</strong></p><ul><li>Add the redirect <em><a href="http://localhost:8080/login/oauth2/code/google">http://localhost:8080/login/oauth2/code/google</a></em> if you work locally or the result of <code>echo $(gp url 8080)/login/oauth2/code/google</code> on gitpod.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp9.png?raw=true" alt="new_terminal" /></p><ul><li>A new page will open with your <code>clientId</code> and <code>client Secret</code>. Make sure you copy them locallym you will need to setup your application with it.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp10.png?raw=true" alt="new_terminal" /></p><pre><code>You are now doomed we will now mine cryptos with your google account.Just kidding ^_^</code></pre><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp11.png?raw=true" alt="new_terminal" /></p><ul><li>Open file <code>src/main/resources/application.yml</code> in your project</li></ul><pre><code>gp open /workspace/workshop-betterreads/better-reads-webapp/src/main/resources/application.yml</code></pre><ul><li>Changes keys <code>client-id</code> and <code>client-secret</code> with your values for the provider <code>Google</code>.</li></ul><pre lang="yaml"><code>  security:    oauth2:      client:        registration:          google:            client-id: change            client-secret: change</code></pre><h3><a class="anchor" aria-hidden="true" id="11b-setup-up-github"> </a>✅ 11b. Setup up Github</h3><p>As each attendee has a different URL in gitpod, you will have to create your own github `OAuth Apps - Let's do this together.</p><ul><li>For github settings we will have to enter a callback URL. To know which one enter use the following command</li></ul><pre><code>clearecho $(gp url 8080)/login/oauth2/code/github</code></pre><ul><li>Login to your github account and go to <code>Organizations</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps1.png?raw=true" alt="new_terminal" /></p><ul><li>There scroll down to locate the last item of the menu <code>Developer Settings</code> <em>(hopefully you have not as many organizations as me)</em>, There pick <code>OAuth Apps</code> (we are using OAuth)</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps2.png?raw=true" alt="new_terminal" /></p><ul><li>Click button <code>[New OAuth Apps]</code> on the page</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps3.png?raw=true" alt="new_terminal" /></p><ul><li>You will be asked to login again for security reasons, then fill the form to register a new Github App. Thre Register your application</li></ul><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td><code>Application name</code></td><td>The application name shown to user</td></tr><tr><td><code>Homepage URL</code></td><td>Can be anything, just the app (gp url 8080)</td></tr><tr><td><code>Authorization Callback URL</code></td><td>Call back url the one listed above <code>${homepage}/login/oauth2/code/github</code></td></tr></tbody></table><ul><li>Click <code>[Register Application]</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps4.png?raw=true" alt="new_terminal" /></p><ul><li>The application is created. You got your clientId. You will have to generate a clientSecret now. Once you get both save them on a text file in your machine we will need them later</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps5.png?raw=true" alt="new_terminal" /></p><ul><li>When everything is set you can upload am image for your application and save the change with <code>[Update Application]</code>.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps6.png?raw=true" alt="new_terminal" /></p><ul><li><p>Open <code>application.yml</code></p></li><li><p>Open file <code>src/main/resources/application.yml</code> in your project</p></li></ul><pre><code>gp open /workspace/workshop-betterreads/better-reads-webapp/src/main/resources/application.yml</code></pre><ul><li>Changes keys <code>client-id</code> and <code>client-secret</code> with your values for the provider <code>Github</code>.</li></ul><pre lang="yaml"><code>  security:    oauth2:      client:        registration:          github:            client-id: change            client-secret: change</code></pre><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="12-authenticate-and-use-application"> </a>12. Authenticate and use application</h2><ul><li>After setting up the connection you can now start the application again :</li></ul><pre><code>cd /workspace/workshop-betterreads/better-reads-webappmvn spring-boot:run</code></pre><h3><a class="anchor" aria-hidden="true" id="12a-authenticate-with-github"> </a>✅ 12a. Authenticate with Github</h3><ul><li>On homepage click on <code>Authenticate with Github</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps7.png?raw=true" alt="new_terminal" /></p><ul><li>Eventually you get the SSO screen for you organization</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps8.png?raw=true" alt="new_terminal" /></p><ul><li>Then you authorize the application again</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps9.png?raw=true" alt="new_terminal" /></p><pre><code>HAHAHA EVIL LAUGH YOU ARE DOOMED AGAIN WE ALSO HAVE YOUR GITHUB ACCOUNT NOWWE WILL FEED OUR TROLLS AND CODEX.AI WITH IT.</code></pre><ul><li>More seriously, Your are in !</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps10.png?raw=true" alt="new_terminal" /></p><h3><a class="anchor" aria-hidden="true" id="12b-authenticate-with-google"> </a>✅ 12b. Authenticate with Google.</h3><ul><li>Use the button <code>[Login via Google]</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google1.png?raw=true" alt="new_terminal" /></p><ul><li>Validate with the familiar Google Screen</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google2.png?raw=true" alt="new_terminal" /></p><ul><li>You are in !</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google3.png?raw=true" alt="new_terminal" /></p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2><img src="img/badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your verified skill badge! Finish and submit your homework!</p><ol><li><p>Complete the practice steps as described below until you have your own app running in Gitpod. (up to step 11)</p></li><li><p>Answer the technical questions in the form (We promise, it is NOT difficult if you follow the workshop).</p></li><li><p>Take a screenshot of you authenticated in the app with a few books</p></li><li><p>Submit your homework <a href="https://dtsx.io/homework-betterreads">here</a></p></li><li><p><em>(totally optional)</em> Watch the full course on Javabrains.io</p></li></ol><ul><li><a href="https://www.youtube.com/watch?v=LxVGFBRpEFM">01 - Introduction to the series</a></li><li><a href="https://www.youtube.com/watch?v=HAiCwq4jfn8">02 - About the app</a></li><li><a href="https://www.youtube.com/watch?v=SnQXdvFkq4U">03 - System Design</a></li><li><a href="https://www.youtube.com/watch?v=106jIBE9XSc">04 - Cassandra Schema</a></li><li><a href="https://www.youtube.com/watch?v=waLSHx-VN08">05 - Setting up hosted</a></li><li><a href="https://www.youtube.com/watch?v=d28t_QySyzs">06 - Creating the Data Loader</a></li><li><a href="https://www.youtube.com/watch?v=7I37-awpaGg">07 - Connecting Spring Boot app to DataStax Astra</a></li><li><a href="https://www.youtube.com/watch?v=uezZIPK8kPk">08 - Using Repository pattern with Spring Data</a></li><li><a href="https://www.youtube.com/watch?v=24NrLl8EhDM">09 - Saving all the authors in the world to Cassandra</a></li><li><a href="https://www.youtube.com/watch?v=Fm-XrOTgOto">10 - Setting up books by ID </a></li><li><a href="https://www.youtube.com/watch?v=nwyf_4aSkqM">11 - Starting with Spring boot and security</a></li><li><a href="https://www.youtube.com/watch?v=-IuafzgS3fU">12 - Implementing the Book view flow</a></li><li><a href="https://www.youtube.com/watch?v=6K0im9vcoCk">13 - Building book search feature</a></li><li><a href="https://www.youtube.com/watch?v=NEZGCpN1J6M">14 - Tracking user interactions with books</a></li><li><a href="https://www.youtube.com/watch?v=ZIGImCqRr1I">15 - Building the My Books feature</a></li><li><a href="https://www.youtube.com/watch?v=hJLtsn2aSr4">16 - Wrapping Up</a></li></ul><hr />
SUCCESS SAVING README for datastaxdevs-workshop-betterreads
Getting astra.json for datastaxdevs/workshop-intro-streaming-and-cdc at 277
No astra.json for datastaxdevs/workshop-intro-streaming-and-cdc at 281
No astrajson for Introduction to Streaming and CDC
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="introduction-to-event-stream-processing-and-change-data-capture-cdc"> </a>🔥🔥 Introduction to Event Stream Processing and Change Data Capture (CDC) 🔥🔥</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started"> </a>Getting Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workshop-assets"> </a>Workshop assets</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workshop-lab-interacting-with-the-pulsar-broker"> </a>Workshop Lab: Interacting with the Pulsar Broker</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="earning-the-workshop-badge"> </a>Earning the workshop badge</h2>
HTML FOR datastaxdevs-workshop-intro-streaming-and-cdc<h1><a class="anchor" aria-hidden="true" id="introduction-to-event-stream-processing-and-change-data-capture-cdc"> </a>🔥🔥 Introduction to Event Stream Processing and Change Data Capture (CDC) 🔥🔥</h1><p>Welcome to the 'Introduction to Event Stream Processing and Change Data Capture (CDC)' workshop. In this two-hour workshop, the Developer Advocate team of DataStax shows the most important fundamentals and basics of <a href="https://pulsar.apache.org">Apache Pulsar</a> and the Change Data Capture (CDC) pattern.</p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop.</p><h2><a class="anchor" aria-hidden="true" id="getting-started"> </a>Getting Started</h2><p>The workshop lab has no pre-req's, it's all within GitPod. The homework does require a Astra account with special access to GCP cloud zones. Refer to the workshop badge area below for more detail.</p><h2><a class="anchor" aria-hidden="true" id="workshop-assets"> </a>Workshop assets</h2><ul><li><a href="/Workshop-Slides.pdf">Slide deck</a></li><li><a href="https://www.youtube.com/watch?v=5lPKtPap6co">Workshop video</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="workshop-lab-interacting-with-the-pulsar-broker"> </a>Workshop Lab: Interacting with the Pulsar Broker</h2><ol><li>Get familar with the Pulsar environment</li><li>Pub/Sub</li><li>Augmenting message text</li><li>Filtering messages to other topics</li><li>Adding a source connector</li></ol><p>First, open the lab environment:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-intro-streaming-and-cdc"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open Gitpod" /></a></p><p>Once the environment has initialized, <em><a href="/lab1/get-familiar.md">start the lab</a></em></p><h2><a class="anchor" aria-hidden="true" id="earning-the-workshop-badge"> </a>Earning the workshop badge</h2><p>To earn the badge for this workshop, you'll need to answer the <a href="https://forms.gle/BHGNPQXhdLRWbV7C8">homework questions</a>. All the instructions for homework are in the form. Once submitted, we will evaluate your answers and you will receive an email with the badge certificate.</p><img src="images/cdc-badge.png" data-canonical-src="images/cdc-badge.png" width="200" height="200" />
SUCCESS SAVING README for datastaxdevs-workshop-intro-streaming-and-cdc
Getting astra.json for datastaxdevs/workshop-realtime-data-pipelines at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="real-time-data-pipelines-with-apache-pulsartm-and-apache-cassandratm"> </a>🎓 Real-Time data pipelines with Apache Pulsar™ and Apache Cassandra™</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="architecture-design"> </a>Architecture Design</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="architecture-overview"> </a>Architecture overview</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="injector-component"> </a>Injector Component</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="analyzer-component"> </a>Analyzer Component</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-initialize-your-environment"> </a>Setup - Initialize your environment</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-open-gitpod"> </a><code>✅.setup-01</code>- Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-your-astra-account-following-web-page-opened-by-gitpod-or-follow-this-link"> </a><code>✅.setup-02</code>- Create your Astra Account: Following web page opened by gitpod or follow this link</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-create-astra-credentials-token-create-an-application-token-by-following-a-href-https-awesome-astra-github-io-docs-pages-astra-create-token-target-blank-these-instructions-a"> </a><code>✅.setup-03</code>- Create Astra Credentials (token): Create an application token by following <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/" target="_blank">these instructions</a>.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-list-your-existing-users"> </a><code>✅.setup-05</code>- List your existing Users.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-create-database-code-workshops-code-and-keyspace-code-trollsquad-code-if-they-do-not-exist"> </a><code>✅.setup-06</code>- Create database <code>workshops</code> and keyspace <code>trollsquad</code> if they do not exist:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-check-the-status-of-database-code-workshops-code"> </a><code>✅.setup-07</code>- Check the status of database <code>workshops</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-08-code-get-the-informations-for-your-database-including-the-keyspace-list"> </a><code>✅.setup-08</code>- Get the informations for your database including the keyspace list</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab1-producer-and-consumer"> </a>LAB1 - Producer and Consumer</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-01-code-generate-an-unique-tenant-name"> </a><code>✅.lab1-01</code>- Generate an unique tenant name</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-02-code-create-the-tenant-using-the-generated-name"> </a><code>✅.lab1-02</code>- Create the tenant using the generated name</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-03-code-list-your-tenants"> </a><code>✅.lab1-03</code>- List your tenants</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-04-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-04</code>- Start <code>Pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-05-code-show-namespaces-in-code-pulsar-shell-code"> </a><code>✅.lab1-05</code>- Show namespaces in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-06-code-show-topics-in-code-pulsar-shell-code-empty"> </a><code>✅.lab1-06</code>- Show topics in <code>pulsar-shell</code> (empty)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-07-code-create-our-4-working-topics-one-command-after-the-other"> </a><code>✅.lab1-07</code>- Create our 4 working topics, one command after the other.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-08-code-exit-code-pulsar-shell-code"> </a><code>✅.lab1-08</code> -  Exit <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-09-code-create-code-env-code-as-configuration-file"> </a><code>✅.lab1-09</code>- Create <code>.env</code> as configuration file</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-10-code-show-your-topics-on-the-user-interface"> </a><code>✅.lab1-10</code>- Show your topics on the user interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-11-code-show-your-topic-code-rr-raw-in-code-in-astra-user-interface"> </a><code>✅.lab1-11</code>- Show your topic <code>rr-raw-in</code> in Astra User Interface:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-12-code-start-the-generator"> </a><code>✅.lab1-12</code>- Start the generator</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-13-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-13</code>- Start <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-14-code-visualize-messages-with-a-consumer-using-code-client-code"> </a><code>✅.lab1-14</code>- Visualize messages with a consumer using <code>client</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab2-pulsar-functions"> </a>LAB2 - Pulsar functions</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-01-code-locate-and-setup-the-function"> </a><code>✅.lab2-01</code>- Locate and setup the function</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-02-code-start-pulsar-shell-again"> </a><code>✅.lab2-02</code>- Start Pulsar Shell (again)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-03-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-03</code>- List functions in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-04-code-create-the-pulsar-function"> </a><code>✅.lab2-04</code>- Create the Pulsar-function</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-05-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-05</code>- List functions in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-06-code-check-on-topics-code-rr-hotel-reviews-code-and-code-rr-restaurant-reviews-code"> </a><code>✅.lab2-06</code>- Check on topics <code>rr-hotel-reviews</code> and <code>rr-restaurant-reviews</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-07-code-consume-5-message-in-topics-content-with-code-pulsar-shell-code"> </a><code>✅.lab2-07</code>- Consume 5 message in topics content with <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-08-code-run-analyzer"> </a><code>✅.lab2-08</code>- Run Analyzer</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-09-code-change-terminal"> </a><code>✅.lab2-09</code>- Change Terminal</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-010-code-start-reader-to-log-anomalies-in-shell-code-reader-code"> </a><code>✅.lab2-010</code>- Start reader to log anomalies in shell <code>reader</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab3-working-with-databases"> </a>LAB3 - Working with databases</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-01-code-display-schema"> </a><code>✅.lab3-01</code>- Display schema</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-02-code-what-restaurants-can-be-queried"> </a><code>✅.lab3-02</code>- What restaurants can be queried?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-03-code-what-reviewers-can-be-queried"> </a><code>✅.lab3-03</code>- What reviewers can be queried?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-04-code-what-s-the-current-status-of-a-restaurant"> </a><code>✅.lab3-04</code>- What's the current status of a restaurant?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-05-code-what-s-the-current-status-of-a-reviewer"> </a><code>✅.lab3-05</code>- What's the current status of a reviewer?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-06-code-what-is-the-timeline-of-reviews-for-a-restaurant"> </a><code>✅.lab3-06</code>- What is the timeline of reviews for a restaurant?</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab4-pulsar-i-o"> </a>LAB4 - Pulsar I/O</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-01-code-analyzing-message-syntax-in-code-rr-restaurant-anomalies-code"> </a><code>✅.lab4-01</code>- Analyzing message syntax in <code>rr-restaurant-anomalies</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-02-code-create-the-associated-table"> </a><code>✅.lab4-02</code>- Create the associated Table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-03-code-create-a-sink-with-the-user-interface"> </a><code>✅.lab4-03</code>- Create a Sink with the user interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-04-code-query-the-destination-table"> </a><code>✅.lab4-04</code>- Query the destination table</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-realtime-data-pipelines<h2><a class="anchor" aria-hidden="true" id="real-time-data-pipelines-with-apache-pulsartm-and-apache-cassandratm"> </a>🎓 Real-Time data pipelines with Apache Pulsar™ and Apache Cassandra™</h2><img src="images/badge.png?raw=true" width="150" align="right" /><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-realtime-data-pipelines"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Welcome to the <em>RealTime data pipeline with Apache Pulsar and Apache Cassandra</em>* workshop! In this two-hour workshop, we will show you a sample architecture making use of Apache Pulsar™ and Pulsar Functions for real-time, event-streaming-based data ingestion, cleaning and processing.</p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level</strong> Beginner to Intermediate</p><p><img src="images/splash.png" alt="" /></p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ul><li><strong>HouseKeeping</strong><ul><li><a href="#objectives">Objectives</a></li><li><a href="#frequently-asked-questions">Frequently asked questions</a></li><li><a href="#materials-for-the-session">Materials for the Session</a></li></ul></li><li><strong>Architecture Design</strong><ul><li><a href="#architecture-overview">Architecture overview</a></li><li><a href="#injector-component">Injector Component</a></li><li><a href="#analyzer-component">Analyzer Component</a></li></ul></li><li><a href="#setup---initialize-your-environment">Setup - Initialize your environment</a></li><li><a href="#lab1---producer-and-consumer">LAB1 - Producer and Consumer</a></li><li><a href="#lab2---pulsar-functions">LAB2 - Pulsar functions</a></li><li><a href="#lab3---working-with-databases">LAB3 - Working with Database</a></li><li><a href="#lab4---pulsar-io">LAB4 - Pulsar I/O</a></li><li><a href="#Homework">Homework</a></li></ul><p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li><p>🎯 Give you an understanding and how and where to position Apache Pulsar</p></li><li><p>🎯 Give an overview of  streaming and datascience ecosystem**</p></li><li><p>🎯 Give you an understanding of Apache Cassandra NoSQL Database</p></li><li><p>🎯 Create your first pipeline with streaming and database.</p></li><li><p>🚀 Have fun with an interactive session</p></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b><li><b>Python 3.6+</b><li><b>Astra Cli</b><li><b>Pulsar Shell or Pulsar-Client</b></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><h2><a class="anchor" aria-hidden="true" id="architecture-design"> </a>Architecture Design</h2><p><em>Reviews of various venues (hotels/restaurants), written by various users, keep pouring in. We need a way to clean, normalize and filter them, removing trolls and flagging blatant outlier reviews, and make the running results available to the end user.</em></p><h4><a class="anchor" aria-hidden="true" id="architecture-overview"> </a>Architecture overview</h4><img src="./images/current_arch.png"/><details><summary><b> Show Detailed explanations</b></summary><ul><li>A stream of "events" (messages), some of which are reviews, is poured into a Pulsar topic for "raw reviews".<li>A Pulsar function filters out malformed items and those that do not specify their target type (restaurant/hotel). This function takes care of normalizing the incoming reviews, since - as is often the case in real life - certain field names in the incoming reviews can have multiple forms. All reviews are encoded as JSON strings. The Pulsar function singles out hotel and restaurant reviews and routes them, after normalizing their structure, to two specific topics. <li>We happen to be interested in restaurants, so we have a long-running process ("analyzer") performing the actual analysis on these. Heavy artillery, such as AI/ML-based classifiers, code with fat dependencies and the like, would be placed here (i.e outside Pulsar).<li>The analyzer keeps listening to the restaurant topic and ingests all incoming reviews: it keeps and update a state with key information, such as a rolling average score per each restaurant.<li>As new items arrive, they are checked if they are "troll reviews" (review text in heavy disagreement with the numeric score) and, if so, discarded. Otherwise they enter the rolling average for the target restaurant.<li>The analyzer periodically publishes an assessment for users and restaurants to a database, ready to be queried by any service that may need this data. (The output can also go to console if so desired). The destination DB also offers a ready-to-use REST API that allows to retrieve its data with simple HTTP requests, making it easy to build panels and UIs on top of this pipeline. The analyzer also reroutes "outlier reviews" (scores much different than the current rolling average) to another Pulsar topic, for a hypothetical manual inspection of such outliers.</ul></p></details><h4><a class="anchor" aria-hidden="true" id="injector-component"> </a>Injector Component</h4><img src="./images/plots/02_reviews.png"  width="600px" /><details><summary><b> Show Details</b></summary><p>There is a pseudorandom procedure to generate reviews with features that fluctuate in a predictableway: it is all in the <b>revGenerator</b> directory.<p>There is no &quot;time&quot; in the generation: to keep things simple, we use a &quot;sequence index&quot; in place oftime. Also, some of the &quot;reviews&quot; are not even valid JSON strings but contain gibberish instead,as is often the case in real-life data ingestion pipelines!</p><p>Each time a review is created, a venue (target) and a user (reviewer) are chosen at random: then,score and text are also created according to the following rules:</p><p>Each venue has a &quot;true&quot; quality that is slowly oscillating in time, see for example these two restaurants:</p><img src="./images/plots/01_real-values.png"  width="600px" /><p>Each reviewer has an associate amplitude that dictates how widely the scores they producemay fluctuate away from the &quot;true&quot; value for that venue at that &quot;time&quot;: in this example, the individualscores emitted by two different reviewers, having a large and small associated amplitude, are plotted:</p><img src="./images/plots/02_reviews.png"  width="600px" /><p>While reviews by Rita will presumably all fall in the &quot;expected&quot; region around the current average,a large fraction of the reviews by Anne will be too far away fromit and thus be flagged as &quot;outlier reviews&quot;.</p><p>Each review comes with an associated text, which in this toyexample is simply a bunch of words strung together, some positive (&quot;delicious&quot;) and some negative (&quot;disgusting&quot;).Each reviewer, however, has a Boolean &quot;trolliness&quot; flag: if true, then this text is built in strongdisagreement with the numeric score in the review.</p></p></details><h4><a class="anchor" aria-hidden="true" id="analyzer-component"> </a>Analyzer Component</h4><img src="./images/plots/03_moving-average.png" width="600px"/><details><summary><b> Show Details</b></summary><p>On the <b>analyzer side</b>, the reconstructed rolling average roughly follows the "true" quality fora venue, and is used to detect "outliers": each review that differs too much from the current rollingaverage is deemed an outlier. Here the rolling average corresponding to the above restaurant is plotted:<img src="./images/plots/03_moving-average.png"  width="600px"/><p>The analyzer also discards troll reviews and keeps a runningcounter of them, both per-user and per-restaurant, ready to be exposed with the other data. To do so, a toy version of a sentiment analysis is implemented (simply based on some words with positiveand negative connotation) and used to compare with the numericscore given in the review.</p></p></details><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="setup-initialize-your-environment"> </a>Setup - Initialize your environment</h2><h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-open-gitpod"> </a><code>✅.setup-01</code>- Open Gitpod</h4><p>Gitpod is an IDE based on VSCode deployed in the cloud.</p><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p></blockquote><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-realtime-data-pipelines"><img src="https://dabuttonfactory.com/button.png?t=Open+Gitpod&f=Open+Sans-Bold&ts=16&tc=fff&hp=20&vp=10&c=11&bgt=unicolored&bgc=0b5394" /></a></p><h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-your-astra-account-following-web-page-opened-by-gitpod-or-follow-this-link"> </a><code>✅.setup-02</code>- Create your Astra Account: Following web page opened by gitpod or follow this link</h4><p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p>The Astra registration page should have opened with Gitpod, if not use <a href="https://astra.dev/yt-9-14">this link</a>.</p><h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-create-astra-credentials-token-create-an-application-token-by-following-a-href-https-awesome-astra-github-io-docs-pages-astra-create-token-target-blank-these-instructions-a"> </a><code>✅.setup-03</code>- Create Astra Credentials (token): Create an application token by following <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/" target="_blank">these instructions</a>.</h4><p>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</p><blockquote><p>Your token should look like: <code>AstraCS:....</code></p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4><p>Go back to your gitpod terminal waiting for your token. Make sure you select the <code>1_producer</code> shell in the bottom-right panel and provide the value where it is asked.</p><p><img src="images/pic-astratoken.png" alt="pic" /></p><blockquote><p>🖥️ <code>setup-04 output</code></p><pre><code>[cedrick.lunven@gmail.com]ASTRA_DB_APPLICATION_TOKEN=AstraCS:AAAAAAAA[What's NEXT ?]You are all set.(configuration is stored in ~/.astrarc) You can now:   • Use any command, 'astra help' will get you the list   • Try with 'astra db list'   • Enter interactive mode using 'astra'Happy Coding !</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-list-your-existing-users"> </a><code>✅.setup-05</code>- List your existing Users.</h4><pre lang="bash"><code>astra user list</code></pre><blockquote><p>🖥️ <code>setup-05 output</code></p><pre><code>+--------------------------------------+-----------------------------+---------------------+| User Id                              | User Email                  | Status              |+--------------------------------------+-----------------------------+---------------------+| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |+--------------------------------------+-----------------------------+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-create-database-code-workshops-code-and-keyspace-code-trollsquad-code-if-they-do-not-exist"> </a><code>✅.setup-06</code>- Create database <code>workshops</code> and keyspace <code>trollsquad</code> if they do not exist:</h4><pre lang="bash"><code>astra db create workshops -k trollsquad --if-not-exist --wait</code></pre><p>Let's analyze the command:</p><table><thead><tr><th>Chunk</th><th>Description</th></tr></thead><tbody><tr><td><code>db create</code></td><td>Operation executed <code>create</code> in group <code>db</code></td></tr><tr><td><code>workshops</code></td><td>Name of the database, our argument</td></tr><tr><td><code>-k trollsquad</code></td><td>Name of the keyspace, a db can contains multiple keyspaces</td></tr><tr><td><code>--if-not-exist</code></td><td>Flag for itempotency creating only what if needed</td></tr><tr><td><code>--wait</code></td><td>Make the command blocking until all expected operations are executed (timeout is 180s)</td></tr></tbody></table><blockquote><p><strong>Note</strong>: If the database already exist but has not been used for while the status will be <code>HIBERNATED</code>. The previous command will resume the db an create the new keyspace but it can take about a minute to execute.</p></blockquote><blockquote><p>🖥️ <code>setup-06 output</code></p><pre><code>[ INFO ] - Database 'workshops' already exist. Connecting to database.[ INFO ] - Database 'workshops' has status 'MAINTENANCE' waiting to be 'ACTIVE' ...[ INFO ] - Database 'workshops' has status 'ACTIVE' (took 7983 millis)</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-check-the-status-of-database-code-workshops-code"> </a><code>✅.setup-07</code>- Check the status of database <code>workshops</code></h4><pre lang="bash"><code>astra db status workshops</code></pre><blockquote><p>🖥️ <code>setup-07 output</code></p><pre><code>[ INFO ] - Database 'workshops' has status 'ACTIVE'</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-08-code-get-the-informations-for-your-database-including-the-keyspace-list"> </a><code>✅.setup-08</code>- Get the informations for your database including the keyspace list</h4><pre lang="bash"><code>astra db get workshops</code></pre><blockquote><p>🖥️ <code>setup-08 output</code></p><pre><code>+------------------------+-----------------------------------------+| Attribute              | Value                                   |+------------------------+-----------------------------------------+| Name                   | workshops                               || id                     | bb61cfd6-2702-4b19-97b6-3b89a04c9be7    || Status                 | ACTIVE                                  || Default Cloud Provider | AWS                                     || Default Region         | us-east-1                               || Default Keyspace       | trollsquad                              || Creation Time          | 2022-08-29T06:13:06Z                    ||                        |                                         || Keyspaces              | [0] trollsquad                          ||                        |                                         ||                        |                                         || Regions                | [0] us-east-1                           ||                        |                                         |+------------------------+-----------------------------------------+</code></pre></blockquote><p><em>Congratulations your environment is all set, let's start the labs !</em></p><h2><a class="anchor" aria-hidden="true" id="lab1-producer-and-consumer"> </a>LAB1 - Producer and Consumer</h2><h4><a class="anchor" aria-hidden="true" id="code-lab1-01-code-generate-an-unique-tenant-name"> </a><code>✅.lab1-01</code>- Generate an unique tenant name</h4><blockquote><p><strong>Note</strong>: Your tenant name must start with a lowercase alphabetic character. It can only contain lowercase alphanumeric characters, and hyphens (kebab-case), and the maximum length is 25.</p></blockquote><p>A tenant name should BE UNIQUE IN ALL CLUSTER. So to get a unique name let's generate one randomly.</p><pre lang="bash"><code>export TENANT=&quot;trollsquad-$(tr -dc a-z0-9 &lt;/dev/urandom | head -c 9 ; echo '')&quot;echo $TENANT</code></pre><blockquote><p>🖥️ <code>lab1-01 output</code></p><pre><code>trollsquad-abcdefghi</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-02-code-create-the-tenant-using-the-generated-name"> </a><code>✅.lab1-02</code>- Create the tenant using the generated name</h4><p>You can create a tenant from the user interface using <a href="https://docs.datastax.com/en/astra-streaming/docs/astream-quick-start.html#create-a-tenant">this tutorial</a> but we will not use this today.</p><p>We will use the CLI for everyone to share the same values for regions and cloud provider. We will default all values for simplicity and because they are harcoded in the configuration file.</p><pre lang="bash"><code>astra streaming create ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-02 output</code></p><pre><code>[ INFO ] - Tenant 'trollsquad-abcdefghi' has being created.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-03-code-list-your-tenants"> </a><code>✅.lab1-03</code>- List your tenants</h4><pre lang="bash"><code>astra streaming list</code></pre><blockquote><p>🖥️ <code>lab1-03 output</code></p><pre><code>+---------------------+-----------+----------------+----------------+| name                | cloud     | region         | Status         |+---------------------+-----------+----------------+----------------+| trollsquad-abcdefghi| aws       | useast2        | active         |+---------------------+-----------+----------------+----------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-04-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-04</code>- Start <code>Pulsar-shell</code></h4><blockquote><p><strong>Note</strong> Pulsar shell is a fast and flexible shell for Pulsar cluster management, messaging, and more. It's great for quickly switching between different clusters, and can modify cluster or tenant configurations in an instant.</p></blockquote><p>Astra CLI will download and install the software if needed. Then it will generate a <code>client.conf</code> based on the tenant name you provide.</p><pre lang="bash"><code>astra streaming pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-04 output</code></p><pre><code>[ INFO ] - pulsar-shell first launch, downloading (~ 60MB), please wait...[ INFO ] - pulsar-shell has been installed/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-pk6oztya8.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651  Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-05-code-show-namespaces-in-code-pulsar-shell-code"> </a><code>✅.lab1-05</code>- Show namespaces in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin namespaces list ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-05 output</code></p><pre><code>trollsquad-abcdefghi/default</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-06-code-show-topics-in-code-pulsar-shell-code-empty"> </a><code>✅.lab1-06</code>- Show topics in <code>pulsar-shell</code> (empty)</h4><pre lang="bash"><code>admin topics list ${TENANT}/default</code></pre><blockquote><p>🖥️ <code>lab1-06 output</code></p><pre><code>&lt;empty&gt;</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-07-code-create-our-4-working-topics-one-command-after-the-other"> </a><code>✅.lab1-07</code>- Create our 4 working topics, one command after the other.</h4><ul><li><code>rr-raw-in</code></li></ul><pre lang="bash"><code>admin topics create persistent://${TENANT}/default/rr-raw-in</code></pre><ul><li><code>rr-hotel-reviews</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-hotel-reviews</code></pre><ul><li><code>rr-restaurant-reviews</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-restaurant-reviews</code></pre><ul><li><code>rr-restaurant-anomalies</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-restaurant-anomalies</code></pre><ul><li>List the topics</li></ul><pre><code>admin topics list ${TENANT}/default</code></pre><blockquote><p>🖥️ <code>lab1-07 output</code></p><pre><code>persistent://trollsquad-abcdefghi/default/rr-raw-inpersistent://trollsquad-abcdefghi/default/rr-restaurant-anomaliespersistent://trollsquad-abcdefghi/default/rr-hotel-reviewspersistent://trollsquad-abcdefghi/default/rr-restaurant-reviews</code></pre></blockquote><p>Let's dig into what those topics are used for. The will be populated one after this other moving across the labs.</p><table><thead><tr><th>Title</th><th>description</th></tr></thead><tbody><tr><td><code>rr-raw-in</code></td><td>Will get inputs from injector</td></tr><tr><td><code>rr-hotel-reviews</code></td><td>Pulsar function router will put hotels reviews there</td></tr><tr><td><code>rr-restaurant-reviews</code></td><td>Pulsar function router will put restaurants reviews there</td></tr><tr><td><code>rr-restaurant-anomalies</code></td><td>The analyzer will reject reviews there</td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="code-lab1-08-code-exit-code-pulsar-shell-code"> </a><code>✅.lab1-08</code> -  Exit <code>pulsar-shell</code></h4><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab1-09-code-create-code-env-code-as-configuration-file"> </a><code>✅.lab1-09</code>- Create <code>.env</code> as configuration file</h4><pre><code>cp .env.sample .envASTRA_DB_ID=`astra db get workshops --key id`echo &quot;ASTRA_DB_ID=\&quot;${ASTRA_DB_ID}\&quot;&quot; &gt;&gt; .envASTRA_DB_APP_TOKEN=`astra config get default --key ASTRA_DB_APPLICATION_TOKEN`echo &quot;ASTRA_DB_APP_TOKEN=\&quot;${ASTRA_DB_APP_TOKEN}\&quot;&quot; &gt;&gt; .envecho &quot;TENANT=\&quot;${TENANT}\&quot;&quot; &gt;&gt; .envPULSAR_TOKEN=`astra streaming pulsar-token ${TENANT}`echo &quot;PULSAR_TOKEN=\&quot;${PULSAR_TOKEN}\&quot;&quot; &gt;&gt; .envORGID=`astra org id`echo &quot;ORGID=\&quot;${ORGID}\&quot;&quot; &gt;&gt; .envset -asource .envset +atail -5 .env</code></pre><blockquote><p><strong>Note</strong>: If your DB <code>workshops</code> existed before this session and was not started on region <code>us-east-1</code> you will have to edit <code>.env</code> changing the key <code>ASTRA_DB_REGION</code></p></blockquote><blockquote><p>🖥️ <code>lab1-09 output</code></p><pre><code>gitpod /workspace/workshop-realtime-data-pipelines (main) $ tail -5 .envASTRA_DB_ID=&quot;3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23&quot;ASTRA_DB_APP_TOKEN=&quot;AstraCS:gdZaqzmFZ************&quot;TENANT=&quot;trollsquad-abcdefghi&quot;PULSAR_TOKEN=&quot;eyJhbGciOiJSUzI1**********&quot;ORGID=&quot;f9460f14-9879-4ebe-83f2-48d3f3dce13c&quot;</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-10-code-show-your-topics-on-the-user-interface"> </a><code>✅.lab1-10</code>- Show your topics on the user interface</h4><blockquote><p><strong>Note</strong>: <em>You need to be logged in to Astra&quot;. Make sure you have not being autologout before issueing the command</em></p></blockquote><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/</code></pre><p>Sometimes you have to hard refresh or click <code>topics</code> tab again. Notice the ellipsis to expand the list of topics if not present.</p><blockquote><p>🖥️ <code>lab1-10 output</code></p><p><img src="images/pic-topics.png" alt="pic" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-11-code-show-your-topic-code-rr-raw-in-code-in-astra-user-interface"> </a><code>✅.lab1-11</code>- Show your topic <code>rr-raw-in</code> in Astra User Interface:</h4><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-raw-in/1/0/overview</code></pre><blockquote><p>🖥️ <code>lab1-011 output</code></p><p><img src="images/pic-rr-raw-in.png" alt="pic" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-12-code-start-the-generator"> </a><code>✅.lab1-12</code>- Start the generator</h4><pre lang="bash"><code>/workspace/workshop-realtime-data-pipelines/revGenerator/review_generator.py -r 10</code></pre><blockquote><p>🖥️ <code>lab1-012 output</code></p><pre><code>2022-09-13 10:36:24.243 INFO  [140097656701568] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 10:36:24.249 INFO  [140097656701568] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 10:36:24.349 INFO  [140097629259520] ClientConnection:375 | [10.0.5.2:49564 -&gt; 3.138.177.230:6651] Connected to broker2022-09-13 10:36:24.818 INFO  [140097629259520] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-raw-in, ] Getting connection from pool2022-09-13 10:36:24.910 INFO  [140097629259520] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 10:36:24.915 INFO  [140097629259520] ConnectionPool:96 | Created connection for pulsar://192.168.69.127:66502022-09-13 10:36:25.016 INFO  [140097629259520] ClientConnection:377 | [10.0.5.2:56960 -&gt; 18.223.216.1:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.69.127:66502022-09-13 10:36:25.482 INFO  [140097629259520] ProducerImpl:189 | [persistent://trollsquad-pk6oztya8/default/rr-raw-in, ] Created producer on broker [10.0.5.2:56960 -&gt; 18.223.216.1:6651] * 0 ... [{&quot;u_id&quot;: &quot;geri&quot;, &quot;score&quot;: 9.3, &quot;review_type&quot;: &quot;hotel&quot;, &quot;item_id&quot;: &quot;slpsnd&quot;, &quot;item_name&quot;: &quot;SleepSound&quot;, &quot;text&quot;: &quot;we terrible disgusting unsatisfactory cooked terrible&quot;, &quot;idx&quot;: 0}]* 1 ... [a5VH40D^L625Z98b1BKTN@N2aCEQN=VXQTD0IaYPK[RXbZVOQZJGP2`Y;^5OZ@:EE]* 2 ... [{&quot;u_id&quot;: &quot;botz&quot;, &quot;score&quot;: 9.600000000000001, &quot;review_type&quot;: &quot;hotel&quot;, &quot;item_id&quot;: &quot;slpsnd&quot;, &quot;item_name&quot;: &quot;SleepSound&quot;, &quot;text&quot;: &quot;excellent excellent delicious ordinary dish with is tasty&quot;, &quot;idx&quot;: 2}]* 3 ... [{&quot;u_id&quot;: &quot;botz&quot;, &quot;score&quot;: 9.1, &quot;item_id&quot;: &quot;eat_st&quot;, &quot;item_name&quot;: &quot;EatNStay&quot;, &quot;text&quot;: &quot;excellent the is excellent ordinary ordinary eating&quot;, &quot;idx&quot;: 3}]....</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-13-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-13</code>- Start <code>pulsar-shell</code></h4><p>For now on the first terminal will be busy with the generator. As such move to the second terminal called <code>2_consumer</code></p><p><img src="images/pic-bash2.png" alt="" /></p><pre><code>set -asource .envset +asource /home/gitpod/.astra/cli/astra-init.shastra streaming  pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-013 output</code></p><pre><code>/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-pk6oztya8.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651  Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-14-code-visualize-messages-with-a-consumer-using-code-client-code"> </a><code>✅.lab1-14</code>- Visualize messages with a consumer using <code>client</code></h4><pre lang="bash"><code>client consume persistent://${TENANT}/default/rr-raw-in -s consume_log -n 0</code></pre><blockquote><p>🖥️ <code>lab1-014 output</code></p><pre><code>2022-09-13T10:49:04,150+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConnectionPool - [[id: 0xf990e737, L:/10.0.5.2:54496 - R:pulsar-aws-useast2.streaming.datastax.com/3.16.119.226:6651]] Connected to server2022-09-13T10:49:04,709+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerStatsRecorderImpl - Starting Pulsar consumer status recorder with config: {&quot;topicNames&quot;:[&quot;persistent://trollsquad-pk6oztya8/default/rr-raw-in&quot;],&quot;topicsPattern&quot;:null,&quot;subscriptionName&quot;:&quot;consume_log&quot;,&quot;subscriptionType&quot;:&quot;Exclusive&quot;,&quot;subscriptionProperties&quot;:null,&quot;subscriptionMode&quot;:&quot;Durable&quot;,&quot;receiverQueueSize&quot;:1000,&quot;acknowledgementsGroupTimeMicros&quot;:100000,&quot;negativeAckRedeliveryDelayMicros&quot;:60000000,&quot;maxTotalReceiverQueueSizeAcrossPartitions&quot;:50000,&quot;consumerName&quot;:null,&quot;ackTimeoutMillis&quot;:0,&quot;tickDurationMillis&quot;:1000,&quot;priorityLevel&quot;:0,&quot;maxPendingChunkedMessage&quot;:10,&quot;autoAckOldestChunkedMessageOnQueueFull&quot;:false,&quot;expireTimeOfIncompleteChunkedMessageMillis&quot;:60000,&quot;cryptoFailureAction&quot;:&quot;FAIL&quot;,&quot;properties&quot;:{},&quot;readCompacted&quot;:false,&quot;subscriptionInitialPosition&quot;:&quot;Latest&quot;,&quot;patternAutoDiscoveryPeriod&quot;:60,&quot;regexSubscriptionMode&quot;:&quot;PersistentOnly&quot;,&quot;deadLetterPolicy&quot;:null,&quot;retryEnable&quot;:false,&quot;autoUpdatePartitions&quot;:true,&quot;autoUpdatePartitionsIntervalSeconds&quot;:60,&quot;replicateSubscriptionState&quot;:false,&quot;resetIncludeHead&quot;:false,&quot;keySharedPolicy&quot;:null,&quot;batchIndexAckEnabled&quot;:false,&quot;ackReceiptEnabled&quot;:false,&quot;poolMessages&quot;:true,&quot;startPaused&quot;:false,&quot;maxPendingChuckedMessage&quot;:10}...2022-09-13T10:49:59,192+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerImpl - [persistent://trollsquad-pk6oztya8/default/rr-raw-in][consume_log] Subscribing to topic on cnx [id: 0x797d8d1d, L:/10.0.5.2:50876 - R:pulsar-aws-useast2.streaming.datastax.com/3.138.177.230:6651], consumerId 02022-09-13T10:49:59,288+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerImpl - [persistent://trollsquad-pk6oztya8/default/rr-raw-in][consume_log] Subscribed to topic on pulsar-aws-useast2.streaming.datastax.com/3.138.177.230:6651 -- consumer: 02022-09-13T10:49:59,395+0000 [pulsar-client-io-1-1] INFO  com.scurrilous.circe.checksum.Crc32cIntChecksum - SSE4.2 CRC32C provider initialized----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;geri&quot;, &quot;score&quot;: 5.0, &quot;review_type&quot;: &quot;restaurant&quot;, &quot;item_id&quot;: &quot;vegg00&quot;, &quot;item_name&quot;: &quot;VeggieParadise&quot;, &quot;text&quot;: &quot;roast risotto risotto eating for for dish&quot;, &quot;idx&quot;: 1171}----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;botz&quot;, &quot;score&quot;: 7.300000000000001, &quot;review_type&quot;: &quot;restaurant&quot;, &quot;item_id&quot;: &quot;gold_f&quot;, &quot;item_name&quot;: &quot;Golden Fork&quot;, &quot;text&quot;: &quot;with we ordinary we with cooked we ordinary&quot;, &quot;idx&quot;: 1172}</code></pre></blockquote><p>We can kill this consumer with <code>CTRL + C</code>.</p><h2><a class="anchor" aria-hidden="true" id="lab2-pulsar-functions"> </a>LAB2 - Pulsar functions</h2><p>For now both terminal will 1 and 2 be busy with the generator. As such move to the second terminal called <code>3_analyzer</code></p><p><img src="images/pic-bash3.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab2-01-code-locate-and-setup-the-function"> </a><code>✅.lab2-01</code>- Locate and setup the function</h4><pre lang="bash"><code>set -asource .envset +agp open /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.pysed -i &quot;s/___TENANT___/${TENANT}/&quot; /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.py</code></pre><blockquote><p>🖥️ <code>lab2-01 output</code></p><p>Before <code>sed</code>:<img src="images/sed-before.png" alt="pic" /></p><p>After <code>sed</code>:<img src="images/sed-after.png" alt="" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-02-code-start-pulsar-shell-again"> </a><code>✅.lab2-02</code>- Start Pulsar Shell (again)</h4><pre lang="bash"><code>source /home/gitpod/.astra/cli/astra-init.shastra streaming pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab2-02 output</code></p><pre><code>/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-abcdefghi.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651 Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-03-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-03</code>- List functions in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin functions list --tenant=${TENANT} --namespace=default</code></pre><blockquote><p>🖥️ <code>lab2-03 output</code></p><pre><code>&lt;empty&gt;</code></pre></blockquote><blockquote><p><strong>Note</strong>:<em>If you need to delete a function you can also leverage on the <code>admin</code> command to do so:</em></p><pre lang="bash"><code>admin functions delete    --name rrouter-function     --tenant=${TENANT}     --namespace=default</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-04-code-create-the-pulsar-function"> </a><code>✅.lab2-04</code>- Create the Pulsar-function</h4><pre lang="bash"><code>admin functions create  --py /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.py  --classname review_router.ReviewRouter  --tenant ${TENANT}  --namespace default  --name rrouter-function  --inputs persistent://${TENANT}/default/rr-raw-in</code></pre><blockquote><p>🖥️ <code>lab2-04 output</code></p><pre><code>Created successfully</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-05-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-05</code>- List functions in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin functions list --tenant=${TENANT} --namespace=defaultexit</code></pre><blockquote><p>🖥️ <code>lab2-05 output</code></p><pre><code>rrouter-function</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-06-code-check-on-topics-code-rr-hotel-reviews-code-and-code-rr-restaurant-reviews-code"> </a><code>✅.lab2-06</code>- Check on topics <code>rr-hotel-reviews</code> and <code>rr-restaurant-reviews</code></h4><ul><li>Hotels</li></ul><pre lang="bash"><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-hotel-reviews/1/0</code></pre><blockquote><p>🖥️ <code>lab2-06 output-1</code></p><p>Hotels:<img src="images/pic-hotel-reviews.png" alt="" /></p></blockquote><ul><li>Restaurants</li></ul><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-restaurant-reviews/1/0</code></pre><blockquote><p>🖥️ <code>lab2-06 output-2</code></p><p>Restaurants:<img src="images/pic-restaurant-reviews.png" alt="" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-07-code-consume-5-message-in-topics-content-with-code-pulsar-shell-code"> </a><code>✅.lab2-07</code>- Consume 5 message in topics content with <code>pulsar-shell</code></h4><ul><li>Start Shell:</li></ul><pre><code>astra streaming pulsar-shell ${TENANT}</code></pre><ul><li>Execute command:</li></ul><pre><code>client consume persistent://${TENANT}/default/rr-restaurant-reviews -s consume_log -n 5</code></pre><blockquote><p>🖥️ <code>lab2-07 output</code></p><p>After initialization you see messages:[...]----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;rita&quot;, &quot;r_score&quot;: 3.9000000000000004, &quot;tgt_name&quot;: &quot;VeggieParadise&quot;, &quot;tgt_id&quot;: &quot;vegg00&quot;, &quot;r_text&quot;: &quot;we ordinary roast with is for for is&quot;, &quot;idx&quot;: 9619}[...]</p><p>If we format a sample message it looks like:</p><pre lang="json"><code>{   &quot;user_id&quot;: &quot;geri&quot;,    &quot;r_score&quot;: 1.5,    &quot;tgt_name&quot;: &quot;Pizza Smile&quot;,    &quot;tgt_id&quot;: &quot;pizzas&quot;,    &quot;r_text&quot;: &quot;delicious with for eating stellar excellent is&quot;,    &quot;idx&quot;: 20179 }</code></pre></blockquote><ul><li>Exit <code>pulsar-shell</code></li></ul><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab2-08-code-run-analyzer"> </a><code>✅.lab2-08</code>- Run Analyzer</h4><p>revAnalyzer is a standalone batch to evaluate which reviews are relevant and which are not.</p><pre lang="bash"><code>set -asource .envset +a/workspace/workshop-realtime-data-pipelines/revAnalyzer/review_analyzer.py -r -o -t -f 200</code></pre><blockquote><p>🖥️ <code>lab2-08 output</code></p><pre><code>Checking &quot;known_ids_per_type&quot; ... done.Checking &quot;restaurants_by_id&quot; ... done.Checking &quot;restaurants_by_id_time&quot; ... done.Checking &quot;reviewers_by_id&quot; ... done.2022-09-13 12:46:30.012 INFO  [140019973255808] Client:88 | Subscribing on Topic :persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews2022-09-13 12:46:30.012 INFO  [140019973255808] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:30.019 INFO  [140019973255808] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 12:46:30.121 INFO  [140019938682624] ClientConnection:375 | [10.0.5.2:33432 -&gt; 18.223.216.1:6651] Connected to broker2022-09-13 12:46:30.593 INFO  [140019938682624] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews, review-analyzer, 0] Getting connection from pool2022-09-13 12:46:30.688 INFO  [140019938682624] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:30.696 INFO  [140019938682624] ConnectionPool:96 | Created connection for pulsar://192.168.50.226:66502022-09-13 12:46:30.798 INFO  [140019938682624] ClientConnection:377 | [10.0.5.2:49968 -&gt; 3.138.177.230:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.50.226:66502022-09-13 12:46:31.263 INFO  [140019938682624] ConsumerImpl:224 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews, review-analyzer, 0] Created consumer on broker [10.0.5.2:49968 -&gt; 3.138.177.230:6651] 2022-09-13 12:46:31.358 INFO  [140019938682624] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, ] Getting connection from pool2022-09-13 12:46:31.453 INFO  [140019938682624] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:31.460 INFO  [140019938682624] ConnectionPool:96 | Created connection for pulsar://192.168.7.141:66502022-09-13 12:46:31.558 INFO  [140019938682624] ClientConnection:377 | [10.0.5.2:41468 -&gt; 3.16.119.226:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.7.141:66502022-09-13 12:46:32.032 INFO  [140019938682624] ProducerImpl:189 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, ] Created producer on broker [10.0.5.2:41468 -&gt; 3.16.119.226:6651] [ 20827] Outlier detected: &quot;anne&quot; on &quot;Golden Fork&quot; (rev 7.40 != avg 3.47)[ 24252] Outlier detected: &quot;anne&quot; on &quot;Golden Fork&quot; (rev 7.90 != avg 4.63)[ 24256] Outlier detected: &quot;botz&quot; on &quot;Golden Fork&quot; (rev 0.40 != avg 4.21)[ 24616] Outlier detected: &quot;botz&quot; on &quot;Golden Fork&quot; (rev 0.60 != avg 3.97)[ 25239] Restaurant Score Summary:                 [gold_f  25239]   &quot;Golden Fork&quot;      : 3.66   (outliers:      4/    64)                 [pizzas  25239]   &quot;Pizza Smile&quot;      : 0.67   (outliers:      0/    55)                 [vegg00  25239]   &quot;VeggieParadise&quot;   : 1.93   (outliers:      0/    57)[ 25239] Reviewer Summary:                   &quot;anne&quot;  25239 : troll-score = 0.00 (outliers:      2 /     42). Visits: gold_f(18), pizzas(12), vegg00(12)                   &quot;botz&quot;  25239 : troll-score = 0.00 (outliers:      2 /     43). Visits: gold_f(13), pizzas(14), vegg00(16)                   &quot;geri&quot;  25239 : troll-score = 0.66 (outliers:      0 /     41). Visits: gold_f(12), vegg00(2)                   &quot;john&quot;  25239 : troll-score = 0.00 (outliers:      0 /     35). Visits: gold_f(13), pizzas(10), vegg00(12)                   &quot;rita&quot;  25239 : troll-score = 0.00 (outliers:      0 /     39). Visits: gold_f(7), pizzas(18), vegg00(14)[ 25239] Writing to DB ... done.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-09-code-change-terminal"> </a><code>✅.lab2-09</code>- Change Terminal</h4><p>All terminal are busy. Let us move to the terminal called <code>4_reader</code></p><p><img src="images/pic-bash4.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab2-010-code-start-reader-to-log-anomalies-in-shell-code-reader-code"> </a><code>✅.lab2-010</code>- Start reader to log anomalies in shell <code>reader</code></h4><pre lang="bash"><code>set -asource .envset +a/workspace/workshop-realtime-data-pipelines/tools/reader.py -t rr-restaurant-anomalies</code></pre><blockquote><p>🖥️ <code>lab2-10 output</code></p><pre><code>2022-09-13 12:52:16.261 INFO  [139762389439104] Client:88 | Subscribing on Topic :persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies2022-09-13 12:52:16.262 INFO  [139762389439104] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:52:16.267 INFO  [139762389439104] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 12:52:16.380 INFO  [139762369062656] ClientConnection:375 | [10.0.5.2:40472 -&gt; 3.16.119.226:6651] Connected to broker2022-09-13 12:52:16.852 INFO  [139762369062656] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, my-sub, 0] Getting connection from pool2022-09-13 12:52:16.945 INFO  [139762369062656] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:52:16.951 INFO  [139762369062656] ConnectionPool:96 | Created connection for pulsar://192.168.7.141:6650...[2022-09-13T12:52:40] Received message 217:    Type = JSON        {            &quot;detected_by&quot;: &quot;review_analyzer.py&quot;,            &quot;idx&quot;: 22650,            &quot;r_score&quot;: 9.4,            &quot;r_text&quot;: &quot;roast superb roast ordinary superb superb stellar we&quot;,            &quot;tgt_id&quot;: &quot;gold_f&quot;,            &quot;tgt_name&quot;: &quot;Golden Fork&quot;,            &quot;user_id&quot;: &quot;botz&quot;        }...</code></pre></blockquote><blockquote><p><strong>Note</strong>: <em>you can customize the behaviour of those commands - try passing <code>-h</code>to the scripts to see what is available</em>.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="lab3-working-with-databases"> </a>LAB3 - Working with databases</h2><p>All terminal are busy. Let us move to the terminal called <code>5_database</code></p><p><img src="images/pic-bash5.png" alt="" /></p><p>The only missing piece at this point are direct database queries. You can access the tables in any way you want, for instance using the provided <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Cql-Shell">CQL shell on the Astra DB UI</a>: just inspect the <code>trollsquad</code> keyspace and try to <code>SELECT</code> rows from the tables you find there.</p><h4><a class="anchor" aria-hidden="true" id="code-lab3-01-code-display-schema"> </a><code>✅.lab3-01</code>- Display schema</h4><p>You will notice that the restaurant reviews are written in <em>two</em> tables:</p><ul><li>one will simply contain the latest average score for each restaurant</li></ul><pre lang="bash"><code>set -asource .envset +asource /home/gitpod/.astra/cli/astra-init.shastra db cqlsh workshops -e &quot;describe table trollsquad.restaurants_by_id;&quot;</code></pre><blockquote><p>🖥️ <code>lab3-01 output (1)</code></p><pre lang="sql"><code>[ INFO ] - Cqlsh has been installedCqlsh is starting please wait for connection establishment...CREATE TABLE trollsquad.restaurants_by_id (    id text PRIMARY KEY,    average float,    hits int,    name text,    num_outliers int)</code></pre></blockquote><blockquote><p><strong>Note</strong>:<em>Sometimes you can hit a timeout error, it that is the case reexcute the same command.</em></p></blockquote><ul><li>the other is structured to offer historical data for e.g. a plotting client application (there is some built-in eviction of old results to avoid unbound growth of the table).</li></ul><pre lang="bash"><code>source /home/gitpod/.astra/cli/astra-init.shastra db cqlsh workshops -e &quot;describe table trollsquad.restaurants_by_id_time;&quot;</code></pre><blockquote><p>🖥️ <code>lab3-01 output (2)</code></p><pre lang="sql"><code>CREATE TABLE trollsquad.restaurants_by_id_time (    id text,    time timestamp,    average float,    name text,    PRIMARY KEY (id, time)) WITH CLUSTERING ORDER BY (time ASC)</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-02-code-what-restaurants-can-be-queried"> </a><code>✅.lab3-02</code>- What restaurants can be queried?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.known_ids_per_type where id_type='restaurant'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-02 output</code></p><pre lang="sql"><code> id_type    | ids------------+-------------------------------- restaurant | {'gold_f', 'pizzas', 'vegg00'}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-03-code-what-reviewers-can-be-queried"> </a><code>✅.lab3-03</code>- What reviewers can be queried?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.known_ids_per_type where id_type='reviewer'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-03 output</code></p><pre lang="sql"><code> id_type    | ids------------+-------------------------------- reviewer | {'anne', 'botz', 'geri', 'john', 'rita'}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-04-code-what-s-the-current-status-of-a-restaurant"> </a><code>✅.lab3-04</code>- What's the current status of a restaurant?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.restaurants_by_id where id='vegg00'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-04 output</code></p><pre lang="sql"><code>id     | average | hits | name           | num_outliers--------+---------+------+----------------+-------------- vegg00 | 1.93489 |   57 | VeggieParadise |            0</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-05-code-what-s-the-current-status-of-a-reviewer"> </a><code>✅.lab3-05</code>- What's the current status of a reviewer?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.reviewers_by_id where id='geri'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-05 output</code></p><pre lang="sql"><code> id   | hits | num_outliers | target_map                  | trollings------+------+--------------+-----------------------------+-----------geri |   83 |            0 | {'gold_f': 16, 'vegg00': 4} |        63</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-06-code-what-is-the-timeline-of-reviews-for-a-restaurant"> </a><code>✅.lab3-06</code>- What is the timeline of reviews for a restaurant?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.restaurants_by_id_time where id='gold_f'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-05 output</code></p><pre lang="sql"><code>id     | time                            | average | name--------+---------------------------------+---------+------------- gold_f | 2022-09-13 00:48:51.481000+0000 | 5.14027 | Golden Fork gold_f | 2022-09-13 00:48:52.782000+0000 | 4.02716 | Golden Fork gold_f | 2022-09-13 00:48:59.465000+0000 |  2.9716 | Golden Fork gold_f | 2022-09-13 00:49:01.645000+0000 | 4.91724 | Golden Fork gold_f | 2022-09-13 00:49:03.377000+0000 | 4.09476 | Golden Fork gold_f | 2022-09-13 00:49:05.156000+0000 | 3.31554 | Golden Fork gold_f | 2022-09-13 00:49:06.902000+0000 | 4.79082 | Golden Fork gold_f | 2022-09-13 00:49:08.588000+0000 | 3.13101 | Golden Fork gold_f | 2022-09-13 00:49:10.141000+0000 | 4.96983 | Golden Fork gold_f | 2022-09-13 00:49:12.284000+0000 | 4.87864 | Golden Fork gold_f | 2022-09-13 00:49:13.722000+0000 | 4.18713 | Golden Fork gold_f | 2022-09-13 00:49:15.501000+0000 |  2.9564 | Golden Fork</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="lab4-pulsar-i-o"> </a>LAB4 - Pulsar I/O</h2><p>We used a standalone analyzer to create the tables and populate values. What if, each time a data is inserted in a topic it is also copied in the db.</p><h4><a class="anchor" aria-hidden="true" id="code-lab4-01-code-analyzing-message-syntax-in-code-rr-restaurant-anomalies-code"> </a><code>✅.lab4-01</code>- Analyzing message syntax in <code>rr-restaurant-anomalies</code></h4><ul><li>Start Pulsar-shell again</li></ul><pre lang="bash"><code>astra streaming pulsar-shell ${TENANT}</code></pre><ul><li>Consume a couple of messages in <code>rr-restaurant-anomalies</code> (the analyzer should be running)</li></ul><pre lang="bash"><code>client consume persistent://${TENANT}/default/rr-restaurant-anomalies -s log -n 5</code></pre><ul><li>Looking at message structure, the output look like</li></ul><pre lang="bashing"><code>[...]key:[null], properties:[], content:{&quot;user_id&quot;: &quot;botz&quot;, &quot;r_score&quot;: 6.4, &quot;tgt_name&quot;: &quot;Pizza Smile&quot;, &quot;tgt_id&quot;: &quot;pizzas&quot;, &quot;r_text&quot;: &quot;eating is for ordinary is&quot;, &quot;idx&quot;: 17261, &quot;detected_by&quot;: &quot;review_analyzer.py&quot;}----- got message -----[...]</code></pre><ul><li>Extracting one message and formatting as <code>JSON</code>:</li></ul><pre lang="json"><code>{   &quot;user_id&quot;: &quot;geri&quot;,   &quot;r_score&quot;: 5.7,   &quot;tgt_name&quot;: &quot;Golden Fork&quot;,   &quot;tgt_id&quot;: &quot;gold_f&quot;,   &quot;r_text&quot;: &quot;dish the the is dish with we&quot;,   &quot;idx&quot;: 17845,    &quot;detected_by&quot;: &quot;review_analyzer.py&quot;}</code></pre><p>Let us do a couple of assumptions:</p><ul><li>idx ensures unicity of a record</li><li>we want to search by user</li></ul><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS trollsquad.msg_rr_restaurant_anomalies (     user_id  text,     idx      int,     r_score  double,     tgt_name text,     tgt_id   text,     r_text   text,     detected_by text,     PRIMARY KEY (user_id, idx)) WITH CLUSTERING ORDER BY (idx ASC);</code></pre><ul><li>Exit the <code>pulsar-shell</code></li></ul><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab4-02-code-create-the-associated-table"> </a><code>✅.lab4-02</code>- Create the associated Table</h4><ul><li>Create the table through CQL</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;CREATE TABLE IF NOT EXISTS trollsquad.msg_rr_restaurant_anomalies ( \      user_id  text, \      idx      int, \      r_score  double,       tgt_name text,\      tgt_id   text,\      r_text   text,\      detected_by text,\      PRIMARY KEY (user_id, idx)\  ) WITH CLUSTERING ORDER BY (idx ASC);&quot;</code></pre><ul><li>Check table now exist</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;describe table trollsquad.msg_rr_restaurant_anomalies;&quot;</code></pre><ul><li>Check content of the table</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;select * FROM trollsquad.msg_rr_restaurant_anomalies LIMIT 10;&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab4-03-code-create-a-sink-with-the-user-interface"> </a><code>✅.lab4-03</code>- Create a Sink with the user interface</h4><blockquote><p><strong>Note</strong>:<a href="https://docs.datastax.com/en/astra-streaming/docs/astream-astradb-sink.html">Reference Documentation</a></p></blockquote><ul><li>In the dashboard of your tenant, locate the tab <code>Sinks</code> and select button <code>[Create Sink]</code>.</li></ul><p><img src="images/create-sink-01.png" alt="" /></p><ul><li>Enter General attributes (part 1)</li></ul><table><thead><tr><th>Attribute</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>Namespace</td><td><code>default</code></td><td>The namespace we work with from the beginning</td></tr><tr><td>Sink Type</td><td><code>Astra DB</code></td><td>You can define external systems but here we stay in Astra</td></tr><tr><td>Name</td><td><code>sink-anomalies</code></td><td>Pick anything unique, here reminding the source topic</td></tr><tr><td>Topic</td><td><code>rr-restaurant-anomalies</code></td><td>The one we decided to save</td></tr></tbody></table><p><img src="images/create-sink-02.png" alt="" /></p><ul><li>Get your token value. You need to remind the token we used today, the first entry your provided:</li></ul><pre lang="bash"><code>astra config get default --key ASTRA_DB_APPLICATION_TOKEN</code></pre><ul><li>Enter Database attributes (part 2)</li></ul><table><thead><tr><th>Attribute</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>Database</td><td><code>workshops</code></td><td>db created it in the beginning</td></tr><tr><td>Keyspace</td><td><code>trollsquad</code></td><td>keyspace we created in the beginning</td></tr><tr><td>TableName</td><td><code>msg_rr_restaurant_anomalies</code></td><td>Table we created before</td></tr><tr><td>Token</td><td><code>&lt;your_token&gt;</code></td><td>Do not copy-paste the value but use YOUR token.</td></tr></tbody></table><p>And for Mapping. It is a mapping 1 to 1 from message attributes to db columns.</p><pre lang="csv"><code>user_id=value.user_id,idx=value.idx,r_score=value.r_score,tgt_name=value.tgt_name,tgt_id=value.tgt_id,r_text=value.r_text,detected_by=value.detected_by</code></pre><p><img src="images/create-sink-03.png" alt="" /></p><ul><li>These were the last entries you can now click the <code>[Create]</code> button</li></ul><p><img src="images/create-sink-04.png" alt="" /></p><ul><li>The sink will take about a minute to initialize and start:</li></ul><p><img src="images/create-sink-05.png" alt="" /></p><ul><li>When it is ready the status will switch to <code>running</code></li></ul><p><img src="images/create-sink-06.png" alt="" /></p><ul><li>You can get the details by clicking on the sink name in the table</li></ul><p><img src="images/create-sink-07.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab4-04-code-query-the-destination-table"> </a><code>✅.lab4-04</code>- Query the destination table</h4><pre lang="bash"><code>astra db cqlsh workshops -e &quot;select * FROM trollsquad.msg_rr_restaurant_anomalies LIMIT 10;&quot;</code></pre><blockquote><p>🖥️ <code>lab4-04 output</code></p><p><code>YOUR_HOMEWORK</code></p></blockquote><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><p>To submit the <strong>homework</strong>, please take a screenshot in gitpod with the result of lab <code>✅.lab4-04</code>, you will have different values than the ones showed during the live.</p><p>Don't forget to <a href="https://dtsx.io/homework-realtime-data-pipelines">submit your homework</a> and be awarded a nice verified badge!</p><h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Pulsar and Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.</p><p>There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p>Don't forget to <a href="https://dtsx.io/homework-realtime-data-pipelines">submit your homework</a> and be awarded a nice verified badge!</p><img src="images/badge.png?raw=true" width="350" /><p><strong>... and see you at our next workshop!</strong></p>
SUCCESS SAVING README for datastaxdevs-workshop-realtime-data-pipelines
Getting astra.json for datastaxdevs/workshop-IOS-Swift-Astra at 277
No astra.json for datastaxdevs/workshop-IOS-Swift-Astra at 281
No astrajson for Swift, IOS and Document API
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="sample-swift-ios-app-using-datastax-astra-s-document-api"> </a>Sample Swift IOS app using Datastax Astra's Document API</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="contributor"> </a>Contributor:</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="objective"> </a>Objective:</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="about"> </a>About:</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="for-beginners"> </a>For beginners:</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites:</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-to-replicate-the-project"> </a>How to replicate the project:</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="integrate-pods-in-project"> </a>Integrate Pods in Project:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="remove-pods-from-project"> </a>Remove Pods from project:</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="whether-you-choose-to-remove-the-pods-or-keep-them-now-follow-the-steps-below"> </a>!! Whether you choose to remove the Pods or keep them, now follow the steps below !!</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-to-connect-to-your-own-database-in-the-app"> </a>How to connect to your own database in the app:</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="now-you-should-create-your-own-collection-using-swagger-ui"> </a>Now you should create your own collection using Swagger UI:</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="creating-your-own-model"> </a>Creating your own model</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="additional-information"> </a>Additional Information</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="for-beginners-to-swift"> </a>For beginners to Swift:</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="interested-in-using-the-ml-in-your-own-app"> </a>Interested in using the ML in your own app?</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="intro-to-document-api"> </a>Intro to Document API</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="for-beginners-to-databases"> </a>For beginners to databases:</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1-how-to-get-all-orders-max-of-20-from-the-collection-em-orders-em-for-the-username-em-andy1-em"> </a>1. How to GET all orders (max of 20) from the collection <em>orders</em> for the username <em>Andy1</em>:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2-how-to-get-the-user-info-for-the-username-em-andy1-em-in-the-collection-em-userinfo-em"> </a>2. How to GET the user info for the username <em>Andy1</em> in the collection <em>userInfo</em>:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="3-how-to-post-a-new-user-info-with-username-em-testusername-em-and-password-em-testpassword-em-in-the-em-userinfo-em-collection"> </a>3. How to POST a new user info with username <em>testUsername</em> and password <em>testPassword</em> in the <em>userInfo</em> collection:</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2>
HTML FOR datastaxdevs-workshop-IOS-Swift-Astra<h1><a class="anchor" aria-hidden="true" id="sample-swift-ios-app-using-datastax-astra-s-document-api"> </a>Sample Swift IOS app using Datastax Astra's Document API</h1><h3><a class="anchor" aria-hidden="true" id="contributor"> </a>Contributor:</h3><p><a href="https://github.com/vmic2002">Victor Micha</a>, Datastax Polaris Intern</p><h3><a class="anchor" aria-hidden="true" id="objective"> </a>Objective:</h3><p>Build an app in Swift that connects to the Datastax Astra Database. By replicating this project, you will have an IOS app with fully functional backend and frontend.</p><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://www.youtube.com/watch?v=U2R-6gKeXXk">Workshop Video/Youtube Link</a></li><li><a href="Slides/workshop-Swift-IOS-Astra.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://gist.github.com/vmic2002/68bdfb71a55a1410ba0e708a81b24af1">Code for the workshop</a></li></ul><h2><a class="anchor" aria-hidden="true" id="about"> </a>About:</h2><p>This sample app is coded in Swift and was developed on the Xcode IDE. It connects to the Astra DB using the Document API. It handles user accounts (signing up, signing in, changing password and deleting accounts) as well as manually entering an order, taking a picture of the receipt to post an order, and seeing all past orders.</p><p>GroceryHandler is an application for facilitating the accounting of splitting expenses with others. For example, if roommates buy groceries together in one order, this app would be able to indicate how much each person owes the buyer.</p><h2><a class="anchor" aria-hidden="true" id="for-beginners"> </a>For beginners:</h2><p>If you are new to databases, <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#for-beginners-to-databases">click here</a>.If you are new to the Document API, <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#intro-to-document-api">click here</a>.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites:</h2><ol><li><a href="https://developer.apple.com/xcode/">Download Xcode</a>.The Xcode version for this application is version 13.4.1.It will take a while to download. While this is happening, move on to the next step.</li><li><a href="https://auth.cloud.datastax.com/auth/realms/CloudUsers/login-actions/registration?client_id=auth-proxy&amp;tab_id=sbXNIWyPYDw&amp;redirect_uri=https://astra.datastax.com/welcome">Create an Astra database account:</a><img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.08.20%20AM.png" alt="" /></li><li>After verifying the account, click on <em>Create Database</em>:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2010.52.43%20AM.png" alt="" /></li><li>Enter a database name, keyspace name, and region. Name them whatever you like. For the sample app, the keyspace is named <em>gh_orders_userinfo</em>. Then click on <em>Create Database</em><img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2010.57.15%20AM.png" alt="" /></li><li>Click on <em>Go To Database</em><img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.01.41%20AM.png" alt="" /></li><li>In the dashboard, click on the <em>Connect</em> tab:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.04.35%20AM.png" alt="" /></li><li>Create an application token:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.09.38%20AM.png" alt="" /></li><li>Select the role <em>Administrator User</em> then click on <em>Generate Token</em><img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.20.17%20AM.png" alt="" /></li><li>Make sure to copy the <em>Token</em> somewhere for later<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%2011.23.58%20AM.png" alt="" /></li></ol><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="how-to-replicate-the-project"> </a>How to replicate the project:</h2><p>See -&gt; <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#prerequisites">Prerequisites first</a></p><p>Go to the directory where you would like your project to reside. If you are not sure what this means, open your Terminal app:</p><p><img src="READMEPictures/Screen%20Shot%202022-07-18%20at%203.18.37%20PM.png" alt="" /></p><p>If you want your project to reside in your <code>Desktop</code> sub-directory for example, run (run means type this command in your terminal window):</p><pre lang="bash"><code>cd Desktop</code></pre><p>Clone the project by running:</p><pre lang="bash"><code>git clone https://github.com/datastaxdevs/workshop-IOS-Swift-Astra.git</code></pre><p>This is all that is needed to strictly connect to the database. However, the sample app uses ML Kit Text Recognition API to decipher prices from receipts.</p><p>The Pods required for this are way too big to be stored on Github, so either follow the steps to integrate them in your project by <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#integrate-pods-in-project">clicking here</a> or remove them from project by <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#remove-pods-from-project">clicking here</a>.</p><h4><a class="anchor" aria-hidden="true" id="integrate-pods-in-project"> </a>Integrate Pods in Project:</h4><ol><li>In the same window, go to your project directory by running</li></ol><pre lang="bash"><code>cd workshop-IOS-Swift-Astra</code></pre><ol start="2"><li>To install CocoaPods, run (if a password is required, use the one you use to log in to your laptop):</li></ol><pre lang="bash"><code>sudo gem install cocoapods</code></pre><ol start="3"><li>To install the Pods directory, run:</li></ol><pre lang="bash"><code>pod install</code></pre><p>Now the pods are installed and the project will build once opened on Xcode!</p><h4><a class="anchor" aria-hidden="true" id="remove-pods-from-project"> </a>Remove Pods from project:</h4><ol><li>After cloning the git repo, go to your project directory by running:</li></ol><pre lang="bash"><code>cd workshop-IOS-Swift-Astra</code></pre><ol start="2"><li>Run these commands to remove the pods from the project (if a password is required, use the one you use to log in to your laptop):</li></ol><pre lang="bash"><code>sudo gem install cocoapods-deintegrate cocoapods-cleanpod deintegratepod cache clean --allrm Podfile</code></pre><ol start="3"><li>Make sure to comment out the whole <em>MLTextRecognizer.swift</em> file once you are in Xcode because the import statements will cause problems if the Pods were deleted successfully. Also comment out this line in the <em>PictureReceipt.swift</em> file:</li></ol><pre lang="swift"><code>prices = try await getPricesAsArray(image: image)</code></pre><h3><a class="anchor" aria-hidden="true" id="whether-you-choose-to-remove-the-pods-or-keep-them-now-follow-the-steps-below"> </a>!! Whether you choose to remove the Pods or keep them, now follow the steps below !!</h3><ol><li><p>Launch the Xcode app and select <em>Open a project or file</em><img src="READMEPictures/Screen%20Shot%202022-06-30%20at%204.45.29%20PM.png" alt="" /></p></li><li><p>Click on the <em>GroceryHandler.xcworkspace</em> file and select <em>Open</em><img src="READMEPictures/Screen%20Shot%202022-07-18%20at%2011.24.10%20AM.png" alt="" /></p></li><li><p>Now make sure the project builds successfully by doing <kbd>command</kbd> + <kbd>B</kbd> in Xcode.</p></li><li><p>To test the app, you will have to change the environment variables in Xcode and create the collections <em>orders</em> and <em>userInfo</em>. The instructions can be found <a href="https://github.com/datastaxdevs/workshop-IOS-Swift-Astra#how-to-connect-to-your-own-database-in-the-app">here</a>.</p></li><li><p>Make sure that the app will run on the iPhone 13 Pro Simulator:<img src="READMEPictures/Screen%20Shot%202022-07-19%20at%201.36.11%20PM.png" alt="" /></p></li><li><p>Build the project and run the app by clicking the big play button at the top left of the Xcode window or by doing <kbd>command</kbd> + <kbd>R</kbd>.An iPhone Simulator window should pop up:<img src="READMEPictures/Screen%20Shot%202022-07-20%20at%2011.20.18%20AM.png" alt="" /></p></li></ol><p><a href="https://developer.apple.com/documentation/xcode/running-your-app-in-the-simulator-or-on-a-device">Click here</a> or <a href="https://www.twilio.com/blog/2018/07/how-to-test-your-ios-application-on-a-real-device.html">here</a> to run it on your personal device instead. You will need a <a href="https://www.apple.com/shop/product/MQGH2AM/A/usb-c-to-lightning-cable-2-m">cable that connects to your laptop</a>.</p><p>If you get an error when trying to sign in, create an account, delete an account, or change password, it may be because you missed step 4. Make sure to finish that step before testing the app.</p><p>That's it! You can now create accounts and post orders to your database! If you would like to populate your database with fake accounts and random orders, uncomment the DEV button in the <em>ContentView.swift</em> file by removing the <em>/</em>* and *<em>/</em> that surrounds this code:</p><pre lang="swift"><code>Button(&quot;DEV&quot;){    print(&quot;DEV&quot;)    //This is where you can test functions by running the app and clicking on this button    Task{        await populateUserInfoDB()        await populateOrdersDB(numNewOrders: 300)    }}.buttonStyle(CustomButton(color:Color(red: 0, green: 0, blue: 0.5))).padding(.all, 20)</code></pre><p>Run the app on your phone and click this button!</p><h2><a class="anchor" aria-hidden="true" id="how-to-connect-to-your-own-database-in-the-app"> </a>How to connect to your own database in the app:</h2><p>If you would like to connect to your Astra DB from this app, you will need to change these environment variables in Xcode: <code>ASTRA_DB_ID</code>, <code>ASTRA_DB_REGION</code>, <code>ASTRA_DB_TOKEN</code>, and <code>ASTRA_DB_KEYSPACENAME</code>.</p><p>The <em>ASTRA_DB_ID</em> can be found in the dashboard of the astra website:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%204.17.34%20PM.png" alt="" /></p><p>To change the values of the environment variables in Xcode, first click on <em>Edit Scheme...</em><img src="READMEPictures/Screen%20Shot%202022-07-13%20at%209.25.48%20AM.png" alt="" /></p><p>This will open the following window in which you can change the values of the environment variables:<img src="READMEPictures/Screen%20Shot%202022-07-15%20at%204.11.06%20PM.png" alt="" /></p><p>The app accesses the environment variables in the <em>GroceryHandlerApp.swift</em> file:</p><pre lang="swift"><code>//environment variables https://blog.eidinger.info/use-environment-variables-from-env-file-in-a-swift-packagepublic var ASTRA_DB_ID:String? {    ProcessInfo.processInfo.environment[&quot;ASTRA_DB_ID&quot;]}public var ASTRA_DB_REGION:String? {    ProcessInfo.processInfo.environment[&quot;ASTRA_DB_REGION&quot;]}public var ASTRA_DB_TOKEN:String? {    ProcessInfo.processInfo.environment[&quot;ASTRA_DB_TOKEN&quot;]}public var ASTRA_DB_KEYSPACENAME:String? {    ProcessInfo.processInfo.environment[&quot;ASTRA_DB_KEYSPACENAME&quot;]}</code></pre><p>Xcode sets up the environment variables, which means that the app can only be run from Xcode. Once you run it on your phone once, the icon will still be in your phone even when it isn't connected to your computer anymore. However, if you click the icon and try to log in or post orders, the app will crash because the environment variables will not be set up.</p><h4><a class="anchor" aria-hidden="true" id="now-you-should-create-your-own-collection-using-swagger-ui"> </a>Now you should create your own collection using Swagger UI:</h4><p><img src="READMEPictures/Screen%20Shot%202022-06-30%20at%204.46.48%20PM.png" alt="" /></p><p>You can access Swagger UI from the Astra website:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%204.39.36%20PM.png" alt="" /></p><p>To create an empty collection named <em>newCol</em> in <em>keyspacename1</em> for example:<img src="READMEPictures/Screen%20Shot%202022-07-13%20at%209.48.09%20AM.png" alt="" /></p><p>The collections for the sample app are named: <em>userInfo</em> and <em>orders</em>. They are both in the keyspace <em>gh_orders_userinfo</em>. If you want to customize the app by creating different collections, make sure to change using search and replace (in the <em>DBController.swift</em> file) the <em>userInfo</em> and <em>orders</em> to whatever you named them.</p><p>If you just want to test the app, you will have to create both of these collections in whatever keyspace you created.</p><p>The JSON to create the collection <em>userInfo</em> is the following:</p><pre lang="json"><code>{&quot;name&quot;:&quot;userInfo&quot;}</code></pre><p>The JSON to create the collection <em>orders</em> is the following:</p><pre lang="json"><code>{&quot;name&quot;:&quot;orders&quot;}</code></pre><h3><a class="anchor" aria-hidden="true" id="creating-your-own-model"> </a>Creating your own model</h3><p>To customize your app, you will need to come up with a model of what the data will look like in the database.Here is what the model looks like for a <em>UserInfo</em>: (this can be found in the <em>GroceryHandlerApp.swift</em> file)</p><pre lang="swift"><code>struct UserInfo : Codable {    let userName : String    let password : String}</code></pre><p>Here is what the model looks like for an order:</p><pre lang="swift"><code>struct Order : Codable {    let userName : String    let receipt : [Item]    var paid : Bool    let time : String}struct Item : Codable {    let price : Double    let users : [String]}</code></pre><p>The <em>Codable</em> makes it so that instances of these structs can be converted to JSON data objects, which is needed to post them to the database.To be explicitly clear, an <em>Order</em> is posted to the collection <em>orders</em> and a <em>UserInfo</em> is posted to the collection <em>userInfo</em>.</p><h2><a class="anchor" aria-hidden="true" id="additional-information"> </a>Additional Information</h2><h3><a class="anchor" aria-hidden="true" id="for-beginners-to-swift"> </a>For beginners to Swift:</h3><p><a href="https://developer.apple.com/tutorials/swiftui">Click here</a></p><h3><a class="anchor" aria-hidden="true" id="interested-in-using-the-ml-in-your-own-app"> </a>Interested in using the ML in your own app?</h3><p><a href="https://developers.google.com/ml-kit/vision/text-recognition/ios">Click here</a> and/or look at the <em>MLTextRecognizer.swift</em> file</p><h3><a class="anchor" aria-hidden="true" id="intro-to-document-api"> </a>Intro to Document API</h3><p>Using the Document API for Astra means that data is stored in <em>keyspaces</em>. A <em>keyspace</em> can have multiple <em>collections</em> and a <em>collection</em> stores a list of <em>JSON documents</em>.</p><p>The picture below gives a graphical view of how data is stored for this sample app. There is only one <em>keyspace</em> and two <em>collections</em>. A JSON doc can be identified by its orange color.</p><p><img src="READMEPictures/Screen%20Shot%202022-08-08%20at%202.32.24%20PM.png" alt="" /></p><p>Check out the <a href="https://docs.datastax.com/en/astra/docs/develop/dev-with-doc.html">Astra DB documentation</a> for more information.</p><h3><a class="anchor" aria-hidden="true" id="for-beginners-to-databases"> </a>For beginners to databases:</h3><p>The following will help you become comfortable with HTTP requests, URLs, and JSON.</p><p>First off, what does HTTP stand for? From <a href="https://www.codecademy.com/article/http-requests">CodeAcademy</a>:</p><pre><code>&quot;HTTP stands for Hypertext Transfer Protocol and is used to structure requests and responses over the internet.HTTP requires data to be transferred from one point to another over the network.” </code></pre><p>The HTTP request methods that we will be using in this app are GET, POST, PATCH, and DELETE.GET and DELETE are self explanatory. POST is used to persist data to the database and PATCH is used to update data that is already in the database.</p><p>To connect to Datastax astra using the Document API, a specific URL, which includes the database specific properties is needed as below:</p><pre><code>https://ASTRA_DB_ID-ASTRA_DB_REGION.apps.astra.datastax.com/api/rest/v2/namespaces/ASTRA_DB_KEYSPACENAME/collections/{collection-id}</code></pre><p>The <em>api/rest</em> in the URL is what triggers the Document API. There are other methods of access (including CQL, GraphQL, etc.)</p><p>This URL might be followed by something called a <em>Query String</em>. The URL and query string are separated by a question mark -&gt; ?</p><p>We will see an example of a query string in the examples below.</p><p>However, an HTTP request is more than just a URL. It is a URL, headers, a request method (GET, POST, DELETE, PATCH), and depending on the request method a JSON body.</p><p>We can perform HTTP requests in the terminal app using a command line tool called cURL, or client URL.</p><p>Before using cURL, run these commands in your Terminal window so that you won't have to copy these values more than once:</p><pre lang="bash"><code>export ASTRA_DB_ID=REPLACE_MEexport ASTRA_DB_REGION=REPLACE_MEexport ASTRA_DB_TOKEN=REPLACE_MEexport ASTRA_DB_KEYSPACENAME=REPLACE_ME</code></pre><p>Make sure the variables were properly exported by running this command:</p><pre lang="bash"><code>printenv | grep ASTRA_DB</code></pre><p>Or if you want to do it one variable at a time:</p><pre lang="bash"><code>echo $ASTRA_DB_REGION</code></pre><p>Now let's go through a few examples.</p><h4><a class="anchor" aria-hidden="true" id="1-how-to-get-all-orders-max-of-20-from-the-collection-em-orders-em-for-the-username-em-andy1-em"> </a>1. How to GET all orders (max of 20) from the collection <em>orders</em> for the username <em>Andy1</em>:</h4><p>Notice that the collection “orders” has to have been created in your database.</p><p>Run this command in your Terminal:</p><pre lang="bash"><code>curl -X 'GET' &quot;https://$ASTRA_DB_ID-$ASTRA_DB_REGION.apps.astra.datastax.com/api/rest/v2/namespaces/$ASTRA_DB_KEYSPACENAME/collections/orders&quot;'?where=\{&quot;userName&quot;:\{&quot;$eq&quot;:&quot;Andy1&quot;\}\}&amp;page-size=20' -H 'accept: application/json' -H &quot;X-Cassandra-Token: $ASTRA_DB_TOKEN&quot;</code></pre><p>As we can see, the HTTP method (GET), URL, query string, and headers (-H) are all there.</p><p>The query string is :</p><pre><code>where=\{&quot;userName&quot;:\{&quot;$eq&quot;:&quot;Andy1&quot;\}\}&amp;page-size=20</code></pre><p><em>where</em> and <em>page-size</em> are parameters. The <em>&amp;</em> is a query string separator to pass multiple parameters in the URL.</p><p>The <em>page-size=20</em> is to specify that we want to GET a maximum of 20 orders (page-size cannot be greater than 20).</p><p>The header <em>accept: application/json</em> is to specify that we are expecting the format of the data to be retrieved to be in JSON format. If you are not familiar with JSON, a quick online research will be enough, it is simply a way of storing information.</p><p>The header <em>X-Cassandra-Token: $ASTRA_DB_TOKEN</em> is to specify the token generated by the person who created the database for security reasons. Only people with the token will be able to interact with the database.</p><h4><a class="anchor" aria-hidden="true" id="2-how-to-get-the-user-info-for-the-username-em-andy1-em-in-the-collection-em-userinfo-em"> </a>2. How to GET the user info for the username <em>Andy1</em> in the collection <em>userInfo</em>:</h4><p>Notice that the collection <em>userInfo</em> has to have been created in your database.</p><p>Run this command in your Terminal:</p><pre lang="bash"><code>curl -X 'GET' &quot;https://$ASTRA_DB_ID-$ASTRA_DB_REGION.apps.astra.datastax.com/api/rest/v2/namespaces/$ASTRA_DB_KEYSPACENAME/collections/userInfo&quot;'?where=\{&quot;userName&quot;:\{&quot;$eq&quot;:&quot;Andy1&quot;\}\}' -H 'accept: application/json' -H &quot;X-Cassandra-Token: $ASTRA_DB_TOKEN&quot;</code></pre><p>Notice there are only 2 differences between this cURL command and the one from the first example: There is no <em>page-size</em> (since there is a max of 1 user info per person no need to specify how many docs we want to retrieve) and the collection-id is changed from <em>orders</em> to <em>userInfo</em>.</p><p>The JSON that is returned is of the following form:</p><pre lang="json"><code>{&quot;data&quot;:{&quot;ec47a067-d0a7-4f3b-8606-966aa39ce8e9&quot;:{&quot;password&quot;:&quot;itsdrewnow&quot;,&quot;userName&quot;:&quot;Andy1&quot;}}}</code></pre><h4><a class="anchor" aria-hidden="true" id="3-how-to-post-a-new-user-info-with-username-em-testusername-em-and-password-em-testpassword-em-in-the-em-userinfo-em-collection"> </a>3. How to POST a new user info with username <em>testUsername</em> and password <em>testPassword</em> in the <em>userInfo</em> collection:</h4><p>Run this command in your Terminal:</p><pre lang="bash"><code>curl -X 'POST' &quot;https://$ASTRA_DB_ID-$ASTRA_DB_REGION.apps.astra.datastax.com/api/rest/v2/namespaces/$ASTRA_DB_KEYSPACENAME/collections/userInfo&quot; -H 'accept: application/json' -H &quot;X-Cassandra-Token: $ASTRA_DB_TOKEN&quot; -H 'Content-Type: application/json' --data '    {        &quot;userName&quot;:&quot;testUsername&quot;,        &quot;password&quot;:&quot;testPassword&quot;    }'</code></pre><p>The main difference between this command and the ones in the other examples is the HTTP method, which is POST.</p><p>There is also an additional header <em>Content-Type: application/json</em> which is to specify that the data to be persisted to the database is in JSON format.</p><p>The data itself is passed after the <em>--data</em></p><p>This cURL command can be used to POST an order as well. All that has to be changed is the collection-id from <em>userInfo</em> to <em>orders</em> as well as the data itself.</p><p>By now you should be able to perform HTTP requests and interact with your Astra Database from the command line. Doing this from a Swift app is very similar so understanding the cURL commands is going to be extremely helpful.</p><p>The structs/classes needed to perform HTTP requests from a Swift app are JSONEncoder, URLRequest, and URLSession.</p><p>The <a href="https://developer.apple.com/documentation/foundation/jsonencoder">JSONEncoder</a> class makes it easy to convert a struct into a JSON type which can then be posted to a collection of the Astra DB. The <a href="https://developer.apple.com/documentation/foundation/urlrequest">URLRequest</a> struct encompasses the information regarding the HTTP request. This entails the URL, the HTTP method, and the HTTP headers. The <a href="https://developer.apple.com/documentation/foundation/urlsession">URLSession</a> class handles actually performing the request to the server.</p><p>Check out the <a href="https://docs.datastax.com/en/astra/docs/develop/dev-with-doc.html">Astra DB documentation</a> for more information and lots more examples of using cURL to connect to your database using the Document API.</p><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2><p>Congratulations, you made it to the end!</p><p>See you next time!</p><blockquote><p>DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-IOS-Swift-Astra
Getting astra.json for datastaxdevs/workshop-streaming-graph-quine at 277
No astra.json for datastaxdevs/workshop-streaming-graph-quine at 281
No astrajson for Quine and Astra DBIn progress 10/19
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="graph-streaming-with-astra-and-quine"> </a>🎓 Graph Streaming with Astra and Quine</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="token"> </a>Token</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-quine"> </a>Setup Quine</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="setup-astra-shell-in-gitpod"> </a>Setup Astra Shell in GitPod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="download-quine-local"> </a>Download Quine - Local</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-quine-local"> </a>Configure Quine - Local</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="astra-specific-settings"> </a>Astra-Specific Settings:</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="download-the-recipe-and-sample-data-local"> </a>Download the recipe and sample data - Local</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="starting-quine-local"> </a>Starting Quine - Local</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="troubleshooting"> </a>Troubleshooting</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="incorrect-database-name"> </a>Incorrect database name</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="snapshots-table-fails-to-create"> </a>Snapshots table fails to CREATE</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="clearing-quine-data"> </a>Clearing Quine Data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="extra-double-quote-on-standing-2-link"> </a>Extra Double Quote on STANDING-2 Link</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="quine-graph-explorer"> </a>Quine Graph Explorer</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="graph-exploration"> </a>Graph Exploration</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="stopping-quine"> </a>Stopping Quine</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-streaming-graph-quine<h1><a class="anchor" aria-hidden="true" id="graph-streaming-with-astra-and-quine"> </a>🎓 Graph Streaming with Astra and Quine</h1><p>Welcome to the real-time graph ETL for modern data pipelines with <strong>Quine and Apache Cassandra</strong> workshop! In this two-hour workshop, we show how to combine a scalable database, <code>Apache Cassandra™</code>, with a powerful real-time streaming graph processor, <code>Quine</code>.</p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level :</strong> Intermediate</p><p><img src="data/img/splash.png" alt="" /></p><p>Using <strong>Astra DB</strong>, the cloud-based <em>Cassandra-as-a-Service</em> platform delivered by DataStax, we will cover the very first steps for every developer who wants to try to learn a new database: creating tables and CRUD operations.</p><p>Quine, from the team at thatDot, is a real-time streaming graph interpreter. A server-side program that consumes data, builds a graph structure, and runs live computation on that graph to answer questions or compute results, and then stream them out.</p><p>It doesn't matter if you join our workshop live or you prefer to do it at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#objectives">Objectives</a></li><li><a href="#frequently-asked-questions">Frequently asked questions</a></li><li><a href="#materials-for-the-session">Materials for the Session</a></li><li><a href="#create-your-astra-db-instance">Create your Database</a></li><li><a href="#setup-quine">Setup Quine</a></li><li><a href="#graph-exploration">Graph Exploration</a></li><li><a href="#homework">Homework</a></li><li><a href="#whats-next-">What's NEXT</a></li></ol><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>1️⃣ <strong>Give you an understanding of Quine streaming graph</strong></p><p>2️⃣ <strong>Show how to configure Quine to use Cassandra or Astra DB</strong></p><p>3️⃣ <strong>Provide an overview of Quine's Architecture</strong></p><p>4️⃣ <strong>Have you run a streaming scenario to detect an anomaly in the graph</strong></p><p>🚀 <strong>Have fun with an interactive session!</strong></p><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following installed on your local system:<ol><li><b>git</b><li><b>Java 11</b></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what Java is.  If you don't know what a streaming graph is, or haven't used a graph system before, that's ok...we'll cover that.</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate or badge if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on LinkedIn or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging the <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">database creation guide</a>, create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/2-16"><img src="data/img/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>quine</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then Moncks Corner (us-east1) OR an Area close to you, then a region with no LOCK 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>quine</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong>:save it somewhere safe, as it will be needed later in other workshops (In particular the string starting with <code>AstraCS:...</code>.)</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><h4><a class="anchor" aria-hidden="true" id="token"> </a>Token</h4><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a tokenbut will have to destroy to token immediately for security reasons.</code></pre></blockquote><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="setup-quine"> </a>Setup Quine</h2><p>These instructions were written using Java 11.10.  To run Quine locally, follow the steps below.  Or, you can run it in GitPod:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-streaming-graph-quine"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h3><a class="anchor" aria-hidden="true" id="setup-astra-shell-in-gitpod"> </a>Setup Astra Shell in GitPod</h3><p>The Astra Shell tool will be included in the GitPod build.  Once the environment has completed its initial build, you should see the following at the bottom of the terminal:</p><pre lang="bash"><code>Open A NEW TERMINAL and run: astra setup</code></pre><p>Open a new terminal by clicking the plus ( + ) icon on the upper-right corner of the current terminal window.  Then run:</p><pre lang="bash"><code>astra setup</code></pre><p>You will be prompted to enter (paste) your token.</p><pre lang="bash"><code>• Enter your token (starting with AstraCS) :</code></pre><p>Once you it <kbd>enter</kbd>, you should see output similar to below:</p><pre><code>[rags@acm.org]&gt; ASTRA_DB_APPLICATION_TOKEN=AstraCS:AAAAAAAA&gt;&gt; [What's NEXT ?]&gt; You are all set.(configuration is stored in ~/.astrarc) You can now:&gt;    • Use any command, 'astra help' will get you the list&gt;    • Try with 'astra db list'&gt;    • Enter interactive mode using 'astra'&gt;&gt; Happy Coding!</code></pre><p>Verify the setup with the following command which should list all the databases:</p><pre><code>astra db list</code></pre><p>Open a new terminal window and run Quine by executing:</p><pre lang="bash"><code>./start.sh</code></pre><h3><a class="anchor" aria-hidden="true" id="download-quine-local"> </a>Download Quine - Local</h3><p>Follow the <a href="https://quine.io/download">Download Quine page</a> to download the JAR. Choose/create a directory for Quine, and copy the JAR to another location:</p><pre lang="bash"><code>mkdir -p ~/local/quinecp quine-1.3.2.jar ~/local/quine/</code></pre><h3><a class="anchor" aria-hidden="true" id="configure-quine-local"> </a>Configure Quine - Local</h3><p>Create a <code>quine.conf</code> file inside the quine directory:</p><pre lang="bash"><code>cd ~/local/quinetouch quine.conf</code></pre><p>Edit the <code>quine.conf</code> file:</p><pre><code>quine.store {  # store data in an Apache Cassandra instance  type = cassandra  # the keyspace to use  keyspace = quine  should-create-keyspace = false  should-create-tables = true  replication-factor = 3  write-consistency = LOCAL_QUORUM  read-consistency = LOCAL_QUORUM  local-datacenter = ${ASTRA_DB_REGION}  write-timeout = &quot;10s&quot;  read-timeout = &quot;10s&quot;}datastax-java-driver {  advanced {    auth-provider {      class = PlainTextAuthProvider      username = &quot;token&quot;      password = ${ASTRA_DB_APP_TOKEN}&quot;    }  }  basic {    cloud {      secure-connect-bundle = &quot;/workspace/workshop-streaming-graph-quine/secure-connect-workshops.zip&quot;    }  }}</code></pre><h4><a class="anchor" aria-hidden="true" id="astra-specific-settings"> </a>Astra-Specific Settings:</h4><p><code>type = cassandra</code> - If the type is not specified, Quine defaults to use RocksDB.</p><p><code>should-create-keyspace = false</code> - Remember keyspaces can only be created in Astra via the dashboard.</p><p><code>replication-factor = 3</code> - Defaults to 1 if not set, which will not work with Astra DB.</p><p><code>write-consistency = LOCAL_QUORUM</code> - Minimum consistency level required by Astra.</p><p><code>read-consistency = LOCAL_QUORUM</code> - Minimum consistency level required by Astra.</p><p><code>local-datacenter = &quot;us-east1&quot;</code> - Set your Astra DB cloud region as the local DC.</p><p><code>username = &quot;token&quot;</code> - No need to mess with this. Just leave it as the literal word &quot;token.&quot;</p><p><code>password</code> - A valid token for an Astra DB cluster.</p><p><code>secure-connect-bundle</code> - A valid, local file location of a downloaded Astra secure connect bundle. The driver gets the Astra DB hostname from the secure bundle, so there is no need to specify endpoints separately.</p><h3><a class="anchor" aria-hidden="true" id="download-the-recipe-and-sample-data-local"> </a>Download the recipe and sample data - Local</h3><p>Download the &quot;Password Spraying&quot; <a href="https://raw.githubusercontent.com/datastaxdevs/workshop-streaming-graph-quine/main/password-spraying-workshop.yml">recipe</a> from Github. Move the resulting YAML file to your <code>quine</code> directory.</p><pre lang="bash"><code>mkdir ~/local/quinecp password-spraying-workshop.yml ~/local/quine/</code></pre><p>Then, download the <a href="https://that.re/attempts">sample data file</a>&quot; and move the JSON file to your <code>quine</code> directory.</p><pre lang="bash"><code>mkdir ~/local/quinecp attempts.json ~/local/quine/</code></pre><p>Alternatively, if you have cloned this repository and are working in the repo directory locally, you can run the <code>get_quine.sh</code> script. If successful, the script will download the latest version of Quine and the sample data for this workshop, and the script will output something similar to what you see below.</p><pre lang="shell"><code>❯ ./get_quine.shHTTP request sent, awaiting response... 200 OKLength: 220704180 (210M) [application/octet-stream]Saving to: ‘quine-1.3.2.jar’quine-1.3.2.jar        100%[=========================================================&gt;] 210.48M  20.5MB/s    in 22s     2022-10-06 11:13:39 (9.78 MB/s) - ‘quine-1.3.2.jar’ saved [220704180/220704180]HTTP request sent, awaiting response... 200 OKLength: 82243423 (78M) [application/json]Saving to: ‘attempts.json’attempts.json          100%[=========================================================&gt;]  78.43M  15.4MB/s    in 5.0s    2022-10-06 11:13:49 (15.8 MB/s) - ‘attempts.json’ saved [82243423/82243423]</code></pre><h3><a class="anchor" aria-hidden="true" id="starting-quine-local"> </a>Starting Quine - Local</h3><p>To run Quine using the Password Spray recipe, invoke the JAR with Java, while passing the <code>quine.conf</code> as a <code>config.file</code> JVM parameter, while also specifying the recipe, like this:</p><pre lang="bash"><code>cd ~/local/quinejava -Dconfig.file=quine.conf -jar quine-1.3.2.jar -r password-spraying-workshop.yml --force-config</code></pre><h3><a class="anchor" aria-hidden="true" id="troubleshooting"> </a>Troubleshooting</h3><p>If Quine starts correctly, it should produce output similar to below:</p><pre lang="bash"><code>2022-06-15 15:11:52,666 WARN [NotFromActor] [s0-io-4] com.datastax.oss.driver.internal.core.cql.CqlRequestHandler - Query '[0 values] CREATE TABLE IF NOT EXISTS journals (quine_id blob,timestamp bigint,data blob,PRIMARY KEY(quine_id,timestamp)) WITH CLUSTERING ORDER BY (timestamp ASC) AND compaction={'class':'TimeWindowCompactionStrategy'}' generated server side warning(s): Ignoring provided values [compaction] as they are not supported for Table Properties (ignored values are: [additional_write_policy, bloom_filter_fp_chance, caching, cdc, compaction, compression, crc_check_chance, dclocal_read_repair_chance, extensions, gc_grace_seconds, id, max_index_interval, memtable_flush_period_in_ms, min_index_interval, nodesync, read_repair, read_repair_chance, speculative_retry])Graph is ready!Application state loaded.Quine app web server available at http://0.0.0.0:8080</code></pre><p>Quine should then start ingesting the data stream automatically, displaying its progress as it moves along.</p><p>If the output does not read:</p><pre><code>Graph is ready!Application state loaded.Quine app web server available at http://locahost:8080</code></pre><p>Then look for exceptions.</p><h4><a class="anchor" aria-hidden="true" id="incorrect-database-name"> </a>Incorrect database name</h4><p>If you see this error:</p><pre lang="bash"><code>Downloading Astra secure connect bundle...Picked up JAVA_TOOL_OPTIONS:  -Xmx3489m[WARN ] - Database workshops has not been found[WARN ] - Database 'workshops' has not been found.[ERROR] - NOT_FOUND: Database 'workshops' has not been found.Download of SCB failed!</code></pre><p>...this means that your token is not associated with a database named 'workshops'.  Edit the <code>.env</code> file with the following GitPod command:</p><pre lang="bash"><code>gp open .env</code></pre><p>Enter the correct name for your database, and rerun <code>start.sh</code>.</p><h4><a class="anchor" aria-hidden="true" id="snapshots-table-fails-to-create"> </a>Snapshots table fails to CREATE</h4><p>If you see an error:</p><pre><code>com.datastax.oss.driver.api.core.servererrors.InvalidQueryException: Clustering key columns must exactly match columns in CLUSTERING ORDER BY directive</code></pre><p>...this means that one of tables (likely the <code>snapshots</code> table) failed to CREATE properly.  From GitPod, you can fix this by using the Astra Shell.  If your DB name is different from &quot;workshops,&quot; replace it as appropriate.</p><pre lang="bash"><code>astra db cqlsh workshops</code></pre><p>Check to ensure the <code>snapshots</code> table exists:</p><pre><code>cqlsh&gt; use quine;cqlsh&gt; desc quine;</code></pre><p>If not, execute this CQL in Astra Shell (or cqlsh if you're running locally) to create it:</p><pre><code>CREATE TABLE quine.snapshots (    quine_id blob,    timestamp bigint,    multipart_index int,    data blob,    multipart_count int,    PRIMARY KEY (quine_id, timestamp, multipart_index)) WITH CLUSTERING ORDER BY (timestamp DESC, multipart_index ASC)    AND additional_write_policy = '99PERCENTILE'    AND bloom_filter_fp_chance = 0.01    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}    AND comment = ''    AND compaction = {'class': 'org.apache.cassandra.db.compaction.UnifiedCompactionStrategy'}    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}    AND crc_check_chance = 1.0    AND default_time_to_live = 0    AND gc_grace_seconds = 864000    AND max_index_interval = 2048    AND memtable_flush_period_in_ms = 0    AND min_index_interval = 128    AND read_repair = 'BLOCKING'    AND speculative_retry = '99PERCENTILE';</code></pre><h4><a class="anchor" aria-hidden="true" id="clearing-quine-data"> </a>Clearing Quine Data</h4><p>If Quine starts, but you see a message which looks like this:</p><pre lang="bash"><code>Standing Query STANDING-1 already existsStanding Query STANDING-2 already existsIngest Stream INGEST-1 already exists</code></pre><p>...that means that you'll need to clear the existing data before proceeding.  You can do this by running the <code>truncate_tables.sh</code> script from within GitPod.</p><h4><a class="anchor" aria-hidden="true" id="extra-double-quote-on-standing-2-link"> </a>Extra Double Quote on STANDING-2 Link</h4><p>Once you seen the message indicating that an anomaly has been found, you should be able to <kbd>Ctrl</kbd>+click or <kbd>Command</kbd> click to open the Quine Graph Explorer with a query for that pattern match.  However, sometimes the new tab will open and the page load will fail due to an extra double-quote on the end of the query.  Simply click on the query text well, and press <kbd>End</kbd> to go to the end of the line.  If you see a double quote there, <kbd>backspace</kbd> over it.</p><h3><a class="anchor" aria-hidden="true" id="quine-graph-explorer"> </a>Quine Graph Explorer</h3><p>You can now use Quine's visual graph explorer in a web browser, and create/traverse data with either Gremlin or Cypher: <a href="http://localhost:8080/">http://localhost:8080/</a></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="graph-exploration"> </a>Graph Exploration</h2><p>The <code>attempts.json</code> contains the pattern for one password spraying attack. Quine will produce an alert in the console when the standing query matches the pattern. The alert will look similar to this:</p><pre lang="shell"><code>2022-10-07 09:37:46,255 Standing query `alert` match: {&quot;meta&quot;:{&quot;isPositiveMatch&quot;:true,&quot;resultId&quot;:&quot;7242b979-03c2-2bc3-9879-13661e8359b5&quot;},&quot;data&quot;:{&quot;QuineUILink&quot;:&quot;Password Spraying Attack: http://localhost:8080/#MATCH%20(user)-[:ORIGINATED]-%3E(attempt1%20%7BoutcomeResult:%22FAILURE%22%7D)-[:NEXT]-%3E(attempt2%20%7BoutcomeResult:%22FAILURE%22%7D)-[:NEXT]-%3E(attempt3%20%7BoutcomeResult:%22FAILURE%22%7D)-[:NEXT]-%3E(attempt4%20%7BoutcomeResult:%22FAILURE%22%7D)-[:NEXT]-%3E(attempt5%20%7BoutcomeResult:%22SUCCESS%22%7D)%20WHERE%20id(attempt1)=%22cb73fb14-4686-3913-8cd8-7d4d608b53d5%22%20RETURN%20DISTINCT%20user%2Cattempt1%2Cattempt2%2Cattempt3%2Cattempt4%2Cattempt5&quot;}}</code></pre><p>When the alert arrives, hold down the command key on a MAC and right-click the link to open Quine.</p><p>You should be able to arrange the graph in your browser into a shape similar to this:</p><p><img src="data/img/quine-exploration-ui.png" alt="quine exploration ui" /></p><p>Explore the graph using the <a href="https://docs.quine.io/getting-started/exploration-ui.html">Exploration UI</a> to follow the path of the attack in the event stream.</p><h2><a class="anchor" aria-hidden="true" id="stopping-quine"> </a>Stopping Quine</h2><p>To stop Quine, you can simply hit <kbd>Ctrl</kbd>+<kbd>c</kbd>.  Or, you can run the <code>stop.sh</code> file from a terminal (locally or from within GitPod).</p><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><p>To submit the <strong>homework</strong>,</p><ul><li>Write a new recipe or extend an existing one and take SCREENSHOT(s).<ul><li>Visit the Quine <a href="https://docs.quine.io/docs.html">documentation</a> site</li><li>Go through the Getting Started -&gt; <a href="https://docs.quine.io/getting-started/recipes-tutorial.html">Quine Recipes</a> tutorial</li><li>Create a new recipe from scratch, or...</li><li>Modify an <a href="https://quine.io/recipes">existing recipe</a> to do something new</li><li>Email the SCREENSHOT(s) of Quine running your recipe in the browser and the recipe YAML file</li></ul></li></ul><p>EMAIL:</p><pre lang="text"><code>To: aaron.ploetz@datastax.com, michael@thatdot.comSubject: Quine Homework</code></pre><h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Cassandra.Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-streaming-graph-quine
Getting astra.json for datastaxdevs/workshop-spring-quarkus-micronaut-cassandra at 277
No astra.json for datastaxdevs/workshop-spring-quarkus-micronaut-cassandra at 281
No astrajson for Quarkus Spring and Micronaut
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="spring-quarkus-and-micronaut-with-apache-cassandra"> </a>🎓 Spring, Quarkus and Micronaut with Apache Cassandra</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-create-your-a-href-https-astra-dev-yt-10-5-astra-account-a"> </a><code>✅.setup-01</code>- Create your <a href="https://astra.dev/yt-10-5">Astra Account</a></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-code-database-asministrator-code-token"> </a><code>✅.setup-02</code>- Create <code>Database Asministrator</code> Token.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-open-gitpod"> </a><code>✅.setup-03</code>- Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-create-database-code-workshops-code-and-keyspace-code-ks-java-code-if-they-do-not-exist"> </a><code>✅.setup-05</code>- Create database <code>workshops</code> and keyspace <code>ks_java</code> if they do not exist:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-register-token-as-env-variable"> </a><code>✅.setup-06</code>- Register token as env variable</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-download-secure-bundle"> </a><code>✅.setup-07</code>- Download Secure bundle</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="lab-1-understanding-java-drivers"> </a>LAB 1 - Understanding Java Drivers</h1>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-a-code-connectivity"> </a><code>✅.1.a</code>- Connectivity</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-b-code-create-schema"> </a><code>✅.1.b</code>- Create Schema</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-c-code-about-statements"> </a><code>✅.1.c</code>- About Statements</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-d-code-crud"> </a><code>✅.1.d</code>- CRUD</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-e-code-batches"> </a><code>✅.1.e</code>- Batches</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-f-code-paging"> </a><code>✅.1.f</code>- Paging</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-g-code-collections-list-set-map-udt"> </a><code>✅.1.g</code>- Collections: List,Set,Map,Udt</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-h-code-working-with-json"> </a><code>✅.1.h</code>- Working with Json</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-i-code-asynchronous-programming"> </a><code>✅.1.i</code>- Asynchronous Programming</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-j-code-reactive-programming"> </a><code>✅.1.j</code>- Reactive Programming</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-k-code-counters"> </a><code>✅.1.k</code>- Counters</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-l-code-lightweight-transactions"> </a><code>✅.1.l</code>- LightWeight Transactions</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-m-code-object-mapping"> </a><code>✅.1.m</code>- Object Mapping</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="lab-2-spring-data-cassandra"> </a>LAB 2 - Spring Data Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-1-configuration"> </a>2.1 - Configuration</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-create-keyspace-code-ks-spring-code"> </a><code>✅.2.1.a</code>- Create keyspace <code>ks_spring</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-list-keyspaces"> </a><code>✅.2.1.b</code>- list Keyspaces</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-check-project-configuration"> </a><code>✅.2.1.c</code>- Check Project configuration</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-test-connectivity"> </a><code>✅.2.1.d</code>- Test connectivity</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-2-crud-repositories"> </a>2.2 - Crud Repositories</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-test-repositories"> </a><code>✅.2.2.a</code>- Test Repositories</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-get-results-from-cqlsh"> </a><code>✅.2.2.b</code>- Get results from cqlsh</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-3-cassandraoperations"> </a>2.3 - CassandraOperations</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-3-a-code-use-the-simplecassandrarepository"> </a><code>✅.2.3.a</code>- Use the SimpleCassandraRepository</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-4-spring-boot"> </a>2.4 - Spring Boot</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-4-a-code-start-application"> </a><code>✅.2.4.a</code>- Start application</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-4-b-code-access-application-apis"> </a><code>✅.2.4.b</code>- Access Application Apis</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-4-c-code-integration-tests"> </a><code>✅.2.4.c</code>- Integration Tests</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-5-spring-native"> </a>2.5 Spring native</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="lab-3-cassandra-quarkus-extension"> </a>LAB 3 - Cassandra Quarkus Extension</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-1-configuration"> </a>3.1 - Configuration</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-1-a-code-create-keyspace-code-ks-quarkus-code"> </a><code>✅.3.1.a</code>- Create keyspace <code>ks_quarkus</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-1-b-code-list-keyspaces"> </a><code>✅.3.1.b</code>- list Keyspaces</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-1-c-code-compile-project"> </a><code>✅.3.1.c</code>- Compile project</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-1-d-code-check-configuration"> </a><code>✅.3.1.d</code>- Check Configuration</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-2-usage"> </a>3.2 - Usage</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-validate-configuration"> </a><code>✅.3.2.a</code>- Validate configuration</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-use-code-cqlsession-code-with-code-quarkus-code"> </a><code>✅.3.2.b</code>- Use <code>CqlSession</code> with <code>Quarkus</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-3-object-mapping"> </a>3.3 - Object Mapping</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-object-mapping-configuration"> </a><code>✅.3.3.a</code>- Object Mapping configuration</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-object-mapping-test"> </a><code>✅.3.3.b</code>- Object Mapping test</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-4-rest-api-application"> </a>3.4 - Rest Api Application</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-start-the-application-with-code-dev-code-plugin"> </a><code>✅.3.4.a</code>- Start the application with <code>dev</code> plugin</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-b-code-access-swagger-ui"> </a><code>✅.3.4.b</code>- Access Swagger-UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-c-code-access-apis"> </a><code>✅.3.4.c</code>- Access APIs</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-d-code-integration-test"> </a><code>✅.3.4.d</code>- Integration Test</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-e-code-native-image"> </a><code>✅.3.4.e</code>- Native Image</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="lab-4-micronaut-cassandra"> </a>LAB 4 - Micronaut Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-1-configuration"> </a>4.1 - Configuration</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-create-keyspace-code-ks-micronaut-code"> </a><code>✅.4.1.a</code>- Create keyspace <code>ks_micronaut</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-keyspaces"> </a><code>✅.4.1.b</code>- list Keyspaces</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-c-code-compile-project"> </a><code>✅.4.1.c</code>- Compile project</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-d-code-testing-project"> </a><code>✅.4.1.d</code>- Testing project</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-e-code-use-cqlsession"> </a><code>✅.4.1.e</code>- Use CqlSession</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-2-configuration"> </a>4.2 - Configuration</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-a-code-object-mapping"> </a><code>✅.4.2.a</code>- Object Mapping</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-integration-tests"> </a><code>✅.4.2.b</code>- Integration Tests</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-3-micronaut-application"> </a>4.3 - Micronaut Application</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-3-a-code-start-the-application"> </a><code>✅.4.3.a</code>- Start the application</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-3-b-code-show-the-apis"> </a><code>✅.4.3.b</code>- Show the Apis</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-4-native-image"> </a>4.4 - Native Image</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-build-native-image"> </a><code>✅.4.4.a</code>- Build native image</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homeworks"> </a>Homeworks</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-spring-quarkus-micronaut-cassandra<h2><a class="anchor" aria-hidden="true" id="spring-quarkus-and-micronaut-with-apache-cassandra"> </a>🎓 Spring, Quarkus and Micronaut with Apache Cassandra</h2><img src="img/badge.png?raw=true" width="150" align="right" ><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Welcome to the <em>Explore SpringBoot, Quarkus and Micronaut microservices with NoSQL Apache Cassandra</em>* workshop! In this two-hour workshop, we will show you a sample app architecture with data backed up on Apache Cassandra™ and program logic implemented on each of the three leading implementations of Java platform.</p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level</strong> Beginner to Intermediate</p><p><img src="img/splash.png" alt="" /></p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ul><li><a href="#objectives">Objectives</a></li><li><a href="#frequently-asked-questions">Frequently asked questions</a></li><li><a href="#materials-for-the-session">Materials for the Session</a></li><li><a href="#setup">Setup your environment (DB, IDE)</a></li><li><a href="#lab-1---understanding-java-drivers">LAB1 - Understanding java drivers</a></li><li><a href="#lab-2---spring-data-cassandra">LAB2 - Spring Boot and Spring Data Cassandra</a></li><li><a href="#lab-3---cassandra-quarkus-extension">LAB3 - Quarkus</a></li><li><a href="#lab-4---micronaut-cassandra">LAB4 - Micronaut</a></li><li><a href="#Homework">Homework</a></li></ul><p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li><p>🎯 Creating a ToDo app on multiple Java platforms (Spring Boot, Quarkus, Micronaut)</p></li><li><p>🎯 Data drivers for the app to connect to Astra</p></li><li><p>🎯 Java Native and the respective platforms</p></li><li><p>🎯 [Stretch] Building a native app on each of the platforms</p></li><li><p>🚀 Have fun with an interactive session</p></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b><li><b>Astra Cli</b><li>Java, Graal VM</b></ol></p>In this README, we provide instructions mainly for Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info. you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what Java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h2><h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-create-your-a-href-https-astra-dev-yt-10-5-astra-account-a"> </a><code>✅.setup-01</code>- Create your <a href="https://astra.dev/yt-10-5">Astra Account</a></h4><blockquote><p><em>ℹ️ Documentation:<a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a></em></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-code-database-asministrator-code-token"> </a><code>✅.setup-02</code>- Create <code>Database Asministrator</code> Token.</h4><blockquote><p><em>ℹ️ Documentation: <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Token creation guide</a></em>.</p></blockquote><pre><code>Skip this step is you already have a token. You can reuse the same token in our other workshops, too. Your token should look like: `AstraCS:....`</code></pre><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Role</strong></td><td><code>Database Administrator</code></td></tr></tbody></table><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p><img src="https://awesome-astra.github.io/docs/img/astra/astra-create-token.gif" alt="token" /></p><h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-open-gitpod"> </a><code>✅.setup-03</code>- Open Gitpod</h4><p>Gitpod is an IDE based on VSCode deployed in the cloud.</p><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p></blockquote><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-spring-quarkus-micronaut-cassandra"><img src="https://dabuttonfactory.com/button.png?t=Open+Gitpod&f=Open+Sans-Bold&ts=16&tc=fff&hp=20&vp=10&c=11&bgt=unicolored&bgc=0b5394" /></a></p><h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4><p>Go back to your gitpod terminal waiting for your token. Make sure you select the <code>database</code> shell in the bottom-right panel and provide the value where it is asked.</p><blockquote><p>🖥️ <code>setup-04 output</code></p><pre><code>[cedrick.lunven@gmail.com]ASTRA_DB_APPLICATION_TOKEN=AstraCS:AAAAAAAA[What's NEXT ?]You are all set.(configuration is stored in ~/.astrarc) You can now:   • Use any command, 'astra help' will get you the list   • Try with 'astra db list'   • Enter interactive mode using 'astra'Happy Coding !</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-create-database-code-workshops-code-and-keyspace-code-ks-java-code-if-they-do-not-exist"> </a><code>✅.setup-05</code>- Create database <code>workshops</code> and keyspace <code>ks_java</code> if they do not exist:</h4><pre lang="bash"><code>astra db create workshops -k ks_java --if-not-exist --wait</code></pre><p>Let's analyze the command:</p><table><thead><tr><th>Chunk</th><th>Description</th></tr></thead><tbody><tr><td><code>db create</code></td><td>Operation executed <code>create</code> in group <code>db</code></td></tr><tr><td><code>workshops</code></td><td>Name of the database, our argument</td></tr><tr><td><code>-k ks_java</code></td><td>Name of the keyspace, a db can contains multiple keyspaces</td></tr><tr><td><code>--if-not-exist</code></td><td>Flag for itempotency creating only what if needed</td></tr><tr><td><code>--wait</code></td><td>Make the command blocking until all expected operations are executed (timeout is 180s)</td></tr></tbody></table><blockquote><p><strong>Note</strong>: If the database already exist but has not been used for while the status will be <code>HIBERNATED</code>. The previous command will resume the db an create the new keyspace but it can take about a minute to execute.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-register-token-as-env-variable"> </a><code>✅.setup-06</code>- Register token as env variable</h4><pre><code>export ASTRA_DB_APP_TOKEN=`astra config get default --key ASTRA_DB_APPLICATION_TOKEN`echo ${ASTRA_DB_APP_TOKEN}</code></pre><h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-download-secure-bundle"> </a><code>✅.setup-07</code>- Download Secure bundle</h4><ul><li>Download credentials in home folder</li></ul><pre><code>astra db download-scb workshops -f /workspace/workshop-spring-quarkus-micronaut-cassandra/secure-bundle-workshops.zip</code></pre><ul><li>Check that the file is about <code>12k</code></li></ul><pre><code>ls -l /workspace/workshop-spring-quarkus-micronaut-cassandra/</code></pre><p><em>Congratulations your environment is all set, let's start the labs !</em></p><h1><a class="anchor" aria-hidden="true" id="lab-1-understanding-java-drivers"> </a>LAB 1 - Understanding Java Drivers</h1><h4><a class="anchor" aria-hidden="true" id="code-1-a-code-connectivity"> </a><code>✅.1.a</code>- Connectivity</h4><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E00_TestConnectivity.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E00_TestConnectivity</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-b-code-create-schema"> </a><code>✅.1.b</code>- Create Schema</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E01_CreateSchema.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E01_CreateSchema</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-c-code-about-statements"> </a><code>✅.1.c</code>- About Statements</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E02_Statements.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E02_Statements</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-d-code-crud"> </a><code>✅.1.d</code>- CRUD</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E03_OperationsCrudStatements.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E03_OperationsCrud</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-e-code-batches"> </a><code>✅.1.e</code>- Batches</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E04_Batches.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E04_Batches</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-f-code-paging"> </a><code>✅.1.f</code>- Paging</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E05_Paging.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E05_Paging</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-g-code-collections-list-set-map-udt"> </a><code>✅.1.g</code>- Collections: List,Set,Map,Udt</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E06_ListSetMapAndUdt.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E06_ListSetMapAndUdt</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-h-code-working-with-json"> </a><code>✅.1.h</code>- Working with Json</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E07_Json.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E07_Json</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-i-code-asynchronous-programming"> </a><code>✅.1.i</code>- Asynchronous Programming</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E08_Async.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E08_Async</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-j-code-reactive-programming"> </a><code>✅.1.j</code>- Reactive Programming</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E09_Reactive.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E09_Reactive</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-k-code-counters"> </a><code>✅.1.k</code>- Counters</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E10_Counters.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E10_Counters</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-l-code-lightweight-transactions"> </a><code>✅.1.l</code>- LightWeight Transactions</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E11_LightweightTransactions.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E11_LightweightTransactions</code></pre><h4><a class="anchor" aria-hidden="true" id="code-1-m-code-object-mapping"> </a><code>✅.1.m</code>- Object Mapping</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_driversgp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab1_cassandra_drivers/src/main/java/com/datastax/samples/E12_ObjectMapping.javamvn clean compile exec:java -Dexec.mainClass=com.datastax.samples.E12_ObjectMapping</code></pre><h1><a class="anchor" aria-hidden="true" id="lab-2-spring-data-cassandra"> </a>LAB 2 - Spring Data Cassandra</h1><h2><a class="anchor" aria-hidden="true" id="2-1-configuration"> </a>2.1 - Configuration</h2><h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-create-keyspace-code-ks-spring-code"> </a><code>✅.2.1.a</code>- Create keyspace <code>ks_spring</code></h4><pre lang="bash"><code>astra db create-keyspace workshops -k ks_spring</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-list-keyspaces"> </a><code>✅.2.1.b</code>- list Keyspaces</h4><pre lang="bash"><code>astra db list-keyspaces workshops</code></pre><blockquote><p>🖥️ <code>output</code></p><pre><code>+---------------------+| Name                |+---------------------+| ks_spring           || ks_java (default)   |+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-check-project-configuration"> </a><code>✅.2.1.c</code>- Check Project configuration</h4><pre lang="bash"><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_data/pom.xml</code></pre><ul><li>Spot the following dependency</li></ul><pre lang="xml"><code>&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;	&lt;artifactId&gt;spring-boot-starter-data-cassandra&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><pre lang="bash"><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_data/src/main/resources/application.yml</code></pre><ul><li>Spot the following configuration</li></ul><pre lang="yaml"><code>vspring:  data:    cassandra:      keyspace-name: ks_spring      username: token      password: ${ASTRA_DB_APP_TOKEN}datastax:  astra:    secure-connect-bundle: /workspace/workshop-spring-quarkus-micronaut-cassandra/secure-bundle-workshops.zip</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-test-connectivity"> </a><code>✅.2.1.d</code>- Test connectivity</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_datagp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_data/src/test/java/com/datastax/workshop/E01_SpringDataInit.javamvn test -Dtest=com.datastax.workshop.E01_SpringDataInit</code></pre><h2><a class="anchor" aria-hidden="true" id="2-2-crud-repositories"> </a>2.2 - Crud Repositories</h2><ul><li>Given a table</li></ul><pre lang="sql"><code>CREATE TABLE todos (    uid uuid PRIMARY KEY,    completed boolean,    offset int,    title text)</code></pre><ul><li>Create an entity and anotate it</li></ul><blockquote><pre lang="java"><code>@Table(value = TodoEntity.TABLENAME)public class TodoEntity { public static final String TABLENAME        = &quot;todos&quot;; public static final String COLUMN_UID       = &quot;uid&quot;; public static final String COLUMN_TITLE     = &quot;title&quot;; public static final String COLUMN_COMPLETED = &quot;completed&quot;; public static final String COLUMN_ORDER     = &quot;offset&quot;; @PrimaryKey @Column(COLUMN_UID) @CassandraType(type = Name.UUID) private UUID uid; @Column(COLUMN_TITLE) @CassandraType(type = Name.TEXT) private String title; @Column(COLUMN_COMPLETED) @CassandraType(type = Name.BOOLEAN) private boolean completed = false; @Column(COLUMN_ORDER) @CassandraType(type = Name.INT) private int order = 0; public TodoEntity(String title, int offset) {   this(UUID.randomUUID(), title, false, offset); }}</code></pre></blockquote><ul><li>Create interface extending <code>CassandraRepository</code> providing bean type and primary key class.</li></ul><pre lang="java"><code>@Repositorypublic interface TodoRepositoryCassandra extends CassandraRepository&lt;TodoEntity, UUID&gt; {}</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-test-repositories"> </a><code>✅.2.2.a</code>- Test Repositories</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_datagp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_data/src/test/java/com/datastax/workshop/E02_SpringDataRepository.javamvn test -Dtest=com.datastax.workshop.E02_SpringDataRepository</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-get-results-from-cqlsh"> </a><code>✅.2.2.b</code>- Get results from cqlsh</h4><pre><code>astra db cqlsh workshops -e &quot;SELECT * FROM ks_spring.todos&quot;</code></pre><h2><a class="anchor" aria-hidden="true" id="2-3-cassandraoperations"> </a>2.3 - CassandraOperations</h2><ul><li><code>SimpleCassandraRepository</code> gives you access to the <code>CqlSession</code>.</li></ul><pre lang="java"><code>@Repositorypublic class TodoRepositorySimpleCassandra extends SimpleCassandraRepository&lt;TodoEntity, UUID&gt; { protected final CqlSession cqlSession; protected final CassandraOperations cassandraTemplate; @SuppressWarnings(&quot;unchecked&quot;) public TodoRepositorySimpleCassandra(CqlSession cqlSession, CassandraOperations ops) {   super(new MappingCassandraEntityInformation&lt;TodoEntity, UUID&gt;(     (CassandraPersistentEntity&lt;TodoEntity&gt;) ops.getConverter().getMappingContext()     .getRequiredPersistentEntity(TodoEntity.class), ops.getConverter()), ops);   this.cqlSession = cqlSession;   this.cassandraTemplate = ops; }}</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-3-a-code-use-the-simplecassandrarepository"> </a><code>✅.2.3.a</code>- Use the SimpleCassandraRepository</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_datagp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_data/src/test/java/com/datastax/workshop/E03_SpringDataCassandraOperations.javamvn test -Dtest=com.datastax.workshop.E03_SpringDataCassandraOperations</code></pre><h2><a class="anchor" aria-hidden="true" id="2-4-spring-boot"> </a>2.4 - Spring Boot</h2><h4><a class="anchor" aria-hidden="true" id="code-2-4-a-code-start-application"> </a><code>✅.2.4.a</code>- Start application</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_datamvn spring-boot:run</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-4-b-code-access-application-apis"> </a><code>✅.2.4.b</code>- Access Application Apis</h4><pre><code>gp preview &quot;$(gp url 8080)/api/v1/todos/&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-4-c-code-integration-tests"> </a><code>✅.2.4.c</code>- Integration Tests</h4><ul><li><p>Open a new terminal with the <code>+</code> button on the top right hand corner of terminal panel</p></li><li><p>Set the custom path as environment variable</p></li></ul><pre><code>export SPRING_DATA_URL=`gp url 8080`cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab2_spring_datamvn test -Dtest=com.datastax.workshop.E04_SpringControllerTest</code></pre><h2><a class="anchor" aria-hidden="true" id="2-5-spring-native"> </a>2.5 Spring native</h2><blockquote><p><strong>Documentation:</strong> <a href="https://www.graalvm.org/dev/reference-manual/native-image/guides/build-spring-boot-app-into-native-executable/">Official Documentation</a></p></blockquote><p/><br/><h1><a class="anchor" aria-hidden="true" id="lab-3-cassandra-quarkus-extension"> </a>LAB 3 - Cassandra Quarkus Extension</h1><h2><a class="anchor" aria-hidden="true" id="3-1-configuration"> </a>3.1 - Configuration</h2><h4><a class="anchor" aria-hidden="true" id="code-3-1-a-code-create-keyspace-code-ks-quarkus-code"> </a><code>✅.3.1.a</code>- Create keyspace <code>ks_quarkus</code></h4><pre lang="bash"><code>astra db create-keyspace workshops -k ks_quarkus --if-not-exist</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-1-b-code-list-keyspaces"> </a><code>✅.3.1.b</code>- list Keyspaces</h4><pre lang="bash"><code>astra db list-keyspaces workshops</code></pre><blockquote><p>🖥️ <code>output</code></p><pre><code>+---------------------+| Name                |+---------------------+| ks_spring           || ks_java (default)   || ks_quarkus          |+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-1-c-code-compile-project"> </a><code>✅.3.1.c</code>- Compile project</h4><pre lang="bash"><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/pom.xml</code></pre><ul><li>Check dependency to use quarkus</li></ul><pre lang="xml"><code>&lt;dependency&gt;  &lt;groupId&gt;com.datastax.oss.quarkus&lt;/groupId&gt;  &lt;artifactId&gt;cassandra-quarkus-client&lt;/artifactId&gt;  &lt;version&gt;${latest}&lt;/version&gt;&lt;/dependency&gt;</code></pre><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn clean compile</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-1-d-code-check-configuration"> </a><code>✅.3.1.d</code>- Check Configuration</h4><pre lang="bash"><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/src/main/resources/application.properties</code></pre><ul><li>Here how we defined the connectivity</li></ul><pre lang="ini"><code>quarkus.cassandra.keyspace=ks_quarkusquarkus.cassandra.cloud.secure-connect-bundle=/workspace/workshop-spring-quarkus-micronaut-cassandra/secure-bundle-workshops.zipquarkus.cassandra.auth.username=tokenquarkus.cassandra.auth.password=${ASTRA_DB_APP_TOKEN}</code></pre><ul><li>Make sure this constant <code>ASTRA_DB_APP_TOKEN</code> in our terminal</li></ul><pre lang="bash"><code>export ASTRA_DB_APP_TOKEN=`astra config get default --key ASTRA_DB_APPLICATION_TOKEN`echo ${ASTRA_DB_APP_TOKEN}</code></pre><h2><a class="anchor" aria-hidden="true" id="3-2-usage"> </a>3.2 - Usage</h2><h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-validate-configuration"> </a><code>✅.3.2.a</code>- Validate configuration</h4><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn test -Dtest=com.datastax.workshop.E01_QuarkusInit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-use-code-cqlsession-code-with-code-quarkus-code"> </a><code>✅.3.2.b</code>- Use <code>CqlSession</code> with <code>Quarkus</code></h4><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn test -Dtest=com.datastax.workshop.E02_QuarkusCql</code></pre><h2><a class="anchor" aria-hidden="true" id="3-3-object-mapping"> </a>3.3 - Object Mapping</h2><h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-object-mapping-configuration"> </a><code>✅.3.3.a</code>- Object Mapping configuration</h4><ul><li>Quarkus reuses the Driver Mapper mechanism</li></ul><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/src/main/java/com/datastaxdev/todo/cassandra/TodoItem.java</code></pre><ul><li><p><code>TodoServicesCassandraOM</code> is annotated with <code>@ApplicationScoped</code> to inject the class in the context</p></li><li><p>In constructor we use <code>Mapper</code> to instanciate a <code>DAO</code> created with the driver</p></li></ul><blockquote><pre lang="java"><code>todoDao = TodoItemMapper  .builder(cqlSession)  .withDefaultKeyspace(cqlSession.getKeyspace().get())  .build()  .todoItemDao();</code></pre></blockquote><pre><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/src/main/java/com/datastaxdev/todo/cassandra/TodoServicesCassandraOM.java</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-object-mapping-test"> </a><code>✅.3.3.b</code>- Object Mapping test</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn test -Dtest=com.datastax.workshop.E03_QuarkusObjectMapping</code></pre><h2><a class="anchor" aria-hidden="true" id="3-4-rest-api-application"> </a>3.4 - Rest Api Application</h2><h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-start-the-application-with-code-dev-code-plugin"> </a><code>✅.3.4.a</code>- Start the application with <code>dev</code> plugin</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn quarkus:dev -DskipTests</code></pre><ul><li>To access the developer dashboard use on a new tab</li></ul><pre lang="bash"><code>gp preview &quot;$(gp url 8081)/q/dev&quot;</code></pre><p><em>Dashboard</em><img src="img/quarkus-dashboard.png?raw=true" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-3-4-b-code-access-swagger-ui"> </a><code>✅.3.4.b</code>- Access Swagger-UI</h4><pre lang="bash"><code>gp preview &quot;$(gp url 8081)/q/swagger-ui&quot;</code></pre><p><img src="img/quarkus-swagger.png?raw=true" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-3-4-c-code-access-apis"> </a><code>✅.3.4.c</code>- Access APIs</h4><pre lang="bash"><code>gp preview &quot;$(gp url 8081)/api/v1/clun/todos/&quot;</code></pre><p><img src="img/quarkus-swagger.png?raw=true" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-3-4-d-code-integration-test"> </a><code>✅.3.4.d</code>- Integration Test</h4><p>Stop running application with <code>q</code>.</p><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn test -Dtest=com.datastax.workshop.E04_QuarkusController</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-4-e-code-native-image"> </a><code>✅.3.4.e</code>- Native Image</h4><p>You can package the image with the <code>-Pnative</code> option as below.</p><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/mvn clean package -DskipTests -Pnative</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p></blockquote><pre><code>INFO] Scanning for projects...[INFO] [INFO] -----------------&lt; com.datastax.samples:lab3-quarkus &gt;------------------[INFO] Building lab3-quarkus 0.0.1-SNAPSHOT[INFO] --------------------------------[ jar ]---------------------------------[INFO] [INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ lab3-quarkus ---[INFO] Deleting /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target[INFO] [INFO] --- quarkus-maven-plugin:2.3.1.Final:generate-code (default) @ lab3-quarkus ---[INFO] [INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ lab3-quarkus ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] Copying 2 resources[INFO] [INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ lab3-quarkus ---[INFO] Changes detected - recompiling the module![INFO] Compiling 10 source files to /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/classes[INFO] [INFO] --- quarkus-maven-plugin:2.3.1.Final:generate-code-tests (default) @ lab3-quarkus ---[INFO] [INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ lab3-quarkus ---[INFO] Using 'UTF-8' encoding to copy filtered resources.[INFO] skip non existing resourceDirectory /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/src/test/resources[INFO] [INFO] --- maven-compiler-plugin:3.8.1:testCompile (default-testCompile) @ lab3-quarkus ---[INFO] Changes detected - recompiling the module![INFO] Compiling 4 source files to /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/test-classes[INFO] [INFO] --- maven-surefire-plugin:3.0.0-M5:test (default-test) @ lab3-quarkus ---[INFO] Tests are skipped.[INFO] [INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ lab3-quarkus ---[INFO] Building jar: /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/lab3-quarkus-0.0.1-SNAPSHOT.jar[INFO] [INFO] --- quarkus-maven-plugin:2.3.1.Final:build (default) @ lab3-quarkus ---[INFO] [org.jboss.threads] JBoss Threads version 3.4.2.Final[WARNING] Error reading service account token from: [/var/run/secrets/kubernetes.io/serviceaccount/token]. Ignoring.[WARNING] Error reading service account token from: [/var/run/secrets/kubernetes.io/serviceaccount/token]. Ignoring.[WARNING] Error reading service account token from: [/var/run/secrets/kubernetes.io/serviceaccount/token]. Ignoring.[INFO] [io.quarkus.arc.processor.BeanProcessor] Found unrecommended usage of private members (use package-private instead) in application beans:        - @Inject field com.datastaxdev.todo.TodoRestController#cqlSession,        - @Inject field com.datastaxdev.todo.TodoRestController#uriInfo[WARNING] Micrometer metrics were enabled by configuration, but MicrometerMetricsFactory was not found.[WARNING] Make sure to include a dependency to the java-driver-metrics-micrometer module.[INFO] Checking for existing resources in: /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/src/main/kubernetes.[INFO] [io.quarkus.deployment.pkg.steps.JarResultBuildStep] Building native image source jar: /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/lab3-quarkus-0.0.1-SNAPSHOT-native-image-source-jar/lab3-quarkus-0.0.1-SNAPSHOT-runner.jar[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Building native image from /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/lab3-quarkus-0.0.1-SNAPSHOT-native-image-source-jar/lab3-quarkus-0.0.1-SNAPSHOT-runner.jar[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildStep] Running Quarkus native-image plugin on GraalVM 22.1.0 Java 11 CE (Java Version 11.0.15+10-jvmci-22.1-b06)[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] /home/gitpod/.sdkman/candidates/java/22.1.0.r11-grl/bin/native-image -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager -J-Dsun.nio.ch.maxUpdateArraySize=100 -J-Dvertx.logger-delegate-factory-class-name=io.quarkus.vertx.core.runtime.VertxLogDelegateFactory -J-Dvertx.disableDnsResolver=true -J-Dio.netty.leakDetection.level=DISABLED -J-Dio.netty.allocator.maxOrder=3 -J-Duser.language=en -J-Duser.country=US -J-Dfile.encoding=UTF-8 -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy\$BySpaceAndTime -H:+JNI -H:+AllowFoldMethods -H:FallbackThreshold=0 -H:+ReportExceptionStackTraces -H:-AddAllCharsets -H:EnableURLProtocols=http,https -H:NativeLinkerOption=-no-pie -H:-UseServiceLoaderFeature -H:+StackTrace -H:-ParseOnce lab3-quarkus-0.0.1-SNAPSHOT-runner -jar lab3-quarkus-0.0.1-SNAPSHOT-runner.jar======================================================================================================GraalVM Native Image: Generating 'lab3-quarkus-0.0.1-SNAPSHOT-runner' (executable)...======================================================================================================[1/7] Initializing...                                                                  (7.4s @ 0.17GB) Version info: 'GraalVM 22.1.0 Java 11 CE' C compiler: gcc (linux, x86_64, 9.4.0) Garbage collector: Serial GC 2 user-provided feature(s)  - io.quarkus.runner.AutoFeature  - io.quarkus.runtime.graal.ResourcesFeature[2/7] Performing analysis...  [16:42:29,870 INFO  [com.dat.oss.dri.int.cor.DefaultMavenCoordinates] DataStax Java driver for Apache Cassandra(R) (com.datastax.oss:java-driver-core) version 4.13.0*16:43:19,387 INFO  [org.jbo.threads] JBoss Threads version 3.4.2.Final**********]                                           (97.6s @ 2.24GB)  14,423 (90.29%) of 15,974 classes reachable  21,418 (64.47%) of 33,223 fields reachable  72,082 (58.89%) of 122,398 methods reachable     477 classes,    42 fields, and 1,633 methods registered for reflection      68 classes,    88 fields, and    54 methods registered for JNI access[3/7] Building universe...                                                             (6.7s @ 2.88GB)[4/7] Parsing methods...      [*****]                                                 (26.7s @ 1.92GB)[5/7] Inlining methods...     [*****]                                                 (17.5s @ 4.86GB)[6/7] Compiling methods...    [***********]                                          (137.3s @ 4.31GB)[7/7] Creating image...                                                                (7.2s @ 2.04GB)  27.50MB (44.39%) for code area:   46,659 compilation units  27.61MB (44.57%) for image heap:  10,057 classes and 328,598 objects   6.84MB (11.04%) for other data  61.95MB in total------------------------------------------------------------------------------------------------------Top 10 packages in code area:                      Top 10 object types in image heap:   1.75MB sun.security.ssl                            6.30MB byte[] for code metadata   1.11MB com.esri.core.geometry                      3.54MB java.lang.Class   1.04MB java.util                                   2.95MB java.lang.String 715.53KB com.sun.crypto.provider                     2.76MB byte[] for general heap data 484.63KB sun.security.x509                           2.69MB byte[] for java.lang.String 476.36KB io.quarkus.runtime.generated                1.32MB c.o.svm.core.hub.DynamicHubCompanion 476.25KB java.util.concurrent                      867.19KB java.util.HashMap$Node 429.23KB java.lang                                 641.52KB byte[] for reflection metadata 424.57KB io.netty.buffer                           609.70KB java.lang.String[] 419.94KB com.typesafe.config.impl                  398.88KB java.util.HashMap$Node[]      ... 635 additional packages                        ... 3440 additional object types                                  (use GraalVM Dashboard to see all)------------------------------------------------------------------------------------------------------               28.4s (9.1% of total time) in 36 GCs | Peak RSS: 6.95GB | CPU load: 2.00------------------------------------------------------------------------------------------------------Produced artifacts: /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/lab3-quarkus-0.0.1-SNAPSHOT-native-image-source-jar/lab3-quarkus-0.0.1-SNAPSHOT-runner (executable) /workspace/workshop-spring-quarkus-micronaut-cassandra/lab3_quarkus/target/lab3-quarkus-0.0.1-SNAPSHOT-native-image-source-jar/lab3-quarkus-0.0.1-SNAPSHOT-runner.build_artifacts.txt======================================================================================================Finished generating 'lab3-quarkus-0.0.1-SNAPSHOT-runner' in 5m 10s.[INFO] [io.quarkus.deployment.pkg.steps.NativeImageBuildRunner] objcopy --strip-debug lab3-quarkus-0.0.1-SNAPSHOT-runner[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 315900ms[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  05:27 min[INFO] Finished at: 2022-10-04T16:47:29Z[INFO] ------------------------------------------------------------------------</code></pre><p>and you can run it as below</p><pre><code>./target/lab3-quarkus-0.0.1-SNAPSHOT-runner</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p></blockquote><pre><code>__  ____  __  _____   ___  __ ____  ______  --/ __ \/ / / / _ | / _ \/ //_/ / / / __/  -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\ \   --\___\_\____/_/ |_/_/|_/_/|_|\____/___/   2022-10-04 16:48:45,719 INFO  [com.dat.oss.dri.int.cor.os.Native] (vert.x-eventloop-thread-0) Using Graal-specific native functions2022-10-04 16:48:45,719 INFO  [com.dat.oss.dri.int.cor.tim.Clock] (vert.x-eventloop-thread-0) Using native clock for microsecond precision2022-10-04 16:48:47,087 INFO  [com.dat.oss.dri.int.cor.ses.DefaultSession] (vert.x-eventloop-thread-8) [s0] Negotiated protocol version V4 for the initial contact point, but cluster seems to support V5, keeping the negotiated version2022-10-04 16:48:48,001 INFO  [com.dat.oss.qua.run.int.qua.CassandraClientStarter] (main) Eagerly initializing Quarkus Cassandra client.2022-10-04 16:48:48,005 INFO  [io.quarkus] (main) lab3-quarkus 0.0.1-SNAPSHOT native (powered by Quarkus 2.3.1.Final) started in 2.610s. Listening on: http://0.0.0.0:80812022-10-04 16:48:48,005 INFO  [io.quarkus] (main) Profile prod activated. 2022-10-04 16:48:48,005 INFO  [io.quarkus] (main) Installed features: [cassandra-client, cdi, kubernetes, micrometer, resteasy-reactive, resteasy-reactive-jackson, smallrye-context-propagation, smallrye-health, smallrye-openapi, vertx]</code></pre><h1><a class="anchor" aria-hidden="true" id="lab-4-micronaut-cassandra"> </a>LAB 4 - Micronaut Cassandra</h1><h2><a class="anchor" aria-hidden="true" id="4-1-configuration"> </a>4.1 - Configuration</h2><h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-create-keyspace-code-ks-micronaut-code"> </a><code>✅.4.1.a</code>- Create keyspace <code>ks_micronaut</code></h4><pre lang="bash"><code>astra db create-keyspace workshops -k ks_micronaut --if-not-exist</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-keyspaces"> </a><code>✅.4.1.b</code>- list Keyspaces</h4><pre lang="bash"><code>astra db list-keyspaces workshops</code></pre><blockquote><p>🖥️ <code>output</code></p><pre><code>+---------------------+| Name                |+---------------------+| ks_spring           || ks_java (default)   || ks_quarkus          || ks_micronaut        |+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-1-c-code-compile-project"> </a><code>✅.4.1.c</code>- Compile project</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn clean compile</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-1-d-code-testing-project"> </a><code>✅.4.1.d</code>- Testing project</h4><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn test -Dtest=com.datastaxdev.E01_MicronautInitTest</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running com.datastaxdev.E01_MicronautInitTest12:57:12.946 [main] INFO  c.datastaxdev.TodoApplicationStartup - Startup Initialization12:57:13.067 [main] INFO  c.datastaxdev.TodoApplicationStartup - + Table TodoItems created if needed.12:57:13.067 [main] INFO  c.datastaxdev.TodoApplicationStartup - [OK]com.datastax.oss.driver.internal.core.session.DefaultSession@37854b3412:57:13.108 [main] INFO  c.datastaxdev.E01_MicronautInitTest - Creating your CqlSession to Cassandra...12:57:13.111 [main] INFO  c.datastaxdev.E01_MicronautInitTest - + [OK] Your are connected to keyspace ks_micronaut[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.677 s - in com.datastaxdev.E01_MicronautInitTest[INFO] [INFO] Results:[INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  11.262 s[INFO] Finished at: 2022-10-04T12:57:15Z[INFO] ------------------------------------------------------------------------</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-1-e-code-use-cqlsession"> </a><code>✅.4.1.e</code>- Use CqlSession</h4><pre><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn test -Dtest=com.datastaxdev.E02_MicronautCqlTest</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running com.datastaxdev.E02_MicronautCqlTest13:00:21.370 [main] INFO  c.datastaxdev.TodoApplicationStartup - Startup Initialization13:00:21.482 [main] INFO  c.datastaxdev.TodoApplicationStartup - + Table TodoItems created if needed.13:00:21.482 [main] INFO  c.datastaxdev.TodoApplicationStartup - [OK]13:00:22.372 [main] INFO  com.datastaxdev.E02_MicronautCqlTest - Creating the schema...13:00:22.456 [main] INFO  com.datastaxdev.E02_MicronautCqlTest - + [OK]13:00:22.457 [main] INFO  com.datastaxdev.E02_MicronautCqlTest - Inserting Data13:00:22.552 [main] INFO  com.datastaxdev.E02_MicronautCqlTest - + [OK][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.28 s - in com.datastaxdev.E02_MicronautCqlTest[INFO] [INFO] Results:[INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  11.441 s[INFO] Finished at: 2022-10-04T13:00:24Z[INFO] ------------------------------------------------------------------------</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="4-2-configuration"> </a>4.2 - Configuration</h2><h4><a class="anchor" aria-hidden="true" id="code-4-2-a-code-object-mapping"> </a><code>✅.4.2.a</code>- Object Mapping</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn test -Dtest=com.datastaxdev.E03_MicronautObjectMappingTest</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running com.datastaxdev.E03_MicronautObjectMappingTest13:02:03.705 [main] INFO  c.datastaxdev.TodoApplicationStartup - Startup Initialization13:02:03.810 [main] INFO  c.datastaxdev.TodoApplicationStartup - + Table TodoItems created if needed.13:02:03.810 [main] INFO  c.datastaxdev.TodoApplicationStartup - [OK]13:02:04.038 [main] INFO  c.d.E03_MicronautObjectMappingTest - Inserting Data13:02:04.135 [main] INFO  c.d.E03_MicronautObjectMappingTest - + [OK][INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.494 s - in com.datastaxdev.E03_MicronautObjectMappingTest[INFO] [INFO] Results:[INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  10.433 s[INFO] Finished at: 2022-10-04T13:02:06Z[INFO] ------------------------------------------------------------------------</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-integration-tests"> </a><code>✅.4.2.b</code>- Integration Tests</h4><ul><li>Run integration tests with the following.</li></ul><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn test -Dtest=com.datastaxdev.E04_MicronautControllerTest</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p><pre><code>[INFO] -------------------------------------------------------[INFO]  T E S T S[INFO] -------------------------------------------------------[INFO] Running com.datastaxdev.E04_MicronautControllerTest13:10:03.322 [main] INFO  c.datastaxdev.TodoApplicationStartup - Startup Initialization13:10:03.431 [main] INFO  c.datastaxdev.TodoApplicationStartup - + Table TodoItems created if needed.13:10:03.431 [main] INFO  c.datastaxdev.TodoApplicationStartup - [OK]13:10:04.828 [main] INFO  c.d.E04_MicronautControllerTest - 12 task retrieved[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.811 s - in com.datastaxdev.E04_MicronautControllerTest[INFO] [INFO] Results:[INFO] [INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0[INFO] [INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  12.778 s[INFO] Finished at: 2022-10-04T13:10:07Z[INFO] ------------------------------------------------------------------------</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="4-3-micronaut-application"> </a>4.3 - Micronaut Application</h2><h4><a class="anchor" aria-hidden="true" id="code-4-3-a-code-start-the-application"> </a><code>✅.4.3.a</code>- Start the application</h4><pre lang="bash"><code>cd /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/mvn mn:run -DskipTests</code></pre><blockquote><p>🖥️ <code>OUTPUT</code></p><pre><code> __  __ _                                  _   |  \/  (_) ___ _ __ ___  _ __   __ _ _   _| |_ | |\/| | |/ __| '__/ _ \| '_ \ / _` | | | | __|| |  | | | (__| | | (_) | | | | (_| | |_| | |_ |_|  |_|_|\___|_|  \___/|_| |_|\__,_|\__,_|\__|  Micronaut (v3.7.1)13:06:15.990 [main] INFO  c.datastaxdev.TodoApplicationStartup - Startup Initialization13:06:16.096 [main] INFO  c.datastaxdev.TodoApplicationStartup - + Table TodoItems created if needed.13:06:16.096 [main] INFO  c.datastaxdev.TodoApplicationStartup - [OK]</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-3-b-code-show-the-apis"> </a><code>✅.4.3.b</code>- Show the Apis</h4><ul><li>Open the application API on port <code>8082</code></li></ul><pre lang="bash"><code>gp preview &quot;$(gp url 8082)/api/v1/clun/todos/&quot;</code></pre><p><img src="img/micronaut-output.png" alt="out" /></p><h2><a class="anchor" aria-hidden="true" id="4-4-native-image"> </a>4.4 - Native Image</h2><h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-build-native-image"> </a><code>✅.4.4.a</code>- Build native image</h4><blockquote><p><strong><a href="https://docs.micronaut.io/latest/guide/index.html#graal">Documentation</a></strong></p></blockquote><ul><li>Change environment variable</li></ul><pre><code>gp open /workspace/workshop-spring-quarkus-micronaut-cassandra/lab4_micronaut/src/main/resources/application.yml</code></pre><pre lang="yaml"><code>#password: ${ASTRA_DB_APP_TOKEN}</code></pre><ul><li>Compile as native image</li></ul><pre><code>mvn package -Dpackaging=native-image</code></pre><ul><li>Run the Native</li></ul><pre><code>./target/todo-micronaut</code></pre><ul><li>Show the API</li></ul><pre><code>gp preview &quot;$(gp url 8082)/api/v1/clun/todos/&quot;</code></pre><h2><a class="anchor" aria-hidden="true" id="homeworks"> </a>Homeworks</h2><p>To submit the <strong>homework</strong>, please take a screenshot in gitpod with the result of lab <code>4.3</code> where you micronaut application return some TODO, no need to go native.</p><p>Don't forget to <a href="https://dtsx.io/homework-spring-quarkus-micronaut">submit your homework</a> and be awarded a nice verified badge!</p><h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Pulsar and Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.</p><p>There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p>Don't forget to <a href="https://dtsx.io/homework-spring-quarkus-micronaut">submit your homework</a> and be awarded a nice verified badge!</p><img src="img/badge.png?raw=true" width="350" /><hr /><p><strong>... and see you at our next workshop!</strong></p>
SUCCESS SAVING README for datastaxdevs-workshop-spring-quarkus-micronaut-cassandra
Getting astra.json for datastaxdevs/workshop-cassandra-data-modeling at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandra-r-data-modelling"> </a>🎓🎓 Apache Cassandra® Data Modelling</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently Asked Questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create Your Astra DB Instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-tables-with-single-row-and-multi-row-partitions"> </a>5. Tables with Single-Row and Multi-Row Partitions</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-1-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-single-row-partitions-tables-with-single-row-partitions-a"> </a>✅ Part 1: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-single-row-partitions/">Tables with Single-Row Partitions</a></h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-2-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-multi-row-partitions-tables-with-multi-row-partitions-a"> </a>✅ Part 2: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-multi-row-partitions/">Tables with Multi-Row Partitions</a></h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-dynamic-bucketing"> </a>6. Dynamic Bucketing</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="homework-1"> </a>📌 Homework 1</h3></summary>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-working-with-data-types"> </a>7. Working with Data Types</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="homework-2"> </a>📌 Homework 2</h3></summary>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7a-code-list-code-collections"> </a>✅ Step 7a. <code>List</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7b-code-set-code-collections"> </a>✅ Step 7b. <code>Set</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7c-code-map-code-collections"> </a>✅ Step 7c. <code>Map</code> Collections</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7d-user-defined-types"> </a>✅ Step 7d. User-Defined Types</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-7e-counters"> </a>✅ Step 7e. Counters</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-kdm-data-modeling-tool"> </a>8. KDM Data Modeling Tool</h2>
REPLACED LINE WITH   <summary> <h3><a class="anchor" aria-hidden="true" id="demo"> </a>🍿 Demo</h3></summary>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="download-a-href-https-raw-githubusercontent-com-datastaxdevs-workshop-cassandra-data-modeling-main-materials-kdm-sensor-data-xml-the-project-xml-file-a"> </a>✅ Download <a href="https://raw.githubusercontent.com/datastaxdevs/workshop-cassandra-data-modeling/main/materials/kdm_sensor_data.xml">the project XML file</a>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="open-a-href-http-kdm-kashliev-com-the-kdm-tool-a"> </a>✅ Open <a href="http://kdm.kashliev.com/">the KDM tool</a>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="import-the-project-by-selecting-code-import-project-code-from-the-menu-and-specifying-file-code-kdm-sensor-data-xml-code"> </a>✅ Import the project by selecting <code>Import Project</code> from the menu and specifying file <code>kdm_sensor_data.xml</code>.</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="explore-the-five-data-modeling-steps-supported-by-kdm-note-that-the-conceptual-data-model-in-step-1-and-queries-in-step-2-are-already-defined"> </a>✅ Explore the five data modeling steps supported by KDM. Note that the conceptual data model in Step 1 and queries in Step 2 are already defined.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-sensor-data-modeling"> </a>9. Sensor Data Modeling</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-sensor-data-sensor-data-modeling-a"> </a>✅ <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-sensor-data/">Sensor Data Modeling</a></h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-homework"> </a>10. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-what-s-next"> </a>11. What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-cassandra-data-modeling<h1><a class="anchor" aria-hidden="true" id="apache-cassandra-r-data-modelling"> </a>🎓🎓 Apache Cassandra® Data Modelling</h1><p>Welcome to the <strong>Apache Cassandra® Data Modelling</strong> workshop! In this two-hour workshop, we show the methodology to build an effective data model with the distributed <code>NoSQL database Apache Cassandra™</code>.</p><p>Using <strong>Astra DB</strong>, the cloud based <em>Cassandra-as-a-Service</em> platform delivered by DataStax, we will cover the process for every developer who wants to build an application: list the use cases and build an effective data model.</p><p><img src="images/splash.png" alt="" /></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2><img src="images/illustrations.png?raw=true" align="right" width="300px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently Asked Questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create Your Astra DB Instance</a></li><li><a href="#5-tables-with-single-row-and-multi-row-partitions">Tables with Single-Row and Multi-Row Partitions</a></li><li><a href="#6-dynamic-bucketing">Dynamic Bucketing</a></li><li><a href="#7-working-with-data-types">Working with Data Types</a></li><li><a href="#8-kdm-data-modeling-tool">KDM Data Modeling Tool</a></li><li><a href="#9-sensor-data-modeling">Sensor Data Modeling</a></li><li><a href="#10-homework">Homework</a></li><li><a href="#11-whats-next-">What's NEXT </a></li></ol><p><br/><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Understand how data is distributed and organized in Apache Cassandra®</strong></p><p>2️⃣ <strong>Learn how primary, partition, and clustering keys are defined in Apache Cassandra®</strong></p><p>3️⃣ <strong>Become familiar with CQL data types in Apache Cassandra®</strong></p><p>4️⃣ <strong>Learn about the data modeling methodology for Apache Cassandra®</strong></p><p>🚀 <strong>Have fun with an interactive session</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently Asked Questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough "real estate" on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are.</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on LinkedIn or anywhere else.</details><p/><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create Your Astra DB Instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-7-27"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>sensor_data</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>sensor_data</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong>:save it somewhere safe, as it will be needed to later in other workshops (In particular the string starting with <code>AstraCS:...</code>.)</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a tokenbut will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-tables-with-single-row-and-multi-row-partitions"> </a>5. Tables with Single-Row and Multi-Row Partitions</h2><p>A <a href="https://github.com">GitHub</a> account may be required to run this hands-on lab in Gitpod.</p><h3><a class="anchor" aria-hidden="true" id="part-1-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-single-row-partitions-tables-with-single-row-partitions-a"> </a>✅ Part 1: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-single-row-partitions/">Tables with Single-Row Partitions</a></h3><h3><a class="anchor" aria-hidden="true" id="part-2-a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-tables-multi-row-partitions-tables-with-multi-row-partitions-a"> </a>✅ Part 2: <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-tables-multi-row-partitions/">Tables with Multi-Row Partitions</a></h3><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-dynamic-bucketing"> </a>6. Dynamic Bucketing</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="homework-1"> </a>📌 Homework 1</h3></summary><p>Consider the table that supports query <code>Find all sensors in a specified network</code>:</p><pre lang="sql"><code>CREATE TABLE sensors_by_network_2 (  network TEXT,  sensor TEXT,  PRIMARY KEY ((network), sensor));</code></pre><p>Assume that a network may have none to millions of sensors. With dynamic bucketing, we can introduce artificial buckets to store sensors. A network with a few sensors may only need one bucket. A network with many sensors may need many buckets. Once buckets belonging to a particular network get filled with sensors, we can dynamically assign new buckets to store new sensors of this network.</p><p>📘 <strong>Implement dynamic bucketing in Astra DB</strong></p><pre lang="sql"><code>-- Table to manage bucketsCREATE TABLE buckets_by_network (  network TEXT,  bucket TIMEUUID,  PRIMARY KEY ((network), bucket)) WITH CLUSTERING ORDER BY (bucket DESC);-- Table to store sensorsCREATE TABLE sensors_by_bucket (  bucket TIMEUUID,  sensor TEXT,  PRIMARY KEY ((bucket), sensor));-- Sample dataINSERT INTO buckets_by_network (network, bucket) VALUES ('forest-net', 49171ffe-0d12-11ed-861d-0242ac120002);INSERT INTO buckets_by_network (network, bucket) VALUES ('forest-net', 74a13ede-0d12-11ed-861d-0242ac120002);INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (49171ffe-0d12-11ed-861d-0242ac120002, 's1001');INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (49171ffe-0d12-11ed-861d-0242ac120002, 's1002');INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (74a13ede-0d12-11ed-861d-0242ac120002, 's1003');</code></pre><p>📘 <strong>Add a new sensor to a network</strong></p><ol><li>Get the latest bucket.</li></ol><pre lang="sql"><code>SELECT bucket FROM buckets_by_network WHERE network = 'forest-net' LIMIT 1;</code></pre><ol start="2"><li>Check the number of sensors in the bucket.</li></ol><pre lang="sql"><code>SELECT COUNT(*) AS sensorsFROM sensors_by_bucket WHERE bucket = 74a13ede-0d12-11ed-861d-0242ac120002;</code></pre><ol start="3"><li>Depending on the sensors-per-bucket threshold, insert a new sensor into the existing bucket, or create a new bucket and insert into the new bucket.</li></ol><pre lang="sql"><code>INSERT INTO sensors_by_bucket (bucket, sensor) VALUES (74a13ede-0d12-11ed-861d-0242ac120002, 's1004');</code></pre><p>📘 <strong>Retrieve sensors in a specified network</strong></p><ol><li>Retrieve the buckets</li></ol><pre lang="sql"><code>SELECT bucket FROM buckets_by_network WHERE network = 'forest-net';</code></pre><ol start="2"><li>Retrieve the sensors</li></ol><pre lang="sql"><code>SELECT sensorFROM sensors_by_bucketWHERE bucket IN (74a13ede-0d12-11ed-861d-0242ac120002, 49171ffe-0d12-11ed-861d-0242ac120002);</code></pre></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-working-with-data-types"> </a>7. Working with Data Types</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="homework-2"> </a>📌 Homework 2</h3></summary><h3><a class="anchor" aria-hidden="true" id="step-7a-code-list-code-collections"> </a>✅ Step 7a. <code>List</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_list (  uid      uuid,  items    list&lt;text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_list(uid,items)VALUES (c7133017-6409-4d7a-9479-07a5c1e79306, ['a', 'b', 'c']);// ReplaceUPDATE table_with_list SET items = ['d', 'e']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;// Show resultSELECT * FROM table_with_list ;// Append to listUPDATE table_with_list SET items = items + ['f']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;// Replace an element (not available in Astra because read before write)UPDATE table_with_list SET items[0] = ['g']WHERE uid = c7133017-6409-4d7a-9479-07a5c1e79306;</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7b-code-set-code-collections"> </a>✅ Step 7b. <code>Set</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_set (  uid      uuid,  animals  set&lt;text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_set(uid,animals)VALUES (87fad746-4adf-4107-9858-df8643564186, {'spider', 'cat', 'dog'});// ReplaceUPDATE table_with_set SET animals = {'pangolin', 'bat'}WHERE uid = 87fad746-4adf-4107-9858-df8643564186;// Show resultSELECT * FROM table_with_set;// Append to SetUPDATE table_with_set SET animals = animals + {'sheep'}WHERE uid = 87fad746-4adf-4107-9858-df8643564186;</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7c-code-map-code-collections"> </a>✅ Step 7c. <code>Map</code> Collections</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_map (  uid         text,  dictionary  map&lt;text, text&gt;,  PRIMARY KEY (uid));// InsertINSERT INTO table_with_map(uid, dictionary)VALUES ('fr_en', {'fromage':'cheese', 'vin':'wine', 'pain':'bread'});// ReplaceUPDATE table_with_map SET dictionary = {'saucisse': 'sausage'}WHERE uid = 'fr_en';// Show resultSELECT * FROM table_with_map;// Append to MapUPDATE table_with_map SET dictionary = dictionary + {'frites':'fries'}WHERE uid = 'fr_en';</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7d-user-defined-types"> </a>✅ Step 7d. User-Defined Types</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TYPE IF NOT EXISTS udt_address (  street text,  city text,  state text,);// Use the UDT in a tableCREATE TABLE IF NOT EXISTS table_with_udt (  uid      text,  address   udt_address,  PRIMARY KEY (uid));// INSERT (not quote on field names like street)INSERT INTO table_with_udt(uid, address)VALUES ('superman', {street:'daily planet',city:'metropolis',state:'CA'});// ReplaceUPDATE table_with_udtSET address = {street:'pingouin alley',city:'antarctica',state:'melting'}WHERE uid = 'superman';// Replace a single fieldUPDATE table_with_udtSET address.state = 'melt'WHERE uid = 'superman';</code></pre><h3><a class="anchor" aria-hidden="true" id="step-7e-counters"> </a>✅ Step 7e. Counters</h3><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>// DefinitionCREATE TABLE IF NOT EXISTS table_with_counters (  handle        text,  following     counter,  followers     counter,  notifications counter,  PRIMARY KEY (handle));// You have a new followerUPDATE table_with_counters SET followers = followers + 1WHERE  handle = 'clunven';// Some counters are... nullSELECT * from table_with_counters;// Set to 0... but set is not validUPDATE table_with_countersSET following = following + 0, notifications = notifications + 0WHERE handle = 'clunven';// Following someoneUPDATE table_with_counters SET following = following + 1WHERE handle = 'clunven';// You have a new messageUPDATE table_with_counters SET notifications = notifications + 1WHERE handle = 'clunven';</code></pre></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-kdm-data-modeling-tool"> </a>8. KDM Data Modeling Tool</h2><details>  <summary> <h3><a class="anchor" aria-hidden="true" id="demo"> </a>🍿 Demo</h3></summary><h3><a class="anchor" aria-hidden="true" id="download-a-href-https-raw-githubusercontent-com-datastaxdevs-workshop-cassandra-data-modeling-main-materials-kdm-sensor-data-xml-the-project-xml-file-a"> </a>✅ Download <a href="https://raw.githubusercontent.com/datastaxdevs/workshop-cassandra-data-modeling/main/materials/kdm_sensor_data.xml">the project XML file</a>.</h3><h3><a class="anchor" aria-hidden="true" id="open-a-href-http-kdm-kashliev-com-the-kdm-tool-a"> </a>✅ Open <a href="http://kdm.kashliev.com/">the KDM tool</a>.</h3><h3><a class="anchor" aria-hidden="true" id="import-the-project-by-selecting-code-import-project-code-from-the-menu-and-specifying-file-code-kdm-sensor-data-xml-code"> </a>✅ Import the project by selecting <code>Import Project</code> from the menu and specifying file <code>kdm_sensor_data.xml</code>.</h3><p><img src="images/kdm_01.png" alt="" /></p><p><img src="images/kdm_02.png" alt="" /></p><h3><a class="anchor" aria-hidden="true" id="explore-the-five-data-modeling-steps-supported-by-kdm-note-that-the-conceptual-data-model-in-step-1-and-queries-in-step-2-are-already-defined"> </a>✅ Explore the five data modeling steps supported by KDM. Note that the conceptual data model in Step 1 and queries in Step 2 are already defined.</h3><p><img src="images/kdm_03.png" alt="" /></p></details><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-sensor-data-modeling"> </a>9. Sensor Data Modeling</h2><p>A <a href="https://github.com">GitHub</a> account may be required to run this hands-on lab in Gitpod.</p><h3><a class="anchor" aria-hidden="true" id="a-href-https-gitpod-io-https-github-com-datastaxdevs-workshop-cassandra-data-modeling-sensor-data-sensor-data-modeling-a"> </a>✅ <a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-data-modeling-sensor-data/">Sensor Data Modeling</a></h3><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-homework"> </a>10. Homework</h2><ol><li><p>Complete <a href="#7-working-with-data-types">Working with Data Types</a>. Take a screenshot of the CQL Console showing the rows in tables<code>table_with_udt</code> and <code>table_with_counters</code> before <em>and</em> after executing the DELETE statements.</p></li><li><p>Complete the mini-course <a href="https://www.datastax.com/learn/data-modeling-by-example/time-series-model">Time Series Data Modeling</a>. Take a screenshot of the final screen of the practice lab, with the console output at the right.</p></li><li><p><a href="https://forms.gle/Z69y4MM3SpEDg7nt5">Submit your homework</a> and be awarded a nice verifiable badge!</p></li></ol><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-what-s-next"> </a>11. What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p><img src="images/badge_data_modeling.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-data-modeling
Getting astra.json for datastaxdevs/workshop-storage-attached-indexes at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="scalable-indexing-for-cassandra-using-datastax-astra"> </a>🎓🔥 Scalable Indexing for Cassandra using DataStax Astra 🔥🎓</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-getting-started-with-sai-storage-attached-index"> </a>2. Getting started with SAI (Storage Attached Index)</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-iot-sensor-data-model-use-case"> </a>3. IoT sensor data model use case</h2>
HTML FOR datastaxdevs-workshop-storage-attached-indexes<h2><a class="anchor" aria-hidden="true" id="scalable-indexing-for-cassandra-using-datastax-astra"> </a>🎓🔥 Scalable Indexing for Cassandra using DataStax Astra 🔥🎓</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><img src="https://user-images.githubusercontent.com/23346205/96910093-f5ee7100-146c-11eb-9cfb-06ea3732c2bd.png" alt="Storage Attached Index Workshop" /></p><p>Welcome to the 'Scalable Indexing for Cassandra using DataStax Astra' workshop! In this two-hour workshop, the Developer Advocate team of DataStax will explain the new Storage Attached Indexing (SAI) feature using Astra, the cloud based Cassandra-as-a-Service platform delivered by DataStax, to demonstrate how you can use them to add some much wanted flexibility to your Cassandra data model by querying outside of primary key fields.</p><p><strong>To date, SAI is currently supported on DataStax Astra and DataStax Enterprise 6.8.3+. There is a currently a <a href="https://cwiki.apache.org/confluence/display/CASSANDRA/CEP-7%3A+Storage+Attached+Index">CEP</a> to bring this functionality into Open Source Apache Cassandra.</strong></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li>Materials used during presentations</li><li>Hands-on exercises</li><li>Workshop videos<ul><li><a href="https://www.youtube.com/watch?v=GLJc1Uz9dqw">First workshop</a> [NAM Time]</li><li><a href="https://www.youtube.com/watch?v=yNQYQjXtV30">Second workshop</a> [IST Time]</li></ul></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2><table><thead><tr><th>Title</th><th>Description</th></tr></thead><tbody><tr><td><strong>Slide deck</strong></td><td><a href="slides/Presentation.pdf">Slide deck for the workshop</a></td></tr><tr><td><strong>Exercise Notebook</strong></td><td><a href="SA_Index_Workshop.tar">Exercises in Studio Notebook for Astra</a></td></tr><tr><td><strong>SAI Documentation</strong></td><td><a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiQuickStart.html">SAI Documentation</a></td></tr><tr><td><strong>1. Create your Astra instance</strong></td><td><a href="#1-create-your-astra-instance">Create your Astra instance</a></td></tr><tr><td><strong>2. Getting started with SAI</strong></td><td><a href="#2-getting-started-with-sai-storage-attached-index">Getting started with SAI</a></td></tr><tr><td><strong>3. IoT sensor data model use case</strong></td><td><a href="#3-iot-sensor-data-model-use-case">IoT sensor data model use case</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2><p><code>ASTRA</code> service is available at url <a href="https://dtsx.io/workshop">https://astra.datastax.com</a>. <code>ASTRA</code> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. <code>Astra</code> offers <strong>5 Gb Tier Free Forever</strong> and you <strong>don't need a credit card</strong> or anything to sign-up and use it.</p><p><strong>✅ Step 1a. Register (if needed) and Sign In to Astra</strong> : You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</p><ul><li><a href="https://dtsx.io/workshop">Registration Page</a></li></ul><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/login-1000.png?raw=true" alt="Registration Image" /></p><ul><li><a href="https://dtsx.io/workshop">Authentication Page</a></li></ul><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/signin-raw.png?raw=true" alt="Login Image" /></p><p><strong>✅ Step 1b. Choose the free plan and select your region</strong></p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/choose-a-plan-1000-annotated.png?raw=true" alt="my-pic" /></p><ul><li><p><strong>Select the free tier</strong>: 5GB storage, no obligation</p></li><li><p><strong>Select the region</strong>: This is the region where your database will reside physically (choose one close to you or your users). For people in EMEA please use <code>europe-west-1</code> idea here is to reduce latency.</p></li></ul><p><strong>✅ Step 1c. Configure and create your database</strong></p><p>You will find below which values to enter for each field.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/create-and-configure-annotated-1000.png?raw=true" alt="my-pic" /></p><ul><li><p><strong>Fill in the database name</strong> - <code>sa_index_workshop_db.</code> While Astra allows you to fill in these fields with values of your own choosing, please follow our reccomendations to make the rest of the exercises easier to follow. If you don't, you are on your own! :)</p></li><li><p><strong>Fill in the keyspace name</strong> - <code>sa_index</code>. It's really important that you use the name sa_index here in order for all the exercises to work well. We realize you want to be creative, but please just roll with this one today.</p></li><li><p><strong>Fill in the Database User name</strong> - <code>index_user</code>. Note the user name is case-sensitive. Please use the case we suggest here.</p></li><li><p><strong>Fill in the password</strong> - <code>index_password1</code>. Fill in both the password and the confirmation fields. Note that the password is also case-sensitive. Please use the case we suggest here.</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</p></li></ul><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/dashboard-pending-1000.png?raw=true" alt="my-pic" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email address when it is ready.</p><p><strong>✅ Step 1d. View your Database and connect</strong></p><p>Let’s review the database you have configured. Select your new database in the lefthand column.</p><p>Now you can select to connect, to park the database, to access CQL console or Studio.</p><p><img src="https://github.com/datastaxdevs/shared-assets/blob/master/astra/summary-1000.png?raw=true" alt="my-pic" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-getting-started-with-sai-storage-attached-index"> </a>2. Getting started with SAI (Storage Attached Index)</h2><p><strong>SAI</strong> is short for <strong>Storage Attached Indexes</strong>, it allows us to build indexes on Cassandra tables that dramatically improve the flexibility of Cassandra queries.</p><p>For a <strong>non-technical introduction</strong> to <strong>SAI</strong>, have a look at this <a href="https://www.datastax.com/blog/get-your-head-clouds-part-1-3-build-cloud-native-apps-datastax-astra-dbaas-now-aws-gcp">recent blog post</a>.</p><p>To learn more about <strong>SAI</strong> from a <strong>technical perspective</strong>, have a look at our <a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiQuickStart.html">docs on SAI</a>. Honestly, these docs are pretty great IMO especially the <a href="https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiFaqs.html">SAI FAQ</a>. Definitely take a moment to read through these to get a better understanding of how all of this works and even more examples on top of what we are presenting in this repo.</p><p>Now, let's get into some examples. The first thing we'll need is a table and some data to work with. For that we need to talk about my dentist, or really, a contrived example of a client data model a dentist might need to use.</p><p><strong>✅ Step 2a. Navigate to the CQL Console and login to the database</strong></p><p>In the Summary screen for your database, select <strong><em>CQL Console</em></strong> from the top menu in the main window. This will take you to the CQL Console with a login prompt.</p><p><img src="https://user-images.githubusercontent.com/23346205/97186856-35bc9d80-1778-11eb-80fd-df1a2f264a25.png" alt="astra cqlsh console" /></p><p>Once you click the <em><code>CQL Console</code></em> tab it will automatically log you in and present you with a <code>token@cqlsh&gt;</code> prompt.</p><p><strong>✅ Step 2b. Describe keyspaces and USE <code>sa_index</code></strong></p><p>Ok, you're logged in, and now we're ready to rock. Creating tables is quite easy, but before we create one we need to tell the database which keyspace we are working with.</p><p>First, let's <strong><em>DESCRIBE</em></strong> all of the keyspaces that are in the database. This will give us a list of the available keyspaces.</p><p>📘 <strong>Command to execute</strong></p><pre><code>desc KEYSPACES;</code></pre><p><em>&quot;desc&quot; is short for &quot;describe&quot;, either is valid</em></p><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97188152-939db500-1779-11eb-8e47-0d6b4ebea74b.png" alt="desc keyspace output" /></p><p>Depending on your setup you might see a different set of keyspaces then in the image. The one we care about for now is <strong><em>sa_index</em></strong>. From here, execute the <strong><em>USE</em></strong> command with the <strong><em>sa_index</em></strong> keyspace to tell the database our context is within <strong><em>sa_index</em></strong>.</p><p>📘 <strong>Command to execute</strong></p><pre><code>use sa_index;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97188451-e4151280-1779-11eb-98a2-f7292621f6ac.png" alt="use sa_index output" /></p><p>Notice how the prompt displays <code>token@cqlsh:sa_index&gt;</code> informing us we are <strong>using</strong> the <strong><em>sa_index</em></strong> keyspace. Now we are ready to create our tables.</p><p><strong>✅ Step 2c. Create a <em><code>clients</code></em> table and insert some data</strong></p><p>Create the table.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>CREATE TABLE IF NOT EXISTS clients (    uniqueid uuid primary key,    firstname text,    lastname text,    birthday date,    nextappt timestamp,    newpatient boolean,    photo text);</code></pre><p>Insert some data into the table.</p><p><em>We don't have real image URLs, so we're just using a placeholder string.</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="SQL"><code>INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (D85745B1-4BEC-43D7-8B77-DD164CB9D1B8, 'Alice', 'Apple', '1984-01-24', '2020-10-20 12:00:00', true, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (2A4F139F-0BBF-4A6F-B982-5400F11D2F2B, 'Zeke', 'Apple', '1961-12-30', '2020-10-20 12:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (DF649261-89CB-446B-9998-FFA2D17506F9, 'Lorenzo', 'Banana', '1963-09-03', '2020-10-20 13:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (808E6BBF-A0F4-4E4C-9C97-E36751D51A8B, 'Miley', 'Banana', '1969-02-06', '2020-10-20 13:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (3D458A4D-2F54-4271-BEDC-1FC316B3CC96, 'Cheryl', 'Banana', '1970-07-11', '2020-10-20 14:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (287AB6B4-1AA6-45DF-B6F8-2BE253B9AACE, 'Red', 'Currant', '1974-02-18', '2020-10-20 15:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (AB49D151-CC04-40DC-AEEA-0A4E5F59D69A, 'Matthew', 'Durian', '1976-11-11', '2020-10-19 12:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (783CE790-16B4-4645-B27C-4FDF3994A755, 'Vanessa', 'Elderberry', '1977-12-03', '2020-10-20 15:30:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (D23997E4-CCCB-46BB-B92F-0D4582A68809, 'Elaine', 'Elderberry', '1979-11-16', '2020-10-20 10:00:00', true, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (36C386C1-3C3B-49FC-81B1-391D5537453D, 'Phoebe', 'Fig', '1986-01-27', '2020-10-21 11:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (00FEE7EE-8F93-4C2E-A8BE-3ADD81235822, 'Patricia', 'Grape', '1986-06-24', '2020-10-21 12:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (B9DB7E99-AD1C-49B1-97C6-87154663AEF4, 'Herb', 'Huckleberry', '1990-07-09', '2020-10-21 13:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (F4DB7673-CA4E-4382-BDCD-2C1704363590, 'John-Henry', 'Huckleberry', '1979-11-16', '2020-10-21 14:00:00', false, 'imageurl');INSERT INTO clients (uniqueid, firstname, lastname, birthday, nextappt, newpatient, photo) VALUES (F4DB7673-CA4E-4382-BDCD-2C1704363595, 'Sven', 'Åskådare', '1967-11-07', '2020-10-21 14:00:00', false, 'imageurl');</code></pre><p><strong>✅ Step 2d. Verify data exists</strong></p><p>Now let's take a look at the data we just inserted.</p><p>📘 <strong>Command to execute</strong></p><pre><code>SELECT * FROM clients;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97189410-f2176300-177a-11eb-90ca-3604f113520f.png" alt="select from client table" /></p><p><strong>✅ Step 2e. Create some indexes</strong></p><p>Ok great, we have data in our table, but remember we used <strong><em><code>uniqueid</code></em></strong> as our <strong>primary key</strong> when we created the table. If we want to query a single patient, we'd have to do that by the <strong><em><code>uniqueid</code></em></strong> column because that's our <strong>partition key</strong> <em>(don't forget, a single value in the primary key is always the partition key)</em>.</p><p>As a matter of fact, let's try an example. Let's say I want to find a user by their lastname.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE lastname = 'Apple';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97208146-33b30880-1791-11eb-8470-13b6381de70e.png" alt="clients where lastname allow filtering" /></p><p>Right, the database is telling me here I <strong>CANNOT</strong> query against the <strong>lastname</strong> column because it is NOT in my primary key <strong><em><code>uniqueid</code></em></strong>.</p><p>But how would we search for users outside of using their unique ID's? We need to look for clients based on information they give us when they walk in the office. Namely, information like first and last name, or birthdate. Maybe a combination of those. Let's set up some indexes to do that.</p><p><em>Don't worry about options in the below statements just yet. We'll get to that. For now, just execute the commands to create your indexes.</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="SQL"><code>CREATE CUSTOM INDEX IF NOT EXISTS ON clients(firstname) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON clients(lastname) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON clients(birthday) USING 'StorageAttachedIndex';</code></pre><p><strong>✅ Step 2f. Execute queries that use firstname, lastname, and birthday using our indexes</strong></p><p>Remember, the <strong><code>clients</code></strong> table data model only includes <strong><code>uniqueid</code></strong> in the primary key. In the traditional Cassandra sense I can only query against the <strong><code>uniqueid</code></strong> column in the <strong>WHERE</strong> clause. However, with our <strong>SAIndexes</strong> now added we can do a lot more.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by ONLY their lastname. Notice the case used.SELECT * FROM clients WHERE lastname = 'Apple';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198417-25f78600-1785-11eb-8632-9a7d30456ec4.png" alt="clients where lastname" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by their lastname and firstname. Notice the case used.SELECT * FROM clients WHERE lastname = 'apple' AND firstname = 'alice';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198713-871f5980-1785-11eb-8416-bd595a70bf6d.png" alt="clients where firstname and lastname" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by an exact match to their birthday.SELECT * FROM clients WHERE birthday = '1984-01-24';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97198969-d9607a80-1785-11eb-8a5a-f754995634f1.png" alt="clients where birthday" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by a range match for the year of their birthday.SELECT * FROM clients WHERE birthday &gt; '1984-01-01' AND birthday &lt; '1985-01-01';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97199744-baaeb380-1786-11eb-829d-5e05d99d4ba5.png" alt="clients where birthday range" /></p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>// Look for a client by their firstname // and a range match for the year of their birthday. Again, notice the case used.SELECT * FROM clients WHERE firstname = 'aLicE'AND birthday &gt; '1984-01-01' AND birthday &lt; '1985-01-01';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97200012-0f522e80-1787-11eb-8aa9-d3c22049dd4b.png" alt="clients where name and birthday range" /></p><p><strong>✅ Step 2g. Digest everything we just did there</strong></p><p>Ok, so let's break that all down. I said earlier when we created the indexes I would explain the options included with some of the indexes.</p><pre lang="SQL"><code>WITH OPTIONS = {'case_sensitive': false, 'normalize': true };</code></pre><p>So what does the <strong>“WITH OPTIONS”</strong> part mean?</p><p>Well, <a href="https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/cql_commands/cqlCreateCustomIndex.html#cqlCreateCustomIndex__cqlCreateCustomIndexOptions">case_sensitive</a> is fairly straightforward. Setting this <strong>false</strong> allows us to match any combination of case for the terms we are querying against, <strong>firstname</strong> or <strong>lastname</strong> fields according to the indexes we created.</p><p>This is why I kept varying the case used in our queries above. You could <strong>NOT</strong> have done does this with a traditional Cassandra query.</p><p>How about <a href="https://docs.datastax.com/en/dse/6.8/cql/cql/cql_reference/cql_commands/cqlCreateCustomIndex.html#cqlCreateCustomIndex__cqlCreateCustomIndexOptions">normalize</a>? Basically, this means that special characters, like vowels with diacritics can be represented by multiple binary representations for the same character, which also makes things easier to match.</p><p>An example would be a row with a column value that contained the character <code>Å (U+212B)</code>.  With <strong>normalize</strong> enabled a query that used the character <code>Å (U+00C5)</code> would find that row. This saves from the need to find all unicode variations for a single character.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE lastname = 'Åskådare';</code></pre><p><em>To be clear, this is not Ascii folding where I might insert code that uses <code>é</code> and a select using <code>e</code>. This is coming as a future feature.</em></p><p>To sum up, we queried against a combination of string and date fields using exact matches, multiple string cases, and date ranges. Just by adding an index on 3 fields we significantly expanded the flexibility of our data model.</p><p>Let's do more.</p><p><strong>✅ Step 2h. Add another index to support a new data model requirement</strong></p><p>Imagine a case where we now have a requirement to find clients based off of their next appointment.</p><p>Prior to <strong>SAI</strong>, if I wanted to accomplish this same thing in Cassandra, I would set up a new table using the <strong>date</strong> as the <strong>partition key</strong>, and I'd probably have the <strong>appointment</strong> slots as a <strong>clustering column</strong>, along with the <strong><code>uniqueid</code></strong> rounding out the primary key.</p><p>Then, I would retrieve the days partition to get a list of the appointments for the day. Now, I have <strong>two tables</strong> that I need to worry about to support that query.</p><p>Let's see what this looks like with <strong>SAI</strong>.</p><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>CREATE CUSTOM INDEX IF NOT EXISTS ON clients(nextappt) USING 'StorageAttachedIndex';</code></pre><p>📘 <strong>Command to execute</strong></p><pre lang="SQL"><code>SELECT * FROM clients WHERE nextappt &gt; '2020-10-20 09:00:00';</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="https://user-images.githubusercontent.com/23346205/97206362-01081080-178f-11eb-8b7d-6b002da6f9fb.png" alt="clients where nextappt" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-iot-sensor-data-model-use-case"> </a>3. IoT sensor data model use case</h2><p>Time to swtich gears to a real IoT data model use case.</p><p>In the following case, an organization recieved a feed of sensor data that always included all of the fields that the sensor kept track of, even if those fields hadn't changed since the last reading.</p><p><strong>All of the data was sent whenever a single field changed values.</strong></p><p>Now, this isn't necessarily something that has to be difficult to deal with, if all of the key fields are the same, <strong>we can easily overwrite redundant data without doing a read-before-write</strong> and all of that non-changing, redundant data will just compact away.</p><p>But, a <strong>problem arises</strong> if we need to <strong>query</strong> based on <strong>something other than the primary key</strong>.</p><p>If this table is instead organized to be physically efficient for querying, then I may not be able to easily upsert the data from the sensor without 1) creating a lot of unnecessary records, or 2) being forced to do a read-before-write to check if a record already exists.</p><p>In this case, the <strong>user was stuck with option 1</strong>, because <strong>it was cheaper to store more data than it was to have the compute resources for all of that extra query power for the 20x read workload that was required just to check to see if a sensor reading was already in the database.</strong></p><p>For this section we will continue by using <a href="SA_Index_Workshop.tar">this Studio notebook</a> in Astra. Please right-click on the link provided and choose <strong>Copy Link Address</strong>. From there, follow the instructions to import into Astra.</p><p>Click on the <strong><code>Studio</code></strong> tab within your Astra console.<img src="https://user-images.githubusercontent.com/23346205/97359835-c3c97e80-1873-11eb-82a7-2d6ce63d04f3.png" alt="astra use studio" /></p><p>This will launch <strong>Studio</strong> in a new tab.</p><p>Click the <strong><code>+</code></strong> icon to import a notebook.<img src="https://user-images.githubusercontent.com/23346205/97360192-3c303f80-1874-11eb-97c1-10d610c93f8c.png" alt="studio import notebooks" /></p><p>Choose <strong><code>IMPORT FROM URL</code></strong>.<img src="https://user-images.githubusercontent.com/23346205/97360504-ae088900-1874-11eb-94ca-1157295169de.png" alt="import from url" /></p><p>Paste in the link address you copied and click <strong><code>Import</code></strong>.<img src="https://user-images.githubusercontent.com/23346205/97360803-0dff2f80-1875-11eb-87a4-eb365d951969.png" alt="import from url with link" /></p><p>From there the notebook will be imported and opened automatically. Navigate down to Section <strong>3. IoT sensor data model use case</strong> to continue on.<img src="https://user-images.githubusercontent.com/23346205/97361093-74844d80-1875-11eb-9d11-ceecc64dd1f7.png" alt="view studio notebook" /></p><!--**✅ Step 3a. Create our `sensordata` table**- This table will create a partition for every hour of every day for each location.- In this case, we have between 1,000 and 10,000 locations, and there are potentially dozens of devices per location.- The **`updated`** **STATIC** column will show the last time that the values in **`payload`** were updated that hour.- As hours go by, we will naturally create a snapshot of the last hour.- This might be undesirable if I didn't know that - I get at least one sensor payload per hour unless a device is offline.📘 **Command to execute**```SQLCREATE TABLE sensordata (    location text,    dayhour timestamp,    device_id text,    device_name text,    updated timestamp STATIC,    payload map<text,text>,    PRIMARY KEY ((location, dayhour), device_id)) WITH CLUSTERING ORDER BY (device_id ASC);```**✅ Step 3b. Create indexes to address query needs outside of our primary key**OK, so this table organizes the data the way we want it to be space efficient, and it gets rid of redundant records by virtue of the physical organziation that it creates on disk. We get the snapshot view that we want each hour, and if most of the values in “payload” don't change over the course an hour, then we avoid both having to do a read before write, and we avoid storing extra copies of that data. Where does **SAI** come into the picture? Well, the trick is that queries against this data use the non-unique **`device_name`** field along with the **`dayhour`** that we're looking for, but we also sometimes need to query by the key in the **`payload`** map. Being able to query with those inputs, and also organize the data as efficiently as we can is nearly impossible without **SAI**. Let's look at the indexes we need to make as well as load some sample data that we can query.📘 **Commands to execute**```SQLCREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(device_name) USING 'StorageAttachedIndex'WITH OPTIONS = {'case_sensitive': false, 'normalize': true };CREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(dayhour) USING 'StorageAttachedIndex';CREATE CUSTOM INDEX IF NOT EXISTS ON sensordata(keys(payload)) USING 'StorageAttachedIndex' WITH OPTIONS = {'case_sensitive': false, 'normalize': true };```_That last **CREATE CUSTOM INDEX** command uses the [keys()](https://docs.datastax.com/en/storage-attached-index/6.8/sai/saiUsing.html#SAIcollectionmapexampleswithkeys,values,andentries) function to index only the map keys in the **payload** map. That lets us **search for entries** with a **specific key name**, which in this case allows us to query for a particular sensor reading._ So, now that we have our table structure, let's load some data and query it.**✅ Step 3c. Insert data**_Note that the UUIDs here are only increasing by one because it's an expedient thing to do when manually generating data, in the real world, don't do that._📘 **Commands to execute**```SQLINSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 01:30:00',{'temp':'freezing!', 'humidity':'low'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB79','device1','2020-10-20 01:31:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB79','device1','2020-10-20 01:32:00',{'temp':'freezing!', 'humidity':'low', 'mood':'full'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB80','device2','2020-10-20 02:30:00',{'speed':'stopped', 'color':'blue'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB81','device2','2020-10-20 03:30:00',{'speed':'slow', 'color':'blue'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 00:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB82','dev1','2020-10-20 00:30:00',{'temp':'hot!', 'humidity':'sticky'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB83','dev2','2020-10-20 01:30:00',{'temp':'warm', 'humidity':'muggy'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB84','dev3','2020-10-20 02:30:00',{'temp':'freezing!', 'humidity':'my beard is growing icicles'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 00:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB85','doohickey','2020-10-20 00:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'rightside up'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 01:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB86','doohickey','2020-10-20 01:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'upside down'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 02:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB87','doohickey','2020-10-20 02:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'forwards'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('GHI','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB85','doohickey','2020-10-20 03:30:00',{'temp':'hot!', 'humidity':'dry', 'orientation':'backwards'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:31:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry again'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:35:00',{'temp':'freezing!', 'humidity':'low', 'mood':'full'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('ABC','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB78','device1','2020-10-20 03:40:00',{'temp':'freezing!', 'humidity':'low', 'mood':'no, still peckish'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB93','dev4','2020-10-20 03:30:00',{'temp':'/tmp', 'speed':'low'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB93','dev4','2020-10-20 03:40:00',{'temp':'/var/lib/tmp', 'speed':'low', 'color':'green'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB94','dev5','2020-10-20 03:45:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});INSERT INTO sensordata(location, dayhour, device_id, device_name, updated, payload)VALUES('DEF','2020-10-20 03:00:00','87C5EFE5-1849-4C0B-BBCD-F4FB84F6FB95','dev6','2020-10-20 03:50:00',{'temp':'freezing!', 'humidity':'low', 'mood':'hungry'});```_It is worth pointing out that doing an **INSERT** on a **Map** column like this will **always replace the full map**. In this case, I know that's OK for my use case because I always get a full input file that has all the sensor readings in it. Sometimes, this isn't what you want, and you'll need to use the **SET** keyword to **set a specific value in the map**._**✅ Step 3d. Execute queries that use device_name, dayhour, and payload map keys using our indexes**📘 **Command to execute**```SQLSELECT * FROM sensordata WHERE device_name='doohickey';```📗 **Expected output**![sensordata where device_name](https://user-images.githubusercontent.com/23346205/97318153-f2c6fc80-1841-11eb-8c77-9aefed902d61.png)📘 **Command to execute**```SQLSELECT * FROM sensordata WHERE device_name = 'device1' AND dayhour = '2020-10-20 01:00:00';```📗 **Expected output**![sensordata where device_name](https://user-images.githubusercontent.com/23346205/97318153-f2c6fc80-1841-11eb-8c77-9aefed902d61.png)-->
SUCCESS SAVING README for datastaxdevs-workshop-storage-attached-indexes
Getting astra.json for datastaxdevs/workshop-k8ssandra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="k8ssandra-workshop"> </a>K8ssandra Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workshop-practice"> </a>Workshop Practice</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="resources-and-next-steps"> </a>Resources and next steps</h2>
HTML FOR datastaxdevs-workshop-k8ssandra<h1><a class="anchor" aria-hidden="true" id="k8ssandra-workshop"> </a>K8ssandra Workshop</h1><p>In this repository, you'll find everything for the Cassandra Kubernetes Workshop delivered by DataStax Developers!</p><p>How to do the workshop and learn the new skills? Very easy, just three steps!</p><ol><li>Watch <a href="https://youtu.be/GddqfK8JubA">the workshop</a> on youtube</li><li>Do the <a href="https://github.com/datastaxdevs/k8ssandra-workshop/wiki">practice steps</a></li><li>Ask you questions (<a href="https://bit.ly/cassandra-workshop">chat</a> or <a href="https://community.datastax.com">forum</a>)</li></ol><p>Done! That's it, you are amazing!</p><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>Table of content</h2><ul><li><a href="https://youtu.be/GddqfK8JubA">Workshop on YouTube</a></li><li><a href="https://github.com/datastaxdevs/k8ssandra-workshop/raw/main/K8ssandra%20Workshop%20Feb%202021.pdf">Presentation</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com">Q&amp;A: community.datastax.com</a></li></ul><h2><a class="anchor" aria-hidden="true" id="workshop-practice"> </a>Workshop Practice</h2><p>Instructions has been moved to the wiki to ease the progression.</p><p align="left"><a href="https://github.com/datastaxdevs/k8ssandra-workshop/wiki"> <img src="https://dabuttonfactory.com/button.png?t=Open+labs+in+wiki&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798" /></a></p><h2><a class="anchor" aria-hidden="true" id="resources-and-next-steps"> </a>Resources and next steps</h2><ul><li>For further learning from our team, please checkout <a href="https://datastax.com/dev">datastax.com/dev</a> where we keep many resources and hands on labs to help you improve your skill set.</li><li>If you are looking to get certified on Cassandra, please visit <a href="https://datastax.com/dev/certifications">datastax.com/dev/certifications</a>.</li><li>To get involved in the discussion around this project and others, please check out <a href="https://community.datastax.com">community.datastax.com</a>.</li><li>To learn more about K8ssandra, please checkout our website at <a href="https://k8ssandra.io">k8ssandra.io</a> and our project github at <a href="https://github.com/k8ssandra/k8ssandra">github.com</a>.</li><li>Liked the workshop? Subscribe to the next one at <a href="https://datastax.com/workshops">datastax.com/workshops</a>!</li></ul>
SUCCESS SAVING README for datastaxdevs-workshop-k8ssandra
Getting astra.json for datastaxdevs/workshop-introduction-to-nosql at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="introduction-to-nosql-databases"> </a>🎓🔥 Introduction to NoSQL Databases</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="participation-badge-homework"> </a>Participation Badge / Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="practice"> </a>Practice</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1a-register-a-free-account-on-astra"> </a>✅ 1a. Register a free account on Astra</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-tabular-databases"> </a>2. Tabular databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2a-describe-your-keyspace"> </a>✅ 2a. Describe your Keyspace</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="select-your-db"> </a>Select your db</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="go-to-the-cql-console"> </a>Go to the Cql Console</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="enter-the-describe-command"> </a>Enter the describe command</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2b-create-table"> </a>✅ 2b. Create table</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="table-creation"> </a>Table creation</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="check"> </a>Check</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2c-working-with-data"> </a>✅ 2c. Working with DATA</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="insert-some-entries-into-the-table"> </a>Insert some entries into the table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="read-values"> </a>Read values</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="read-by-primary-key"> </a>Read by primary key</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2d-working-with-partitions"> </a>✅ 2d. Working with PARTITIONS</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="try-a-query-not-compatible-with-the-data-model"> </a>Try a query not compatible with the data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="retrieve-data-from-a-whole-partition"> </a>Retrieve data from a whole partition</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-document-databases"> </a>3. Document Databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-cassandra-native-json-support"> </a>✅ 3a. Cassandra native JSON support</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="json-syntax-for-insertions"> </a>JSON syntax for insertions</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="json-output-when-querying"> </a>JSON output when querying</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3b-create-a-token-and-open-swagger"> </a>✅ 3b. Create a token and open Swagger</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="token-creation"> </a>Token creation</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="swagger-ui"> </a>Swagger UI</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3c-create-a-new-empty-collection"> </a>✅ 3c. Create a new empty collection</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3d-create-new-documents"> </a>✅ 3d. Create new documents</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="add-a-first-document"> </a>Add a first document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="add-another-document"> </a>Add another document</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3e-retrieve-a-document-by-its-id"> </a>✅ 3e. Retrieve a document by its ID</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3f-find-all-documents-in-a-collection"> </a>✅ 3f. Find all documents in a collection</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3g-search-document-with-a-where-clause"> </a>✅ 3g. Search document with a &quot;where&quot; clause</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-key-value-databases"> </a>4. Key/Value Databases</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4a-create-a-table-for-key-value"> </a>✅ 4a. Create a table for Key/Value</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4b-populate-the-table"> </a>✅ 4b. Populate the table</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4c-update-a-value"> </a>✅ 4c. Update a value</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="alternative-update-syntax"> </a>Alternative update syntax</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-graph-databases"> </a>5. Graph Databases</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2>
HTML FOR datastaxdevs-workshop-introduction-to-nosql<h2><a class="anchor" aria-hidden="true" id="introduction-to-nosql-databases"> </a>🎓🔥 Introduction to NoSQL Databases</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><img src="images/intro-to-nosql-cover.png?raw=true" alt="image" /></p><p>These instructions will lead you step by step for the workshop on introducing the NoSQL Databases technologies.</p><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="#">Workshop video</a></li><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="participation-badge-homework"> </a>Participation Badge / Homework</h2><img src="images/intro-to-nosql-badge.png?raw=true" width="200" align="right" /><p>To get the verified badge, you have to complete the following steps:</p><ol><li>Complete the practice steps of this workshop as explained below. Steps 1-4 (Astra account + tabular/document/key-value databases) are mandatory, step 5 (graph database) is optional. Take a screenshot of completion of the last step for sections 2, 3 and 4 (either a CQL command output or a response in the Swagger UI). <em>NOTE: When taking screenshots ensure NOT to copy your Astra DB secrets!</em></li><li>Submit the practice <a href="https://dtsx.io/nosql-ws-hw">here</a>, answering a few &quot;theory&quot; questions and also attaching the screenshots.</li></ol><!-- x. Complete [try-it-out scenario](https://www.datastax.com/try-it-out) and make a screenshot of the "scenario completed" screen --><h2><a class="anchor" aria-hidden="true" id="practice"> </a>Practice</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and create database</a></li><li><a href="#2-tabular-databases">Tabular Databases</a></li><li><a href="#3-document-databases">Document Databases</a></li><li><a href="#4-keyvalue-databases">Key-Value Databases</a></li><li><a href="#5-graph-databases">Graph Databases</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required,a monthly free credit to use, covering about 20M reads/writes and 80GB storage (sufficient to run small production workloads), all for FREE.</p><h3><a class="anchor" aria-hidden="true" id="1a-register-a-free-account-on-astra"> </a>✅ 1a. Register a free account on Astra</h3><p>Click the button below to login or register on DataStax Astra DB. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><a href="https://astra.dev/5-18"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/img/create_astra_db.png?raw=true" /></a></p><p><strong>Use the following values when creating the database</strong> (this makes your life easier further on):</p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>keyspace</strong></td><td><code>nosql1</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td>Stick to GCP and then pick an &quot;unlocked&quot; region to start immediately</td></tr></tbody></table><p>More info on account creation <a href="https://awesome-astra.github.io/docs/pages/astra/create-account/">here</a>.</p><p>You will see your new database as <code>pending</code> or <code>initializing</code> on the Dashboard.The status will then change to <code>Active</code> when the database is ready: this will only take 2-3 minutes.At that point you will also receive a confirmation email.</p><h2><a class="anchor" aria-hidden="true" id="2-tabular-databases"> </a>2. Tabular databases</h2><p>In a tabular database we will store ... tables! The Astra DB Service is built on Apache Cassandra™, which is tabular. Let's start with this.</p><blockquote><p><strong>Tabular databases</strong> organize data in rows and columns, but with a twist from the traditional RDBMS. Also known as wide-column stores or partitioned row stores, they provide the option to organize related rows in partitions that are stored together on the same replicas to allow fast queries. Unlike RDBMSs, the tabular format is not necessarily strict. For example, Apache Cassandra™ does not require all rows to contain values for all columns in the table. Like Key/Value and Document databases, Tabular databases use hashing to retrieve rows from the table. Examples include: Cassandra, HBase, and Google Bigtable.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="2a-describe-your-keyspace"> </a>✅ 2a. Describe your Keyspace</h3><p>At database creation you provided a keyspace, a logical grouping for tables.Let's visualize it.In Astra DB go to CQL Console to enter the following commands</p><h4><a class="anchor" aria-hidden="true" id="select-your-db"> </a>Select your db</h4><p><img src="images/01.png?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="go-to-the-cql-console"> </a>Go to the Cql Console</h4><p><img src="images/02.png?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="enter-the-describe-command"> </a>Enter the describe command</h4><p>... and press Enter:</p><pre lang="sql"><code>DESCRIBE KEYSPACES;</code></pre><p><img src="images/03.png?raw=true" alt="image" /></p><h3><a class="anchor" aria-hidden="true" id="2b-create-table"> </a>✅ 2b. Create table</h3><h4><a class="anchor" aria-hidden="true" id="table-creation"> </a>Table creation</h4><p>Execute the following Cassandra Query Language commands</p><pre lang="sql"><code>USE nosql1;CREATE TABLE IF NOT EXISTS accounts_by_user (  user_id         UUID,  account_id      UUID,  account_type    TEXT,  account_balance DECIMAL,  user_name       TEXT      STATIC,  user_email      TEXT      STATIC,  PRIMARY KEY ( (user_id), account_id))   WITH CLUSTERING ORDER BY (account_id ASC);</code></pre><h4><a class="anchor" aria-hidden="true" id="check"> </a>Check</h4><p>Check keyspace contents and structure:</p><pre lang="sql"><code>DESCRIBE KEYSPACE nosql1;</code></pre><p><em>👁️ Expected output</em></p><pre><code>CREATE KEYSPACE nosql1 WITH replication = {'class': 'NetworkTopologyStrategy', 'eu-central-1': '3'}  AND durable_writes = true;CREATE TABLE nosql1.accounts_by_user (    user_id uuid,    account_id uuid,    account_balance decimal,    account_type text,    user_email text static,    user_name text static,    PRIMARY KEY (user_id, account_id)) WITH CLUSTERING ORDER BY (account_id ASC)    AND additional_write_policy = '99PERCENTILE'    AND bloom_filter_fp_chance = 0.01    AND caching = {'keys': 'ALL', 'rows_per_partition': 'NONE'}    AND comment = ''    AND compaction = {'class': 'org.apache.cassandra.db.compaction.UnifiedCompactionStrategy'}    AND compression = {'chunk_length_in_kb': '64', 'class': 'org.apache.cassandra.io.compress.LZ4Compressor'}    AND crc_check_chance = 1.0    AND default_time_to_live = 0    AND gc_grace_seconds = 864000    AND max_index_interval = 2048    AND memtable_flush_period_in_ms = 0    AND min_index_interval = 128    AND read_repair = 'BLOCKING'    AND speculative_retry = '99PERCENTILE';</code></pre><h3><a class="anchor" aria-hidden="true" id="2c-working-with-data"> </a>✅ 2c. Working with DATA</h3><h4><a class="anchor" aria-hidden="true" id="insert-some-entries-into-the-table"> </a>Insert some entries into the table</h4><pre lang="sql"><code>INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type, user_email, user_name)VALUES(    1cafb6a4-396c-4da1-8180-83531b6a41e3,    811b56c3-cead-40d9-9a3d-e230dcd64f2f,    1500,    'Savings',    'alice@example.org',    'Alice');INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type)VALUES(    1cafb6a4-396c-4da1-8180-83531b6a41e3,    83428a85-5c8f-4398-8019-918d6e1d3a93,    2500,    'Checking');INSERT INTO accounts_by_user(user_id, account_id, account_balance, account_type, user_email, user_name)VALUES(    0d2b2319-9c0b-4ecb-8953-98687f6a99ce,    81def5e2-84f4-4885-a920-1c14d2be3c20,    1000,    'Checking',    'bob@example.org',    'Bob');</code></pre><h4><a class="anchor" aria-hidden="true" id="read-values"> </a>Read values</h4><pre lang="sql"><code>SELECT * FROM accounts_by_user;</code></pre><blockquote><p>Such a full-table query is strongly discouraged in most distributed databasesas it involves contacting many nodes to assemble the whole result dataset:here we are using it for learning purposes, not in production and on a tablewith very few rows!</p></blockquote><p><em>👁️ Expected output</em></p><pre><code> user_id                              | account_id                           | user_email        | user_name | account_balance | account_type--------------------------------------+--------------------------------------+-------------------+-----------+-----------------+-------------- 0d2b2319-9c0b-4ecb-8953-98687f6a99ce | 81def5e2-84f4-4885-a920-1c14d2be3c20 |   bob@example.org |       Bob |            1000 |     Checking 1cafb6a4-396c-4da1-8180-83531b6a41e3 | 811b56c3-cead-40d9-9a3d-e230dcd64f2f | alice@example.org |     Alice |            1500 |      Savings 1cafb6a4-396c-4da1-8180-83531b6a41e3 | 83428a85-5c8f-4398-8019-918d6e1d3a93 | alice@example.org |     Alice |            2500 |     Checking(3 rows)</code></pre><blockquote><p>Notice that all three rows are &quot;filled with data&quot;, despite the second of the insertions above skipping the <code>user_email</code> and <code>user_name</code> columns:this is because these are <strong>static columns</strong> (i.e. associated to the whole partition) and their value had been written already in the first insertion.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="read-by-primary-key"> </a>Read by primary key</h4><pre lang="sql"><code>SELECT user_email, account_type, account_balance  FROM accounts_by_user  WHERE user_id=0d2b2319-9c0b-4ecb-8953-98687f6a99ce    AND account_id=81def5e2-84f4-4885-a920-1c14d2be3c20;</code></pre><p><em>👁️ Expected output</em></p><pre><code> user_email      | account_type | account_balance-----------------+--------------+----------------- bob@example.org |     Checking |            1000(1 rows)</code></pre><h3><a class="anchor" aria-hidden="true" id="2d-working-with-partitions"> </a>✅ 2d. Working with PARTITIONS</h3><p>But data can be grouped, we stored together what should be retrieved together.</p><h4><a class="anchor" aria-hidden="true" id="try-a-query-not-compatible-with-the-data-model"> </a>Try a query not compatible with the data model</h4><details><summary>(Optional: click to expand)</summary><pre><code>SELECT account_id, account_type, account_balance   FROM accounts_by_user   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20;</code></pre><!-- ```InvalidRequest: Error from server: code=2200 [Invalid query] message="Cannot execute this query as it might involve data filtering and thus may have unpredictable performance. If you want to execute this query despite the performance unpredictability, use ALLOW FILTERING"``` --><p><strong><code>Yes, we know</code></strong>, and now let's see why.</p><pre><code>TRACING ON;SELECT account_id, account_type, account_balance   FROM accounts_by_user   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20   ALLOW FILTERING;TRACING OFF;</code></pre><blockquote><p><em>Note</em>: <code>ALLOW FILTERING</code> is almost never to be used in production, we use it here to see what happens!</p></blockquote><p><em>👁️ Output</em></p><pre><code> account_id                           | account_type | account_balance--------------------------------------+--------------+----------------- 81def5e2-84f4-4885-a920-1c14d2be3c20 |     Checking |            1000(1 rows)</code></pre><p>But also (<em>&quot;Anatomy of a full-cluster scan&quot;</em>):</p><pre><code>Tracing session: e97b98b0-d146-11ec-a4e5-19251c2b96e1 activity                                                                                                                   | timestamp                  | source      | source_elapsed | client----------------------------------------------------------------------------------------------------------------------------+----------------------------+-------------+----------------+-----------------------------------------                                                                                                         Execute CQL3 query | 2022-05-11 16:25:03.675000 | 10.0.63.218 |              0 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b Parsing SELECT[....]_by_user\n   WHERE account_id=81def5e2-84f4-4885-a920-1c14d2be3c20\n   ALLOW FILTERING; [CoreThread-0] | 2022-05-11 16:25:03.676000 | 10.0.63.218 |            229 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                         Preparing statement [CoreThread-0] | 2022-05-11 16:25:03.676000 | 10.0.63.218 |            445 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                Computing ranges to query... [CoreThread-0] | 2022-05-11 16:25:03.681000 | 10.0.63.218 |           5970 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.63.218 [CoreThread-9] | 2022-05-11 16:25:03.682000 | 10.0.31.189 |             -- | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                Submitting range requests on 25 ranges with a concurrency of 1 (0.0 rows per range expected) [CoreThread-0] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6197 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Submitted 1 concurrent range requests [CoreThread-0] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6312 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                             Sending READS.RANGE_READ message to /10.0.32.75, size=227 bytes [CoreThread-9] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6436 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.31.189, size=227 bytes [CoreThread-8] | 2022-05-11 16:25:03.682000 | 10.0.63.218 |           6436 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.63.218 [CoreThread-4] | 2022-05-11 16:25:03.683000 |  10.0.32.75 |             -- | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b             Executing seq scan across 0 sstables for (min(-9223372036854775808), min(-9223372036854775808)] [CoreThread-4] | 2022-05-11 16:25:03.683000 |  10.0.32.75 |            444 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b             Executing seq scan across 0 sstables for (min(-9223372036854775808), min(-9223372036854775808)] [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            356 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Read 1 live rows and 0 tombstone ones [CoreThread-4] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            789 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Read 1 live rows and 0 tombstone ones [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            731 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                          Enqueuing READS.RANGE_READ response to /10.0.32.75 [CoreThread-4] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            897 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         Enqueuing READS.RANGE_READ response to /10.0.31.189 [CoreThread-9] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |            731 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.63.218, size=212 bytes [CoreThread-7] | 2022-05-11 16:25:03.684000 |  10.0.32.75 |            954 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                            Sending READS.RANGE_READ message to /10.0.63.218, size=212 bytes [CoreThread-1] | 2022-05-11 16:25:03.684000 | 10.0.31.189 |           1098 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                          READS.RANGE_READ message received from /10.0.32.75 [CoreThread-9] | 2022-05-11 16:25:03.685000 | 10.0.63.218 |           9626 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                         READS.RANGE_READ message received from /10.0.31.189 [CoreThread-1] | 2022-05-11 16:25:03.702000 | 10.0.63.218 |          27526 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                        Processing response from /10.0.32.75 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181075 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                       Processing response from /10.0.31.189 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181193 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7bDidn't get enough response rows; actual rows per range: 0.04; remaining rows: 99, new concurrent requests: 1 [CoreThread-0] | 2022-05-11 16:25:03.856000 | 10.0.63.218 |         181384 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b                                                                                                           Request complete | 2022-05-11 16:25:03.856560 | 10.0.63.218 |         181560 | 2898:d2d9:30d9:4a4f:acec:3e3a:3a76:4a7b</code></pre></details><h4><a class="anchor" aria-hidden="true" id="retrieve-data-from-a-whole-partition"> </a>Retrieve data from a whole partition</h4><pre lang="sql"><code>SELECT account_id, account_type, account_balance  FROM accounts_by_user  WHERE user_id=1cafb6a4-396c-4da1-8180-83531b6a41e3;</code></pre><p><em>👁️ Expected output</em></p><pre><code> account_id                           | account_type | account_balance--------------------------------------+--------------+----------------- 811b56c3-cead-40d9-9a3d-e230dcd64f2f |      Savings |            1500 83428a85-5c8f-4398-8019-918d6e1d3a93 |     Checking |            2500(2 rows)</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-document-databases"> </a>3. Document Databases</h2><p>Let's do some hands-on with document database queries.</p><blockquote><p><strong>Document databases</strong> expand on the basic idea of key-value stores where “documents” are more complex, in that they contain data and each document is assigned a unique key, which is used to retrieve the document. These are designed for storing, retrieving, and managing document-oriented information, often stored as JSON. Since the Document database can inspect the document contents, the database can perform some additional retrieval processing. Unlike RDBMSs which require a static schema, Document databases have a flexible schema as defined by the document contents. Examples include: MongoDB and CouchDB. Note that some RDBMS and NoSQL databases outside of pure document stores are able to store and query JSON documents, including Cassandra.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="3a-cassandra-native-json-support"> </a>✅ 3a. Cassandra native JSON support</h3><p>It is not widely known, but Cassandra accepts JSON queries out of the box. You can find more information <a href="https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useInsertJSON.html">here</a>.</p><details><summary>Show native JSON support</summary><h4><a class="anchor" aria-hidden="true" id="json-syntax-for-insertions"> </a>JSON syntax for insertions</h4><p>Insert data into Cassandra with JSON syntax:</p><pre lang="sql"><code>INSERT INTO accounts_by_user JSON '{  &quot;user_id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,  &quot;account_id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,  &quot;user_email&quot;: &quot;alice@example.org&quot;,  &quot;user_name&quot;: &quot;Alice&quot;,  &quot;account_type&quot;: &quot;Savings&quot;,  &quot;account_balance&quot;: &quot;8500&quot;}' ;</code></pre><blockquote><p>Warning: missing fields in the provided JSON will entail explicit insertion of corresponding <code>null</code> values.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="json-output-when-querying"> </a>JSON output when querying</h4><p>In the same way you can retrieve JSON out of Cassandra (<a href="https://docs.datastax.com/en/cql-oss/3.3/cql/cql_using/useQueryJSON.html">more info here</a>).</p><pre lang="sql"><code>SELECT JSON account_type, account_balance  FROM accounts_by_user  WHERE user_id=1cafb6a4-396c-4da1-8180-83531b6a41e3;</code></pre><p><em>👁️ Output</em></p><pre><code> [json]-------------------------------------------------------  {&quot;account_type&quot;: &quot;Savings&quot;, &quot;account_balance&quot;: 8500} {&quot;account_type&quot;: &quot;Checking&quot;, &quot;account_balance&quot;: 2500}(2 rows)</code></pre><p>This JSON support is but a wrapper around access to the same fixed-schematables seen in the previous section (&quot;Tabular&quot;).</p></details><h3><a class="anchor" aria-hidden="true" id="3b-create-a-token-and-open-swagger"> </a>✅ 3b. Create a token and open Swagger</h3><p>We now turn to using Astra DB's Document API.</p><h4><a class="anchor" aria-hidden="true" id="token-creation"> </a>Token creation</h4><p>To do so, first you need to create an Astra DB token, which willbe used for authentication to your database.</p><p><strong>Create a token with &quot;Database Administrator&quot; privileges followingthe instructions here: <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create an Astra DB token</a>.</strong>(See also <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">the official docs on tokens</a>.)</p><p>Keep the &quot;token&quot; ready to use (it is the long string starting with <code>AstraCS:.....</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="swagger-ui"> </a>Swagger UI</h4><p>The Document API can be easily accessed through a Swagger UI:go the &quot;Connect&quot; page, stay in the &quot;Document API&quot; subpage, and locate the URL under the &quot;Launching Swagger UI&quot; heading:</p><p><img src="images/connect.png?raw=true" alt="image" /></p><p>Locate the &quot;documents&quot; section in the Swagger UI. You are now ready to fire requests to the Document API.</p><p><img src="images/05.png?raw=true" alt="image" /></p><h3><a class="anchor" aria-hidden="true" id="3c-create-a-new-empty-collection"> </a>✅ 3c. Create a new empty collection</h3><p><img src="images/swagger/swagger_3c.png" alt="Swagger 3c" /></p><ul><li>Access <em><strong>Create a new empty collection in a namespace</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>body</code> use</li></ul><pre lang="json"><code>{ &quot;name&quot;: &quot;users&quot; }</code></pre><ul><li>Click the <code>Execute</code> button</li></ul><p>You will get an <code>HTTP 201 - Created</code> return code.</p><blockquote><p><em>Note:</em> the response you just got from actually calling the API endpointis given under the &quot;Server response&quot; heading. Do not confuse it withthe &quot;Responses&quot; found immediately after, which are simply a documentationof all possible response codes (and the return object they quote are staticexample JSONs).</p></blockquote><details><summary>Click to show a screenshot</summary><p><img src="images/swagger_responses_annotated.png?raw=true" alt="image" /></p></details><h3><a class="anchor" aria-hidden="true" id="3d-create-new-documents"> </a>✅ 3d. Create new documents</h3><h4><a class="anchor" aria-hidden="true" id="add-a-first-document"> </a>Add a first document</h4><p><img src="images/swagger/swagger_3d.png" alt="Swagger 3d" /></p><ul><li>Access <em><strong>Create a new document</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill with Header <code>X-Cassandra-Token</code> with <code>AstraCS:...[your_token]...</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>body</code> use</li></ul><pre lang="json"><code>{    &quot;accounts&quot;: [        {            &quot;balance&quot;: &quot;1000&quot;,            &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,            &quot;type&quot;: &quot;Checking&quot;        }    ],    &quot;email&quot;: &quot;bob@example.org&quot;,    &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,    &quot;name&quot;: &quot;Bob&quot;}</code></pre><ul><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output (your <code>documentId</code> will be different)</em></p><pre lang="json"><code>{  &quot;documentId&quot;: &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;}</code></pre><h4><a class="anchor" aria-hidden="true" id="add-another-document"> </a>Add another document</h4><p>Repeat with the following body, which has <em>a different structure</em>:</p><pre lang="json"><code>{    &quot;accounts&quot;: [        {            &quot;balance&quot;: &quot;2500&quot;,            &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,            &quot;type&quot;: &quot;Checking&quot;        },        {            &quot;balance&quot;: &quot;1500&quot;,            &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,            &quot;type&quot;: &quot;Savings&quot;        }    ],    &quot;email&quot;: &quot;alice@example.org&quot;,    &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,    &quot;name&quot;: &quot;Alice&quot;}</code></pre><p>As before, the document will automatically be given an internal unique <code>documentId</code>.</p><h3><a class="anchor" aria-hidden="true" id="3e-retrieve-a-document-by-its-id"> </a>✅ 3e. Retrieve a document by its ID</h3><p><img src="images/swagger/swagger_3eB.png" alt="Swagger 3e" /></p><ul><li>Access <em><strong>Get a document</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>document-id</code> use Bob's <code>documentId</code> (e.g. <code>137d8609-87f6-4cb7-9506-e52f338e79e9</code> in the above sample output)</li><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output</em></p><pre lang="json"><code>{  &quot;documentId&quot;: &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;,  &quot;data&quot;: {    &quot;accounts&quot;: [      {        &quot;balance&quot;: &quot;1000&quot;,        &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,        &quot;type&quot;: &quot;Checking&quot;      }    ],    &quot;email&quot;: &quot;bob@example.org&quot;,    &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,    &quot;name&quot;: &quot;Bob&quot;  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="3f-find-all-documents-in-a-collection"> </a>✅ 3f. Find all documents in a collection</h3><p><img src="images/swagger/swagger_3fB.png" alt="Swagger 3f" /></p><ul><li>Access <em><strong>Search documents in a collection</strong></em></li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li></ul><p>Leave other fields blank (in particular, every query is paged in Cassandra).</p><ul><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output (take note of the <code>documentId</code>s of your output for later)</em></p><pre lang="json"><code>{  &quot;data&quot;: {    &quot;6d0aafd9-3c2c-461f-92c6-08322eaef5da&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;2500&quot;,          &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,          &quot;type&quot;: &quot;Checking&quot;        },        {          &quot;balance&quot;: &quot;1500&quot;,          &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,          &quot;type&quot;: &quot;Savings&quot;        }      ],      &quot;email&quot;: &quot;alice@example.org&quot;,      &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,      &quot;name&quot;: &quot;Alice&quot;    },    &quot;137d8609-87f6-4cb7-9506-e52f338e79e9&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;1000&quot;,          &quot;id&quot;: &quot;81def5e2-84f4-4885-a920-1c14d2be3c20&quot;,          &quot;type&quot;: &quot;Checking&quot;        }      ],      &quot;email&quot;: &quot;bob@example.org&quot;,      &quot;id&quot;: &quot;0d2b2319-9c0b-4ecb-8953-98687f6a99ce&quot;,      &quot;name&quot;: &quot;Bob&quot;    }  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="3g-search-document-with-a-where-clause"> </a>✅ 3g. Search document with a &quot;where&quot; clause</h3><p>The endpoint you just used can support <a href="https://docs.datastax.com/en/astra/docs/read-documents.html#_retrieving_a_document_using_a_where_clause"><code>where</code> clauses</a> as well,expressed as JSON. You don't need to navigate away from it do try thefollowing:</p><p><img src="images/swagger/swagger_3g.png" alt="Swagger 3g" /></p><ul><li>Access <em><strong>Search documents in a collection</strong></em> (you should be there already)</li><li>Click <code>Try it out</code> button</li><li>Fill Header <code>X-Cassandra-Token</code> with <code>&lt;your_token&gt;</code></li><li>For <code>namespace-id</code> use <code>nosql1</code></li><li>For <code>collection-id</code> use <code>users</code></li><li>For <code>where</code> use <code>{&quot;name&quot;: {&quot;$eq&quot;: &quot;Alice&quot;}}</code></li><li>Click the <code>Execute</code> button</li></ul><p><em>👁️ Expected output</em></p><pre lang="json"><code>{  &quot;data&quot;: {    &quot;6d0aafd9-3c2c-461f-92c6-08322eaef5da&quot;: {      &quot;accounts&quot;: [        {          &quot;balance&quot;: &quot;2500&quot;,          &quot;id&quot;: &quot;83428a85-5c8f-4398-8019-918d6e1d3a93&quot;,          &quot;type&quot;: &quot;Checking&quot;        },        {          &quot;balance&quot;: &quot;1500&quot;,          &quot;id&quot;: &quot;811b56c3-cead-40d9-9a3d-e230dcd64f2f&quot;,          &quot;type&quot;: &quot;Savings&quot;        }      ],      &quot;email&quot;: &quot;alice@example.org&quot;,      &quot;id&quot;: &quot;1cafb6a4-396c-4da1-8180-83531b6a41e3&quot;,      &quot;name&quot;: &quot;Alice&quot;    }  }}</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-key-value-databases"> </a>4. Key/Value Databases</h2><blockquote><p><strong>Key/Value databases</strong> are some of the simplest and yet powerful as all of the data within consists of an indexed key and a value. Key-value databases use a hashing mechanism, so that that given a key, the database can quickly retrieve the associated value. Hashing mechanisms provide constant time access, which means they maintain high performance even at large scale. The keys can be any type of object, but are typically a string. The values are generally opaque blobs (i.e. a sequence of bytes that the database does not interpret). Examples include: Redis, Amazon DynamoDB, Riak, and Oracle NoSQL database. Some tabular NoSQL databases, like Cassandra, can also service key/value needs.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="4a-create-a-table-for-key-value"> </a>✅ 4a. Create a table for Key/Value</h3><p>Go to the CQL Console again and issue the following commandsto create a new, simple table with just two columns:</p><pre lang="sql"><code>USE nosql1;CREATE TABLE users_kv (  key   TEXT PRIMARY KEY,  value TEXT);</code></pre><h3><a class="anchor" aria-hidden="true" id="4b-populate-the-table"> </a>✅ 4b. Populate the table</h3><p>Insert into the table all the following entries.Note that all inserted values, regardless of their &quot;true&quot; data type,have been coerced into strings according to the table schema.Also note how the keys are structured and how some entries reference other,effectively creating a set of interconnected pieces of information on the users:</p><pre lang="sql"><code>INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:name',       'Alice');INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:email',      'alice@example.org');INSERT INTO users_kv (key, value) VALUES ('user:1cafb6a4-396c-4da1-8180-83531b6a41e3:accounts',   '{83428a85-5c8f-4398-8019-918d6e1d3a93, 811b56c3-cead-40d9-9a3d-e230dcd64f2f}');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:name',       'Bob');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:email',      'bob@example.org');INSERT INTO users_kv (key, value) VALUES ('user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:accounts',   '{81def5e2-84f4-4885-a920-1c14d2be3c20}');INSERT INTO users_kv (key, value) VALUES ('account:83428a85-5c8f-4398-8019-918d6e1d3a93:type',    'Checking');INSERT INTO users_kv (key, value) VALUES ('account:83428a85-5c8f-4398-8019-918d6e1d3a93:balance', '2500');INSERT INTO users_kv (key, value) VALUES ('account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:type',    'Savings');INSERT INTO users_kv (key, value) VALUES ('account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:balance', '1500');INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:type',    'Checking');INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance', '1000');</code></pre><h3><a class="anchor" aria-hidden="true" id="4c-update-a-value"> </a>✅ 4c. Update a value</h3><p>You can imagine an application &quot;navigating the keys&quot; (e.g, from an user to an account) for instancewhen it must update a balance. The actual update would look like:</p><pre lang="sql"><code>INSERT INTO users_kv (key, value) VALUES ('account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance', '9000');</code></pre><p>Let's check:</p><pre lang="sql"><code>SELECT * FROM users_kv WHERE key = 'account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance';</code></pre><p><em>👁️ Expected output</em></p><pre><code> key                                                  | value------------------------------------------------------+------- account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance |  9000(1 rows)</code></pre><h4><a class="anchor" aria-hidden="true" id="alternative-update-syntax"> </a>Alternative update syntax</h4><p>The same result is obtained with</p><pre lang="sql"><code>UPDATE users_kv SET value = '-500' WHERE key = 'account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance';</code></pre><p>indeed, in most key-value data stores, inserting and updating are one and the same operationsince the main goal is usually the highest performance (hence, row-existence checks are skipped altogether).</p><p>Thus, writing entries with the key of a pre-existing entry will simply overwrite the less recent values,enabling a very efficient and simple deduplication strategy.</p><p>Check once more what's in the table:</p><pre lang="sql"><code>SELECT * FROM users_kv ;</code></pre><p><em>👁️ Expected output</em></p><pre><code> key                                                  | value------------------------------------------------------+------------------------------------------------------------------------------ account:81def5e2-84f4-4885-a920-1c14d2be3c20:balance |                                                                         -500   user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:accounts |                                       {81def5e2-84f4-4885-a920-1c14d2be3c20} account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:balance |                                                                         1500   user:1cafb6a4-396c-4da1-8180-83531b6a41e3:accounts | {83428a85-5c8f-4398-8019-918d6e1d3a93, 811b56c3-cead-40d9-9a3d-e230dcd64f2f}      user:1cafb6a4-396c-4da1-8180-83531b6a41e3:email |                                                            alice@example.org       user:1cafb6a4-396c-4da1-8180-83531b6a41e3:name |                                                                        Alice       user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:name |                                                                          Bob      user:0d2b2319-9c0b-4ecb-8953-98687f6a99ce:email |                                                              bob@example.org    account:83428a85-5c8f-4398-8019-918d6e1d3a93:type |                                                                     Checking    account:811b56c3-cead-40d9-9a3d-e230dcd64f2f:type |                                                                      Savings    account:81def5e2-84f4-4885-a920-1c14d2be3c20:type |                                                                     Checking account:83428a85-5c8f-4398-8019-918d6e1d3a93:balance |                                                                         2500(12 rows)</code></pre><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-graph-databases"> </a>5. Graph Databases</h2><blockquote><p><strong>Graph databases</strong> store their data using a graph metaphor to exploit the relationships between data. Nodes in the graph represent data items, and edges represent the relationships between the data items. Graph databases are designed for highly complex and connected data, which outpaces the relationship and JOIN capabilities of an RDBMS. Graph databases are often exceptionally good at finding commonalities and anomalies among large data sets. Examples of Graph databases include DataStax Graph, Neo4J, JanusGraph, and Amazon Neptune.</p></blockquote><p>Astra DB does not contain yet a way to implement Graph Databases use cases. But at Datastax we do have a product called <a href="https://www.datastax.com/products/datastax-graph">DataStax Graph</a> that you can use for free when not in production.</p><p>For graph databases, the presenter will show a demo based on the example in the slides.</p><p>The hands-on practice for you is different. But since it cannot be done in the browser usingAstra DB like the rest, it is kept separate and not included in today's curriculum.</p><p>🔥 Yet, you are strongly encouraged to try it at your own pace, on your own computer,by following the instructions given here: <a href="graph_databases.md">Graph Databases Practice</a>. 🔥</p><blockquote><p>Try it out, it's super cool!</p></blockquote><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>THE END</h2><p>Congratulations! You made it to the END.</p><p>See you next time!</p><p><a href="#table-of-content">🏠 Back to Table of Contents</a></p>
SUCCESS SAVING README for datastaxdevs-workshop-introduction-to-nosql
Getting astra.json for datastaxdevs/netlify-astra-example at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-cassandra"> </a>JAMStack + Netlify + Astra + Cassandra 📒</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-jamstack-netlify-astra-cassandra"> </a>Running JAMStack + Netlify + Astra + Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started"> </a>Getting Started</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-access-your-github-repository"> </a>3. Access YOUR GitHub repository</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-launch-gitpod-ide"> </a>4. Launch GitPod IDE</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-install-the-netlify-cli-command-line-interface"> </a>5. Install the Netlify CLI (Command Line Interface)</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="6-generate-application-token-to-securely-connect-to-the-database"> </a>6. Generate application token to securely connect to the database</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="7-configure-and-connect-database"> </a>7. Configure and connect database</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="8-launch-your-app"> </a>8. Launch your app</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="9-connect-netlify-to-your-site"> </a>9. Connect Netlify to your site</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="10-deploy-to-production"> </a>10. Deploy to production</h3>
HTML FOR datastaxdevs-netlify-astra-example<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-cassandra"> </a>JAMStack + Netlify + Astra + Cassandra 📒</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites">Start Building</a></em></p><p>This is an example React To-Do application using a <a href="https://astra.datastax.com/register?utm_source=devplay&amp;utm_medium=github&amp;utm_campaign=todo-astra-jamstack-netlify">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a fullstack development example using Astra as the storage backend</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8080 once the application has been deployed.</p><p><a href="https://jamstack.org/">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-jamstack-netlify-astra-cassandra"> </a>Running JAMStack + Netlify + Astra + Cassandra</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><ul><li>git installed on your local system</li><li>github account</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><h2><a class="anchor" aria-hidden="true" id="getting-started"> </a>Getting Started</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><ol><li><strong>Login/Register</strong>Click the button to login or register with Datastax.</li></ol><ul><li><a href="https://astra.datastax.com/register?utm_source=github&utm_medium=referral&utm_campaign=todo-astra-jamstack-netlify"><img src="https://dabuttonfactory.com/button.png?t=Create+Astra+Database&f=Calibri-bold&ts=20&tc=fff&hp=40&vp=10&c=8&bgt=unicolored&bgc=6fa8dc" /></a></li><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true" /></li></ul></details><p><strong>Use the following values when creating the database</strong></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>netlify</code></td></tr><tr><td><strong>keypace</strong></td><td><code>todos</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td><em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em></td></tr></tbody></table><ol start="2"><li><strong>Deploy to Netlify</strong></li></ol><ul><li><details><summary> What does the netlify deploy button do?</summary>The Netlify deploy button will:<ul>  <li>Create a new repository for you on Github</li>  <li>Create a site on Netlify</li>  <li>Link the two together.</li></ul></li></ul></details><ul><li>Click the button to deploy:<a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/netlify-astra-example"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></li></ul><ul><li><details><summary>Show me!</summary> <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-token.gif?raw=true" /> </details></li></ul><h3><a class="anchor" aria-hidden="true" id="3-access-your-github-repository"> </a>3. Access YOUR GitHub repository</h3><ul><li>Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.<details><summary>Show me! </summary><img src="tutorial/images/deploy-5.png" /></details></li></ul><h3><a class="anchor" aria-hidden="true" id="4-launch-gitpod-ide"> </a>4. Launch GitPod IDE</h3><ul><li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li></ul><ul><li><em>Supported by <img src="tutorial/images/chrome-logo.svg" height="20"/> Chrome and <img src="tutorial/images/firefox-logo.svg" height="20"/> Firefox</em></li></ul><h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4><p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href="#3-clone-your-github-repository">step3</a> to get to your repo.</p><ul><li><p>Ok, I've got it, just give me the button already</p></li><li><details>  <summary>CLICK HERE to launch GitPod</summary><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p></details></li></ul><h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4><ul><li>From your GitPod terminal execute the following command</li></ul><pre><code>git remote -v</code></pre><p>If the result returned from the command displays <strong><code>datastaxdevs</code></strong> then you are not in the correct repository. If this is the case please <a href="#3-access-your-github-repository">repeat step 3 above</a>, otherwise just move on to the next step.</p><h3><a class="anchor" aria-hidden="true" id="5-install-the-netlify-cli-command-line-interface"> </a>5. Install the Netlify CLI (Command Line Interface)</h3><ul><li>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</li></ul><pre><code>npm install -g netlify-cli</code></pre><ul><li><details><summary>Show me!</summary> <img src="tutorial/images/netlify-install-cli.png?raw=true" /> </details></li></ul><h3><a class="anchor" aria-hidden="true" id="6-generate-application-token-to-securely-connect-to-the-database"> </a>6. Generate application token to securely connect to the database</h3><p>Following the <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Documentation</a> create a token with <code>Database Admnistrator</code> roles.</p><ul><li><p>Go the <code>Organization Settings</code></p></li><li><p>Go to <code>Token Management</code></p></li><li><p>Pick the role <code>Database Admnistrator</code> on the select box</p></li><li><p>Click Generate token</p></li></ul><ul><li><details><summary>Show me!</summary> <img src="tutorial/images/astra-create-token.gif?raw=true" /> </details></li></ul><p>This is what the token page looks like.</p><ul><li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li></ul><p><img src="tutorial/images/astra-token.png?raw=true" alt="image" /></p><p>Notice the clipboard icon at the end of each value.</p><ul><li><p><code>Client ID:</code> We will <em>not</em> use this during this workshop</p></li><li><p><code>Client Secret:</code> We will <em>not</em> use this during this workshop</p></li><li><p><code>Token:</code> <em>This is your token!</em> We will use it as a api Key to interact with APIS</p></li></ul><p><a href="https://www.youtube.com/watch?v=TUTCLsBuUd4">This video</a> describes the procedure to generate a token in Astra DB.</p><h3><a class="anchor" aria-hidden="true" id="7-configure-and-connect-database"> </a>7. Configure and connect database</h3><ul><li>In the repository directory run the following command to set up your Astra DB environment. This will verify the database you created earlier or create a new one for you if it can't find your database.</li></ul><pre><code>npm exec astra-setup tiktok_workshop_db tiktok_keyspace</code></pre><details><summary>What does astra-setup do?</summary>    To setup your ASTRA instance, you want to run `npm exec astra-setup`<pre><code>This will do the following:* Have you go to your [Astra DB instance](https://datastx.io/workshops) to register or login. There is no credit card required to sign up. The 'Pay as you go' option gives you a huge amount of transactions for free:    * 30 million reads    * 5 million writes    * 40 gigabytes of storage* Give steps to grab a Database Administrator Token and paste it into the input field* Ask you what database you want to use (default, existing, create)* Create or access the database* Create/update an .env file in the project root* Create/update an .astrarc file in your home directory    * This can be used by httpie-astra `pip3 install httpie-astra`    * It can also be used by the @astra/collections and @astra/rest node modules## Specify the database and keyspaceYou can run the script and tell it which database/keyspace to use by using:`npm exec astra-setup databasename keyspacename`</code></pre></details><h3><a class="anchor" aria-hidden="true" id="8-launch-your-app"> </a>8. Launch your app</h3><ul><li>Run the application</li></ul><pre><code>netlify dev</code></pre><ul><li>The application should automatically launch in the GitPod preview pane</li></ul><h3><a class="anchor" aria-hidden="true" id="9-connect-netlify-to-your-site"> </a>9. Connect Netlify to your site</h3><p>Execute each of the commands below to link your code to your Netlify deployment.</p><ul><li>First thing, we'll need to <strong>STOP</strong> the <code>netlify dev</code> command we issued a moment ago. In the terminal where you executed the netlify command issue a <code>CTRL-C</code> (control key + the C key) in order to stop the process.</li><li>Then continue with the following commands</li><li>This will pop up a browser to authenticate with netlify</li></ul><pre><code>netlify login</code></pre><p><em>Note, when using GitPod the preview pane will not display this properly. You must click the &quot;open in a new window&quot; button in the very top right of the preview pane.</em></p><ul><li>This will link your workspace to the associated site</li></ul><pre><code>netlify link</code></pre><ul><li>This will take the .env file created by astra-setup and upload it to netlify</li></ul><pre><code>netlify env:import .env</code></pre><!--  * Will be used to allow you to execute `netlify open`  ```  netlify sites:list  ```--><h3><a class="anchor" aria-hidden="true" id="10-deploy-to-production"> </a>10. Deploy to production</h3><p>Now that you've hooked everything up, time to deploy to production.</p><ul><li>Run</li></ul><pre><code>netlify build</code></pre><ul><li>Then run</li></ul><pre><code>netlify deploy --prod</code></pre><ul><li>Then finally run</li></ul><pre><code>netlify open:site</code></pre><p>You've deployed your app to Netlify!<img src="./tutorial/images/netlify-livesite.png?raw=true" alt="Netlify Setup Example" /></p>
SUCCESS SAVING README for datastaxdevs-netlify-astra-example
Getting astra.json for datastaxdevs/workshop-social-media-tiktok at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-db-tiktok-clone-workshop"> </a>Astra DB TikTok Clone Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>Housekeeping</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1 - Objectives</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2 - Frequently asked questions</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3 - Materials for the Session</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-homework"> </a>4 - Homework</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-1-getting-started-with-database"> </a>LAB 1 - Getting Started with Database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-1-getting-started-with-database"> </a>1.1 - Getting Started with Database</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-a-code-create-astra-account"> </a><code>✅.1.1.a</code>- Create Astra Account</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-b-code-create-astra-database"> </a><code>✅.1.1.b</code>- Create Astra Database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-1-1-c-code-database-was-already-existing"> </a><code>✅.1.1.c</code>- Database was already existing</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-2-document-api"> </a>LAB 2 - Document API</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-1-using-document-api"> </a>2.1 Using Document API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-open-swagger-user-interface"> </a><code>✅.2.1.a</code>- Open Swagger User Interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-lists-collections"> </a><code>✅.2.1.b</code>- Lists Collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-create-collection-code-story-code"> </a><code>✅.2.1.c</code>- Create Collection <code>story</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-create-a-first-document"> </a><code>✅.2.1.d</code>- Create a first document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-e-code-search-documents-in-a-collections"> </a><code>✅.2.1.e</code>- Search documents in a collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-f-code-update-a-document"> </a><code>✅.2.1.f</code>- Update a document</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-1-g-code-delete-a-document"> </a><code>✅.2.1.g</code>- Delete a document</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-2-create-astra-credentials"> </a>2.2 - Create Astra Credentials</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-create-astra-credentials"> </a><code>✅.2.2.a</code>- Create Astra Credentials</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-download-astra-credentials"> </a><code>✅.2.2.b</code>- Download Astra Credentials</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-3-ide-setup"> </a>LAB 3 - IDE Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-1-netlify-site-setup"> </a>3.1 - Netlify Site Setup</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-2-launch-gitpod"> </a>3.2 - Launch GitPod</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-open-your-github-repository-readme"> </a><code>✅.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-open-gitpod-ide"> </a><code>✅.3.2.b</code>- Open Gitpod IDE</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-2-c-code-validating-your-not-using-code-datastaxdevs-code"> </a><code>✅.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-3-astra-cli-setup"> </a>3.3 - Astra CLI Setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-save-your-token"> </a><code>✅.3.3.a</code>- Save your token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-validate-your-configuration"> </a><code>✅.3.3.b</code>- Validate your configuration</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-c-code-list-database-to-see-code-workshops-code"> </a><code>✅.3.3.c</code>- List Database to see  <code>workshops</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-d-code-get-db-details"> </a><code>✅.3.3.d</code>- Get db details</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-3-e-code-create-configuration-file"> </a><code>✅.3.3.e</code>- Create configuration file</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-4-netlify-cli-setup"> </a>3.4 - Netlify CLI Setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-install-the-package"> </a><code>✅.3.4.a</code>- Install the package</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-5-launch-your-app"> </a>3.5 Launch your app</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-3-5-a-code-start-application"> </a><code>✅.3.5.a</code>- Start application</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-4-coding-against-db"> </a>LAB 4 - Coding Against DB</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-1-document-api"> </a>4.1 - Document API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-reopen-swagger"> </a><code>✅.4.1.a</code>- Reopen Swagger</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-list-collections"> </a><code>✅.4.1.a</code>- List Collections</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-documents-of-code-tktkposts-code"> </a><code>✅.4.1.b</code>- List Documents of <code>tktkposts</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-2-astrajs-client"> </a>4.2 - AstraJS Client</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-1-code-initialization"> </a><code>✅.4.2.1</code> - Initialization</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-create-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-c-code-update-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-2-d-code-search-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-3-serverless-configuration"> </a>4.3 - Serverless configuration</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-4-react-component"> </a>4.4 - React Component</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-react-router"> </a><code>✅.4.4.a</code> - React Router</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-upload-page"> </a><code>✅.4.4.b</code> - Upload Page</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-home-page"> </a><code>✅.4.4.b</code> - Home Page</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab-5-netlify-deployments"> </a>LAB 5 - Netlify Deployments</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-1-connect-netlify-to-your-site"> </a>5.1 - Connect Netlify to your site</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-5-1-a-code-authenticate-in-netlify"> </a><code>✅.5.1.a</code> - Authenticate in Netlify</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-5-1-b-code-import-configuration-in-site"> </a><code>✅.5.1.b</code> - Import configuration in site</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-2-deploy-to-production"> </a>5.2 - Deploy to production</h3>
HTML FOR datastaxdevs-workshop-social-media-tiktok<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="astra-db-tiktok-clone-workshop"> </a>Astra DB TikTok Clone Workshop</h1><p><a href="https://github.com/datastaxdevs/workshop-social-media-tiktok"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level</strong> Beginner to Intermediate</p><p>A simple Tik-Tok clone running on Astra DB that leverages the Document API. You can see the Demo <a href="https://fanciful-licorice-ea1437.netlify.app">here</a></p><p><img src="./screenshot.jpg" alt="image" /></p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ul><li><strong>HouseKeeping</strong><ul><li><a href="#1---objectives">1. Objectives</a></li><li><a href="#2---frequently-asked-questions">2. Frequently asked questions</a></li><li><a href="#3---materials-for-the-session">3. Materials for the Session</a></li><li><a href="#4---homework">4. Homework</a></li></ul></li><li><strong><a href="#lab-1---getting-started-with-database">LAB 1 - Getting Started with Database</a></strong><ul><li><a href="#11---getting-started-with-database">1.1 - Create Astra Account</a></li><li><a href="#11---getting-started-with-database">1.2 - Create Astra Database</a></li></ul></li><li><strong><a href="#lab-2---document-api">LAB 2 - Document API</a></strong><ul><li><a href="#21-using-document-api">2.1 - Using Document API</a></li><li><a href="#22---create-astra-credentials">2.2 - Create Astra Credentials</a></li></ul></li><li><strong><a href="#lab-3---ide-setup">LAB 3 - IDE Setup</a></strong><ul><li><a href="#31---netlify-site-setup">3.1 - Netlify site setup</a></li><li><a href="#32---launch-gitpod">3.2 - Launch GitPod</a></li><li><a href="#33---astra-cli-setup">3.3 - Astra CLI Setup</a></li><li><a href="#34---netlify-cli-setup">3.4 - Netlify CLI Setup</a></li><li><a href="#35-launch-your-app">3.5 - Launch the application</a></li></ul></li><li><strong><a href="#lab-4---coding-against-db">LAB 4 - Coding Against DB</a></strong><ul><li><a href="#41---document-api">4.1 - Document API</a></li><li><a href="#42---astrajs-client">4.2 - AstraJS Client</a></li><li><a href="#43---serverless-configuration">4.3 - Serverless configuration</a></li><li><a href="#44---react-component">4.4 - React Component</a></li></ul></li><li><strong><a href="#lab-5---netlify-deployments">LAB 5 - Netlify Deployments</a></strong><ul><li><a href="#51---connect-netlify-to-your-site">5.1 - Connect Netlify to your site</a></li><li><a href="#52---deploy-to-production">5.2 - Deploy to production</a></li></ul></li></ul><h2><a class="anchor" aria-hidden="true" id="housekeeping"> </a>Housekeeping</h2><h3><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1 - Objectives</h3><ul><li><p>🎯 How to build a frontend application using React Components</p></li><li><p>🎯 How to build a backend with Javascript without Express.</p></li><li><p>🎯 Learn how to use the @astrajs document API to quickly and easily interact with JSON documents</p></li><li><p>🎯 Learn what is gitpod and how you can use it in your projects</p></li></ul><h3><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2 - Frequently asked questions</h3><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git installed on your local system</b><li><b>[node 15 and npm 7 or later](https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/)</b></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are there?</b></summary><hr><ul><li>You will need an <b>Github account</b><li>You will need an <b>Astra account</b> don't worry, we'll work through that in the workshop<li>You will need enough <i>real estate</i> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)</ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h3><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3 - Materials for the Session</h3><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="jamstack.md">What is JamStack?</a></li><li><a href="#video-tutorial-with-ania-kubow">Video tutorial with Ania Kubow</a></li></ul><h3><a class="anchor" aria-hidden="true" id="4-homework"> </a>4 - Homework</h3><img src="tutorial/images/tiktok-badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your work and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below. Take a screenshot and show us your deployed production TikTok clone up in Netlify.</li><li>(Optional extra credit) Watch the 2 hour Ania video <a href="#video-tutorial-with-ania-kubow">HERE</a>, build the app yourself, and show us the completed app.</li><li>Submit your homework <a href="https://docs.google.com/forms/d/1BV5qJstc2Z8CV4XamolOLe5UjuDFoIunbMgpi4_iiys">here</a></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="lab-1-getting-started-with-database"> </a>LAB 1 - Getting Started with Database</h2><h3><a class="anchor" aria-hidden="true" id="1-1-getting-started-with-database"> </a>1.1 - Getting Started with Database</h3><p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p><h4><a class="anchor" aria-hidden="true" id="code-1-1-a-code-create-astra-account"> </a><code>✅.1.1.a</code>- Create Astra Account</h4><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://astra.dev/yt-12-14"><img src="./tutorial/images/create_astra_db.png?raw=true" alt="image" /></a></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-1-1-b-code-create-astra-database"> </a><code>✅.1.1.b</code>- Create Astra Database</h4><ul><li>On the home page spot one of the 3 [Create Database] button. They are all doing the same thing.</li></ul><p><img src="./tutorial/images/db-create-button.png?raw=true" alt="image" /></p><ul><li>Use the following values when creating the database:</li></ul><table><thead><tr><th>#</th><th>Field Name</th><th>Field Value</th></tr></thead><tbody><tr><td>1</td><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td>2</td><td><strong>Keyspace Name</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td>3</td><td><strong>Cloud Provider</strong></td><td><code>Google Cloud Plaform</code></td></tr><tr><td>4</td><td><strong>Area</strong></td><td><code>North America</code></td></tr><tr><td>5</td><td><strong>Region</strong></td><td><code>Moncks Corner, South Carolina</code></td></tr></tbody></table><blockquote><p>🖥️ <code>Output</code></p><p><img src="./tutorial/images/db-create.png?raw=true" alt="image" /></p></blockquote><ul><li>Now click <code>[Create Database button]</code> that became blue.</li><li>The database is initializing, wait for the DB the move from <code>[PENDING]</code> to <code>[ACTIVE]</code></li></ul><blockquote><p>🖥️ <code>Output</code></p><p><img src="./tutorial/images/db-pending.png?raw=true" alt="image" /></p></blockquote><ul><li>Click <code>[Go to Database]</code></li></ul><h4><a class="anchor" aria-hidden="true" id="code-1-1-c-code-database-was-already-existing"> </a><code>✅.1.1.c</code>- Database was already existing</h4><p>Here are some special situations you might encounter.</p><blockquote><p>ℹ️ <strong>Hibernated Database:</strong></p><p>If the DB workshops already exists but is hibernated (you have not use it for a while):</p><ul><li>Click the <code>[Resume Database]</code> button on the top right-hand corner.</li></ul><p><img src="./tutorial/images/db-resume.png?raw=true" alt="image" /></p></blockquote><blockquote><p>ℹ️ <strong>Database already exists, create keyspace <code>tiktok_keyspace</code></strong></p><p>If DB exists and is active but <code>tiktok_keyspace</code> keyspace is not present you need to create the keyspace.</p><ul><li>Click button <code>[Add Keyspace]</code> on the database dashboard (bottom right-hand corner)</li><li>Provide the keyspace name <code>tiktok_keyspace</code></li><li>Click button <code>[Save]</code>. The database will switch in maintenance mode for a few seconds, you are set.</li></ul><p><img src="./tutorial/images/db-create-keyspace.png?raw=true" alt="image" /></p></blockquote><h2><a class="anchor" aria-hidden="true" id="lab-2-document-api"> </a>LAB 2 - Document API</h2><h3><a class="anchor" aria-hidden="true" id="2-1-using-document-api"> </a>2.1 Using Document API</h3><h4><a class="anchor" aria-hidden="true" id="code-2-1-a-code-open-swagger-user-interface"> </a><code>✅.2.1.a</code>- Open Swagger User Interface</h4><ul><li>(1) -  Select your database in the left panel (if needed)</li><li>(2) -  Select the tab <code>Connect</code></li><li>(3) -  Select the <code>Document API</code> bloc</li><li>(4) -  In <code>Launch Swagger UI</code> right-click on the link to open in a new TAB</li></ul><p><img src="tutorial/images/access-swagger.png?raw=true" alt="image" /></p><ul><li>You should access this screen</li></ul><blockquote><p>🖥️ <code>Swagger UI</code></p><p><img src="tutorial/images/show-swagger.png?raw=true" alt="image" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-b-code-lists-collections"> </a><code>✅.2.1.b</code>- Lists Collections</h4><ul><li>(1) - Select the resource <code>GET/v2/namespaces/{namespace-id}/collections</code></li></ul><p><img src="tutorial/images/list-collections-1.png?raw=true" alt="image" /></p><ul><li>(2) - Click the <code>[Try It Out]</code> button</li></ul><p><img src="tutorial/images/list-collections-2.png?raw=true" alt="image" /></p><ul><li>(3) - Populate the form with the following values</li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr></tbody></table><ul><li>(4) - Click on <code>[Execute]</code> button</li></ul><p>The output is empty (expected):</p><pre lang="json"><code>[]</code></pre><h4><a class="anchor" aria-hidden="true" id="code-2-1-c-code-create-collection-code-story-code"> </a><code>✅.2.1.c</code>- Create Collection <code>story</code></h4><ul><li><p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections</code></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>body</strong></td><td><code>{&quot;name&quot;:&quot;story&quot;}</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You can see the output with <code>201</code> (created) code</p></li></ul><p><img src="tutorial/images/create-collection-1.png?raw=true" alt="image" /></p><ul><li>(6) - Following the steps in previous section list collections again, you should get</li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;data&quot;: [   {     &quot;name&quot;: &quot;story&quot;,     &quot;upgradeAvailable&quot;: false   } ]}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-d-code-create-a-first-document"> </a><code>✅.2.1.d</code>- Create a first document</h4><p>With a document oriented API there is no strict schema to comply with. As such let us decide what a story could look like.</p><ul><li><p>(1) - Select the resource <code>POST/v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Create a new Document</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr></tbody></table><p><strong>body:</strong></p><pre lang="json"><code>{  &quot;name&quot;: &quot;Mo Farooq&quot;,  &quot;username&quot;: &quot;mofarooq32&quot;,  &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,  &quot;is_followed&quot;: true,  &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;,  &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,  &quot;likes&quot;: 10,  &quot;comments&quot;: 2,  &quot;button_visible&quot;: true}</code></pre><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - Should get a HTTP <code>201</code> (Created) and the output. A unique identifier has been created for our document.</p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;documentId&quot;: &quot;8aa07632-4ffb-46e5-9d78-b32e21847221&quot;}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-e-code-search-documents-in-a-collections"> </a><code>✅.2.1.e</code>- Search documents in a collections</h4><ul><li><p>(1) - Select the resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>where</strong></td><td><code>{&quot;username&quot;: {&quot;$eq&quot;: &quot;mofarooq32&quot;}}</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get a result</p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{ &quot;data&quot;: {   &quot;8aa07632-4ffb-46e5-9d78-b32e21847221&quot;: {     &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,     &quot;button_visible&quot;: true,     &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,     &quot;comments&quot;: 2,     &quot;is_followed&quot;: true,     &quot;likes&quot;: 10,     &quot;name&quot;: &quot;Mo Farooq&quot;,     &quot;username&quot;: &quot;mofarooq32&quot;,     &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;   } }}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-2-1-f-code-update-a-document"> </a><code>✅.2.1.f</code>- Update a document</h4><ul><li><p>(1) - Select the resource <code>PUT /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id}</code> <em>Create or update a document with the provided document-id</em></p></li><li><p>(2) - Click the <code>[Try It Out]</code> button</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>document-id</strong></td><td>document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code></td></tr></tbody></table><p><strong>body:</strong></p><pre lang="json"><code>{  &quot;name&quot;: &quot;New Name&quot;,  &quot;username&quot;: &quot;mofarooq32&quot;,  &quot;avatar&quot;: &quot;https://i.imgur.com/9KYq7VG.png&quot;,  &quot;is_followed&quot;: true,  &quot;video&quot;: &quot;https://i.imgur.com/FTBP02Y.mp4&quot;,  &quot;caption&quot;: &quot;These ducks are MEGA cute&quot;,  &quot;likes&quot;: 10,  &quot;comments&quot;: 2,  &quot;button_visible&quot;: true}</code></pre><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get an updated document</p></li></ul><h4><a class="anchor" aria-hidden="true" id="code-2-1-g-code-delete-a-document"> </a><code>✅.2.1.g</code>- Delete a document</h4><ul><li><p>(1) - Select the resource <code>DELETE /v2/namespaces/{namespace-id}/collections/{collection-id}/{document-id} </code> _ Delete a document_</p></li><li><p>(3) - Populate the form with the following values</p></li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>story</code></td></tr><tr><td><strong>document-id</strong></td><td>document you got before here <code>8aa07632-4ffb-46e5-9d78-b32e21847221</code></td></tr></tbody></table><ul><li><p>(4) - Click on <code>[Execute]</code> button</p></li><li><p>(5) - You should get a result code of <code>204</code></p></li></ul><blockquote><p>🖥️ <code>Output</code></p><pre><code>Code 204access-control-allow-credentials: true access-control-allow-origin: https://50b31120-2303-4f45-a9dd-1cfb03e24ff1-us-east1.apps.astra.datastax.com access-control-expose-headers: Date date: Mon,12 Dec 2022 18:12:43 GMT vary: Origin </code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="2-2-create-astra-credentials"> </a>2.2 - Create Astra Credentials</h3><p>When using swagger in the user interface, you are already authenticated against the API. When using a third party application you will need a token.</p><h4><a class="anchor" aria-hidden="true" id="code-2-2-a-code-create-astra-credentials"> </a><code>✅.2.2.a</code>- Create Astra Credentials</h4><blockquote><p>ℹ️ <em>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</em></p></blockquote><ul><li>(1) - Go the <code>Organization Settings</code></li><li>(2) - Go to <code>Token Management</code></li><li>(3) - Pick the role <code>Database Admnistrator</code> on the select box</li><li>(4) - Click <code>Generate token</code></li></ul><p><img src="./tutorial/images/astra-create-token.gif?raw=true" alt="image" /></p><h4><a class="anchor" aria-hidden="true" id="code-2-2-b-code-download-astra-credentials"> </a><code>✅.2.2.b</code>- Download Astra Credentials</h4><ul><li>Click the <strong><code>Download CSV</code></strong> button. You are going to need these values here in a moment.</li></ul><p><img src="./tutorial/images/astra-token.png?raw=true" alt="image" /></p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>Notice the clipboard icon at the end of each value.</p><ul><li><code>Client ID:</code> We will <em>not</em> use this during this workshop</li><li><code>Client Secret:</code> We will <em>not</em> use this during this workshop</li><li><code>Token:</code> <em><strong>This is your token!</strong></em> We will use it as a api Key to interact with APIS</li></ul><h2><a class="anchor" aria-hidden="true" id="lab-3-ide-setup"> </a>LAB 3 - IDE Setup</h2><h3><a class="anchor" aria-hidden="true" id="3-1-netlify-site-setup"> </a>3.1 - Netlify Site Setup</h3><ul><li>(1) Click the button to deploy.</li></ul><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-astra-tik-tok"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p></blockquote><ul><li><p>(2) - Authenticate with your github Account</p></li><li><p>(3) - Select an account and the github repository where to clone</p></li></ul><p><img src="./tutorial/images/deploy-to-netlify.gif?raw=true" alt="image" /></p><ul><li>(4) - In netlify user interface click on <code>Site deploy in progress</code></li></ul><blockquote><img src="tutorial/images/deploy-1.png" /></blockquote><ul><li>(5) - Click the top deploy link to see the build process.</li></ul><blockquote><img src="tutorial/images/deploy-2.png" /></blockquote><ul><li>(6) - Wait until the build complete <code>Netlify Build Complete</code>,  <strong>When you see Pushing to repository</strong> you're ready to move on.</li></ul><blockquote><img src="tutorial/images/deploy-3.png" /></blockquote><ul><li>(7) Scroll up to the top and click on the site name (it'll be after {yourlogin}'s Team next to the Netlify button).</li></ul><blockquote><img src="tutorial/images/deploy-4.png" /></blockquote><ul><li>(8) - Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get back to your new repository.  Scroll to where you were in the README.</li></ul><blockquote><img src="tutorial/images/deploy-5.png" /></blockquote><h3><a class="anchor" aria-hidden="true" id="3-2-launch-gitpod"> </a>3.2 - Launch GitPod</h3><h4><a class="anchor" aria-hidden="true" id="code-3-2-a-code-open-your-github-repository-readme"> </a><code>✅.3.2.a</code>- Open YOUR GITHUB REPOSITORY README</h4><ul><li>Click the button to launch the GitPod IDE from <strong>YOUR</strong> repository.</li></ul><h4><a class="anchor" aria-hidden="true" id="wait-before-moving-on-ensure-you-are-working-out-of-your-repository-not-the-datastaxdevs-repository"> </a>WAIT! Before moving on ensure you are working out of YOUR repository, not the datastaxdevs repository.</h4><p><img src="tutorial/images/correct-not-correct.png?raw=true" alt="correct notcorrect" /></p><p>If you are still using the <code>datastaxdevs</code> repo please ensure to follow the previous step, <a href="#3-clone-your-github-repository">step3</a> to get to your repo.</p><h4><a class="anchor" aria-hidden="true" id="code-3-2-b-code-open-gitpod-ide"> </a><code>✅.3.2.b</code>- Open Gitpod IDE</h4><blockquote><p>Last time, be certain to click this when you MOVED TO YOUR REPOSITORY  (not <code>datastaxdevs</code>)</p><p>↗️ <em>Right Click and select open as a new Tab...</em></p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-2-c-code-validating-your-not-using-code-datastaxdevs-code"> </a><code>✅.3.2.c</code>- Validating your not using <code>datastaxdevs</code></h4><ul><li>From your GitPod terminal execute the following command</li></ul><pre lang="bash"><code>git remote -v</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>origin  https://github.com/clun/workshop-astra-tik-tok.git (fetch)origin  https://github.com/clun/workshop-astra-tik-tok.git (push)If the result returned from the command displays **`datastaxdevs`** then you are not in the correct repository. If this is the case please [repeat step 3 above](#3-access-your-github-repository), otherwise just move on to the next step.</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="3-3-astra-cli-setup"> </a>3.3 - Astra CLI Setup</h3><h4><a class="anchor" aria-hidden="true" id="code-3-3-a-code-save-your-token"> </a><code>✅.3.3.a</code>- Save your token</h4><p>Locate an open terminal and enter the following command replacing <code>&lt;YOUR_TOKEN&gt;</code> by the one we created before starting with <code>AstraCS:..</code> it should be in the CSV we download before</p><pre><code>astra setup -t &lt;YOUR_TOKEN&gt;</code></pre><h4><a class="anchor" aria-hidden="true" id="code-3-3-b-code-validate-your-configuration"> </a><code>✅.3.3.b</code>- Validate your configuration</h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra user list</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra user list+--------------------------------------+-----------------------------+---------------------+| User Id                              | User Email                  | Status              |+--------------------------------------+-----------------------------+---------------------+| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |+--------------------------------------+-----------------------------+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-c-code-list-database-to-see-code-workshops-code"> </a><code>✅.3.3.c</code>- List Database to see  <code>workshops</code></h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra db list</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>+---------------------+--------------------------------------+---------------------+----------------+| Name                | id                                   | Default Region      | Status         |+---------------------+--------------------------------------+---------------------+----------------+| mtg                 | dde308f5-a8b0-474d-afd6-81e5689e3e25 | eu-central-1        | ACTIVE         || workshops           | 50b31120-2303-4f45-a9dd-1cfb03e24ff1 | us-east1            | ACTIVE         |+---------------------+--------------------------------------+---------------------+----------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-d-code-get-db-details"> </a><code>✅.3.3.d</code>- Get db details</h4><ul><li>In the terminal panel in gitpod enter the following command:</li></ul><pre><code>astra db get workshops</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>gitpod /workspace/workshop-astra-tik-tok (master) $ astra db get workshops+------------------------+-----------------------------------------+| Attribute              | Value                                   |+------------------------+-----------------------------------------+| Name                   | workshops                               || id                     | 50b31120-2303-4f45-a9dd-1cfb03e24ff1    || Status                 | ACTIVE                                  || Default Cloud Provider | GCP                                     || Default Region         | us-east1                                || Default Keyspace       | tiktok_keyspace                         || Creation Time          | 2022-12-12T11:14:58Z                    ||                        |                                         || Keyspaces              | [0] tiktok_keyspace                     ||                        |                                         ||                        |                                         || Regions                | [0] us-east1                            ||                        |                                         |+------------------------+-----------------------------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-3-3-e-code-create-configuration-file"> </a><code>✅.3.3.e</code>- Create configuration file</h4><ul><li>Create <code>.env</code> file</li></ul><pre><code>astra db create-dotenv workshops -k tiktok_keyspace -r us-east1</code></pre><ul><li>Show content</li></ul><pre><code>cat .env</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>ASTRA_DB_APPLICATION_TOKEN=&quot;AstraCS:gfYSGwpaFNGmUZnZTvaCp......&quot;ASTRA_DB_GRAPHQL_URL=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql/tiktok_keyspace&quot;ASTRA_DB_GRAPHQL_URL_ADMIN=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql-admin&quot;ASTRA_DB_GRAPHQL_URL_PLAYGROUND=&quot;https://.....-us-east1.apps.astra.datastax.com/api/playground&quot;ASTRA_DB_GRAPHQL_URL_SCHEMA=&quot;https://.....-us-east1.apps.astra.datastax.com/api/graphql-schema&quot;ASTRA_DB_ID=&quot;.....&quot;ASTRA_DB_KEYSPACE=&quot;tiktok_keyspace&quot;ASTRA_DB_REGION=&quot;us-east1&quot;ASTRA_DB_REST_URL=&quot;https://.....-us-east1.apps.astra.datastax.com/api/rest&quot;ASTRA_DB_REST_URL_SWAGGER=&quot;https://.....-us-east1.apps.astra.datastax.com/api/rest/swagger-ui/&quot;ASTRA_DB_SECURE_BUNDLE_PATH=&quot;/home/gitpod/.astra/scb/scb_....._us-east1.zip&quot;ASTRA_DB_SECURE_BUNDLE_URL=&quot;secured_url&quot;ASTRA_ORG_ID=&quot;f9460f14-9879-4ebe-83f2-48d3f3dce13c&quot;ASTRA_ORG_NAME=&quot;cedrick.lunven@datastax.com&quot;ASTRA_ORG_TOKEN=&quot;AstraCS:gfYSGwpaFNGmUZnZT.....&quot;</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="3-4-netlify-cli-setup"> </a>3.4 - Netlify CLI Setup</h3><h4><a class="anchor" aria-hidden="true" id="code-3-4-a-code-install-the-package"> </a><code>✅.3.4.a</code>- Install the package</h4><p>In the <code>workshop-astra-tik-tok</code> directory run the following command to install the netlify-cli</p><pre><code>npm install -g netlify-cli</code></pre><blockquote><p>🖥️ <code>Output</code></p><img src="tutorial/images/netlify-install-cli.png?raw=true" /></blockquote><h3><a class="anchor" aria-hidden="true" id="3-5-launch-your-app"> </a>3.5 Launch your app</h3><h4><a class="anchor" aria-hidden="true" id="code-3-5-a-code-start-application"> </a><code>✅.3.5.a</code>- Start application</h4><pre><code>netlify dev</code></pre><p>The application should automatically launch in the GitPod preview pane. You might see an error in the log for this firt launch, some data is inserted to the database.</p><blockquote><p>🖥️ <code>Output</code></p></blockquote><pre><code>◈ Netlify Dev ◈◈ Ignored general context env var: LANG (defined in process)◈ Injected .env file env var: ASTRA_DB_APPLICATION_TOKEN◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_ADMIN◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_PLAYGROUND◈ Injected .env file env var: ASTRA_DB_GRAPHQL_URL_SCHEMA◈ Injected .env file env var: ASTRA_DB_ID◈ Injected .env file env var: ASTRA_DB_KEYSPACE◈ Injected .env file env var: ASTRA_DB_REGION◈ Injected .env file env var: ASTRA_DB_REST_URL◈ Injected .env file env var: ASTRA_DB_REST_URL_SWAGGER◈ Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_PATH◈ Injected .env file env var: ASTRA_DB_SECURE_BUNDLE_URL◈ Injected .env file env var: ASTRA_ORG_ID◈ Injected .env file env var: ASTRA_ORG_NAME◈ Injected .env file env var: ASTRA_ORG_TOKEN◈ Loaded function add http://localhost:8888/.netlify/functions/add.◈ Loaded function addData http://localhost:8888/.netlify/functions/addData.◈ Loaded function edit http://localhost:8888/.netlify/functions/edit.◈ Loaded function posts http://localhost:8888/.netlify/functions/posts.◈ Functions server is listening on 36661◈ Setting up local development server────────────────────────────────────────────────────────────────  Netlify Build                                                 ────────────────────────────────────────────────────────────────❯ Version  @netlify/build 28.4.5❯ Flags  {}❯ Current directory  /workspace/workshop-astra-tik-tok❯ Config file  /workspace/workshop-astra-tik-tok/netlify.toml❯ Context  dev────────────────────────────────────────────────────────────────  1. Run command for local development                          ────────────────────────────────────────────────────────────────◈ Starting Netlify Dev with Create React App&gt; tik-tok-stargate@0.1.0 start&gt; react-scripts startℹ ｢wds｣: Project is running at http://10.0.5.2/ℹ ｢wds｣: webpack output is served from ℹ ｢wds｣: Content not from webpack is served from /workspace/workshop-astra-tik-tok/publicℹ ｢wds｣: 404s will fallback to /Starting the development server...Compiled successfully!You can now view tik-tok-stargate in the browser.  Local:            http://localhost:3000  On Your Network:  http://10.0.5.2:3000Note that the development build is not optimized.To create a production build, use npm run build.✔ Waiting for framework port 3000. This can be configured using the 'targetPort' property in the netlify.toml(dev.command completed in 9.4s)   ┌─────────────────────────────────────────────────┐   │                                                 │   │   ◈ Server now ready on http://localhost:8888   │   │                                                 │   └─────────────────────────────────────────────────┘⠦ Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: POST /.netlify/functions/addData⠧ Setting up the Edge Functions environment. This may take a couple of minutes.Request from ::ffff:192.168.9.75: GET /.netlify/functions/posts⠙ Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 341 ms.⠦ Setting up the Edge Functions environment. This may take a couple of minutes.Response with status 200 in 1609 ms.✔ Setting up the Edge Functions environment. This may take a couple of minutes.</code></pre><p><img src="./tutorial/images/netlify-start.png?raw=true" alt="start" /></p><h2><a class="anchor" aria-hidden="true" id="lab-4-coding-against-db"> </a>LAB 4 - Coding Against DB</h2><h3><a class="anchor" aria-hidden="true" id="4-1-document-api"> </a>4.1 - Document API</h3><p>Using same instruction as #2.1 execute the following operation with the Document Api using swagger UI.</p><h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-reopen-swagger"> </a><code>✅.4.1.a</code>- Reopen Swagger</h4><p>Now that we have locally deployed our TikTok app, let's take a look at this in our database. Head to your <a href="astra.datastax.com">Astra DB dashboard</a> and click the <code>Connect</code> button next to your database ('workshops').</p><p><img src="./tutorial/images/db_connect.png?raw=true" alt="db_connect" /></p><p>Then scroll down to the section called 'Launching SwaggerUI' and click the link. We'll be using SwaggerUI to make api calls to our database and see the results.</p><p><img src="./tutorial/images/swaggerui_link.png?raw=true" alt="swaggerui_link" /></p><h4><a class="anchor" aria-hidden="true" id="code-4-1-a-code-list-collections"> </a><code>✅.4.1.a</code>- List Collections</h4><p>Open up the first section labelled &quot;List collections in namespace&quot; and click the button &quot;Try it out&quot;.</p><p><img src="./tutorial/images/swaggerui_listcollections_02.png?raw=true" alt="swaggerui_link" /></p><ul><li>Execture with <code>[Execute]</code> button</li></ul><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{  &quot;data&quot;: [    {      &quot;name&quot;: &quot;story&quot;,      &quot;upgradeAvailable&quot;: false    },    {      &quot;name&quot;: &quot;tktkposts&quot;,      &quot;upgradeAvailable&quot;: false    }  ]}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-4-1-b-code-list-documents-of-code-tktkposts-code"> </a><code>✅.4.1.b</code>- List Documents of <code>tktkposts</code></h4><ul><li>Open resource <code>GET /v2/namespaces/{namespace-id}/collections/{collection-id}</code> <em>Search documents in a collection</em></li></ul><p><img src="./tutorial/images/swaggerui_searchdocuments_02.png?raw=true" alt="swaggerui_link" /></p><ul><li>Populate the form with the following values</li></ul><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>X-Cassandra-Token</strong></td><td><em>autopopulated</em></td></tr><tr><td><strong>namespace-id</strong></td><td><code>tiktok_keyspace</code></td></tr><tr><td><strong>collection-id</strong></td><td><code>tktkposts</code></td></tr></tbody></table><p>Let the rest of the fields untouched. You can see that every query is paged and default page size is <code>3</code>.And we see all of the documents stored in our database.</p><p><img src="./tutorial/images/swaggerui_searchdocuments_04.png?raw=true" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="json"><code>{  &quot;pageState&quot;: &quot;ATIA8H_____wf____w==&quot;,  &quot;data&quot;: {    &quot;0&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/jONHmE5.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;Art is for everyone&quot;,      &quot;comments&quot;: 20,      &quot;id&quot;: 0,      &quot;is_followed&quot;: true,      &quot;likes&quot;: 231,      &quot;name&quot;: &quot;Lana Del Mont&quot;,      &quot;timestamp&quot;: &quot;2020-09-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;lana_del_away&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/H9UX0Jm.mp4&quot;    },    &quot;2&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/eX3hkoc.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;Happiest of Birthdays my Angel&quot;,      &quot;comments&quot;: 4,      &quot;id&quot;: 2,      &quot;is_followed&quot;: true,      &quot;likes&quot;: 2,      &quot;name&quot;: &quot;Angela Lee&quot;,      &quot;timestamp&quot;: &quot;2020-04-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;angiecakes&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/al6MLay.mp4&quot;    },    &quot;3&quot;: {      &quot;avatar&quot;: &quot;https://i.imgur.com/IigY4Hm.png&quot;,      &quot;button_visible&quot;: true,      &quot;caption&quot;: &quot;The new normal&quot;,      &quot;comments&quot;: 2,      &quot;id&quot;: 3,      &quot;is_followed&quot;: false,      &quot;likes&quot;: 10,      &quot;name&quot;: &quot;Nina Xen&quot;,      &quot;timestamp&quot;: &quot;2020-05-10T09:08:31.020Z&quot;,      &quot;username&quot;: &quot;nina_lina&quot;,      &quot;video&quot;: &quot;https://i.imgur.com/Kzvbeup.mp4&quot;    }  }}</code></pre></blockquote><h3><a class="anchor" aria-hidden="true" id="4-2-astrajs-client"> </a>4.2 - AstraJS Client</h3><h4><a class="anchor" aria-hidden="true" id="code-4-2-1-code-initialization"> </a><code>✅.4.2.1</code> - Initialization</h4><p>We are using the <code>@astrajs/collections</code> library to make the connection using the Document API. To do so, we start by creating a <code>client</code>.</p><p>(See: <a href="./functions/utils/astraClient.js">functions/utils/astraClient.js</a>)</p><pre lang="javascript"><code>const { createClient } = require(&quot;@astrajs/collections&quot;);let astraClient = null;const getAstraClient = async () =&gt; {  if (astraClient === null) {    astraClient = await createClient(      {        astraDatabaseId: process.env.ASTRA_DB_ID,        astraDatabaseRegion: process.env.ASTRA_DB_REGION,        applicationToken: process.env.ASTRA_DB_APPLICATION_TOKEN,      },      30000    );  }  return astraClient;};</code></pre><p>Here we are defining a new method called <code>getAstraClient</code> that uses the <code>createClient</code> method from our <code>astrajs</code> library to create a connection to our database. We then provide it the needed database credentials we added to our environment variables earlier;</p><ul><li><code>ASTRA_DB_ID</code> <em>(unique identifier for a db)</em></li><li><code>ASTRA_DB_REGION</code> <em>(cloud region, here <code>us-east1</code>)</em></li><li><code>ASTRA_DB_APPLICATION_TOKEN</code> <em>(credentials)</em></li></ul><p>Then we return the <code>astraClient</code> we can then use in our API calls.</p><p>We also need to create a document collection to store our data.</p><pre lang="javascript"><code>const getCollection = async () =&gt; {  const documentClient = await getAstraClient();  return documentClient    .namespace(process.env.ASTRA_DB_KEYSPACE)    .collection(&quot;tktkposts&quot;);};</code></pre><p>In this method, we are using our previously created <code>getAstraClient</code> method to initialize the database connection, and then create a collection in the keyspace we defined in our environment variables;</p><ul><li><code>ASTRA_DB_KEYSPACE</code> (for us <code>tiktok_keyspace</code>)</li></ul><p>We will call the collection <strong>tktkposts</strong>.</p><h4><a class="anchor" aria-hidden="true" id="code-4-2-b-code-create-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.b</code> - Create document with <code>@astrajs/collections</code></h4><p>For our TikTok app, we will not be dealing with the Document API directly. Instead <code>@astrajs/collections</code> does that for us, and provides us with easy to use methods.</p><p>If you want a comprehensive list of the capabilities of <code>@astrajs/collections</code>, check out this documentation: <a href="https://docs.datastax.com/en/astra/docs/astra-collection-client.html">AstraJS Collections</a></p><p>The <code>create</code> method is used when we want to add documents to our collection. For example, in <strong><code>functions/add.js</code></strong> we get our collection from the database using our <code>getCollection</code> method.</p><pre lang="javascript"><code>const users = await getCollection();</code></pre><p>Then we use the <code>create</code> method to create a document, providing the <em>id</em> and <em>body</em> of the document.</p><pre lang="javascript"><code>try {    const user = await users.create(id, event.body);    return {      statusCode: 200,      body: JSON.stringify(user),    };}</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-2-c-code-update-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.c</code> - Update document with <code>@astrajs/collections</code></h4><p>The <code>update</code> method is used to update portions of existing documents. Take a look at <strong><code>functions/edit.js</code></strong>. Again we use <code>getCollection()</code> to get our collection from the database, then we use the <code>update</code> method, provide it with an id for the document we want to edit, and the data that needs updating.</p><pre lang="javascript"><code>try {    users.update(body.userId, body.data);    return {      statusCode: 200,    };  }</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-2-d-code-search-document-with-code-astrajs-collections-code"> </a><code>✅.4.2.d</code> - Search document with <code>@astrajs/collections</code></h4><p>And finally the <code>find</code> method is used to retrieve documents. In <strong><code>functions/posts.js</code></strong> we are again using <code>getCollections()</code> and using the <code>find</code> method on the result.</p><pre lang="javascript"><code>try {    const res = await users.find({});    return {      statusCode: 200,      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),    };  }</code></pre><p>In this case, we are passing an empty object to retrieve all documents. In a real-world scenario, we would pass a qualifier to get only the documents relevant to a specific user.</p><h3><a class="anchor" aria-hidden="true" id="4-3-serverless-configuration"> </a>4.3 - Serverless configuration</h3><p>Take a look at <code>netlify.toml</code>.</p><pre lang="init"><code>[build]command = &quot;npm run build&quot;functions = &quot;functions&quot;publish = &quot;build&quot;</code></pre><p>This is the configuration file we include in our codebase that tells Netlify how to build our app. In our case it's really simple. First we give the <code>build</code> command to build our app: <code>npm run build</code>. Then we tell Netlify where to find our serverless functions, and finally where to find the resulting app after build.</p><p>So Netlify will create endpoints for our serverless functions based on the files it finds in our functions folder.</p><p>For example, we have a function called <code>posts.js</code>. As we saw before, this function returns all of the current posts in our database. Netlify will see that file in our <code>functions</code> directory and dynamically create an endpoint at <a href="./functions/posts.js">/.netlify/functions/posts</a></p><pre lang="javascript"><code>// Declaring 'getCollection'const { getCollection } = require(&quot;./utils/astraClient&quot;);// Function exported as a REST APIexports.handler = async function () {  // Accessing the collection tkt  const tktkpostsCollection = await getCollection();  try {    // Access POST    const res = await tktkpostsCollection.find({});    return {      // Return POSTS in the body      statusCode: 200,      body: JSON.stringify(Object.keys(res).map((i) =&gt; res[i])),      [...]</code></pre><p>✅ We can see these functions in our Netlify account.</p><ul><li>Go to netlify.com and sign in.</li><li>Select your site from the list.</li><li>Select the &quot;Functions&quot; tab at the top.</li></ul><p><img src="./tutorial/images/netlify_functions_tab.gif" alt="netlify_functions" /></p><p>From here we can see all our functions and get direct links as well as watch real time logs.</p><p>We can also see this in action by manually going to the endpoint on our Netlify site: <code>[your-site-url]/.netlify/functions/posts</code>.</p><p><img src="./tutorial/images/netlify_endpoint_nav.gif" alt="netlify_endpoint" /></p><h3><a class="anchor" aria-hidden="true" id="4-4-react-component"> </a>4.4 - React Component</h3><p>The front end leverages on React. The code is organized in pages and each pages import a list of components.</p><h4><a class="anchor" aria-hidden="true" id="code-4-4-a-code-react-router"> </a><code>✅.4.4.a</code> - React Router</h4><p>There are 2 pages <code>updload</code> and <code>Home</code> and describe in <a href="./src/index.js">index.js</a></p><pre lang="xml"><code>&lt;Switch&gt;  &lt;Route path= &quot;/upload&quot; component={Upload}/&gt;  &lt;Route path= &quot;/&quot; component={Home}/&gt;&lt;/Switch&gt;</code></pre><p><img src="./tutorial/images/pages-all.png" alt="netlify_endpoint" /></p><h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-upload-page"> </a><code>✅.4.4.b</code> - Upload Page</h4><p>Access through the <code>cloud</code> icon of directly on <code>/upload</code> it is a static HTML form to create new posts.</p><p><img src="./tutorial/images/page-upload.png" alt="netlify_endpoint" /></p><p>As you can see <a href="./src/pages/Upload.js">Upload.js</a> there are no component used.</p><pre lang="html"><code>&lt;form onSubmit={handleSubmit}&gt;    &lt;div className='section'&gt;&lt;!-- rest is omitted --&gt; </code></pre><ul><li>Function to post to backend</li></ul><pre lang="javascript"><code> const handleSubmit = async (e) =&gt; { e.preventDefault() // Create payload const data =  {        id: id,        name: name,        username: username,        avatar: avatar,        is_followed: false,        video: video,        caption: caption,        likes: 0,        comments: 0,        timestamp: timestamp,        button_visible: false    }  // Post Payload to Netlify functions  axios.post('/.netlify/functions/add', data)       .then((response) =&gt; { console.log(response)})       .catch((err) =&gt; { console.error(err)})</code></pre><h4><a class="anchor" aria-hidden="true" id="code-4-4-b-code-home-page"> </a><code>✅.4.4.b</code> - Home Page</h4><p>The page load data coming from the collection in Astra and push the information to multiple components that renders sections of the page.</p><p><img src="./tutorial/images/react-components.png" alt="netlify_endpoint" /></p><p>More on <a href="./src/pages/Home.js">Home.js</a>.</p><h2><a class="anchor" aria-hidden="true" id="lab-5-netlify-deployments"> </a>LAB 5 - Netlify Deployments</h2><h3><a class="anchor" aria-hidden="true" id="5-1-connect-netlify-to-your-site"> </a>5.1 - Connect Netlify to your site</h3><p>Execute each of the commands below to link your code to your Netlify deployment.</p><ul><li>First thing, we'll need to <strong>STOP</strong> the <code>netlify dev</code> command we issued a moment ago. In the terminal where you executed the netlify command issue a <code>CTRL-C</code> (control key + the C key) in order to stop the process.</li><li>Then continue with the following commands</li><li>This will pop up a browser to authenticate with netlify</li></ul><h4><a class="anchor" aria-hidden="true" id="code-5-1-a-code-authenticate-in-netlify"> </a><code>✅.5.1.a</code> - Authenticate in Netlify</h4><pre><code>netlify login</code></pre><p><em>Note, when using GitPod the preview pane will not display this properly. You must click the &quot;open in a new window&quot; button in the very top right of the preview pane.</em></p><p><img src="./tutorial/images/netlify_login.png" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="bash"><code>Logging into your Netlify account...Opening https://app.netlify.com/authorize?response_type=ticket&amp;ticket=774701161c326912e718b3a86096f375You are now logged into your Netlify account!Run netlify status for account detailsTo see all available commands run: netlify help</code></pre></blockquote><ul><li>Link your workspace to the associated site with the command Below</li></ul><pre><code>netlify link</code></pre><ul><li>It will display a MENU where you can move UP and DOWN with arrows. Pick first choice</li></ul><pre><code>&gt; Use current git remote origin (https://github ...`</code></pre><p><img src="./tutorial/images/netlify-link.png?raw=true" alt="swaggerui_link" /></p><blockquote><p>🖥️ <code>Output</code></p><pre lang="bash"><code>netlify link will connect this folder to a site on Netlify? How do you want to link this folder to a site? Use current git remote origin (https://github.com/clun/workshop-astra-tik-tok)Looking for sites connected to 'https://github.com/clun/workshop-astra-tik-tok'...Directory LinkedAdmin url: https://app.netlify.com/sites/fanciful-licorice-ea1437Site url:  https://fanciful-licorice-ea1437.netlify.appYou can now run other `netlify` cli commands in this directory</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-5-1-b-code-import-configuration-in-site"> </a><code>✅.5.1.b</code> - Import configuration in site</h4><ul><li>This will take the <code>.env</code> file created by astra-setup and upload it to netlify</li></ul><pre><code>netlify env:import .env</code></pre><h3><a class="anchor" aria-hidden="true" id="5-2-deploy-to-production"> </a>5.2 - Deploy to production</h3><p>Now that you've hooked everything up, time to deploy to production.</p><ul><li>Run</li></ul><pre><code>netlify build</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>────────────────────────────────────────────────────────────────  Netlify Build                                                 ────────────────────────────────────────────────────────────────❯ Version  @netlify/build 28.4.5❯ Flags  dry: false  offline: false❯ Current directory  /workspace/workshop-astra-tik-tok❯ Config file  /workspace/workshop-astra-tik-tok/netlify.toml❯ Context  production────────────────────────────────────────────────────────────────  1. build.command from netlify.toml                            ────────────────────────────────────────────────────────────────$ npm run buildtik-tok-stargate@0.1.0 buildreact-scripts buildCreating an optimized production build...Compiled successfully.File sizes after gzip:  616.87 KB  build/static/js/2.82b8325c.chunk.js  2.32 KB    build/static/js/main.fd7c93f3.chunk.js  966 B      build/static/css/main.9d8c5499.chunk.css  780 B      build/static/js/runtime-main.f09b770f.jsThe project was built assuming it is hosted at /.You can control this with the homepage field in your package.json.The build folder is ready to be deployed.You may serve it with a static server: npm install -g serve serve -s buildFind out more about deployment here:  https://cra.link/deployment(build.command completed in 35.1s)────────────────────────────────────────────────────────────────  2. Functions bundling                                         ────────────────────────────────────────────────────────────────Packaging Functions from functions directory: - add.js - addData.js - edit.js - posts.js(Functions bundling completed in 6.1s)────────────────────────────────────────────────────────────────  Netlify Build Complete                                        ────────────────────────────────────────────────────────────────(Netlify Build completed in 41.3s)</code></pre></blockquote><ul><li>Then run</li></ul><pre><code>netlify deploy --prod</code></pre><blockquote><p>🖥️ <code>Output</code></p><pre><code>Deploy path:        /workspace/workshop-astra-tik-tok/buildFunctions path:     /workspace/workshop-astra-tik-tok/functionsConfiguration path: /workspace/workshop-astra-tik-tok/netlify.tomlDeploying to main site URL...✔ Deploying functions from cache (use --skip-functions-cache to override)✔ Finished hashing 17 files and 4 functions✔ CDN requesting 0 files and 4 functions✔ Finished uploading 4 assets✔ Deploy is live!Logs:              https://app.netlify.com/sites/fanciful-licorice-ea1437/deploys/63974804721fc334dc247455Unique Deploy URL: https://63974804721fc334dc247455--fanciful-licorice-ea1437.netlify.appWebsite URL:       https://fanciful-licorice-ea1437.netlify.appgitpod /workspace/workshop-astra-tik-tok (master) $ </code></pre></blockquote><pre><code>- Then finally run</code></pre><p>netlify open:site</p><pre><code>&gt; 🖥️ `Output`&gt; ```&gt; Opening &quot;fanciful-licorice-ea1437&quot; site url:&gt; https://fanciful-licorice-ea1437.netlify.app&gt; ```## Extra Resources#### Video tutorial with Ania KubowThank you to our wonderful friend Ania Kubow for producing the TikTok clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.While we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.#### Running Astra DB Tik-TokWe're using Create-React-App and the Astra DB Document API to create a simple Tik-Tok clone.  Follow along in this video tutorial: [https://youtu.be/IATOicvih5A](https://youtu.be/IATOicvih5A).Follow the instructions below to get started.#### If you did like this video, please hit the Like and Subscribe button so I know to make more!- Twitter: https://twitter.com/ania_kubow- YouTube: https://youtube.com/aniakubow- Instagram: https://instagram.com/aniakubow</code></pre>
SUCCESS SAVING README for datastaxdevs-workshop-social-media-tiktok
Getting astra.json for datastaxdevs/workshop-graphql-netflix at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2>
HTML FOR datastaxdevs-workshop-graphql-netflix<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1><p><a href="https://gitpod.io/from-referrer/"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><em>50 minutes, Intermediate, <a href="#1-login-or-register-to-astradb-and-create-database">Start Building</a></em></p><p>A simple <strong>ReactJS</strong> Netflix homepage clone running on <em>Astra DB</em> that leverages the GraphQL API with <em>paging</em> and <em>infinite scrolling.</em>This application is the result of the collaboration between <a href="https://www.youtube.com/channel/UC5DNytAJ6_FISueUfzZCVsw">Ania Kubow</a> and the Datastax Developer Advocate team.</p><!--- ENDEXCLUDE ---><p>See the <a href="https://imgur.com/3ns3UJB">Video Walkthrough</a> of what you will build!</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/ui.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Build and run a Netflix clone.</li><li>Learn <strong>GraphQL API</strong> and how to use it with a database to create the tables and navigate the data.</li><li>Learn about <strong>pagination</strong> and <strong>infinite scrolling</strong> in a Web UI.</li><li>Leverage Netlify and DataStax Astra DB.</li><li>Deploy the Netflix clone to production with Netlify.</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><details><summary><strong>Can I run the workshop on my computer?</strong></summary><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></details><details><summary><strong>What other prerequisites are there?</strong></summary><ul><li>You will need a github account</li><li>You will also need Netlify and Astra DB accounts, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></details><details><summary><strong>Do I need to pay for anything for this workshop?</strong></summary><p><strong>No.</strong> All tools and services we provide here are FREE.</p></details><details><summary><strong>Will I get a certificate if I attend this workshop?</strong></summary><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge.</p></details><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra">&quot;cassandra&quot; on StackOverflow</a></li><li><a href="https://dba.stackexchange.com/questions/tagged/cassandra">&quot;cassandra&quot; on DBA StackExchange</a></li></ul><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><p>[TOC]</p><h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Create Astra DB Instance</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-create-table-for-genres-with-graphql">Create table for genres with GraphQL</a></li><li><a href="#4-insert-genre-data-with-graphql">Insert genre data with GraphQL</a></li><li><a href="#5-retrieve-genres-with-graphql">Retrieve genres with GraphQL</a></li><li><a href="#6-create-a-table-for-movies">Create a table for movies</a></li><li><a href="#7-insert-a-few-movies">Insert a few movies</a></li><li><a href="#8-retrieve-movies-pagination">Retrieve movies: Pagination</a></li></ol><h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3><ol><li><a href="#1-deploy-skeletal-gui-to-netlify">Deploy skeletal GUI to Netlify</a></li><li><a href="#2-launch-gitpod-from-your-github-repo">Launch Gitpod from YOUR Github repo</a></li><li><a href="#3-set-up-and-use-astra-cli">Set up and use <code>astra-cli</code></a></li><li><a href="#4-serverless-functions">Serverless Functions</a></li><li><a href="#5-fetching-from-the-front-end">Fetching from the Front-End</a></li><li><a href="#6-install-the-netlify-cli">Install the Netlify CLI</a></li><li><a href="#7-provide-db-connection-parameters">Provide DB connection parameters</a></li><li><a href="#8-run-the-app-in-dev-mode">Run the app in dev mode</a></li><li><a href="#9-connect-to-your-netlify-site">Connect to your Netlify site</a></li><li><a href="#10-deploy-in-production">Deploy in production!</a></li></ol><p><a href="#homework"><strong>🎓 Complete the assignment, receive your Badge!</strong></a></p><h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3><ul><li><a href="https://github.com/datastaxdevs/workshop-intro-to-graphql">Intro to GraphQL Workshop</a></li><li><a href="https://github.com/datastaxdevs/react-basics">React starter using NPX</a></li><li><a href="https://github.com/datastaxdevs/appdev-week1-todolist">React ToDo app</a></li><li><a href="https://github.com/datastaxdevs/workshop-battlestax/blob/master/README_JAM.md">What is JamStack?</a></li><li><a href="#video-tutorial-with-ania-kubow">Video tutorial with Ania Kubow</a></li></ul><h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><blockquote><p>🎁 <em>When creating your instance, use the promotion code <strong>ANIA200</strong> to get 200$ of additional free credit!</em></p></blockquote><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you use up your credits the databases will pause, no charge, and you will be given the option to upgrade to a higher tier.</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <strong>Right-Click</strong> the following button and <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-01-04" target="blank"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>netflix</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCK 🔒 icons: the LOCKed regions are the region not accessible to the Free Tier.</td></tr><tr><td>.</td><td></td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>netflix</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB Dashboard page. You may have to &quot;Resume&quot; the database first in case it is in &quot;hibernated&quot; state.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong> (needed to authenticate with your database and start using it):<strong>please IGNORE THIS ONE, as we will be soon creating a new, more powerful token for today</strong>.</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this usually only takes 2-3 minutes.</p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><blockquote><p>Note: this step is very important, as the token generated automatically for you withthe database lacks some permissions we'll use in the workshop.</p></blockquote><p><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create a token for your app</a>, <em>using the <strong>&quot;Database Administrator&quot;</strong> role</em>.Keep it handy for later use (best to download it in CSV format, as the valueswill not be visible afterward).This will provide authentication later when interacting with the database.Today, in particular, you'll need the string labeled &quot;token&quot; (the one starting with <code>AstraCS:...</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2><p>✅  <strong>Step 3a:</strong> Open <strong>GraphQL Playground</strong>:</p><ol start="0"><li>Ensure you are logged on to your <a href="https://astra.datastax.com">Astra</a> account</li><li>Click on the &quot;workshops&quot; database on the left (expanding the list if needed)</li><li>Click <code>Connect</code> TAB</li><li>Click the <code>APIs</code>  connection method</li><li>Make sure <code>GraphQL API</code> is selected</li><li>Locate the link to your GraphQL Playground in the text</li></ol><p><img src="images/open-playground-2-wh.png" alt="Open Astra DB GraphQL Playground image" /></p><details><summary><strong>Click here if you are not using the "New Astra Experience" UI (yet)</strong></summary><p><img src="images/open-playground-2.png" alt="Open Astra DB GraphQL Playground image, old Astra UI" /></p></details><p><strong>Note</strong>: in the following, we will refer to &quot;playground tabs&quot;. These are <em>not</em> the tabsin your browser, rather they are tabs <em>within</em> the Playground application,to switch between the (logically distinct) realms of &quot;managing schema&quot; and &quot;managing data in the tables&quot;(more on that later).</p><p><img src="images/tabs-vs-playgroundtabs-labeled-2.png" alt="Playground tabs VS Browser tabs" /></p><p>✅  <strong>Step 3b:</strong> Provide the database token as header</p><p>In the GraphQL Playground, <strong>Populate HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your token (including the <code>AstraCS:</code> part).<em>This is the &quot;Database Administrator&quot; token you created earlier on the Astra DB dashboard (Step 2 above).</em></p><details><summary><strong>Note</strong>: make sure you are on the <strong>graphql-schema</strong> playground tab in this step. Click here to show image.</summary><p><img src="images/graphql-playground.png" alt="GraphQL Playground and token header, Schema playground tab" /></p></details><blockquote><p>Note: the GraphQL Playground starts with a ready-to-use <em>temporary token</em> as the <code>x-cassandra-token</code> header. But you want the queries run in the Playgroundto be identical to those that the Netlify functions will run from code, so <strong>please replace the token with your DB token as instructed</strong>.</p></blockquote><p>✅  <strong>Step 3c:</strong> In GraphQL Playground, create the <code>reference_list</code> table:</p><p>Copy the following <strong>mutation</strong> to the left panel</p><pre lang="yaml"><code>mutation createReferenceList {  reference_list: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;reference_list&quot;,    ifNotExists:true    partitionKeys: [       { name: &quot;label&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [      { name: &quot;value&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]  )}</code></pre><details><summary>and then use the big "play button" arrow in the center to execute it. Click for screenshot.</summary><p><img src="images/playground-1.png" alt="image" /></p></details><p><strong>GraphQL Playground troubleshooting</strong> (covers this whole section)</p><table><thead><tr><th>Trouble</th><th>Shooting</th></tr></thead><tbody><tr><td>Server cannot be reached</td><td>Add Astra token to headers (including <code>AstraCS:...</code>; check quotes)</td></tr><tr><td>Server cannot be reached (second playground tab)</td><td>Check playground target URL ends with <code>netflix</code></td></tr><tr><td>Response not successful: Received status code 401</td><td>Same as &quot;server cannot be reached&quot;</td></tr><tr><td>Response not successful: Received status code 404</td><td>Check spelling of keyspace in target URL</td></tr><tr><td>&quot;Play&quot; button does nothing</td><td>Ensure query is syntactically correct</td></tr><tr><td>&quot;Validation error of type FieldUndefined&quot;</td><td>Most likely query in the wrong playground tab, or writing to table not created yet</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2><p>✅  <strong>Step 4a:</strong> Get to the API URL for your keyspace</p><p>In graphQL playground, <strong>change playground tab</strong> to now use <code>graphql</code>. The Playground has its own address bar(<strong>note</strong>: it's <em>not</em> the address bar of your browser). Edit the ending of the URL shown there, from <code>system</code> to thename of the keyspace: <code>netflix</code></p><p>✅  <strong>Step 4b:</strong> Repeat the insertion of the <code>x-cassandra-token</code> header for this playground tab (as you did for the first one):</p><details><summary>Show me!</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>✅  <strong>Step 4c:</strong> In the GraphQL Playground, run the mutation that writes genre data:</p><p>Copy the following mutation on the left panel:</p><pre lang="yaml"><code>mutation insertGenres {  action: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Action&quot;}) {    value{value}  }  anime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Anime&quot;}) {     value{value}  }  award: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Award-Winning&quot;}) {     value{value}  }  children: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Children &amp; Family&quot;}) {     value{value}  }  classic: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Classic&quot;}) {     value{value}  }   comedies: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Comedies&quot;}) {     value{value}  }  crime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Crime&quot;}) {     value{value}  }   cult: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Cult&quot;}) {     value{value}  }    documentaries: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Documentaries&quot;}) {     value{value}  }  drama: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Dramas&quot;}) {     value{value}  }  fantasy: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Fantasy&quot;}) {     value{value}  }  french: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;French&quot;}) {     value{value}  }  horror: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Horror&quot;}) {     value{value}  }  independent: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Independent&quot;}) {     value{value}  }  international: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;International&quot;}) {     value{value}  }   italian: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Italian&quot;}) {     value{value}  }   musicmusicals: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Music &amp; Musicals&quot;}) {     value{value}  }   realitytv: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Reality TV&quot;}) {     value{value}  }   romance: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Romance&quot;}) {     value{value}  }  scifi: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Sci-Fi&quot;}) {     value{value}  }  thriller: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Thriller&quot;}) {     value{value}  }   tvshow: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;TV Show&quot;}) {     value{value}  } }</code></pre><p>then click on the big &quot;play button&quot; arrow in the center to execute the mutation</p><h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2><p>✅  <strong>Step 5a:</strong> In GraphQL Playground, not changing playground tab (stay on the second: &quot;graphql&quot;, yeah) run the following query to read the <code>value</code> column of all table rows:</p><pre lang="yaml"><code>query getAllGenres {    reference_list (value: {label:&quot;genre&quot;}) {      values {      	value      }    }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-3.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2><p>✅  <strong>Step 6a:</strong> Switch back to first playground tab (&quot;graphql-schema&quot;; the token header will be already set).</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-back.png" alt="image" /></p></details><p>Use the following mutation to create a new table:</p><pre lang="yaml"><code>mutation createMoviesTable {  movies_by_genre: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;movies_by_genre&quot;,    ifNotExists: true,    partitionKeys: [      { name: &quot;genre&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [       { name: &quot;year&quot;, type: {basic: INT}, order: &quot;DESC&quot; },      { name: &quot;title&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]    values: [      { name: &quot;synopsis&quot;, type: {basic: TEXT} },      { name: &quot;duration&quot;, type: {basic: INT} },      { name: &quot;thumbnail&quot;, type: {basic: TEXT} }    ]  )}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-4.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2><p>✅  <strong>Step 7a:</strong> Go to playground tab &quot;graphql&quot; again.</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>Use the following mutation to populate the <code>movies_by_genre</code> table with four movies:</p><pre lang="yaml"><code>mutation insertMovies {  inception: insertmovies_by_genre(    value: {       genre:&quot;Sci-Fi&quot;,       year:2010,      title:&quot;Inception&quot;,      synopsis:&quot;Cobb steals information from his targets by entering their dreams.&quot;,      duration:121,      thumbnail:&quot;https://i.imgur.com/RPa4UdO.mp4&quot;}) {        value{title}    }    prometheus: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:2012,      title:&quot;Prometheus&quot;,      synopsis:&quot;After a clue to mankind's origins is discovered, explorers are sent to the darkest corner of the universe.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/L8k6Bau.mp4&quot;}) {        value{title}    }    	aliens: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1986,      title:&quot;Aliens&quot;,      synopsis:&quot;Ellen Ripley is sent back to the planet LV-426 to establish contact with a terraforming colony.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/QvkrnyZ.mp4&quot;}) {        value{title}    }      bladeRunner: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1982,      title:&quot;Blade Runner&quot;,      synopsis:&quot;Young Blade Runner K's discovery of a long-buried secret leads him to track down former Blade Runner Rick Deckard.&quot;,      duration:145,      thumbnail:&quot;https://i.imgur.com/xhhvmj1.mp4&quot;}) {        value{title}    }  }</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-5.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2><p>✅  <strong>Step 8a:</strong> In GraphQL Playground, not changing playground tab (stay on the second tab, &quot;graphql&quot;, yeah) list values from the table with the following command:</p><pre lang="yaml"><code>query getMovieAction {  movies_by_genre (      value: {genre:&quot;Sci-Fi&quot;},      orderBy: [year_DESC]  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }  }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-6.png" alt="image" /></p></details><p>✅ <strong>Step 8b: Enable pagination:</strong> On a small dataset, you can retrieve all values in the table at once; but in general, for performance or network reasons, you'll need pagination. Run a similar query as before, but this time asking for a <em>page size of 2</em>:</p><pre lang="yaml"><code>query getMovieActionPag1 {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-2.png" alt="image" /></p></details><p>✅ <strong>Step 8c: Fetch the next page:</strong></p><p>Notice that <code>pageState</code> now is also returned. Use it to fetch the next 2 items (next page):edit the next query to replace <code>YOUR_PAGE_STATE</code> with your own string value:</p><pre lang="yaml"><code>query getMovieActionNextPage {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2, pageState: &quot;YOUR_PAGE_STATE&quot;},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-3.png" alt="image" /></p></details><p>If you try to paste the <em>newly-obtained</em> value for <code>pageState</code> and re-run the query, you get an empty list and a null <code>pageState</code> in return. D'oh! You had scrolled through all rows already:<em>this is how pagination signals the end of the full results list.</em></p><h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1><h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2><p>✅ <strong>Step 1a: Netlify Button:</strong> Click the following button to deploy the skeletal GUI to Netlify. There is no data since there is no database connected to the app (yet); we will connect the database to the app shortly.</p><p><strong>Note</strong>: preferrably Ctrl-click for a new tab.</p><details><summary>What does the Netlify deploy button do?</summary><p>The Netlify deploy button will:</p><ul><li>Create a new repository for you on Github (Note: it's an unrelated <em>copy</em>, not a fork)</li><li>Create a site on Netlify (and deploy a nonworking build of the app, which lacks the DB connection parameters still)</li><li>Link the two together.</li></ul></details><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-graphql-netflix"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p><details><summary>Show me!</summary><p><img src="images/deploy-to-netlify.gif" alt="Netlify button in action" /></p></details><p>This will take a few minutes:</p><ul><li>you may have to authenticate through Github in the process;</li><li>confirm the repo name and &quot;Save &amp; Deploy&quot; when asked.</li></ul><p><em>Note: if there is an existing account in Netlify, check the settings to make sure the Netlify account is connected to your Github account.</em></p><details><summary>Show me!</summary><p><img src="images/netlify-connect-01.png" alt="Deploy to Netlify, &quot;connected accounts&quot;" /></p></details><p>✅ <strong>Step 1b: Check the deploy logs:</strong> Click on <code>Site deploy in progress</code> within the Netlify UI.</p><details><summary>Show me!</summary><p><img src="images/deploy-1.png" alt="Deploy to Netlify, &quot;site deploy in progress&quot;" /></p></details><p>Then click the top deploy link to see the build process.</p><details><summary>Show me!</summary><p><img src="images/deploy-2.png" alt="Deploy to Netlify, &quot;Production/Building&quot;" /></p></details><p>✅ <strong>Step 1c: Complete the build:</strong> Wait until the build shows <code>Netlify Build Complete</code>,  <strong>When you see &quot;<em>Pushing to repository...</em>&quot;</strong> you're ready to move on.</p><details><summary>Show me!</summary><p><img src="images/deploy-3b.png" alt="Deploy to Netlify, logs showing build finishing" /></p></details><p>✅ <strong>Step 1d: Get back to your new site:</strong> Scroll up to the top and click on the site name (it'll be after &quot;<em>[your login]</em>'s Team&quot; next to the Netlify button). Then locate your app's full URL and click to open it.</p><details><summary>Show me!</summary><p><img src="images/deploy-4.png" alt="Deploy to Netlify, site name next to your team's name" /></p><p>Clicking on the full URL (something like <code>https://YOUR-SITE-NAME.netlify.app</code>) you will see the skeletal GUI (without the data from the database) in a new tab. Here is where to click:</p><p><img src="images/deploy-4sitename.png" alt="Deploy to Netlify, access the skeletal GUI" /></p><p>and here, finally, your skeletal GUI in its full splendour:</p><p><img src="images/deploy-4skeletal.png" alt="Netlify site, no data yet (skeletal GUI)" /></p></details><h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2><p>✅ <strong>Step 2a: Jump to YOUR repo:</strong> Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get to your new repository on Github.Scroll to where you were in the README.</p><details><summary>Show me!</summary><p><img src="images/deploy-5.png" alt="Deploy to Netlify, " /></p></details><blockquote><p><strong>Note</strong> At this point, you MUST be reading this README from <strong>YOUR</strong> Github repository.That is, if the address bar still says <code>https://github.com/datastaxdevs/...</code> pleasehead over to YOUR copy of the repo before going the Gitpod route!</p></blockquote><p>✅ <strong>Step 2b: Launch Gitpod:</strong></p><p>Use this link to open Gitpod from <strong>YOUR</strong> repository! (<em>Tip: Ctrl-click on the button to open in new tab.</em>)</p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><em>Note: the button works on <img src="images/chrome-logo.svg" height="20"/> Chrome and <img src="images/firefox-logo.svg" height="20"/> Firefox.</em></p><details><summary>Click to troubleshoot if you have another browser</summary><img src="images/gitpod_trick.png" /></details><p>ℹ️ <em>It may take a few minutes (approx. 3-5) for GitPod to fully initialize.Please wait until the console in the lower half of Gitpod is responsive.</em></p><blockquote><p>You may see a dialog about &quot;opening this workspace in VS Code Desktop&quot;: you can safely dismiss it.</p></blockquote><p>Gitpod will be your IDE from now on. If you are familiar with VSCode, you can probablyjust use it. Otherwise, take a moment to review a separate page<a href="know_your_gitpod.md">&quot;Know your Gitpod&quot;</a>and then come back here.</p><h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2><p>You are going to use a CLI tool to simplify operations with Astra DB. The toolis <a href="https://docs.datastax.com/en/astra-classic/docs/astra-cli/installation.html">preinstalled</a>on your Gitpod.</p><p>✅ <strong>Step 3a: Set up the CLI:</strong></p><p>Run the following in the Gitpod terminal and,when prompted, enter the <code>AstraCS:...</code> you obtained at the beginning.</p><pre lang="bash"><code>astra setup</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-setup-2.png" alt="astra-cli" /></p></details><p>✅ <strong>Step 3b: Bulk data load:</strong> Load a large movie dataset in the database.This command installs and properly launches the <code>DSBulk</code> tool (<a href="https://docs.datastax.com/en/dsbulk/docs/dsbulkAbout.html">docs</a>):</p><pre lang="bash"><code>astra db load workshops \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-dsbulk-2.png" alt="astra-cli" /></p></details><details><summary>Show the syntax for old versions of astra-cli (click here)</summary><p>Note: you should not need this.</p><pre lang="bash"><code>astra db dsbulk workshops load \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre></details><blockquote><p><em>Note</em>: we mock the trailers for these thousands of movies by using a handfulof them over and over. Don't be surprised if you'll see the wrong trailersfor your favorite movie!</p></blockquote><p>That's it! All 6000+ movies are now loaded and ready to go!</p><h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2><blockquote><p><em>Note</em>: this section and the next one (&quot;Fetching from the Front-End&quot;)are not steps to &quot;perform&quot;, rather suggestions to dive in the appcode and figure out how the various parts (React components, Netlifyfunctions and finally the GraphQL server in Astra DB) fit together.<strong>You can skip these and jump to the <a href="#6-install-the-netlify-cli">next practical step</a></strong>if you are in a hurry, but please come back to thesefor reference if you want to dissect the code!</p></blockquote><details><summary>Show me this section</summary><p>Take a look at <code>functions/getGenres.js</code></p><pre lang="javascript"><code>const fetch = require('node-fetch')exports.handler = async function (event) {  const body = JSON.parse(event.body)  const url = process.env.ASTRA_DB_GRAPHQL_URL  const query = `    query getAllGenres {      reference_list (        value: { label: &quot;genre&quot;},        options: {          pageSize: ${JSON.stringify(body.pageSize)},          pageState: ${JSON.stringify(body.pageState)}        }      ) {        values {          value        }        pageState      }    }  `  const response = await fetch(url, {    method: 'POST',    headers: {      &quot;Content-Type&quot;: &quot;application/json&quot;,      &quot;x-cassandra-token&quot;: process.env.ASTRA_DB_APPLICATION_TOKEN    },    body: JSON.stringify({ query })  })  try {    const responseBody = await response.json()    return {      statusCode: 200,      body: JSON.stringify(responseBody)    }  } catch (e) {    console.log(e)    return {      statusCode: 500,      body: JSON.stringify(e)    }  }}</code></pre><p>You'll notice the familiar GraphQL query &quot;getAllGenres&quot; you used previously in the playground.It's been modified a bit to utilize pagination.When building the GraphQL query, you pass the desired page size and state to the GraphQL API:</p><pre lang="javascript"><code>options: {  pageSize: ${JSON.stringify(body.pageSize)},  pageState: ${JSON.stringify(body.pageState)}}</code></pre><p>You ask the API server to give us back the table column &quot;value&quot; (containing the genre name), but also the page statefor when you'll need the next page:</p><pre lang="javascript"><code>{  values {    value  }  pageState}</code></pre><p>The serverless function <code>functions/getMovies.js</code> works in much the same way, but you provide the specific genre you want and the page size is hardcoded:</p><pre lang="javascript"><code>query {  movies_by_genre (    value: { genre: ${JSON.stringify(genre)}},    orderBy: [year_DESC],    options: { pageSize: 6, pageState: ${JSON.stringify(pageState)} }  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }    pageState  }}</code></pre></details><h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2><details><summary>Show me this section</summary><p>Take a look at how you fetch from these serverless functions from the front-end. Start in <code>src/App.js</code></p><p>There is a fetch method defined, that will retrieve a page of genres by calling the <code>getGenres</code> serverless function.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  if (! isFetching)  {    setIsFetching(true)    const response = await fetch(&quot;/.netlify/functions/getGenres&quot;, {      method: &quot;POST&quot;,      body: JSON.stringify({pageState, pageSize}),    })    const responseBody = await response.json()    setPageState(responseBody.data.reference_list.pageState)    setGenres(gs =&gt; (gs || []).concat(responseBody.data.reference_list.values))    setIsFetching(false)  }}</code></pre><p>You pass in the current <code>pageState</code> and <code>pageSize</code> state variables and receive a response from the serverless function. You then set the <code>pageState</code> var to the new pagestate, and set the <code>genres</code> state variable to the received data. (Note that you are concatenating the new data to the var, since you want to keep all previously fetched data, not replace).</p><p>When rendering the page, you generate a <code>&lt;Section&gt;</code> component for each genre, plus a <code>&lt;div&gt;</code> at the bottom, which will detect a <code>mouseEnter</code> event and trigger the loading of a new pageful of genres:</p><pre lang="javascript"><code>&lt;&gt;  &lt;NavBar /&gt;  &lt;HeroSection /&gt;  {genres &amp;&amp; (    &lt;div className=&quot;container&quot;&gt;      {Object.values(genres).map((genre) =&gt; (        &lt;Section key={genre.value} genre={genre.value} /&gt;      ))}    &lt;/div&gt;  )}  &lt;div    className=&quot;page-end&quot;    onMouseEnter={() =&gt; {      setRequestedPage( np =&gt; np + 1 )    }}  /&gt;&lt;/&gt;</code></pre><p>The <code>&lt;Section&gt;</code> component works in the same way, but you will fully replace the data in the <code>movies</code> variable this time.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  const response = await fetch(&quot;/.netlify/functions/getMovies&quot;, {    method: &quot;POST&quot;,    body: JSON.stringify({ genre: genre, pageState: pageState }),  })  const responseBody = await response.json()  setMovies(responseBody.data.movies_by_genre.values)  setPageState(responseBody.data.movies_by_genre.pageState)}</code></pre><p>Now that you know how the front-end works, launch the app!</p></details><h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2><p>In the <code>workshop-graphql-netflix</code> directory, run the following:</p><pre><code>npm install -g netlify-cli</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-install-cli.png" alt="Install Netlify CLI" /></p></details><p>With the Netlify command-line interface you will build and deploythe application directly from the Gitpod terminal.</p><h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2><p>The &quot;serverless functions&quot; part of your app, in order to speak toyour DB through GraphQL, needs two important pieces of information:the API endpoint and the token. You will now create a <code>.env</code> file whichdefines them as environment variables.</p><p>The quickest way is to have <code>astra-cli</code> generate one for you:</p><pre><code>astra db create-dotenv -k netflix workshops</code></pre><details><summary>I want to do it manually</summary><p>If for some reason you don't use <code>astra-cli</code>, follow these steps:</p><ul><li>copy <code>cp .env.sample .env</code> and open it: <code>gp open .env</code>;</li><li><code>.env</code> is now open in the IDE editor and has two placeholders to replace:</li><li>insert the <code>AstraCS:...</code> database token (keep the quotes);</li><li>insert the GraphQL API address (it will look something like <code>https://b2f[...]/graphql/netflix</code>).</li></ul><p>You can generate a new database token if you want. The GraphQL addresscan be found in the playground: it is the URL you have edited to end in <code>netflix</code>in the second playground tab (<a href="#4-insert-genre-data-with-graphql">Part 1, step 4a</a>).</p></details><h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2><p>✅ <strong>Step 8a: Install dependencies:</strong></p><pre lang="bash"><code>npm install</code></pre><p>✅ <strong>Step 8b: Start the app:</strong> With the command</p><pre><code>netlify dev</code></pre><p>the application should automatically be displayed in GitPod's &quot;simple browser&quot;.Note that in this <strong>dev-mode run</strong> everything is local to your Gitpod instance:<em>the &quot;serverless functions&quot;, in particular, are actually running there,alongside the rest of the application!</em></p><details><summary>Show me!</summary><p><img src="images/preview.png" alt="run-in-preview-pane" /></p></details><p>You can copy the URL found in Gitpod's simple browser and open in a new tab(of your real browser, that is) for abetter experience. But now it's time to move to the actual deploy phase.</p><h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2><p>✅ <strong>Step 9a:</strong> Stop the dev run with <code>Ctrl-C</code>.</p><p>✅ <strong>Step 9b:</strong> Authenticate with Netlify: run</p><pre><code>netlify login</code></pre><p>then grab the URL printed on the console(something like <code>https://app.netlify.com/authorize?response[...]</code>)and manually <strong>open it in a new tab</strong> (Gitpod blocks it for security).You will be asked to authorize &quot;netlify-cli&quot; to access your Netlify accountin the process.</p><details><summary>Show me!</summary><p><img src="images/waiting_for_authorization-2.png" alt="Netlify login" /></p></details><p>Once you complete the login, you will see a console output like this:</p><p><img src="images/netlify-login-2.png" alt="Netlify login" /></p><p>✅ <strong>Step 9c:</strong> Associate to your Netlify site: run</p><pre><code>netlify link</code></pre><p>and make sure you confirm the choice of associating to&quot;current git remote origin&quot;.</p><details><summary>Show me!</summary><p><img src="images/netlify-link-2.png" alt="Netlify link" /></p></details><h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2><p>✅ <strong>Step 10a:</strong> Inject secrets to the Netlify site</p><pre><code>netlify env:import .env</code></pre><p>Now the (actually) serverless functions in Netlify have the connectionparameters they need.</p><details><summary>Show me!</summary><p><em>Note: If you generated the <code>.env</code> with<code>astra-cli</code>, the actual output is much more verbose.</em></p><p><img src="images/netlify_env_import.png" alt="image" /></p></details><p>✅ <strong>Step 10b:</strong> Build the app</p><p>Run</p><pre><code>netlify build</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-build.png" alt="Netlify build" /></p></details><p>✅ <strong>Step 10c:</strong> Deploy!</p><pre><code>netlify deploy --prod</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-deploy-prod-2.png" alt="Netlify deploy in prod" /></p></details><p>✅ <strong>Step 10d:</strong> Visit your site.</p><pre><code>netlify open:site</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-open-site-2.png" alt="Netlify Open site" /></p></details><p>If needed, manually copy-paste your site URL in a new browser tab... and enjoyyour work!</p><p><img src="images/deployed_netflix_clone.png" alt="Netlify Setup Example" /></p><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2><p>Congratulations, you made it!</p><p>Now don't forget to complete your assignment and <a href="#homework">submit it</a>to get your badge of completion!</p><pre><code>       ██╗    ██╗███████╗██╗     ██╗                 ██║    ██║██╔════╝██║     ██║                 ██║ █╗ ██║█████╗  ██║     ██║                 ██║███╗██║██╔══╝  ██║     ██║                 ╚███╔███╔╝███████╗███████╗███████╗             ╚══╝╚══╝ ╚══════╝╚══════╝╚══════╝                                                          ██████╗  ██████╗ ███╗   ██╗███████╗██╗        ██╔══██╗██╔═══██╗████╗  ██║██╔════╝██║        ██║  ██║██║   ██║██╔██╗ ██║█████╗  ██║        ██║  ██║██║   ██║██║╚██╗██║██╔══╝  ╚═╝        ██████╔╝╚██████╔╝██║ ╚████║███████╗██╗        ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝ </code></pre><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="images/netflix-badge.png?raw=true" width="200" align="right" /><p>🎓 Complete your upgrade and get your verified skill badge! Do the assignment and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Insert a movie OR genre of your choice in the database (It's OK to re-use the trailer file URL from another movie! Just make the title recognizable as yours).</li><li>Take a screenshot of your Netflix clone running either from your Gitpod or (better) deployed to production in Netlify (in this case, you could also give us the Netlify URL).</li><li>The screenshot should clearly show the movie/genre you added (make sure you tell us its name when submitting).</li><li>(Optional for extra wisdom) Watch the 2-hour video by Ania <a href="#video-tutorial-with-ania-kubow">HERE</a>, build the app yourself, and show us the running final result.</li><li>Submit your homework <a href="https://dtsx.io/homework-graphql-netflix">here</a>.</li></ol><p>That's it, you are done: expect an email in the next days!</p><h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1><h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2><p>Thank you to our wonderful friend Ania Kubow for producing the Netflix clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.</p><p>While we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.</p><p><a href="https://www.youtube.com/watch?v=g8COh40v2jU">Ania's Netflix Video</a></p>
SUCCESS SAVING README for datastaxdevs-workshop-graphql-netflix
Getting astra.json for datastaxdevs/appdev-week1-todolist at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="todo-astra-cassandra"> </a>TODO + Astra + Cassandra 📒</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="an-introduction-to-web-development"> </a>An introduction to web development</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="codepen-starter-examples"> </a>CodePen starter examples</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-a-table-with-rest-api-using-swagger"> </a>3. Create a table with REST API using Swagger</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-insert-data-in-the-table-with-the-rest-api-using-swagger"> </a>4. Insert data in the Table with the REST API using Swagger</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-retrieving-values"> </a>5. Retrieving values</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-launch-gitpod-ide"> </a>6. Launch GitPod IDE</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-launch-the-todo-app"> </a>7. Launch the TODO app</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3>
HTML FOR datastaxdevs-appdev-week1-todolist<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="todo-astra-cassandra"> </a>TODO + Astra + Cassandra 📒</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#prerequisites">Start Building</a></em></p><p>This is an example React To-Do application using a <a href="https://astra.dev/9-9">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://monosnap.com/image/Fv0yPAznbeNJD3vYlQfztME6yogzFT" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Create a &quot;from scratch&quot; <strong>React</strong> app using NPX</li><li>Learn about <strong>React</strong> components and how they are used to dynamically update the DOM with new information</li><li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li><li>Learn how to use Swagger to interact with the database using a <strong>REST</strong> API</li><li>Leverage Netlify and DataStax Astra DB</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a github account</li><li>You will also need an Astra DB account, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="https://user-images.githubusercontent.com/23346205/124651231-a7e99400-de68-11eb-9f3f-ab6b88da0cdf.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Create a <strong>React</strong> app from scratch using NPX. Follow <a href="https://github.com/datastaxdevs/react-basics">these</a> instructions. <strong>Take a screenshot of your final working app</strong>.</li><li>Launch the TODO starter app, connect it to the database, and display your changes from the database. <strong>Take a screenshot of your TODO app with your unique entries</strong>.</li><li>Submit your homework <a href="https://github.com/datastaxdevs/appdev-week1-todolist/issues/new?assignees=HadesArchitect%2C+SonicDMG%2C+RyanWelford&amp;labels=homework%2C+wait+for+review&amp;template=homework-assignment.md&amp;title=%5BHW%5D+%3CNAME%3E">here</a>. Note:<em>never share your Astra DB tokens!</em></li></ol><p>That's it, you are done! Expect an email next week!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Login or Register to AstraDB and create database</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-create-a-table-with-rest-api-using-swagger">Create a table with REST API using Swagger</a></li><li><a href="#4-insert-data-in-the-table-with-the-rest-api-using-swagger">Insert data in the Table with the REST API using Swagger</a></li><li><a href="#5-retrieving-values">Retrieving values</a></li><li><a href="#6-launch-gitpod-ide">Launch GitPod IDE</a></li><li><a href="#7-launch-the-todo-app">Launch the TODO app</a></li></ol><h2><a class="anchor" aria-hidden="true" id="an-introduction-to-web-development"> </a>An introduction to web development</h2><h3><a class="anchor" aria-hidden="true" id="codepen-starter-examples"> </a>CodePen starter examples</h3><ul><li><a href="https://codepen.io/DatastaxDevs/pen/WNjrXXp">HTML</a></li><li><a href="https://codepen.io/DatastaxDevs/pen/QWvyOOv">CSS</a></li><li><a href="https://codepen.io/DatastaxDevs/pen/mdmVRwy">Javascript</a></li></ul><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><p><strong><code>ASTRADB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 5M writes, 30M reads, 40GB storage monthly - sufficient to run small production workloads.</p><h3><a class="anchor" aria-hidden="true" id="step-1a-click-the-button-to-login-or-register-with-datastax-you-can-use-your-code-github-code-code-google-code-accounts-or-register-with-an-code-email-code"> </a>✅ Step 1a: Click the button to login or register with Datastax. You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</h3><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><p><a href="https://astra.dev/9-9"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/img/create_astra_db.png?raw=true" /></a></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-spring-stargate/raw/main/images/tutorials/astra-create-db.gif?raw=true" /></li></ul></details><p><strong>Use the following values when creating the database</strong></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>database name</strong></td><td><code>todos_workshop_db</code></td></tr><tr><td><strong>keypace</strong></td><td><code>todos</code></td></tr><tr><td><strong>Cloud Provider</strong></td><td><em>Use the one you like, click a cloud provider logo,  pick an Area in the list and finally pick a region.</em></td></tr></tbody></table><p><em>You can technically use whatever you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><p>You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/db-pending.png?raw=true" alt="image" /></p><p>The status will change to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><p>✅  <strong>Step 2a:</strong>  <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Create a token for your app</a> to use in the settings screen. Use &quot;Database Administrator&quot; permission.</p><p>✅  <strong>Step 2b:</strong>  Copy the token value (eg <code>AstraCS:KDfdKeNREyWQvDpDrBqwBsUB:ec80667c....</code>) in your clipboard and save the CSV, this value would not be provided afterward.</p><p><strong>👁️ Expected output</strong></p><ul><li><details><summary>Show me!</summary>  <img src="https://github.com/datastaxdevs/workshop-graphql-netflix/blob/main/tutorial/images/astra-create-token.gif?raw=true" /></li></ul></details><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-create-a-table-with-rest-api-using-swagger"> </a>3. Create a table with REST API using Swagger</h2><p>✅  <strong>Step 3a:</strong> Open <strong>Swagger</strong> by</p><ol><li>Click on your active database</li><li>Click <code>Connect</code> TAB</li><li>Click <code>REST API</code></li><li>Clik link to your swagger endpoint.</li></ol><p><em>As shown on the picture below.</em><img src="https://user-images.githubusercontent.com/23346205/124656913-d28b1b00-de6f-11eb-9712-e7629f5b8867.png?raw=true" alt="image" /></p><p>✅  <strong>Step 3b:</strong> Navigate to <strong>create a table</strong> section</p><ol><li>Once <strong>Swagger</strong> is launched, scroll down and navigate to the <strong>schemas</strong> section</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124658644-ffd8c880-de71-11eb-8064-c26a2979b66f.png?raw=true" alt="image" /></p><ol start="2"><li>Then, within the <strong>schemas</strong> section navigate to <strong>Create a table</strong> and click on it to open the section.</li></ol><ul><li>Take particular note of the REST URI <strong>/api/rest/v2/schemas/keyspaces/{keyspaceName}/tables</strong>.</li><li>Also take note this is using a <strong>POST</strong> command.</li></ul><p><img src="https://user-images.githubusercontent.com/23346205/124658990-71187b80-de72-11eb-8d25-01e6c6216aa5.png?raw=true" alt="image" /></p><ol start="3"><li>Click the &quot;Try it out&quot; button</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124659185-ae7d0900-de72-11eb-9108-1595c3306bb3.png?raw=true" alt="image" /></p><p>✅  <strong>Step 3c:</strong> Create table <strong>restfromreadme_by_id</strong></p><ol><li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li><li>Enter the <strong>keyspaceName</strong> <code>todos</code></li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/3c2_create-table.png?raw=true" alt="image" /></p><ol start="3"><li>Finally, copy the create table statement using the code below into the <strong>body</strong> field</li></ol><pre lang="json"><code>{  &quot;name&quot;: &quot;restfromreadme_by_id&quot;,  &quot;ifNotExists&quot;: true,  &quot;columnDefinitions&quot;: [    {      &quot;name&quot;: &quot;id&quot;,      &quot;typeDefinition&quot;: &quot;uuid&quot;,      &quot;static&quot;: false    },    {      &quot;name&quot;: &quot;text&quot;,      &quot;typeDefinition&quot;: &quot;text&quot;,      &quot;static&quot;: false    },    {      &quot;name&quot;: &quot;key&quot;,      &quot;typeDefinition&quot;: &quot;text&quot;,      &quot;static&quot;: false    },        {          &quot;name&quot;: &quot;completed&quot;,          &quot;typeDefinition&quot;: &quot;boolean&quot;        }  ],  &quot;primaryKey&quot;: {    &quot;partitionKey&quot;: [      &quot;id&quot;    ]  }}</code></pre><ol start="4"><li>And click <strong>execute</strong> to apply the command and create the table</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124660673-84c4e180-de74-11eb-89a9-55dfb017bb8f.png?raw=true" alt="image" /></p><p>You should see a <strong>201</strong> response telling you it correctly created the &quot;restfromreadme_by_id&quot; table.</p><p>Again, take a note of the Request URL that was used to create the table. This comes into play later when we take a look at the code in <code>astraRestClient.js</code> used to create our TODO application table.</p><p><img src="https://user-images.githubusercontent.com/23346205/124663337-f05c7e00-de77-11eb-8daa-856d15f0d223.png?raw=true" alt="image" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-insert-data-in-the-table-with-the-rest-api-using-swagger"> </a>4. Insert data in the Table with the REST API using Swagger</h2><p>Now that we have a table to use, let's insert a row of data into the table, again using REST to do so.</p><p>✅  <strong>Step 4a:</strong> Navigate to <strong>Add row</strong> section</p><ol><li>Scroll down and navigate to the <strong>data</strong> section</li><li>Then find <strong>Add row</strong> and click it to open the section</li></ol><ul><li>Also take note this is using a <strong>POST</strong> command.</li></ul><ol start="3"><li>Click <strong>Try it out</strong> just like we did previously</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124664268-2fd79a00-de79-11eb-8902-1d6636e986fb.png?raw=true" alt="image" /></p><p>✅  <strong>Step 4b:</strong> FIll in values and add a row</p><ol><li>Add your Astra token</li><li>Add the keyspaceName <code>todos</code></li><li>Add the tableName <code>restfromreadme_by_id</code>. Note, this is the table we created in the earlier step</li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/4b3_insert-row.png?raw=true" alt="image" /></p><ol start="4"><li>Copy the following JSON into the <strong>body</strong></li></ol><pre lang="json"><code>{&quot;id&quot;:&quot;57dbd260-d905-11eb-b985-c522859819b9&quot;,&quot;completed&quot;:false,&quot;text&quot;:&quot;TODO FROM README&quot;,&quot;key&quot;:&quot;none&quot;}</code></pre><ol start="5"><li>Click <strong>Execute</strong>. You should see code <strong>201</strong> in the response telling you it was a success and displaying the id of the row you just created.</li></ol><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-retrieving-values"> </a>5. Retrieving values</h2><p>Finally, now that we created a table and inserted a row of data let's <strong>GET</strong> the data back out.</p><p>✅  <strong>Step 5a:</strong> Navigate to <strong>Retrieve all rows</strong> section</p><ol><li>Scroll up within the <strong>data</strong> section</li><li>Then find <strong>Retrieve all rows</strong> and click it to open the section</li></ol><ul><li>Take note this is using a <strong>GET</strong> command.</li></ul><ol start="3"><li>Click <strong>Try it out</strong> just like we did previously</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124666300-d6bd3580-de7b-11eb-8bf6-aeeb0487962b.png?raw=true" alt="image" /></p><p>✅  <strong>Step 5b:</strong> Execute the command to display the data</p><ol><li>Enter your <strong>Astra token <em>(X-Cassandra-Token)</em></strong></li><li>Enter the <strong>keyspaceName</strong> <code>todos</code></li><li>Enter the <strong>tableName</strong> <code>restfromreadme_by_id</code></li></ol><p><img src="https://github.com/datastaxdevs/appdev-week1-todolist/blob/main/images/5b3_retrieve-rows.png?raw=true" alt="image" /></p><ol start="4"><li>Click <strong>Execute</strong></li><li>View the end result data that should be exactly what we created in the previous step</li></ol><p><img src="https://user-images.githubusercontent.com/23346205/124666847-9d38fa00-de7c-11eb-8673-84f421ff9282.png?raw=true" alt="image" /></p><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-launch-gitpod-ide"> </a>6. Launch GitPod IDE</h2><ul><li>Click the button to launch the GitPod IDE.</li></ul><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/appdev-week1-todolist/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h1><a class="anchor" aria-hidden="true" id="need-a-refresher-on-react-basics"> </a>Need a refresher on React Basics?</h1><details><summary>Take me to the React stuff</summary>  We've created a separate repo going over the Basics of React. To get there, click the link below.<p><a href="https://github.com/datastaxdevs/react-basics">GOTO React-Basics</a></p><p>When you're done, just click on the &quot;Back to Main&quot; breadcrumb to come back here.</p></details><h2><a class="anchor" aria-hidden="true" id="7-launch-the-todo-app"> </a>7. Launch the TODO app</h2><p>✅  <strong>Step 7a:</strong> Retrieve application token to securely connect to the database</p><p>Use the token you previously generated. If you no longer have the token and did not download a .csv, you can generate a new token using <a href="#2-create-a-security-token">the instructions above</a></p><p>✅  <strong>Step 7b:</strong> Configure Environment Variables and Install Dependencies</p><ol><li>Create <code>.env</code> file</li></ol><p>In the repository directory run the following command  to set up your Astra environment.  Note that this does require Node 15 and NPM 7 to work.  You can install a node version manager like <code>nvm</code> or <code>n</code> to use multiple versions on your system.</p><pre lang="bash"><code>npm exec astra-setup todos_workshop_db todos</code></pre><ol start="2"><li>👩‍💻  Install all the packages</li></ol><pre lang="bash"><code>npm install -g netlify-cli</code></pre><p>✅  <strong>Step 7c:</strong> Launch your app</p><ul><li>Run the application</li></ul><pre><code>netlify dev</code></pre><ul><li>The application should automatically launch in the GitPod preview pane</li></ul><h3><a class="anchor" aria-hidden="true" id="things-to-note"> </a>Things to Note:</h3><ul><li>The contents of this repo are based on <a href="https://github.com/tjake/todo-astra-react-serverless/">Jake's port</a> of the <a href="https://github.com/tastejs/todomvc/tree/master/examples/react">TodoMVC code</a> originally written by <a href="https://github.com/petehunt">Pete Hunt</a>.</li><li>The example is modified from <a href="https://github.com/huksley/todo-react-ssr-serverless">https://github.com/huksley/todo-react-ssr-serverless</a>.</li></ul><!--- ENDEXCLUDE --->
SUCCESS SAVING README for datastaxdevs-appdev-week1-todolist
Getting astra.json for datastaxdevs/workshop-intro-to-graphql at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="introduction-to-graphql-react-java-astra-db"> </a>🎓 Introduction to GraphQL + React + Java + Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astra-db-and-create-database"> </a>1. Login or Register to Astra DB and create database</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-experiment-with-graphiql"> </a>4. Experiment with GraphiQL</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="now-let-s-try-out-some-graphql-queries"> </a>Now, let's try out some graphQL queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="compare-the-graphql-schema"> </a>Compare the GraphQL schema</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-experiment-with-astra-db-s-graphql-playground"> </a>5. Experiment with Astra DB's GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5a-open-graphql-playground"> </a>✅  Step 5a: Open GraphQL Playground:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5b-insert-the-astra-db-token-to-run-schema-queries"> </a>✅  Step 5b: Insert the Astra DB Token to run schema queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5c-create-a-table-in-the-graphql-playground"> </a>✅  Step 5c: Create a table in the GraphQL Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-insert-data-to-db-using-the-graphql-playground"> </a>6. Insert data to DB using the GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6a-adjust-the-second-playground-tab-to-your-keyspace"> </a>✅  Step 6a: Adjust the second playground tab to your keyspace</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6b-set-the-token-to-run-data-queries"> </a>✅  Step 6b: Set the token to run data queries</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6c-insert-genre-names-with-the-playground"> </a>✅  Step 6c: Insert genre names with the Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-retrieve-values-from-db-using-the-graphql-playground"> </a>7. Retrieve values from DB using the GraphQL Playground</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-7a-read-genres-with-a-query-in-the-playground"> </a>✅  Step 7a: Read genres with a query in the Playground</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-start-up-react"> </a>8. Start up React</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-8a-execute-the-following-command"> </a>✅ Step 8a: Execute the following command</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-8b-then-execute"> </a>✅  Step 8b: Then, execute</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="compare-javascript-code-to-our-graphql-queries-from-above"> </a>Compare javascript code to our graphQL queries from above</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="now-for-the-cool-part"> </a>Now for the cool part</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-hook-the-database-up-to-the-react-client-app"> </a>9. Hook the database up to the React client app</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9a-initialize-astra-cli"> </a>✅ Step 9a: Initialize Astra CLI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9b-configure-database-credentials"> </a>✅ Step 9b: Configure database credentials</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9c-start-your-react-app-again"> </a>✅ Step 9c: Start your React app again</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9d-verify-data-load"> </a>✅ Step 9d: Verify data load</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="can-you-figure-out-what-s-going-on-here"> </a>Can you figure out what's going on here?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9e-test-this-query"> </a>✅ Step 9e: Test this query</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="view-results"> </a>View Results</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9f-create-the-missing-table"> </a>✅ Step 9f: Create the missing table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="verify-result"> </a>✅ Verify result</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9g-add-some-data"> </a>✅ Step 9g: Add some data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="check-the-result"> </a>✅ Check the result</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-9h-check-the-client-again"> </a>✅ Step 9h: Check the client again</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="play-a-bit-more"> </a>Play a bit more!</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="that-s-it-you-did-it-nice-job"> </a>That's it, you did it! Nice job!</h3>
HTML FOR datastaxdevs-workshop-intro-to-graphql<h1><a class="anchor" aria-hidden="true" id="introduction-to-graphql-react-java-astra-db"> </a>🎓 Introduction to GraphQL + React + Java + Astra DB</h1><p><a href="https://gitpod.io/from-referrer/"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><em>50 minutes, Beginner/Intermediate, <a href="#1-login-or-register-to-astradb-and-create-database">Start Building</a></em></p><p>Both a simple <strong>graphQL</strong> enabled <strong>ReactJS</strong> app built using <a href="https://create-react-app.dev/"><strong>create-react-app</strong></a> AND a simple <strong>Java</strong> backend <strong>graphQL</strong> service built with <a href="https://start.spring.io/"><strong>Spring Initializr</strong></a> and using <a href="https://netflix.github.io/dgs/getting-started/"><strong>The Netflix DGS framework</strong></a> PLUS <strong>Astra DB</strong> hooked up and ready to rock! :heart_eyes_cat:</p><p>This is a companion to our <a href="https://github.com/datastaxdevs/appdev-week3-graphql">Netflix Clone using Astra DB and GraphQL</a> workshop and is essentially a &quot;prologue&quot; to that content. Once complete, feel free to to go deploy a Netflix clone using what you learned here.</p><p>Finally, this content uses <strong>React/JS</strong> concepts. If you are not familiar with those or need a refresher, <a href="https://github.com/datastaxdevs/react-basics">take a look HERE</a> to get up to date.</p><p>The materials have been built by the DataStax developer advocates team.</p><p><img src="./tutorial/images/graphQL_logo.png" alt="GraphQL Logo" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>An overview of what GraphQL is and what makes it cool</li><li>What differs between GraphQL and other APIs (such as REST), including their pros/cons</li><li>Hands-on examples of GraphQL queries and mutations</li><li>How to build GraphQL APIs for mobile and web applications</li><li>Setting up your Astra DB to store application data via GraphQL</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><p/><details><summary><b> 1️⃣ Can I run the code for this workshop on my local computer instead of using Gitpod?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol>  <li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 or 16 and npm 7 or later</a></li>  <li>netlify-cli (use "npm install -g netlify-cli")</li></ol></p>You will have to adapt commands and paths based on your environment (including digging into file ".gitpod.yml") and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful. <strong>This is considered a more advanced path to take.</strong></details><p/><details><summary><b> 2️⃣ What other prerequisites are there?</b></summary><hr><ul><li>You will need a github account</li><li>You should use Chrome or Firefox (other browsers might have trouble displaying Gitpod correctly)</li><li>You will need an Astra DB account, but we'll cover that in the exercises</li></ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also afterwards.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else <strong>(open badge specification)</strong>.</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra">&quot;cassandra&quot; on StackOverflow</a></li><li><a href="https://dba.stackexchange.com/questions/tagged/cassandra">&quot;cassandra&quot; on DBA StackExchange</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="tutorial/images/graphql-badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your upgrade and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps from this repository, as described below, to the end;</li><li>Insert (mutate) a <strong>new show</strong> or a <strong>new genre</strong> of your choice in the database;</li><li>Take a single <strong>screenshot</strong> of the React app with all of the working Astra DB sections and showing the entry you just added;</li><li>Submit your homework <a href="https://dtsx.io/homework-intro-graphql">here</a>.</li></ol><p>That's it, done.We will then grade the submissions: expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3><p><a href="https://graphql.org/">graphql.org</a> - The first place to learn about GraphQL</p><p><a href="https://netflix.github.io/dgs/getting-started/">The Netflix DGS framework Tutorial</a> - Java/Spring GraphQL backend (used to generate this code)</p><p><a href="https://start.spring.io/">Spring Initializr</a> - Used in the ^above tutorial to generate the Java/Spring backend starter</p><p><a href="https://www.gatsbyjs.com/docs/how-to/querying-data/running-queries-with-graphiql/">GraphiQL</a> - GraphQL IDE included with The Netflix DGS Framework</p><p><a href="https://www.apollographql.com/docs/react/">Apollo client</a> - Awesome GraphQL client for React/JS (not used here, but really solid, Netflix uses this)</p><p><a href="https://hasura.io/blog/top-7-graphql-ides-you-should-know-about-in-2021/">Top 7 GraphQL IDEs</a> - A nice collection of cool GraphQL IDEs to use</p><p><a href="https://create-react-app.dev/">create-react-app tutorial</a> - Create a React app from scratch (used to generate this code)</p><p><a href="https://www.youtube.com/watch?v=c2fJ7T0N1Sk">A Beginner's Guide to GraphQL</a> - Ali Spittel's really awesome GraphQL starter video</p><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astra-db-and-create-database"> </a>1. Login or Register to Astra DB and create database</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you use up your credits the databases will pause, no charge, and you will be given the option to upgrade to a higher tier.</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the following button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-11-23"><img src="tutorial/images/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>intrographql</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCK 🔒 icons: the LOCKed regions are the region not accessible to the Free Tier.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>intrographql</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB Dashboard page. You may have to &quot;Resume&quot; the database first in case it is in &quot;hibernated&quot; state.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong> (needed to authenticate with your database and start using it):<strong>please IGNORE THIS ONE, as we will be soon creating a new, more powerful token for today</strong>.</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this usually only takes 2-3 minutes.</p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><blockquote><p>Note: this step is very important, as the token generated automatically for you withthe database lacks some permissions we'll use in the workshop.</p></blockquote><p><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create a token for your app</a>, <em>using the <strong>&quot;Database Administrator&quot;</strong> role</em>.Keep it handy for later use (best to download it in CSV format, as the valueswill not be visible afterward).This will provide authentication later when interacting with the database.Today, in particular, we will need the string labeled &quot;token&quot; (the one starting with <code>AstraCS:...</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="3-launch-gitpod"> </a>3. Launch Gitpod</h2><p><a href="https://www.gitpod.io/">Gitpod</a> is an 100% online IDE based on <a href="https://github.com/gitpod-io/vscode/blob/gp-code/LICENSE.txt?lang=en-US">Visual Studio Code</a>. To initialize your environment simply click on the button below <em>(CTRL + Click to open in new tab)</em> You will be asked for you github account, as needed.</p><p><strong>Warning</strong>: for best results, open the link with Chrome or Firefox!</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-intro-to-graphql"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>This will bootstrap your demo environment. Be patient, it will take a few minutes as everything loads up.</p><blockquote><p><strong>Note</strong>: during loading of the Gitpod environment, a new tab will be tentatively openedwith an URL such as <code>https://8080-datastaxdev-[...].gitpod.io/graphiql</code>.Please <strong>CHECK YOUR POPUP BLOCKER</strong> and allow it before continuing: this will be your GraphiQL interface!</p></blockquote><details><summary><strong>Show me how Gitpod looks like for this workshop</strong></summary><p>Gitpod starts with a file explorer on the left (1), an editor panel on the top (2),and - in the case of this specific environment - two consoles side by side,one to launch commands and later start the Node app (3) and one busy withrunning the Java backend (4). On the right you will find a console switcher toeasily locate any console and make it active (but even just clickingon the desired console would do the trick).</p><p><img src="tutorial/images/gitpod-shape.png" alt="The shape of Gitpod" /></p></details><h2><a class="anchor" aria-hidden="true" id="4-experiment-with-graphiql"> </a>4. Experiment with GraphiQL</h2><p>It just so happens that <a href="https://netflix.github.io/dgs/getting-started/">The Netflix DGS framework</a> comes with GraphiQL already integrated and ready for use. This is a wonderful tool you can use to explore graphQL queries and mutations. Let's experiment with this now!</p><blockquote><p><em>Note:</em> the GraphiQL should be open already in a new tab for you; in case it isn't for some reason,run this command in a Gitpod console and manually point a new tab to the URL it prints:<code>echo `gp url 8080`/graphiql</code>.</p></blockquote><p>Something to point out here is there is no database just yet. We are powering the graphQL schema via the back-end Java application and the graphQL data is completely hardcoded.Take a look at both <strong><code>ShowsDatafetcher.java</code></strong> and <strong><code>GenresDatafetcher.java</code></strong> located in <strong><code>graphql-backend-examples/src/main/java/com/example/demo</code></strong>to find the simple implementations using DGS annotations <code>@DgsComponent</code> and <code>@DgsQuery</code>.</p><details><summary><strong>Show me how to open these files in Gitpod</strong></summary><p>In the left toolbar, choose the first tool (&quot;Explorer&quot;) and navigate the directory to the desired directory; then, clicking on the files will open them in the editor (topmost panel on the right).</p><p><img src="tutorial/images/open-java-DGS-files-in-gitpod.png" alt="Open files in Gitpod" /></p></details><h4><a class="anchor" aria-hidden="true" id="now-let-s-try-out-some-graphql-queries"> </a>Now, let's try out some graphQL queries</h4><p>Plug these into the GraphiQL IDE that launched into a new tab from GitPod.</p><pre lang="GraphQL"><code>query justTitle {  shows {    title  }}</code></pre><pre lang="GraphQL"><code>query withReleaseYear {  shows {    title    releaseYear  }}</code></pre><pre lang="GraphQL"><code>query getOneShow {  shows (titleFilter: &quot;Ozark&quot;) {      title      releaseYear  }}</code></pre><pre lang="GraphQL"><code>query ShowsAndGenres {  shows {    title    releaseYear  }  genres {    value  }}</code></pre><p><img src="tutorial/images/graphiql-queries.png" alt="GraphiQL queries" /></p><h4><a class="anchor" aria-hidden="true" id="compare-the-graphql-schema"> </a>Compare the GraphQL schema</h4><p>The objects known to a GraphQL API are defined starting from its &quot;Schema&quot;.In the case of our DGS Java application, the schema is found in<code>graphql-backend-examples/src/main/resources/schema/schema.graphqls</code>.Take a look at its contents: notice the special <code>Query</code> item that definesthe possible queries and, after that, the user-defined types available tothe API:</p><pre lang="GraphQL"><code>type Query {    shows(titleFilter: String): [Show]    genres(labelFilter: String): [Genre]}type Show {    title: String    releaseYear: Int}type Genre {    value: String!}</code></pre><h2><a class="anchor" aria-hidden="true" id="5-experiment-with-astra-db-s-graphql-playground"> </a>5. Experiment with Astra DB's GraphQL Playground</h2><p>Ok, let's take this a step further and prepare the data layer for our app.At this point you should have already <a href="#1-login-or-register-to-astradb-and-create-database">created your Astra DB database</a>.Follow the instructions below to launch the <strong>GraphQL Playground</strong> provided in <strong>Astra DB</strong>:</p><h4><a class="anchor" aria-hidden="true" id="step-5a-open-graphql-playground"> </a>✅  Step 5a: Open GraphQL Playground:</h4><ol start="0"><li>Ensure you are logged on to your <a href="https://astra.datastax.com">Astra</a> account</li><li>Click on the &quot;workshops&quot; database on the left (expanding the list if needed)</li><li>Click <code>Connect</code> TAB</li><li>Click the <code>APIs</code>  connection method</li><li>Make sure <code>GraphQL API</code> is selected</li><li>Locate the link to your GraphQL Playground in the text</li></ol><p><img src="tutorial/images/open-playground-2.png" alt="Open Astra DB GraphQL Playground image" /></p><details><summary><strong>Click here if you are using the "New Astra Experience" UI</strong></summary><p><img src="tutorial/images/open-playground-2-wh.png" alt="Open Astra DB GraphQL Playground image, new Astra UI" /></p></details><p><strong>Note</strong>: in the following, we will refer to &quot;playground tabs&quot;. These are <em>not</em> the tabsin your browser, rather they are tabs <em>within</em> the Playground application,to switch between the (logically distinct) realms of &quot;managing schema&quot; and &quot;managing data in the tables&quot;(more on that later).</p><p><img src="tutorial/images/tabs-vs-playgroundtabs-labeled.png" alt="Playground tabs VS Browser tabs" /></p><h4><a class="anchor" aria-hidden="true" id="step-5b-insert-the-astra-db-token-to-run-schema-queries"> </a>✅  Step 5b: Insert the Astra DB Token to run schema queries</h4><p>In the GraphQL Playground, <strong>Populate HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your token (including the <code>AstraCS:</code> part).<em>This is the &quot;Database Administrator&quot; token you created earlier on the Astra DB dashboard (Step 2 above).</em></p><p><strong>Note</strong>: make sure you are on the <strong><code>graphql-schema</code></strong> playground tab in this step, as this image illustrates:</p><p><img src="tutorial/images/graphql-playground.png" alt="GraphQL Playground and token header, Schema playground tab" /></p><blockquote><p>Note: the GraphQL Playground starts with a ready-to-use <em>temporary token</em> as the <code>x-cassandra-token</code> header. But we want the queries run in the Playgroundto be identical to those that the Netlify functions will run from code, so <strong>please replace the token with your DB token as instructed</strong>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-5c-create-a-table-in-the-graphql-playground"> </a>✅  Step 5c: Create a table in the GraphQL Playground</h4><p>Run the following mutation in the <code>graphql-schema</code> playground tab, making sure to replace <code>intrographql</code> in the URL if you used a different keyspace name:</p><ul><li>Copy the following mutation on the left panel</li></ul><pre lang="GraphQL"><code>mutation {  reference_list: createTable(    keyspaceName:&quot;intrographql&quot;,    tableName:&quot;reference_list&quot;,    ifNotExists:true    partitionKeys: [       { name: &quot;label&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [      { name: &quot;value&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]  )}</code></pre><p>Click on the arrow in the middle of the screen to execute the query.</p><p><img src="tutorial/images/playground-1.png" alt="Execute a query in GraphQL Playground" /></p><h2><a class="anchor" aria-hidden="true" id="6-insert-data-to-db-using-the-graphql-playground"> </a>6. Insert data to DB using the GraphQL Playground</h2><h4><a class="anchor" aria-hidden="true" id="step-6a-adjust-the-second-playground-tab-to-your-keyspace"> </a>✅  Step 6a: Adjust the second playground tab to your keyspace</h4><p>In the GraphQL playground, switch to the second Playground tab (<code>graphql</code>). Edit the ending of the URL <em>shown within the Playground page</em> from <code>system</code> to the keyspace name <code>intrographql</code>:</p><p><img src="tutorial/images/graphql-url-ending.png" alt="GraphQL URL ending" /></p><h4><a class="anchor" aria-hidden="true" id="step-6b-set-the-token-to-run-data-queries"> </a>✅  Step 6b: Set the token to run data queries</h4><p>Populate the <strong>HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your DB token as shown below <em>(Note: you did this for the <code>graphql-schema</code> playground tab, now repeat for the <code>graphql</code> playground tab!)</em></p><p><img src="tutorial/images/graphql-playground-2b.png" alt="GraphQL Playground and token header, GraphQL playground tab" /></p><h4><a class="anchor" aria-hidden="true" id="step-6c-insert-genre-names-with-the-playground"> </a>✅  Step 6c: Insert genre names with the Playground</h4><p>In the GraphQL Playground, populate the <code>reference_list</code> table with all values:copy the following mutation on the left panel</p><pre lang="GraphQL"><code>mutation insertGenres {  action: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Action&quot;}) {    value{value}  }  anime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Anime&quot;}) {     value{value}  }  award: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Award-Winning&quot;}) {     value{value}  }  children: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Children &amp; Family&quot;}) {     value{value}  }  comedies: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Comedies&quot;}) {     value{value}  }  documentaries: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Documentaries&quot;}) {     value{value}  }  drama: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Dramas&quot;}) {     value{value}  }  fantasy: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Fantasy&quot;}) {     value{value}  }  french: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;French&quot;}) {     value{value}  }  horror: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Horror&quot;}) {     value{value}  }  independent: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Independent&quot;}) {     value{value}  }  music: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Music &amp; Musicals&quot;}) {     value{value}  }  romance: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Romance&quot;}) {     value{value}  }  scifi: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Sci-Fi&quot;}) {     value{value}  }  thriller: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Thriller&quot;}) {     value{value}  }  }</code></pre><p>Click on the arrow in the middle of the screen to execute the query.</p><h2><a class="anchor" aria-hidden="true" id="7-retrieve-values-from-db-using-the-graphql-playground"> </a>7. Retrieve values from DB using the GraphQL Playground</h2><h4><a class="anchor" aria-hidden="true" id="step-7a-read-genres-with-a-query-in-the-playground"> </a>✅  Step 7a: Read genres with a query in the Playground</h4><p>In the GraphQL Playground (staying on the <code>graphql</code> playground tab), list values from the table with the following query:</p><pre lang="yaml"><code>query getAllGenre {    reference_list (value: {label:&quot;genre&quot;}) {      values {      	value      }    }}</code></pre><p><em>👁️ Expected output</em><img src="tutorial/images/graphql-playground-3.png" alt="Playground getAllGenre query result" /></p><h2><a class="anchor" aria-hidden="true" id="8-start-up-react"> </a>8. Start up React</h2><p>So far we have executed GraphQL queries and mutations by hand from specific UIs.Now it's time to start the React client app and query the GraphQL endpoints from it!</p><blockquote><p>&quot;Endpoints&quot;, two of them. Each GraphQL server exposes a single endpoint for everything,but remember this app will query both the local DGS app and the Astra DB server!</p></blockquote><p>First you need to run a couple commands to get things set up:in your <strong><code>GitPod</code></strong> IDE navigate to the &quot;Client&quot; terminal<em>(it should already be open for you on the bottom left)</em>and make sure you are in the <strong><code>workshop-intro-to-graphql/graphql-client-examples</code></strong> directory.<strong>This is where you'll be running the nodejs/React app.</strong></p><details><summary><strong>Remind me what is this "client terminal" ...</strong></summary><p>It is the block labeled as &quot;3&quot;. Click on it, or use the switcher (5):</p><p><img src="tutorial/images/gitpod-shape.png" alt="The shape of Gitpod" /></p></details><h4><a class="anchor" aria-hidden="true" id="step-8a-execute-the-following-command"> </a>✅ Step 8a: Execute the following command</h4><pre lang="shell"><code>npm install -g netlify-cli</code></pre><p>This will install the <strong>Netlify CLI</strong> (command line interface) which our <strong>React/JS</strong> app uses in conjunction with the serverless functions we've setup to talk to our <strong>graphQL</strong> endpoints.</p><h4><a class="anchor" aria-hidden="true" id="step-8b-then-execute"> </a>✅  Step 8b: Then, execute</h4><pre lang="shell"><code>netlify dev</code></pre><p>This will start the <strong>React/JS</strong> application and display results from both the <strong><code>Shows</code></strong> and <strong><code>Genres</code></strong> <strong>graphQL</strong> queries and endpoints we were just experimenting with.</p><p>You should see Gitpod's mini-browser opening up by itself and showing the client application wihtin Gitpod.</p><blockquote><p><em>Note:</em> the client, at this point, should be opened in the mini-browser within Gitpod; to open it manually,run this command in a Gitpod console and point a new tab to the URL it prints:<code>echo `gp url 8888` </code>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="compare-javascript-code-to-our-graphql-queries-from-above"> </a>Compare javascript code to our graphQL queries from above</h4><p>If you take a look at both <strong><code>getShowsBackend.js</code></strong> and <strong><code>getGenresBackend.js</code></strong> located in <strong><code>graphql-client-examples/functions</code></strong> you should notice that both use the <strong>same exact</strong> <strong>graphQL</strong> queries that we used above.</p><pre lang="javascript"><code>const query = `    query getAllShows {      shows {        title        releaseYear      }    }  `</code></pre><pre lang="javascript"><code>  const query = `    query getAllGenres {      genres {        value      }    }  `</code></pre><p>All of the javascript wrapped around these is simply there to call the <strong>graphQL</strong> endpoint with the given query and pass the responseBody back to the calling function.</p><h4><a class="anchor" aria-hidden="true" id="now-for-the-cool-part"> </a>Now for the cool part</h4><p>Take a look at <strong><code>Shows.js</code></strong> and <strong><code>Genres.js</code></strong> located in <strong><code>graphql-client-examples/src/components/</code></strong>. In both cases they use <strong>React</strong> state, <code>gqlResult</code></p><pre lang="javascript"><code>  const [gqlResult, setGqlResult] = useState(null)</code></pre><p>to receive the responseBody from from our <strong>graphQL</strong> queries, set the <strong>React</strong> state, and inject the values dynamically into the DOM. Check out the following javascript snippet from <strong><code>Shows.js</code></strong>.</p><pre lang="javascript"><code>// Asynchronously fetch any &quot;shows&quot; graphQL data from the Java backend// using the getShowsBackend serverless function to call out to the// Netflix DGS Java graphQL endpointconst response = await fetch(&quot;/.netlify/functions/getShowsBackend&quot;, {    method: &quot;POST&quot;,})const responseBody = await response.json()setGqlResult(responseBody) // on response set our graphQL result state</code></pre><p>Notice how the fields (title, releaseYear) match our <strong>graphQL</strong> <code>Shows</code> schema exactly.</p><pre lang="javascript"><code>// Finally, if all other checks pass get the data// from the payload via gqlResult state and inject it into the DOM// Notice how the payload example below and the fields &quot;title&quot; and &quot;releaseYear&quot; match exactly// {&quot;data&quot;:{&quot;shows&quot;:[{&quot;title&quot;:&quot;Stranger Things&quot;,&quot;releaseYear&quot;:2016},{&quot;title&quot;:&quot;Ozark&quot;,&quot;releaseYear&quot;:2017}...return gqlResult.data.shows.map(({ title, releaseYear }) =&gt; (    &lt;div key={title}&gt;        &lt;p&gt;        {title}: {releaseYear}        &lt;/p&gt;    &lt;/div&gt;  ));</code></pre><p>Notice how the field (value) matches our <strong>graphQL</strong> <code>Genres</code> schema exactly.</p><pre lang="javascript"><code>// Finally, if all other checks pass get the data// from the payload via gqlResult state and inject it into the DOM// Notice how the payload example below and the field &quot;value&quot; match exactly// {&quot;data&quot;:{&quot;genres&quot;:[{&quot;value&quot;:&quot;Action&quot;},{&quot;value&quot;:&quot;Anime&quot;}...return gqlResult.data.genres.map(({ value }) =&gt; (    &lt;div key={value}&gt;        &lt;p&gt;        {value}        &lt;/p&gt;    &lt;/div&gt;  ));</code></pre><h2><a class="anchor" aria-hidden="true" id="9-hook-the-database-up-to-the-react-client-app"> </a>9. Hook the database up to the React client app</h2><p>The next step is to make the client able to retrieve the genres and the showsfrom the database, by querying Astra DB's GraphQL API. To achieve this,it's time to provide connection details (addresses, secrets) to theserverless Netlify functions which will back the React client.</p><h4><a class="anchor" aria-hidden="true" id="step-9a-initialize-astra-cli"> </a>✅ Step 9a: Initialize Astra CLI</h4><p>In the <strong><code>GitPod</code></strong> IDE, click on the &quot;Client&quot; terminal to make it active, hit <code>Ctrl-C</code> to stop the running client, if any, and make sure you are in the <strong><code>workshop-intro-to-graphql/graphql-client-examples</code></strong> directory.</p><p>Now you will create a <code>.env</code> file with connection info (addresses and secrets) for the Netlify function to be able to reach both the local backend and your Astra DB's GraphQL endpoint.You will use the Astra command-line interface to prepare a dot-env file for you; then you will complete it by adding a line defining the address of the local backend (i.e. the DGS locally-running GraphQL API).</p><p>Run the following command and provide your <strong>DB Administrator</strong> token string (starting with <code>AstraCS:...</code>) when prompted:</p><pre><code>astra setup</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9b-configure-database-credentials"> </a>✅ Step 9b: Configure database credentials</h4><p>Once you get a &quot;Configuration has been saved&quot; confirmation, proceed with:</p><pre><code>astra db create-dotenv workshops -k intrographqlcat .local-backend.env &gt;&gt; .envgp open .env</code></pre><p>The credentials are now all set up: your dot-env file should be now shown in the editor for you to check its contents.You will see several lines pertaining to Astra DB (not all of which will be used by today's client)and, at the end, a single setting about the Java GraphQL API you tested earlier.</p><p>Here is how the <code>.env</code> might look like (as a reference, check out the provided <code>.env.sample</code>):</p><p><img src="tutorial/images/dot-env-2.png" alt="Sample dot-env file" /></p><blockquote><p>If you are preparing the file manually (i.e. as opposed to using the <code>astra-cli</code> tool), be aware that the onlyvariables needed by the React client are: <code>ASTRA_DB_APPLICATION_TOKEN</code>, <code>ASTRA_DB_GRAPHQL_URL</code>and <code>JAVA_GRAPHQL_ENDPOINT</code>.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-9c-start-your-react-app-again"> </a>✅ Step 9c: Start your React app again</h4><p>Launch the following command once more:</p><pre lang="shell"><code>netlify dev</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9d-verify-data-load"> </a>✅ Step 9d: Verify data load</h4><p>At this point your app should be running with a bunch of data displayed in the <strong><code>Shows</code></strong>, <strong><code>Genres,</code></strong> and <strong><code>ReferenceList</code></strong> sections, but notice the <strong><code>ShowsByName</code></strong> section displays <strong>&quot;Error :(&quot;</strong></p><p><img src="tutorial/images/error_shows_by_name.png" alt="Error in Shows by name" /></p><h4><a class="anchor" aria-hidden="true" id="can-you-figure-out-what-s-going-on-here"> </a>Can you figure out what's going on here?</h4><p>Let's break this down.</p><ul><li><p>We just added the database configuration and the <strong><code>ReferenceList</code></strong> section is populated which tells us our DB config and graphQL endpoints are configured properly</p></li><li><p>In the GraphQL Playground we added a schema for the <strong><code>reference_list</code></strong> table and added some data to the table, but we never created a schema for the <strong><code>ShowsByName</code></strong> section</p></li><li><p>If you take a look at the <strong><code>getShowsAstra.js</code></strong> script in <strong><code>graphql-client-examples/functions</code></strong> you can see the graphQL being used to query for data</p></li></ul><pre lang="javascript"><code>exports.handler = async function (event) {  const query = `    query getAllShows {      show_by_name {        values {          title          releaseYear        }      }    }  `</code></pre><h4><a class="anchor" aria-hidden="true" id="step-9e-test-this-query"> </a>✅ Step 9e: Test this query</h4><p>Go back to the GraphQL <strong><code>graphQL</code></strong> playground tab.</p><p>Copy this into the playground and press the <em>&quot;play&quot;</em> button to execute the query. <strong>NOTE, you can simply append the query to the end of the list and then choose the query you wish to execute when you hit the &quot;play&quot; button.</strong></p><pre lang="GraphQL"><code>query getAllShows {      show_by_name {        values {          title          releaseYear        }      }    }</code></pre><p><img src="tutorial/images/graphql-getallshows.png" alt="GraphQL getAllShows execution" /></p><h4><a class="anchor" aria-hidden="true" id="view-results"> </a>View Results</h4><p>Notice what happened here. We have a validation error because there is no schema associated with the query we just executed. GraphQL uses a typed validation system so this is something to expect if a query is malformed, missing a schema, or something along those lines. You will want to control for this in your code.</p><p><img src="tutorial/images/graphql-field-undefined-error.png" alt="GraphQL &quot;Field undefined&quot; error" /></p><h4><a class="anchor" aria-hidden="true" id="step-9f-create-the-missing-table"> </a>✅ Step 9f: Create the missing table</h4><p>To fix up the schema issue, and resolve the error,create the <strong><code>ShowsByName</code></strong> table with a graphQL mutation to fix the app.Execute the following mutation in the <strong><code>graph-schema</code></strong> Playground tab</p><pre lang="GraphQL"><code>mutation CreateShowsTable {  createTable(    keyspaceName: &quot;intrographql&quot;    tableName: &quot;show_by_name&quot;    partitionKeys: [{      name: &quot;title&quot;, type: {basic:TEXT}    }]    values:[{      name: &quot;releaseYear&quot;, type: {basic:INT}    }]  )}</code></pre><p><img src="tutorial/images/graphql-CreateShowsTable.png" alt="GraphQL CreateShowsTable query" /></p><h4><a class="anchor" aria-hidden="true" id="verify-result"> </a>✅ Verify result</h4><p>Once executed you should see a result like this</p><p><img src="tutorial/images/graphql-CreateShowsTable_result.png" alt="GrahQL CreateShowsTable result" /></p><h4><a class="anchor" aria-hidden="true" id="step-9g-add-some-data"> </a>✅ Step 9g: Add some data</h4><p>Now, go back to the <strong><code>graphql</code></strong> playground tab and add the following mutation</p><pre lang="GraphQL"><code>mutation insertShows {  stranger: insertshow_by_name (    value: {      title: &quot;Stranger Things&quot;,      releaseYear: 2016}) {  	value{title}  }  ozark: insertshow_by_name (    value: {      title: &quot;Ozark&quot;,      releaseYear: 2017}) {  	value{title}  }}</code></pre><p><img src="tutorial/images/graphql-insertShows.png" alt="GraphQL &quot;insertShows&quot;" /></p><h4><a class="anchor" aria-hidden="true" id="check-the-result"> </a>✅ Check the result</h4><p><img src="tutorial/images/graphql-insertShows_result.png" alt="GraphQL insertShows, result" /></p><h4><a class="anchor" aria-hidden="true" id="step-9h-check-the-client-again"> </a>✅ Step 9h: Check the client again</h4><p>Finally, refresh your React app.</p><p>Notice this no longer displays an error. Now it correctly displays the data you just inserted (mutated). It might be fun to add some of your own data to this schema and refresh your page.</p><p><img src="tutorial/images/graphql-client-showing-shows.png" alt="GraphQL, client showing shows from DB" /></p><h4><a class="anchor" aria-hidden="true" id="play-a-bit-more"> </a>Play a bit more!</h4><p>Feel free to experiment with a couple more graphQL queries now that you have some data in the table</p><p>Queries usually offer some way to restrict the results returned,in the form of parameters passed to queries. Recall the original <code>getAllShows</code>, repeated here for convenience:</p><pre lang="GraphQL"><code>query getAllShows {  show_by_name {    values {      title      releaseYear    }  }}</code></pre><p>Now let's see a way to pass a <code>title</code> parameter to the query and just getmatching values (a single entry, in this case):</p><pre lang="GraphQL"><code>query getOneShow {  show_by_name (value: {title: &quot;Ozark&quot;}) {    values {      title      releaseYear    }  }}</code></pre><p>The following query, which uses the <a href="https://docs.datastax.com/en/astra/docs/develop/dev-with-graphql-cql-first.html#_retrieve_data">more general <code>filter</code> syntax</a>,is completely equivalent to the previous one:</p><pre lang="GraphQL"><code>query getOneShowF {  show_by_name(filter: {title: {eq: &quot;Ozark&quot;}}){    values {      title      releaseYear    }  }}</code></pre><h3><a class="anchor" aria-hidden="true" id="that-s-it-you-did-it-nice-job"> </a>That's it, you did it! Nice job!</h3><p>We hope this workshop gave you enough information on GraphQL to be dangerous and start you on a journey to using GraphQL in your own apps.Also, don't forget your <a href="#homework">HOMEWORK</a>.</p>
SUCCESS SAVING README for datastaxdevs-workshop-intro-to-graphql
Getting astra.json for datastaxdevs/workshop-streaming-game at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="drapetisca-a-multiplayer-online-game-with-astra-streaming-and-websockets"> </a>Drapetisca: a multiplayer online game with Astra Streaming and Websockets</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="astra-setup"> </a>Astra setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="1-create-your-astra-streaming-instance"> </a>1. Create your Astra Streaming instance</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1a-register"> </a>1a. Register</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1b-create-streaming"> </a>1b. Create streaming</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="1c-retrieve-streaming-connection-parameters"> </a>1c. Retrieve streaming connection parameters</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="2-create-your-astra-db-instance"> </a>2. Create your Astra DB instance</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2a-create-the-database"> </a>2a. Create the database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-token"> </a>2b. Create a DB Token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2c-download-the-db-secure-connection-bundle"> </a>2c. Download the DB Secure Connection Bundle</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="configure-and-run-the-application"> </a>Configure and run the application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3-load-the-project-into-gitpod"> </a>3. Load the project into Gitpod</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="3a-open-gitpod"> </a>3a. Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="3b-gitpod-interface"> </a>3b. Gitpod interface</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4-api-setup"> </a>4. API setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4a-streaming-environment-variables-code-env-code-part-i"> </a>4a. Streaming environment variables (<code>.env</code>, part I)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4b-upload-the-db-secure-bundle-code-env-code-part-ii"> </a>4b. Upload the DB secure bundle (<code>.env</code>, part II)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4c-database-access-secrets-code-env-code-part-iii"> </a>4c. Database access secrets (<code>.env</code>, part III)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4d-start-the-api"> </a>4d. Start the API</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="5-client-setup"> </a>5. Client setup</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5a-install-dependencies"> </a>5a. Install dependencies</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5b-start-the-client"> </a>5b. Start the client</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="6-play-the-game"> </a>6. Play the game!</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6a-enter-the-game"> </a>6a. Enter the game</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6b-try-to-cheat"> </a>6b. Try to cheat</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6c-bring-your-friends"> </a>6c. Bring your friends</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6d-fun-with-the-streaming-ui"> </a>6d. Fun with the Streaming UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="6e-a-quick-look-at-the-data-on-db"> </a>6e. A quick look at the data on DB</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="7-homework-instructions"> </a>7. Homework instructions</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7a-server-side"> </a>7a. Server side</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7b-client-side"> </a>7b. Client side</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="7c-restart-test-and-take-a-screenshot"> </a>7c. Restart, test and take a screenshot</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="8-selected-topics"> </a>8. Selected topics</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8a-websockets-and-react"> </a>8a. WebSockets and React</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8b-fastapi"> </a>8b. FastAPI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8c-svg-tricks"> </a>8c. SVG Tricks</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2>
HTML FOR datastaxdevs-workshop-streaming-game<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="drapetisca-a-multiplayer-online-game-with-astra-streaming-and-websockets"> </a>Drapetisca: a multiplayer online game with Astra Streaming and Websockets</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-streaming-game"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Time: <em>50 minutes</em>. Difficulty: <em>Intermediate</em>. <a href="#lets-start">Start Building!</a></p><p>A simple multiplayer online game featuring</p><ul><li>Astra Streaming (a messaging system in the cloud, built on top of Apache Pulsar)</li><li>Astra DB (a Database-as-a-service built on Apache Cassandra)</li><li>WebSockets</li><li>React.js for the front-end</li><li>the Python FastAPI framework for the back-end</li></ul><!--- ENDEXCLUDE ---><p><img src="images/drapetisca_intro_v2.png" alt="Drapetisca screenshot" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Understand the architecture of a streaming-based application</li><li>Learn how Apache Pulsar works</li><li>See the interplay between streaming and persistent storage (a.k.a. database)</li><li>Learn about Websockets on client- and server-side</li><li>Understand how a FastAPI server can bridge Pulsar topics and WebSockets</li><li>Understand the structure of a Websocket React.js application</li><li><strong>get your very own online gaming platform to share with your friends!</strong></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>You don't have to, it's all already in the cloud! But there is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li><li><a href="https://www.python.org/downloads/">Python v3.8+ installed on your local system</a></li></ul><p>In this readme, we try to provide instructions for local development as well - but keep in mind thatthe main focus is development on Gitpod, hence <strong>We can't guarantee live support</strong> about local developmentin order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a GitHub account</li><li>You will also need an Astra account: don't worry, we'll work through that in the following</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice participation certificate a.k.a. badge.</p></blockquote><ul><li><em>Why &quot;Drapetisca&quot;?</em></li></ul><blockquote><p><em>Drapetisca socialis</em>, known as &quot;invisible spider&quot;, is a very small and hard-to-notice spider found throughout Europe.Since this is a multiplayer game that lets players have social interactions in the play area, why not choose a spiderwith &quot;socialis&quot; in its name?</p></blockquote><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://youtu.be/jfOBPlcd9eA">Workshop Video</a></li><li><a href="slides/DataStaxDevs-workshop-Build_a_Multiplayer_Game_with_Streaming.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="images/streaming-workshop.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your verified skill badge! Finish and submit your homework!</p><ol><li>Complete the practice steps as described below until you have your own app running in Gitpod.</li><li>Now roll up your sleeves and modify the code in two ways: (1) we want the API to send a greeting to each new player in the chat box, and (2) we want the player names in the game area to match the icon color. <em>Please read the detailed guidance found <a href="#7-homework-instructions">below</a></em>.</li><li>Take a SCREENSHOT of the running app modified this way. <em>Note: you will have to restart the API and reload the client to see all changes!</em></li><li>Submit your homework <a href="https://dtsx.io/streaming-game-homework">here</a>.</li></ol><p>That's it, you are done! Expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#1-create-your-astra-streaming-instance">Create your Astra Streaming instance</a></li><li><a href="#2-create-your-astra-db-instance">Create your Astra DB instance</a></li><li><a href="#3-load-the-project-into-gitpod">Load the project into Gitpod</a></li><li><a href="#4-api-setup">Set up/start the API</a></li><li><a href="#5-client-setup">Set up/start the client</a></li><li><a href="#6-play-the-game">Play!</a></li><li><a href="#7-homework-instructions">Homework instructions</a></li><li><a href="#8-selected-topics">Selected topics</a></li></ol><h2><a class="anchor" aria-hidden="true" id="astra-setup"> </a>Astra setup</h2><h3><a class="anchor" aria-hidden="true" id="1-create-your-astra-streaming-instance"> </a>1. Create your Astra Streaming instance</h3><p><em><strong><code>Astra Streaming</code></strong> is the simplest way to get a streaming infrastructure based on Apache Pulsarwith zero operations at all - just push the button and get your streaming.No credit card required - with the <strong>free tier</strong> comes a generous monthly-renewed credit for you to use.</em></p><p><em><strong><code>Astra Streaming</code></strong> is tightly integrated with <code>Astra DB</code>, the database-as-a-serviceused in most of our workshops (see below, we will use it momentarily).<strong>If you already have an Astra account for Astra DB, you can use thatone in the following (and jump to &quot;Create streaming&quot; below)!</strong></em></p><p>For more information on Astra Streaming, look at <a href="https://docs.datastax.com/en/astra-streaming/docs/">the docs</a>.For more information on Apache Pulsar, here is <a href="https://pulsar.apache.org/docs/en/concepts-overview/">the documentation</a>.</p><h4><a class="anchor" aria-hidden="true" id="1a-register"> </a>1a. Register</h4><p>Register and sign in to Astra at <code>astra.datastax.com</code> by clicking this button (better in a new tab with Ctrl-click or right-click):</p><p><a href="https://astra.dev/multiplayer-game"><img src="images/create_astra_button.png" /></a></p><p><em>you can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.Choose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character.You may be asked to verify your email, so make sure you have access to it.</em></p><details><summary>Show me the steps</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_signup.gif?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="1b-create-streaming"> </a>1b. Create streaming</h4><p>Once registered and logged in, you will be able to create a new Astra Streaming topic: it will convey all messages for this app.</p><p>You can find the instructions in <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraStreaming-Topic">this wiki</a>: in our case, the parameters to use are:</p><ul><li>tenant name: <code>gameserver-&lt;something&gt;</code> (you have to make it unique, so attach a suffix of your choice)</li><li>namespace: <code>default</code> (we will NOT need to create a new one)</li><li>topic name: <code>worldupdates</code> (persistent=yes, partitioned=no)</li></ul><blockquote><p>Note: technically you can name your namespace and topic anything you want - but then you have to make surethe environment settings for your API code are changed accordingly (see later).</p></blockquote><details><summary>Show me the steps</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_create_streaming_topic_v2.gif?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="1c-retrieve-streaming-connection-parameters"> </a>1c. Retrieve streaming connection parameters</h4><p>While you are at it, you should get two pieces of information needed later to connect to the topic from the API code. Those are the &quot;Broker Service URL&quot; and the &quot;Token&quot;,which can be obtained as described in <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraStreaming-Topic#-step-4-retrieve-the-broker-url">this wiki article</a>.</p><details><summary>Show me how to get the topic connection parameters</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/streaming_secrets.png?raw=true" /></details><blockquote><p>The service URL looks something like <code>pulsar+ssl://pulsar-[...].streaming.datastax.com:6651</code>,while the token is a very long string such as <code>eyJhbGci [...] cpNpX_qN68Q</code>.<strong>The token is a secret string and you should keep it for yourself!</strong></p></blockquote><h3><a class="anchor" aria-hidden="true" id="2-create-your-astra-db-instance"> </a>2. Create your Astra DB instance</h3><p>Besides the streaming platform, you'll also need a database for persistence of somegame data (the server-side representation of the &quot;game world&quot;).</p><p>Correspondingly, you will need some connection parameters and secrets in orderto later be able to access the database.</p><h4><a class="anchor" aria-hidden="true" id="2a-create-the-database"> </a>2a. Create the database</h4><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations and 80GB storage monthly - sufficient to run small production workloads.</em></p><p>You will now create a database with a keyspace in it (a <em>keyspace</em> can contain <em>tables</em>.Today's application needs just a single table: it will be created for you the first time youwill launch it, so don't worry too much).</p><img src="images/create_database_button.png" width="250" align=right /><p>To create the database, locate the &quot;Create database&quot; button on the navigation bar on the left of the Astra UI, click on it and fill the requiredvalues:</p><ul><li><p><strong>For the database name</strong> - use <code>workshops</code>. While Astra DB allows you to fill in these fields with values of your own choosing, please follow our recommendations to ensure the application runs properly.</p></li><li><p><strong>For the keyspace name</strong> - use <code>drapetisca</code>. Please stick to this name, it will make the following steps much easier (you have to customize here and there otherwise). In short:</p></li><li><p><strong>For provider and region</strong>: Choose <strong>GCP</strong>, which is immediately available to a fresh account (AWS and Azure would have to be unlocked, <em>for free</em>, by contacting Support). Region is where your database will reside physically (choose one close to you or your users).</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button. You will be on the <strong>Free</strong> plan.</p></li></ul><table><thead><tr><th>Parameter</th><th>Value</th></tr></thead><tbody><tr><td>Database name</td><td>workshops</td></tr><tr><td>Keyspace name</td><td>drapetisca</td></tr></tbody></table><p>You will see your new database as <code>Pending</code> in the Dashboard;the status will change to <code>Active</code> when the database is ready. This will only take 2-3 minutes(you will also receive an email when it is ready).</p><details><summary>Show me the how to create my Astra DB</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_create_db.gif?raw=true" />To create the database, please note that _the `db_name` and `ks_name` in the above image are just placeholders_.</details><blockquote><p><em>Note</em>: if you already have a <code>workshops</code> database, for instance from a previous workshop with us, you can simply create the keyspace with the <code>Add Keyspace</code> button in your Astra DB dashboard: the new keyspace will be available in few seconds.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-token"> </a>2b. Create a DB Token</h4><p>You need to create a <strong>DB token</strong>, which the API will later use as credentials to access the DB.</p><p>From the Astra DB UI, <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">create a token</a>with <code>Database Administrator</code> roles.</p><img src="images/orgsettings.png" width="250" align=right /><ul><li>Locate the &quot;Current Organization&quot; menu in the top-left of the Astra UI and select <code>Organization Settings</code></li><li>Go to <code>Token Management</code></li><li>Pick the role <code>Database Administrator</code> on the select box</li><li>Click Generate token</li></ul><details><summary>Show me the Astra DB token creation</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra-create-token.gif?raw=true" /></details><blockquote><p><strong>Tip</strong>: you can quickly get to the &quot;Token Management&quot; also through the &quot;...&quot;menu next to the list of databases in your main Astra DB UI.</p></blockquote><p>The &quot;token&quot; is composed by three parts:</p><ul><li><code>Client ID</code>: it plays the role of <em>username</em> to connect to Astra DB;</li><li><code>Client Secret</code>: it plays the role of a <em>password</em>;</li><li><code>Token</code> (proper): <em>not needed today</em>. It would be used as API key to access Astra via the API Gateway.</li></ul><blockquote><p>You can either copy and paste the values or download them as a CSV (you'll need the <code>Client ID</code> and <code>Client Secret</code>momentarily). <em>To copy the values you can click on the clipboard icons.</em></p></blockquote><details><summary>Show me the generated Astra DB token</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra-token.png?raw=true" /></details><blockquote><p>Make sure you download the CSV or copy the token values you need: once this page is closed,you won't be able to see your token again for security reasons! (then again, you can always issue a new token).</p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show token creation on screen,but will then immediately destroy the token for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="2c-download-the-db-secure-connection-bundle"> </a>2c. Download the DB Secure Connection Bundle</h4><p>There's a last missing piece needed for the application to successfully connectto Astra DB: the &quot;secure connect bundle&quot;. You have to download it from the Astra UIand keep it ready for later usage.</p><blockquote><p>The secure bundle, a zipfile containing certificates and server address information,will have to be provided to the Cassandra driver when the connection is established(see later steps).</p></blockquote><p>Go to the Astra DB UI, find the <code>workshops</code> database and click on it:</p><ol><li>click on <code>Connect</code> tab;</li><li>click on <code>Connect using a driver</code> (any language will do);</li><li>click on the <code>Download Bundle</code> drop-down on the right;</li><li>finally click on <code>Secure Connect Bundle (&lt;region&gt;)</code> to start the download. The bundle file should have a name such as <code>secure-connect-workshops.zip</code> and be around 12KB in size. <em>Note: make sure you &quot;Save&quot; the zipfile whole, without unzipping/opening it (as some browser might suggest you to do.</em></li></ol><details><summary>Show me how to get the Astra DB bundle</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/astra_bundle.png?raw=true" /></details><h2><a class="anchor" aria-hidden="true" id="configure-and-run-the-application"> </a>Configure and run the application</h2><h3><a class="anchor" aria-hidden="true" id="3-load-the-project-into-gitpod"> </a>3. Load the project into Gitpod</h3><p>Development and running will be done within a Gitpod instance (more on that in a second).</p><h4><a class="anchor" aria-hidden="true" id="3a-open-gitpod"> </a>3a. Open Gitpod</h4><p>To load the whole project (API + client) in your personal Gitpod workspace, pleaseCtrl-click (or right-click and open in new tab) on the following button:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-streaming-game"><img src="images/open_in_gitpod_button.svg" /></a></p><p>(You may have to authenticate with Github or other providers along the process).Then wait a couple of minutes for the installations to complete, at which point youwill see a message such as <code>CLIENT/API READY TO START</code> in the Gitpod console.</p><details><summary>Tell me what the Gitpod button does</summary><ul><li>An IDE is started on a containerized machine image in the cloud</li><li>there, this repo is cloned</li><li>some initialization scripts are run (in particular, dependencies get installed)</li><li>Gitpod offers a full IDE: you can work there, edit files, run commands in the console, use an internal browser, etc.</li></ul></details><blockquote><p>In case you prefer to work <em>on your local computer</em>, no fear! You can simply keepa console open to run the React client (<code>cd client</code>) and another for thePython API (<code>cd api</code>). For the formeryou will have to <code>npm install</code> and for the latter (preferrably in a virtual environmentto keep things tidy and clean) you will have to install the required dependenciese.g. with <code>pip install -r requirements.txt</code>.(Mac users will also have to do a <code>brew install libpulsar</code> for the API to work.)The rest of this readme will draw yourattention to the occasional differences between the Gitpod and the local routes, butwe'll generally assume that if you work locally you know what you are doing. Good luck!</p></blockquote><h4><a class="anchor" aria-hidden="true" id="3b-gitpod-interface"> </a>3b. Gitpod interface</h4><p>This project is composed of two parts: client and API. For this reason, Gitpodis configured to spawn <em>three</em> different consoles: the &quot;default&quot; one forgeneral-purpose actions, an &quot;api&quot; console and a &quot;client&quot; console (these twowill start in the <code>api</code> and <code>client</code> subdirectories for you).<strong>You can switch between consoles by clicking on the items in the lower-right panels in your Gitpod</strong>.</p><details><summary>Show me a map of the Gitpod starting layout</summary><img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/gitpod_view.png?raw=true" /><ol><li>File explorer</li><li>Editor</li><li>Panel for console(s)</li><li>Console switcher</li></ol></details><blockquote><p>Note: for your convenience, you find this very README open within the Gitpodtext editor.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="4-api-setup"> </a>4. API setup</h3><p>Before you can launch the API, you have to configure connection details to it:you will do it through the dotenv file <code>.env</code>.</p><h4><a class="anchor" aria-hidden="true" id="4a-streaming-environment-variables-code-env-code-part-i"> </a>4a. Streaming environment variables (<code>.env</code>, part I)</h4><p>You need to pass the streaming connection URL and streaming token to the API forit to be able to speak to the Streaming topic. To do so, first <strong>go to the API console</strong>and make sure you are in the <code>api</code> subdirectory.</p><blockquote><p>The <code>pwd</code> command should output <code>/workspace/workshop-streaming-game/api</code>.</p></blockquote><blockquote><p>If you are working locally, make sure you are in the <code>/api</code> subdirectoryof the project for the following commands to work properly. Later anyway,in order to have both the API and the client running, you will need twoconsoles, one in each of the two <code>api</code> and <code>client</code> subdirectories.</p></blockquote><p>Then create a file <code>.env</code> by copying the <code>.env.sample</code> in the same directory,with the commands</p><pre><code># In the 'api' subdirectorycp .env.sample .envgp open .env</code></pre><p>(the second line will simply open the <code>.env</code> file in the editor: you can also simply locate the file in Gitpod's file explorer and click on it).Fill the first lines in the file with the values found earlieron your Astra Streaming &quot;Connect&quot; tab (<em>keep the quotes in the file</em>):</p><ul><li><code>STREAMING_TENANT</code>: your very own tenant name as chosen earlier when creating the topic (step <code>1b</code>); it should be something like <code>gameserver-abc</code>.</li><li><code>STREAMING_SERVICE_URL</code>: it looks similar to <code>pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651</code></li><li><code>ASTRA_STREAMING_TOKEN</code>: a very long string (about 500 random-looking chars), see step <code>1c</code>. You can copy it on the Astra UI without showing it.</li></ul><blockquote><p>Note: treat your token as a personal secret: do not share it, do not commit it to the repo, store it in a safe place!</p></blockquote><blockquote><p>Note: in case you gave a different namespace/name to your topic, update <code>.env</code> correspondingly.If, moreover, you work locally you may have to check the <code>TRUST_CERTS</code> variable as well, dependingon your OS distribution. Look into the <code>.env</code> file for some suggestions.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="4b-upload-the-db-secure-bundle-code-env-code-part-ii"> </a>4b. Upload the DB secure bundle (<code>.env</code>, part II)</h4><p>Remember the secure connect bundle you downloaded earlier from the Astra DB UI?It's time to upload it to Gitpod.</p><blockquote><p>If you work locally, skip the upload and just be aware of the full path to it for what comes next in the <code>.env</code> file.</p></blockquote><p>Locate the file on your computer using the &quot;finder/explorer&quot;.Drag and drop the bundle into the Gitpod explorer window: <em>make sure you drop it on thefile explorer window in Gitpod.</em></p><details><summary>Show me how to drag-and-drop the bundle to Gitpod</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drag-and-drop-bundle.png?raw=true" /></details><p>As a check, you may want to verify the file is available in the right location with:</p><pre><code>ls -lh /workspace/workshop-streaming-game/secure-connect-*.zip</code></pre><p>The output should tell you the exact path to the file (you can also make sure the file size is around 12KBwhile you are at it).</p><p><strong>This exact path to the file must go to line <code>ASTRA_DB_SECURE_CONNECT_BUNDLE</code> of the <code>.env</code> file.</strong>The line has been pre-filled for you already, but if the bundle has a different name or is at adifferent location (e.g. if you work locally, or your DB has another name),make sure you change the value accordingly.</p><h4><a class="anchor" aria-hidden="true" id="4c-database-access-secrets-code-env-code-part-iii"> </a>4c. Database access secrets (<code>.env</code>, part III)</h4><p>With the secure bundle in place and set up in the <code>.env</code>, you can turn to the last missingpiece: the secrets to access the DB.</p><p>Insert the Astra DB <code>Client ID</code> and <code>Client Secret</code> you obtained earlier as parts of the &quot;Astra DB Token&quot;in the <code>.env</code> file (again, keep the quotes around the values):</p><pre><code>ASTRA_DB_USERNAME=&quot;tByuQfj...&quot;ASTRA_DB_PASSWORD=&quot;lGzF5,L...&quot;</code></pre><blockquote><p>In case your keyspace has a name other than <code>drapetisca</code>, check the <code>ASTRA_DB_KEYSPACE</code> in your <code>.env</code> as well.</p></blockquote><p>Congratulations: you should now have completed the <code>.env</code> setup!</p><h4><a class="anchor" aria-hidden="true" id="4d-start-the-api"> </a>4d. Start the API</h4><p>Make sure you are in the API console and in the <code>api</code> subdirectory.You can now <strong>start the API</strong>:</p><pre><code># In the 'api' subdirectoryuvicorn api:app</code></pre><p>You should see the API start and log some messages in the console, in particular</p><pre><code>INFO:     Application startup complete.INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</code></pre><p>Congratulations: the API is up and is ready to accept client requests.Leave it running and turn your attention to the client.</p><blockquote><p>Note: this is how you start the API in a development environment. To deployto production, you should set up a multi-process system service for <code>uvicorn</code>with the <code>--workers</code> option and put the whole thing behind areverse proxy. <em>This is not covered here</em>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="5-client-setup"> </a>5. Client setup</h3><p>Make sure you <strong>go to the client console</strong> for the following(to switch consoles, look at the lower-right panel in your Gitpod layout).You should be in the <code>client</code> project subdirectory (i.e. the <code>pwd</code> command should print <code>/workspace/workshop-streaming-game/client</code>).</p><h4><a class="anchor" aria-hidden="true" id="5a-install-dependencies"> </a>5a. Install dependencies</h4><p>First ensure all required dependencies are installed:</p><pre><code># In the 'client' subdirectorynpm install</code></pre><blockquote><p>Note: the command would take a few minutes on a fresh directory; we secretly instructed Gitpodto preinstall them just to save you some time in this step - still, we wantyou to go through it. Obviously, if you are working on your local environment,this will be slower.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="5b-start-the-client"> </a>5b. Start the client</h4><p>The client is ready to go! <strong>Launch it</strong> in development mode with:</p><pre><code># In the 'client' subdirectorynpm start</code></pre><p>Let's assume you are working within Gitpod, which wraps locally-exposed portsand makes them accessible through ordinary HTTPS domain names.As the client is available, Gitpod will automatically open it in its &quot;simple browser&quot;,using a domain such as <code>https://3000-tan-swallow-2yz174hp.ws-eu17.gitpod.io</code>.This URL can be obtained also by typing, in the general-purpose Gitpod console,</p><pre><code>gp url 3000</code></pre><p>(3000 being the port number locally used by npm to serve the client).This will match the URL shown in the address bar of your simple browser.</p><p>Note that you can also take this URL and open the application in a new tab,<strong>which you are encouraged to do to use your full screen</strong>.</p><blockquote><p>Note: we set up Gitpod for this workshop so as to make this URL accessible by anyone, to allow youto paste the link to your friends, thereby inviting them to your own game instance!</p></blockquote><blockquote><p>If you are running everything locally on your computer, instead, you canopen the client on <code>http://localhost:3000</code> and use thedefault API location of <code>ws://localhost:8000</code> to enter the game.</p></blockquote><blockquote><p>Note: this is how you launch the client in development mode. For deployingto production, you should first build the project and then serve it froma static Web server. <em>This is not covered here</em>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="6-play-the-game"> </a>6. Play the game!</h3><p>We finally have all pieces in place:</p><ul><li>an Astra Streaming topic;</li><li>an API bridging it to ...</li><li>... a client ready to establish WebSocket connections.</li><li>(and an Astra DB instance acting as persistent storage to back the API)</li></ul><p>It is time to play!</p><h4><a class="anchor" aria-hidden="true" id="6a-enter-the-game"> </a>6a. Enter the game</h4><p>Change your name if you desire (a spider name is drawn at random for you).You will also see that you are given a (read-only) unique player ID and that an API addressis configured for the client to establish WebSocket connections to.</p><blockquote><p>The API location points to the instance of the API running alongside the client:you should generally not have to change it (but please notice the protocol iseither <code>ws</code> or <code>wss</code>, which stand for WebSocket and Secure WebSocket respectively).</p></blockquote><p>To enter the game, click the &quot;Enter Game&quot; button.</p><details><summary>Show me the "Enter Game" form</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_2.png?raw=true" /></details><p>Well done: you are in the game. You should see your player appear in the arena!</p><ul><li>To control your player, either use the on-screen arrow buttons or, after bringing the game field into focus, your keyboard's arrow keys;</li><li>you can use the in-game chat box on the left.</li></ul><details><summary>Show me the player after entering the game</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_3_v2.png?raw=true" /></details><blockquote><p><strong>Note</strong>: if you experience a laggy game, especially with several players at once,it is probably due to the fact that you have no control over the physical location of your Gitpod instance:it may have been deployed far from the database. Remember that in a real-life online game great careis taken to keep all parts close to each other to keep latencies under control.If you want to play the game nevertheless, you can set the <code>USE_IN_MEMORY_STORAGE</code> variableto <code>&quot;1&quot;</code> in your <code>.env</code> and then stop-and-restart the API: this will replace usage of Astra DBwith an in-memory local store; it is a development-only solution, however, that would of coursenot work were you to scale to several running instances of the API.</p></blockquote><p>Anything your player does is sent to the API through a WebSocket in the form of an &quot;update message&quot;;from there, it is published to the Astra Streaming topic (and persisted to the database).The API will then pick up the updateand broadcast to all players, whose client will process it, eventually leading to a refresh of the game statuson the front-end. All this happens in a near-real-time fashion at every action by every player.</p><blockquote><p>Note that the game shows the last sent message and the last received messages for you to better inspectthe messaging pattern at play.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="6b-try-to-cheat"> </a>6b. Try to cheat</h4><p>Let's be honest: there's no multiplayer game without cheaters - at least, cheat attempts.So, for example, try to <em>walk beyond the boundaries of the play area</em>, to see what happens.Notice the &quot;Position&quot; caption on the left sidebar? If you keep an arrow key pressedlong enough, you will sure be able to bring that position to an illegal value such as <code>(-1, 0)</code>.But as soon as you release the key, the position bounces back to a valid state.</p><p>Here's the trick: this &quot;position&quot;, shown in the client, is nothing more than a variablein the client's memory. Every update (including <code>(-1, 0)</code>) is sent to the API, whichis the sole actor in charge of validation: an illegal value will be corrected and sent backto all clients (<em>consider the API has access to the game-world state persisted on DBand can handle collisions and the like</em>).In particular, your own client will adjust knowledge of its own positionbased on this feedback from the API - which is why you see the illegal value only briefly.</p><p>All of this must happen asynchronously, as is the nature of the communication between clientand API. There is a lesson here, which has been hard-earned by online game devs over the years:<em>never leave validity checks in the hand of the client</em>.</p><blockquote><p>Remember the hordes of cheaters in ... er ... Diablo I ?</p></blockquote><p><strong>Implications on the architecture</strong></p><p>Unfortunately such an all-server architecture is more complex to achieve.One has to introduce a &quot;generation counter&quot; to avoid accidentally triggeringinfinite loops of spurious player-position updates - you can see thisever-increasing generation counter (<code>generation</code>) if you inspect theplayer-position updates shown at the bottom of the application.</p><p>In the client code, the crucial bit is to accept updates to your-own-positioncoming from the server, <em>only if they are recent enough</em>. For further inspection,have a look at:</p><ul><li>API: usage of <code>validatePosition</code> at line 66 of <code>api.py</code>;</li><li>Client: condition on <code>generation</code> at line 109 of <code>App.js</code> before invoking <code>setPlayerX</code> and <code>setPlayerY</code>.</li></ul><blockquote><p>Note: in this architecture, we very much <strong>want</strong> to have a server betweenclients and Pulsar topic, with the responsibility of performing validations.Even more so in a complex game, where each client action (message) triggerspotentially several actions in the world. But we want to mention, in passing by,that Pulsar also offers its own<a href="https://pulsar.apache.org/docs/en/client-libraries-websocket/">native WebSocket interface</a>(and so does Astra Streaming),for clients to directly connect to topics using that protocol.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="6c-bring-your-friends"> </a>6c. Bring your friends</h4><p>But wait ... this is a <em>multiplayer</em> game, isn't it? So, go ahead and open a newbrowser tab, then enter the game as someone else.</p><p>Hooray! As soon as you move around with this new player,you will see the whole architecture at work:</p><ol><li>client sends updates on your player's position through the &quot;player websocket&quot;;</li><li>API checks game state on DB and validates this update, taking action if needed;</li><li>API (a) publishes the validated player update to the Astra Streaming topic and (b) persists new game-state to DB;</li><li>API receives back new messages by listening to this same Astra Streaming topic;</li><li>API broadcasts updates on any player to all connected clients through the &quot;world websocket&quot;;</li><li>at each such update, the client's game arena is adjusted (for all connected clients).</li></ol><p>What is really cool is that <strong>you can give this URL to your friends</strong> and have thementer your very own game!</p><p><em>Please do this and tell the world about how easy it is to build a multiplayer real-timegame with Astra Streaming!</em></p><h4><a class="anchor" aria-hidden="true" id="6d-fun-with-the-streaming-ui"> </a>6d. Fun with the Streaming UI</h4><p>The Astra Streaming interface makes it possible to eavesdrop on the topic andobserve the messages passing through it. This may prove very useful fordebugging.</p><p>In the Astra Streaming UI, head to the &quot;Try Me&quot; tab and make sure:</p><ul><li>the namespace and the (producer, consumer) topics are set to the values used earlier;</li><li>connection type is &quot;Read&quot;;</li><li>read position is &quot;Latest&quot;</li></ul><p>Good, now click &quot;Connect&quot;.</p><details><summary>Show me the "Try Me" interface</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/eavesdrop_streaming.gif?raw=true" /></details><details><summary>A demo video of the "Try Me" feature (Youtube)</summary>    <a href="https://youtu.be/WWYXeZh0S9k">        <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/try-me-demo-video-thumbnail.png?raw=true" />    </a></details><p>You now have a privileged view over the messages flowing through the Streamingtopic. Now try writing something in the Chat box: can you see the correspondingmessage in the Streaming UI?</p><p>What kind of message do you see, instead, if you move you player?</p><p>But wait, there's more: now you can <strong>hack the system</strong>! Indeed, this same interface lets youproduce surreptitious messages into the topic (&quot;Send&quot; button on the Streaming UI).Try to insert a message such as:</p><pre><code>{    &quot;messageType&quot;: &quot;chat&quot;,    &quot;payload&quot;: {        &quot;id&quot;: &quot;000&quot;,        &quot;name&quot;: &quot;Phantom!&quot;,        &quot;text&quot;: &quot;Booo!&quot;    },    &quot;playerID&quot;: &quot;nonexistent&quot;}</code></pre><p>and keep an eye on the chat box.</p><p>Even better, try to inject a message such as <em>(you may have to adjust the <code>x</code>, <code>y</code> coordinates for this to be real fun)</em>:</p><pre><code>{    &quot;messageType&quot;: &quot;brick&quot;,    &quot;payload&quot;: {        &quot;name&quot;: &quot;phantom brick!&quot;,        &quot;x&quot;: 0,        &quot;y&quot;: 0    }}</code></pre><p>what happens in the game UI when you to this? Can you walk to that spot? (Why?)</p><blockquote><p>Also, have you noticed that the &quot;Try Me&quot; interface shows how each message you publish to the topic is echoed back to you?This is done by the API logic and is part of the game design.</p></blockquote><p>Now, you just had a little fun: but, seriously speaking, this ability to manually intervene in the stream of messages makes for a valuable debugging tool.</p><h4><a class="anchor" aria-hidden="true" id="6e-a-quick-look-at-the-data-on-db"> </a>6e. A quick look at the data on DB</h4><p>Any change to the game-world, either originated in the API or coming froma player (and then just validated at API level) is persisted on database.If you are curious, you can look at the raw data directly within the Astra DB UI.</p><p>Each time the API starts, it will generate a new &quot;game ID&quot;, under which all infopertaining to this particular game will be stored. In fact, <code>game_id</code> plays therole of<a href="https://docs.datastax.com/en/astra-cql/doc/cql/ddl/dataModelingApproach.html">partition key</a> in the underlying <code>drapetisca.objects_by_game_id</code> table.</p><blockquote><p>The topic of data storage and data modeling in Cassandra is huge and we won'tdo it justice here. Just bear with us to see the game data, and if you wantto know more you can start from <a href="https://www.datastax.com/learn/data-modeling-by-example">Data modeling by example</a> and <a href="https://www.datastax.com/cassandra">What is Cassandra?</a>. You will embark on a long and exciting journey!</p></blockquote><p>Locate the &quot;CQL Console&quot; tab for the <code>workshops</code> database in your Astra DB dashboardand click on it. An interactive shell will be spawned for you, to type the following commands:</p><pre lang="sql"><code>USE drapetisca ;SELECT * FROM objects_by_game_id ;</code></pre><p>You should see several lines in the output, corresponding to the objects present in the game(s)and their properties.</p><blockquote><p>If you already started several games (e.g. by hitting Ctrl-C and restarting <code>uvicorn</code> in the API console), notice that the info for each of them is neatly grouped by the value of the <code>game_id</code> column.</p></blockquote><details><summary>Show me the game data in the Astra DB CQL Console</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/cql_console.gif?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="7-homework-instructions"> </a>7. Homework instructions</h3><p>Here are some more details on how to do the homework. We require two modificationsto the code, one on the API and one on the client. Once you change both, and restart,you will be able to take a screenshot showing the new game appearance and submitit to us!</p><h4><a class="anchor" aria-hidden="true" id="7a-server-side"> </a>7a. Server side</h4><p>We want a greeting message to be sent from the API to a new client right afterthey join. To do so, the <code>api.py</code> already imports a function <code>makeWelcomeUpdate</code>that returns a &quot;chat message&quot; ready to be sent through the WebSocket.You may also want to make use of variable <code>newPlayerName</code> that is made availablein the API code.</p><p><strong>You should add a line in the function <code>playerWSRoute</code> that creates the welcomechat message and sends it to the WebSocket</strong>. <em>Suggestion: this is really notso different from the geometry update any new client receives upon connecting.</em></p><h4><a class="anchor" aria-hidden="true" id="7b-client-side"> </a>7b. Client side</h4><p>We want the player names on the game field to have the same color as the playericons instead of always dark grey as they are now. If you look into <code>GameField.js</code>,you'll notice that the SVG <code>text</code> element currently has a class name <code>&quot;player-name&quot;</code>.</p><p><strong>Make it so that players (self/other) use different class names in their <code>text</code>element and have a color matching their icon</strong>. <em>Suggestion: the right class nameis already calculated a few lines above for you to use (you can check in <code>App.css</code> as well)</em>.</p><h4><a class="anchor" aria-hidden="true" id="7c-restart-test-and-take-a-screenshot"> </a>7c. Restart, test and take a screenshot</h4><p>Remember to stop and restart the API: go to its console, hit Ctrl-C andre-run <code>uvicorn api:app</code> to do so. All current WebSocket connections willbe lost.</p><p>The client is running in development mode, so it should pick up any changeslive and be immediately ready to serve the new version: reloading the app page(and re-entering the game) should be enough.</p><p>At that point you will be playing the improved game: homework completed!</p><details><summary>Show me the new features in the game</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/drapetisca_homework.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="8-selected-topics"> </a>8. Selected topics</h3><p>Let us briefly mention some specific parts of the implementation of this game.</p><h4><a class="anchor" aria-hidden="true" id="8a-websockets-and-react"> </a>8a. WebSockets and React</h4><p>API and client communicate through WebSockets: in this way, we have a connectionthat is kept open for a long time and allows for a fast exchange of messageswithout the overhead of establishing a new connection for each message;moreover, this allows the server to push data without waiting for the clientto initiate the exchange (as in the obsolete technique of client-side polling).WebSockets follow a robust and standardized <a href="https://datatracker.ietf.org/doc/html/rfc6455">protocol</a>which makes it possible for us developers to concentrate on our game logicinstead of having to worry about the communication internals.</p><p>In particular, this game uses two WebSockets:</p><ul><li>a &quot;player&quot; one for bidirectional client/server data transmission in a direct fashion;</li><li>a &quot;world&quot; one where the API route all messages picked up by the streaming topic. Most game status updates go through this route (with the exception of those directed at an individual player).</li></ul><p>You can find the corresponding variables <code>pws</code> and <code>wws</code> in the client code, respectively.</p><p>In Javascript, one <em>subscribes to an event</em> on an open WebSocket, providinga callback function with <code>webSocket.onmessage = &lt;callback&gt;</code>. But beware:if you simply try to read a React state (such as <code>generation</code>) from withinthe callback, you will generally get a stale value, <em>corresponding to thestate when the subscription was made</em>. In practice, the state variableis &quot;closed over&quot;. To overcome this problem, and be able to access the latestupdated value of the state, we declare a React &quot;reference&quot; with <code>useRef</code>and, after linking it to the state we want to read, we use this referencewithin the callback to dynamically retrieve the current value of the state.</p><details><summary>Look at lines 49-50 and then 103 of `App.js`, for example.</summary>    <img src="https://github.com/datastaxdevs/workshop-streaming-game/raw/main/images/ref_code_1.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="8b-fastapi"> </a>8b. FastAPI</h4><p>This game's architecture involves a server. Indeed, we would not be ableto implement it using only serverless functions, at least not in a way similarto what you see here, because of statefulness. We need a server able to sustainthe WebSocket connections for a long time, on one side, and to maintainlong-running subscriptions to the Pulsar topics on the other side.</p><p>We chose to create the API in Python, and to use<a href="https://fastapi.tiangolo.com/">FastAPI</a>, for a couple of very validreasons. FastAPI integrates very well with the async/await features of modernPython, which results in a more efficient handling of concurrency. Moreover,it supports WebSockets (through its integration with<a href="https://www.starlette.io/">Starlette</a>) with a natural syntax that reducesthe need for boilerplate code to near zero.</p><blockquote><p>There are other cool features of FastAPI (besides its namesake high performance),which we do not employ here but make it a prime choice. There is a clevermechanism to handle route dependencies aimed at reducing the amount of &quot;boring&quot;code one has to write; and there is native support for those small tasksthat sometimes you have to trigger asynchronously right after a request completes,those that in other frameworks would have required to set up machinery like Celery.</p></blockquote><p>Have a look at <code>api.py</code> to see how a WebSocket connection is handled: decoratinga certain function with <code>@app.websocket(...)</code> is almost everything you need toget started. One of the arguments of the function will represent the WebSocketitself, supporting methods such as <code>send_text</code> and <code>receive_text</code>. Eachactive WebSocket connection to the server will spawn an invocation of thisfunction, which will run as long as the connection is maintained: the supportfor async/await guarantees that these concurrent executions of theWebSocket function will be scheduled efficiently with no deadlocks.</p><h4><a class="anchor" aria-hidden="true" id="8c-svg-tricks"> </a>8c. SVG Tricks</h4><p>One of the React components in the client code is the <code>GameField</code>, whichrepresents an area where we draw the players. This is a single large SVGelement, whose child elements are managed with the usual <code>jsx</code> syntax.</p><p>A technique that proved useful in this game is that of defining, and thenre-using multiple times, &quot;patterns&quot;, basically as sprites. If you lookat the <code>GameField.js</code> render code, you notice that the SVG first declaressome <code>pattern</code> elements with certain <code>id</code>s (such as <code>lyco_other</code>).These patterns are then employed in various parts of the SVG to &quot;fill&quot;rectangles, which effectively makes it possible to use them as repeated sprites:</p><pre><code>    &lt;rect .... fill=&quot;url(#lyco_other)&quot;&gt;&lt;/rect&gt;</code></pre><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The End</h2><p>Congratulations, you made it to the end! Please share the URL of your game withyour friends: who does not love a little cozy spider gathering?</p><p><em>(Please notice that after some inactivity your Gitpod instance will be hibernated:you will need to re-start client and server to be able to play again.)</em></p><p>Don't forget to complete and submit your <a href="#homework">homework</a> to claimyour badge, and see you next time!</p><blockquote><p>DataStax Developers</p></blockquote><p><img src="images/Theridion_grallator.png" alt="Theridion grallator" /></p>
SUCCESS SAVING README for datastaxdevs-workshop-streaming-game
Getting astra.json for datastaxdevs/workshop-nosqlbench at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db-with-nosqlbench"> </a>Benchmark your Astra DB with NoSQLBench</h1>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="before-you-start"> </a>Before you start</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="faq"> </a>FAQ</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="launch-gitpod-and-setup-nosqlbench"> </a>Launch Gitpod and setup NoSQLBench</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="install-nosqlbench"> </a>Install NoSQLBench</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="version-used"> </a>Version used</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="upload-the-secure-connect-bundle-to-gitpod"> </a>Upload the Secure Connect Bundle to Gitpod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-the-astra-db-parameters"> </a>Configure the Astra DB parameters</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="run-benchmarks"> </a>Run benchmarks</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="a-short-dry-run"> </a>A short dry run</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db"> </a>Benchmark your Astra DB</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-contents"> </a>Database contents</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-health"> </a>Database health</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="final-summary-in-logs"> </a>Final summary in &quot;logs/&quot;</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="additional-histostats-datafile"> </a>Additional &quot;histostats&quot; datafile</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="hdr-extensive-histogram-data"> </a>HDR extensive histogram data</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="metrics-metrics-metrics"> </a>Metrics, metrics, metrics</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="grafana-dashboard"> </a>Grafana dashboard</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="a-glance-at-prometheus"> </a>A glance at Prometheus</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="workloads"> </a>Workloads</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-cql-keyvalue"> </a>Inspect &quot;cql-keyvalue&quot;</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="play-with-workloads"> </a>Play with workloads</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="example-1-talking-about-food"> </a>Example 1: talking about food</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="example-2-animal-meeting"> </a>Example 2: animal meeting</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-assignment"> </a>Homework assignment</h2>
HTML FOR datastaxdevs-workshop-nosqlbench<h1><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db-with-nosqlbench"> </a>Benchmark your Astra DB with NoSQLBench</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-nosqlbench"><img src="https://img.shields.io/badge/Gitpod-hands--on-blue?logo=gitpod" alt="Gitpod hands-on" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="images/nosqlbench_banner.png?raw=true" /><p>Time: <em>2 hours</em>. Difficulty: <em>Intermediate</em>. <a href="#create-your-astra-db-instance">Start Building!</a></p><p>The goal of this workshop is to get you familiar with the powerful and versatiletool <strong><a href="https://docs.nosqlbench.io/"><code>NoSQLBench</code></a></strong>. With that, you can perform<strong>industry-grade, robust benchmarksaimed at several (distributed) target systems, especially NoSQL databases</strong>.</p><p>Today you'll be benchmarking Astra DB, a database-as-a-service built on top ofApache Cassandra. Along the way, you will learn the basics of NoSQLBench.</p><p>In this repository you will find all material and references you need:</p><ul><li><a href="https://discord.gg/dBHRakusMN">NoSQLBench Discord</a></li><li><a href="https://docs.nosqlbench.io/">NoSQLBench homepage</a></li><li><a href="#create-your-astra-db-instance">Exercises</a></li><li><a href="#before-you-start">Step-by-step guide</a></li><li><a href="https://dtsx.io/discord">DataStaxDevs Discord server</a> to keep in touch with us</li><li><a href="https://community.datastax.com/">Our Q&amp;A forum</a> (think StackOverflow for Cassandra and all things DataStax)</li><li><a href="slides/datastaxdevs-workshop-benchmarking-nosqlbench.pdf">Slide deck</a></li></ul><!-- - [Workshop video](#) --><h4><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h4><ol><li><a href="#before-you-start">Before you start</a></li><li><a href="#create-your-astra-db-instance">Create your Astra DB instance</a></li><li><a href="#launch-gitpod-and-setup-nosqlbench">Launch Gitpod and setup NoSQLBench</a></li><li><a href="#run-benchmarks">Run benchmarks</a></li><li><a href="#workloads">Workloads</a></li><li><a href="#homework-assignment">Homework assignment</a></li></ol><h2><a class="anchor" aria-hidden="true" id="before-you-start"> </a>Before you start</h2><img src="images/attention.png?raw=true" width="80" align="left" /><blockquote><p><strong>Heads up</strong>: these instructions are available in two forms:a short and to-the-point one (<em>this one</em>),with just the useful commands if you are watching us live; anda <a href="extended_README.md">longer one</a>,with lots of explanations and details, designed for those who follow this workshopat their own pace. Please choose what best suits you!</p></blockquote><h3><a class="anchor" aria-hidden="true" id="faq"> </a>FAQ</h3><ul><li>What are the prerequisites?</li></ul><blockquote><p>This workshop is aimed at data architects, solution architects, developers, or anybody whowants to get serious about measuring the performance of their data-intensive system.You should know what a (distributed) database is, and have a general understanding of thechallenges of communicating over a network.</p></blockquote><ul><li>Do I need to install a database or anything on my machine?</li></ul><blockquote><p>No, no need to install anything. You will do everything in the browser.(That being said, the knowledge you gain today will probably be best put touse once you install NoSQLBench on some client machine to run tests.)</p></blockquote><blockquote><p>You can also choose to work on your machine instead of using Gitpod: there'sno problem with that, just a few setup and operational changes to keepin mind. We will not provide live support in this case, though,assuming you know what you are doing.</p></blockquote><ul><li>Is there anything to pay?</li></ul><blockquote><p><strong>No.</strong> All materials, services and software used in this workshop is <em>free</em>.</p></blockquote><ul><li>Do you cover NoSQLBench 4 or 5?</li></ul><blockquote><p>Ah, I see you are a connoisseur. We focus on the newly-release <strong>NoSQLBench 5</strong>,but we provide tips and remarks aimed at those still using nb4.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3><img src="images/nosqlbench_badge_artwork.png?raw=true" width="200" align="right" /><p>To complete the workshop and get a verified &quot;NoSQLBench&quot; badge,follow these instructions:</p><ol><li>Do the hands-on practice, either during the workshop or by following the instructions in this README;</li><li>(optional) Complete the &quot;Lab&quot; assignment as detailed <a href="homework/homework.md">here</a>;</li><li>Fill the submission form <a href="https://dtsx.io/homework-nosqlbench">here</a>. Answer the theory questions and (optionally) provide a <em>screenshot</em> of the completed &quot;Lab&quot; part;</li><li>give us a few days to process your submission: you should receive your well-earned badge in your email inbox!</li></ol><h2><a class="anchor" aria-hidden="true" id="create-your-astra-db-instance"> </a>Create your Astra DB instance</h2><p>First you must create a database: an instance of Astra DB, whichyou will then benchmark with NoSQLBench.</p><blockquote><p>Don't worry, you will createit within the &quot;Free Tier&quot;, which offers quite a generous freeallowance in terms of monthly I/O (about 40M operations per month)and storage (80 GB).</p></blockquote><p><a href="https://astra.datastax.com"><img src="images/create_astra_db.png?raw=true" /></a></p><p>You need to:</p><ul><li>create an Astra DB instance <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">as explained here</a>, with <strong>database name</strong> = <code>workshops</code> and <strong>keyspace name</strong> = <code>nbkeyspace</code>;</li><li><em>(this will happen automatically with the previous one)</em> generate and retrieve a DB Token <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">as explained here</a>. <strong>Important</strong>: use the role <em>&quot;DB Administrator&quot;</em> if manually creating the token.</li><li>generate and download a Secure Connect Bundle <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/#c-procedure">as explained here</a>;</li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>Moreover, keep the Astra DB dashboard open: it will be useful later. In particular, locate theHealth tab and the CQL Console.</p><h2><a class="anchor" aria-hidden="true" id="launch-gitpod-and-setup-nosqlbench"> </a>Launch Gitpod and setup NoSQLBench</h2><p><strong>Ctrl-click on the Gitpod button below</strong> to spawn your very own environment + IDE:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-nosqlbench"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>In a few minutes, a full IDE will be ready in your browser, with a fileexplorer on the left, a file editor on the top, and a console (<code>bash</code>) below it.</p><h3><a class="anchor" aria-hidden="true" id="install-nosqlbench"> </a>Install NoSQLBench</h3><p>To download NoSQLBench, type or paste this command in your Gitpod console:</p><pre lang="bash"><code>curl -L -O https://github.com/nosqlbench/nosqlbench/releases/download/nosqlbench-4.17.19/nb5</code></pre><p>then make it executable and move it to a better place:</p><pre lang="bash"><code>chmod +x nb5sudo mv nb5 /usr/local/bin/</code></pre><p>Ok, now check that the program starts: invoking</p><pre lang="bash"><code>nb5 --version</code></pre><p>should output the program version (something like <code>4.17.19</code> or higher).</p><h4><a class="anchor" aria-hidden="true" id="version-used"> </a>Version used</h4><p>This workshop is built for the newly-released NoSQLBench 5.</p><h3><a class="anchor" aria-hidden="true" id="upload-the-secure-connect-bundle-to-gitpod"> </a>Upload the Secure Connect Bundle to Gitpod</h3><p>Locate, with the file explorer on your computer, the bundle file thatyou downloaded earlier (it should be called<code>secure-connect-workshops.zip</code>)and simply <strong>drag-and-drop</strong> it to the file navigator panel(&quot;Explorer&quot;) on the left of the Gitpod view.</p><details><summary>Show me</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/gitpod_uploading_bundle_1_annotated.png?raw=true" /></details><p>Once you drop it you will see it listed in the file explorer itself.As a check, you can issue the command</p><pre lang="bash"><code>ls /workspace/workshop-nosqlbench/secure*zip -lh</code></pre><p>so that you get the <em>absolute path to your bundle file</em> (and also verify that it isthe correct size, about 12-13 KB).</p><details><summary>Show me</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/gitpod_uploading_bundle_2b_annotated.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="configure-the-astra-db-parameters"> </a>Configure the Astra DB parameters</h3><p>Copy the provided template file to a new one and open it in the Gitpodfile editor:</p><pre lang="bash"><code>cp .env.sample .envgp open .env# (you can also simply locate the file#  in the Explorer and click on it)</code></pre><p>Insert the &quot;Client ID&quot; and &quot;Client Secret&quot; of the DB Token you created earlierand, if necessary, adjust the other variables.</p><details><summary>Show me what the .env file would look like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/dotenv2.png?raw=true" /></details><p>Now, source this file to make the definitions therein available to this shell:</p><pre lang="bash"><code>. .env</code></pre><p>To check that the file has been sourced, you can try with:</p><pre lang="bash"><code>echo ${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>and make sure the output is not an empty line.</p><p>(Note that you will have to source the file in any new shell you plan to use).</p><h2><a class="anchor" aria-hidden="true" id="run-benchmarks"> </a>Run benchmarks</h2><p>Everything is set to start running the tool.</p><h3><a class="anchor" aria-hidden="true" id="a-short-dry-run"> </a>A short dry run</h3><p>Try launching this very short &quot;dry-run benchmark&quot;, that instead of actuallyreaching the database simply prints a series of CQL statements to the console(as specified by the <code>driver=stdout</code> parameter):</p><pre lang="bash"><code>nb5 cql-keyvalue2 astra                 \    driver=stdout                       \    rampup-cycles=10                    \    main-cycles=10                      \    keyspace=${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>You will see 21 (fully-formed, valid CQL) statements being printed:one <code>CREATE TABLE</code>, then ten <code>INSERT</code>sand then another ten between <code>SELECT</code>s and further <code>INSERT</code>s.</p><blockquote><p><strong>Note</strong>: we will use workload <code>cql-keyvalue2</code> throughout. This is functionallyidentical to the <code>cql-keyvalue</code> workload but is expressed in the newer syntax for<code>yaml</code> workloads, which comes handy when later dissecting its content.If you are working with NoSQLBench 4, remember to drop the trailing <code>2</code>from the workload name in the following!</p></blockquote><p>Now re-launch the above dry run and look for differences in the output:</p><pre lang="bash"><code>nb5 cql-keyvalue2 astra                 \    driver=stdout                       \    rampup-cycles=10                    \    main-cycles=10                      \    keyspace=${ASTRA_DB_KEYSPACE_NAME}</code></pre><p>is the output identical to the previous run down to the actual &quot;random&quot; values?</p><p>You can also peek at the <code>logs</code> directory now: it is created automatically andpopulated with some information from the benchmark at each execution of <code>nb</code>.</p><h3><a class="anchor" aria-hidden="true" id="benchmark-your-astra-db"> </a>Benchmark your Astra DB</h3><p>It is now time to start hitting the database!</p><p>This time you will run with <code>driver=cql</code> to actually reach the database:for that to work, you will provide all connection parameters set up earlier.</p><p>The next run will ask NoSQLBench to perform a substantial amount of operations,in order to collect enough statistical support for the results.</p><p>Here is the full command to launch:</p><pre lang="bash"><code>nb5 cql-keyvalue2                                                         \    astra                                                                 \    username=${ASTRA_DB_CLIENT_ID}                                        \    password=${ASTRA_DB_CLIENT_SECRET}                                    \    secureconnectbundle=${ASTRA_DB_BUNDLE_PATH}                           \    keyspace=${ASTRA_DB_KEYSPACE_NAME}                                    \    cyclerate=50                                                          \    driver=cql                                                            \    main-cycles=9000                                                      \    rampup-cycles=9000                                                    \    errors='OverloadedException:warn'                                     \    --progress console:5s                                                 \    --log-histograms 'histogram_hdr_data.log:.*.main.result.*:20s'        \    --log-histostats 'hdrstats.log:.*.main.result.*:20s'</code></pre><details><summary>Show me the command breakdown</summary><p>Note that some of the parameters (e.g. <code>keyspace</code>) are workload-specific.</p><table><thead><tr><th>command</th><th>meaning</th></tr></thead><tbody><tr><td><code>cql-keyvalue2</code></td><td>workload</td></tr><tr><td><code>astra</code></td><td>scenario</td></tr><tr><td><code>username</code></td><td>authentication</td></tr><tr><td><code>password</code></td><td>authentication</td></tr><tr><td><code>secureconnectbundle</code></td><td>Astra DB connection parameters</td></tr><tr><td><code>keyspace</code></td><td>target keyspace</td></tr><tr><td><code>cyclerate</code></td><td>rate-limiting (cycles per second)</td></tr><tr><td><code>driver=cql</code></td><td>driver to use (CQL, for AstraDB/Cassandra)</td></tr><tr><td><code>main-cycles</code></td><td>how many operations in the &quot;main&quot; phase</td></tr><tr><td><code>rampup-cycles</code></td><td>how many operations in the &quot;rampup&quot; phase</td></tr><tr><td><code>errors</code></td><td>behaviour if errors occur during benchmarking</td></tr><tr><td><code>--progress console</code></td><td>frequency of console prints</td></tr><tr><td><code>--log-histograms</code></td><td>write data to HDR file (see later)</td></tr><tr><td><code>--log-histostats</code></td><td>write some basic stats to a file (see later)</td></tr></tbody></table><p>This way of invoking <code>nb</code>, the <a href="https://docs.nosqlbench.io/docs/workloads_101/11-named-scenarios/">&quot;named scenario&quot;</a>way, is not the only one: it is also possible to have a finer-grained control over what activities shouldrun with a full-fledged <a href="https://docs.nosqlbench.io/docs/reference/cli-scripting/">CLI scripting</a> syntax.</p><blockquote><p><strong>Note</strong>: the syntax of the <code>errors</code> parameter has been improved in NoSQLBench 5to allow for a <a href="https://docs.nosqlbench.io/docs/reference/error-handlers/">finer control</a> (with multiple directives,such as <code>errors='NoNodeAvailable.*:ignore;InvalidQueryException.*:counter;OverloadedException:warn'</code>).On version 4 you should revert to a simpler parameter,such as <code>errors=count</code>, instead of the above.</p></blockquote></details><p>The benchmark should last about ten minutes, with the progress beingprinted on the console as it proceeds.</p><p>While this runs, have a look around.</p><h4><a class="anchor" aria-hidden="true" id="database-contents"> </a>Database contents</h4><p>Now it's time to find out <em>what is actually being written to the database</em>.</p><p>Choose your database in the Astra main dashboard and click on it;next, go to the &quot;CQL Console&quot; tab in the main panel. In a few seconds theconsole will open in your browser, already connected to your database andwaiting for your input.</p><details><summary>Show me how to get to the CQL Console in Astra</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/astra_get_to_cql_console.gif?raw=true" /></details><p>Start by telling the console that you will be using the <code>nbkeyspace</code> keyspace:</p><pre><code>USE nbkeyspace;</code></pre><p>Check what tables have been created by NoSQLBench in this keyspace:</p><pre><code>DESC TABLES;</code></pre><p>You should see table <code>keyvalue</code> listed as the sole output.Look at a a few lines from this table:</p><pre><code>SELECT * FROM keyvalue LIMIT 20;</code></pre><details><summary>Show me what the output looks like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/select_cql.png?raw=true" /></details><p>Ok, mystery solved. It looks like the table contains simple key-value pairs,with two columns seemingly of numeric type. Check with:</p><pre><code>DESC TABLE keyvalue;</code></pre><p>Oh, looks like both the key and the value columns are of type <code>TEXT</code>:good for adapting this ready-made benchmark to other key/value stores.</p><details><summary>Show me what the output looks like</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/desctable_cql.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="database-health"> </a>Database health</h4><p>Locate your database in the Astra main dashboard and click on it;next, go to the &quot;Health&quot; tab in the main panel. You will see what essentiallyis a Grafana dashboard, with a handful of plots being displayed within thetab - all related to how the database is performing in terms of reads and writes.</p><details><summary>Show me the Database Health tab in Astra UI</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/astra_db_health2_annotated.png?raw=true" /></details><p>Check the operations per second from the &quot;Requests Combined&quot; plot;then have a look at the &quot;Write Latency&quot; and &quot;Read Latency&quot; plotsand take note of some of the percentiles shown there.</p><details><summary>Show me "sample values" one could read from the graph</summary><p>Below is a real-life example of the values that could result from a <code>cql-keyvalue2</code>benchmark session in the <em>main</em> phase:</p><table><thead><tr><th>Percentile</th><th>Write Latency</th><th>Read Latency</th></tr></thead><tbody><tr><td>P50</td><td>709     <em>µs</em></td><td>935     <em>µs</em></td></tr><tr><td>P75</td><td>831     <em>µs</em></td><td>1.31  <em>ms</em></td></tr><tr><td>P90</td><td>904     <em>µs</em></td><td>1.53  <em>ms</em></td></tr><tr><td>P95</td><td>1.04  <em>ms</em></td><td>1.77  <em>ms</em></td></tr><tr><td>P99</td><td>2.45  <em>ms</em></td><td>15.6   <em>ms</em></td></tr></tbody></table></details><h4><a class="anchor" aria-hidden="true" id="final-summary-in-logs"> </a>Final summary in &quot;logs/&quot;</h4><p>When the benchmark has finished, open the latest <code>*.summary</code> file and lookfor <code>cqlkeyvalue2_astra_main.result-success</code>.</p><p>Under that metric title, you will see something similar to:</p><pre><code>cqlkeyvalue2_astra_main.result-success             count = 15000         mean rate = 50.00 calls/second     1-minute rate = 49.94 calls/second     5-minute rate = 50.29 calls/second    15-minute rate = 50.57 calls/second</code></pre><h4><a class="anchor" aria-hidden="true" id="additional-histostats-datafile"> </a>Additional &quot;histostats&quot; datafile</h4><p>Use this script to generate a graph of the data collected as &quot;histostats&quot;:</p><pre lang="bash"><code>./hdr_tool/histostats_quick_plotter.py \    hdrstats.log \    -m cqlkeyvalue2_astra_main.result-success</code></pre><p>and then open, in the Gitpod editor, the <code>hdrstats.png</code> image just created.</p><details><summary>Show me the generated "histostats" plot</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/histostats_plot3.png?raw=true" width="360" /></details><blockquote><p>The version of the plotter script included in this repo is for <strong>educational purposes only</strong>:for general use, please head to<a href="https://pypi.org/project/nb-hdr-plotter/">the official release page</a>.</p></blockquote><p>The timings will be larger than those from the Astra health tab: indeed,these are &quot;as seen on the client side&quot; and include more network hops.</p><h4><a class="anchor" aria-hidden="true" id="hdr-extensive-histogram-data"> </a>HDR extensive histogram data</h4><p>Use this script to generate plots from the detailed &quot;HDR histogram data&quot;generated during the benchmark:</p><pre lang="bash"><code>./hdr_tool/hdr_tool.py \    histogram_hdr_data.log \    -b -c -s \    -p SampleData \    -m cqlkeyvalue2_astra_main.result-success</code></pre><details><summary>Show me the plots generated by the HDR file</summary><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_baseplot2.png?raw=true" width="260"/><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_stabilityplot2.png?raw=true" width="260"/><img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/hdr_percentileplot2.png?raw=true" width="260"/></details><blockquote><p>The version of the plotter script included in this repo is for <strong>educational purposes only</strong>:for general use, please head to<a href="https://pypi.org/project/nb-hdr-plotter/">the official release page</a>.</p></blockquote><p>Again, the timings are larger than those found on the Astra health tab(i.e. on server-side): thesemeasurements are reported &quot;as seen by the testing client&quot;.</p><h3><a class="anchor" aria-hidden="true" id="metrics-metrics-metrics"> </a>Metrics, metrics, metrics</h3><p>Launch a new benchmark, this time having NoSQLBench start a dockerizedGrafana/Prometheus stack for metrics (it will take a few more seconds to start):</p><pre><code>nb5 cql-keyvalue2                                                         \    astra                                                                 \    username=${ASTRA_DB_CLIENT_ID}                                        \    password=${ASTRA_DB_CLIENT_SECRET}                                    \    secureconnectbundle=${ASTRA_DB_BUNDLE_PATH}                           \    keyspace=${ASTRA_DB_KEYSPACE_NAME}                                    \    cyclerate=50                                                          \    rampup-cycles=15000                                                   \    main-cycles=15000                                                     \    errors='OverloadedException:warn'                                     \    --progress console:5s                                                 \    --docker-metrics</code></pre><details><summary>Show me the run with Docker metrics</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_startingdockermetrics.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="grafana-dashboard"> </a>Grafana dashboard</h4><p>Reach the Grafana container in a new tab, with an URL that has <code>3000-</code>in front of your Gitpod URL (e.g.<code>https://3000-datastaxdevs-workshopnos-[...].gitpod.io</code>).</p><p>The default credentials to log in to Grafana are ... <code>admin/admin</code>. Once you'rein, don't bother to reset your password (click &quot;Skip&quot;). You'll get to the Grafanalanding page. Find the &quot;Dashboards&quot; icon in the leftmost menu bar and pick the&quot;Manage&quot; menu item: finally, click on the &quot;NB4 Dashboard&quot; item you should seelisted there. Congratulations, you are seeing the data coming from NoSQLBench.</p><details><summary>Show me how to get to the Grafana plots</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_dashboard.gif?raw=true" /></details><blockquote><p>You may find it convenient to set the update frequency to something like 10seconds and the displayed time window to 5 minutes or so (upper-right controls).</p></blockquote><p>The dashboard comprises several (interactive) plots, updated in real time.</p><details><summary>Show me the dashboard contents</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/grafana_plots.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="a-glance-at-prometheus"> </a>A glance at Prometheus</h4><p>To reach the Prometheus container, which handles the &quot;raw&quot; data behind Grafana,open a modified URL (this time with <code>9090-</code>) in a new tab.</p><details><summary>Show me the Prometheus UI</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/prometheus2.gif?raw=true" /></details><p>Click on the &quot;world&quot; icon next to the &quot;Execute&quot; button in the search bar:in the dialog that appears you can look for specific metrics.Try to look for <code>result_success</code> and confirm, then click &quot;Execute&quot;.</p><blockquote><p><strong>Tip:</strong> switch to the &quot;Graph&quot; view for a more immediate visualization.The graphs display &quot;raw&quot; data, hence are in units of nanoseconds.</p></blockquote><p>To make sense of the (heterogeneous) results, some filtering is in order --but we are not entering too much into the details of Prometheus here.</p><p>Just to pique your interest, try pasting these examples and click &quot;Execute&quot;:</p><pre><code># filtering by metadata{__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}# aggregationavg_over_time({__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}[10m])# another aggregation, + filteringmax_over_time({__name__=&quot;result_success&quot;, type=&quot;pctile&quot;, alias=~&quot;.*main.*&quot;}[10m])</code></pre><h2><a class="anchor" aria-hidden="true" id="workloads"> </a>Workloads</h2><p>This part is about how workloads are defined.</p><blockquote><p><strong>Tip</strong>: feel free to interrupt the previous benchmark, if it still runs,with Ctrl-C. You won't need it anymore.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="inspect-cql-keyvalue"> </a>Inspect &quot;cql-keyvalue&quot;</h3><p>Ask NoSQLBench to dump to a file the <code>yaml</code> defining the workloadyou just ran:</p><pre lang="bash"><code>    nb5 --copy cql-keyvalue2</code></pre><p><em>(you can also get a comprehensive list of all available workloads with<code>nb5 --list-workloads</code>, by the way, and a more fine-grained output with<code>nb5 --list-scenarios</code>.)</em></p><p>A file <code>cql-keyvalue2.yaml</code> is created in the working directory.You can open it (clicking on it in the Gitpod explorer or by running<code>gp open cql-keyvalue2.yaml</code>).</p><p>Have a look at the file and try to identify its structure and the variousphases the benchmark is organized into.</p><p>There are profound differences in the way the same workload is expressedin the NoSQLBench 4 yaml file and the NoSQLBench 5 format.</p><details><summary>Show me the differences</summary>    <img src="https://github.com/datastaxdevs/workshop-nosqlbench/raw/main/images/cql-keyvalue-nb4-vs-nb5.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="play-with-workloads"> </a>Play with workloads</h3><p>A good way to understand workload construction is to start from simple ones.</p><p>To run the following examples please go to the appropriate subdirectory:</p><pre><code>cd workloads</code></pre><h4><a class="anchor" aria-hidden="true" id="example-1-talking-about-food"> </a>Example 1: talking about food</h4><p>Run the first example (and then look at the corresponding<code>simple-workload.yaml</code>) with:</p><pre><code>nb5 run driver=stdout workload=simple-workload cycles=12</code></pre><p>Look at how <em>bindings</em> connect the sequence of operations to &quot;execute&quot;(in this case, simply print on screen) with the data to be used inthem.</p><h4><a class="anchor" aria-hidden="true" id="example-2-animal-meeting"> </a>Example 2: animal meeting</h4><p>Run the second example, which is an example of structuring a workloadin <em>phases</em> (and then open <code>workload-with-phases.yaml</code>):</p><pre><code>nb5 workload-with-phases default driver=stdout</code></pre><p>Notable features of this workload are its multi-phase structure(a nearly universal feature of actual benchmarks), the useof the <code>ratio</code> parameter, and the usage of template parameters in thedefinition.</p><h2><a class="anchor" aria-hidden="true" id="homework-assignment"> </a>Homework assignment</h2><p>The &quot;Lab&quot; part of the homework, which requires you to finalizea workload <code>yaml</code> and make it work according to specifications,is detailed on <a href="homework/homework.md">this page</a>.</p><p><strong>To submit your homework, please use <a href="https://dtsx.io/homework-nosqlbench">this form</a>.</strong></p>
SUCCESS SAVING README for datastaxdevs-workshop-nosqlbench
Getting astra.json for datastaxdevs/bootcamp-fullstack-apps-with-cassandra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-fullstack-applications-with-apache-cassandra"> </a>Build FullStack Applications with Apache Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="introduction-to-notonly-sql-databases"> </a>🎓🔥 Introduction to NotOnly SQL Databases</h2>
HTML FOR datastaxdevs-bootcamp-fullstack-apps-with-cassandra<h1><a class="anchor" aria-hidden="true" id="build-fullstack-applications-with-apache-cassandra"> </a>Build FullStack Applications with Apache Cassandra</h1><h2><a class="anchor" aria-hidden="true" id="introduction-to-notonly-sql-databases"> </a>🎓🔥 Introduction to NotOnly SQL Databases</h2><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="img/splash.png?raw=true"  width="600px"/><ul><li><a href="https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra/tree/main/week1-intro-to-cassandra">Week I: Intro to Cassandra</a></li><li><a href="https://github.com/datastaxdevs/bootcamp-fullstack-apps-with-cassandra/tree/main/week2-data-modelling">Week II: Building Efficient Data Model with Apache Cassandra</a></li><li><a href="week3-app-development">Week III: Back End App Dev with Cassandra</a></li><li><a href="week4-api-microservices">Week IV: APIs and Microservices with Cassandra</a></li></ul>
SUCCESS SAVING README for datastaxdevs-bootcamp-fullstack-apps-with-cassandra
Getting astra.json for datastaxdevs/workshop-ecommerce-app at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="building-an-e-commerce-website"> </a>🔥 Building an E-commerce Website 🔥</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-astra-db-and-streaming-instances"> </a>2. Create Astra DB and Streaming Instances</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2a-register"> </a>✅ 2a. Register</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-on-the-free-plan"> </a>✅ 2b. Create a DB on the &quot;FREE&quot; plan</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2c-ensure-the-database-turns-to-active-state"> </a>✅ 2c. Ensure the database turns to active state</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="2d-create-a-streaming-tenant-and-topics-on-the-free-plan"> </a>✅ 2d. Create a Streaming Tenant and Topics on the &quot;FREE&quot; plan</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-your-schema"> </a>3. Create your schema</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-1-product-data-model"> </a>Session 1 - Product data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-2-shopping-cart-data-model"> </a>Session 2 - Shopping Cart data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-3-user-profile-data-model"> </a>Session 3 - User Profile data model</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-4-order-processing-system-data-model"> </a>Session 4 - Order Processing System data model</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-open-the-cqlconsole-on-astra"> </a>✅ 3a. Open the CqlConsole on Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3b-execute-the-following-cql-script-to-create-the-schema"> </a>✅ 3b. Execute the following CQL script to create the schema</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-populate-the-data"> </a>4. Populate the Data</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="4a-execute-the-following-script-to-populate-the-tables-with-the-data-below"> </a>✅ 4a. Execute the following script to populate the tables with the data below</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="session-1-product-data"> </a>Session 1 - Product data</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-your-tokens"> </a>5. Create your tokens</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5a-create-the-astra-db-token"> </a>✅ 5a. Create the Astra DB token</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5b-save-your-db-token-locally"> </a>✅ 5b. Save your DB token locally</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5c-view-the-astra-streaming-token-and-connection-details"> </a>✅ 5c. View the Astra Streaming token and connection details</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5d-save-your-streaming-token-locally"> </a>✅ 5d. Save your Streaming token locally</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-setup-your-application"> </a>6. Setup your application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="know-your-gitpod"> </a>Know your Gitpod</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-enable-social-login"> </a>7. Enable Social Login</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-unit-tests"> </a>8. Run Unit Tests</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-start-the-application"> </a>9. Start the Application</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="done"> </a>Done?</h1>
HTML FOR datastaxdevs-workshop-ecommerce-app<!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="building-an-e-commerce-website"> </a>🔥 Building an E-commerce Website 🔥</h2><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ecommerce-app"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><img src="data/img/splash.png?raw=true" align="right" width="400px"/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="./slides_wk1.pdf">Slide deck - week 1</a></li><li><a href="./slides_wk2.pdf">Slide deck - week 2</a></li><li><a href="./slides_wk3.pdf">Slide deck - week 3</a></li><li><a href="./slides_wk4.pdf">Slide deck - week 4</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li>[Worskhop code] (<a href="https://github.com/datastaxdevs/workshop-ecommerce-app">https://github.com/datastaxdevs/workshop-ecommerce-app</a>)</li></ul><p>If you cannot attend this workshop live, recordings of this workshop and many more is available on <a href="https://youtube.com/datastaxdevs">Youtube</a>.</p><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="data/img/build-an-ecommerce-app.png" width="200" align=right /><p>Complete the homework to earn the badge for this workshop (<strong>awarded only at the end of the series</strong>).</p><ol><li>Implement Google login and take SCREENSHOT(s).</li><li>Don't worry about submitting it just yet.  We'll have instructions on how to do that at the end of the series!</li></ol><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#1-introduction">Introduction</a></li><li><a href="#2-create-astra-db-instance">Create your Database</a></li><li><a href="#3-create-your-schema">Create your schema</a></li><li><a href="#4-populate-the-data">Populate the dataset</a></li><li><a href="#5-create-your-token">Create a token</a></li><li><a href="#6-setup-your-application">Setup your application</a></li><li><a href="#7-enable-social-login">Enable Social Login</a></li><li><a href="#8-run-unit-tests">Run Unit Tests</a></li><li><a href="#9-start-the-application">Start the Application</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2><p>Are you building or do you support an e-commerce website?  If so, then this content is for <strong>you</strong>!</p><p>Worldwide digital sales in 2020 eclipsed four trillion dollars (USD).  Businesses that want to compete, need a high performing e-commerce website.  Here, we will demonstrate how to build a high performing persistence layer with DataStax <strong><code>ASTRA DB</code></strong>.</p><p>Why does an e-commerce site need to be fast?  Because most consumers will leave a web page or a mobile app if it takes longer than a few seconds to load.  In the content below, we will cover how to build high-performing data models and services, helping you to build a e-commerce site with high throughput and low latency.</p><h2><a class="anchor" aria-hidden="true" id="2-create-astra-db-and-streaming-instances"> </a>2. Create Astra DB and Streaming Instances</h2><p>You can skip to step 2c if you have already created a keyspace <code>ecommerce</code> in database <code>demos</code>. Otherwise (if you did not attend the previous installment of the e-commerce worksop):</p><p><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations, 80GB storage monthly - sufficient to run small production workloads.</p><h4><a class="anchor" aria-hidden="true" id="2a-register"> </a>✅ 2a. Register</h4><p>If you do not have an account yet, register and sign in to Astra DB: This is FREE and NO CREDIT CARD is required. <a href="https://astra.dev/yt-11-30">https://astra.datastax.com</a>: You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code>.</p><p><em>Make sure to chose a password with minimum 8 characters, containing upper and lowercase letters, at least one number and special character</em></p><h4><a class="anchor" aria-hidden="true" id="2b-create-a-db-on-the-free-plan"> </a>✅ 2b. Create a DB on the &quot;FREE&quot; plan</h4><p>Follow this <a href="https://docs.datastax.com/en/astra/docs/creating-your-astra-database.html">guide</a>, to set up a pay as you go database with a free $25 monthly credit. You will find below recommended values to enter:</p><ul><li><p><strong>For the database name</strong> - <code>demos</code></p></li><li><p><strong>For the keyspace name</strong> - <code>ecommerce</code></p></li></ul><p><em>You can technically use whatever name(s) you want and update the code to reflect the keyspace. This is really to get you on a happy path for the first run.</em></p><ul><li><p><strong>For provider and region</strong>: For Astra DB, select GCP as a provider and then the related region is where your database will reside physically (choose one close to you or your users).</p></li><li><p><strong>Create the database</strong>. Review all the fields to make sure they are as shown, and click the <code>Create Database</code> button.</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><em>The Walkthrough mentions a different keyspace, make sure to use <code>ecommerce</code></em></p><p><img src="data/img/astra-create-db.gif?raw=true" alt="image" />You will see your new database <code>pending</code> in the Dashboard.</p><p><img src="data/img/db-pending.png?raw=true" alt="my-pic" /></p><h4><a class="anchor" aria-hidden="true" id="2c-ensure-the-database-turns-to-active-state"> </a>✅ 2c. Ensure the database turns to active state</h4><p>To connect to the database programmatically, you need to make sure the status will change to <code>Active</code>. This happens when the database is ready, and will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><strong>👁️ Expected Output</strong></p><p><img src="data/img/db-active.png?raw=true" alt="my-pic" /></p><p>If it's in a <code>standby</code> state you can hit <code>Connect</code> and <code>CQL Console</code> on top.</p><p>You should see a message something like below.</p><p><strong>👁️ Expected Output</strong></p><pre lang="cql"><code>{&quot;message&quot;:&quot;Resuming your database, please try again shortly.&quot;}</code></pre><h4><a class="anchor" aria-hidden="true" id="2d-create-a-streaming-tenant-and-topics-on-the-free-plan"> </a>✅ 2d. Create a Streaming Tenant and Topics on the &quot;FREE&quot; plan</h4><p>Here we will walk through how to create an Astra Streaming Tenant.  Start by clicking the &quot;Create Stream&quot; button in the left navigation pane.</p><p><img src="data/img/create-stream.png?raw=true" alt="image" /></p><p>On the next page, provide a name for your tenant and select a provider/region.  Click the blue &quot;Create Tenant&quot; button when complete.</p><p><img src="data/img/create_streaming_tenant.png?raw=true" alt="image" /></p><p>Note that Tenant Names must be unique across providers.  To ensure uniqueness, name it &quot;ecommerce-&quot; followed by your name or company.</p><p>Now we need to create topics <em>within</em> our tenant.  Click on the link or on the &quot;Topics&quot; tab.  You should see the &quot;default&quot; namespace with an &quot;Add Topic&quot; button (on the right).  Click the &quot;Add Topic&quot; button.</p><p><img src="data/img/add_topic1.png?raw=true" alt="image" /></p><p>Name the topic &quot;pending-orders&quot; and make sure that the &quot;Persistent&quot; switch is selected.  Don't worry about the &quot;Partitioned&quot; switch for now.  Click the &quot;Add Topic&quot; button when ready.</p><p><img src="data/img/add_topic2.png?raw=true" alt="image" /></p><p>Repeat this process to add 3 more topics:</p><ul><li>picked-orders</li><li>shipped-orders</li><li>completed-orders</li></ul><p>When you are done, your &quot;Topics&quot; tab should look similar to this:</p><p><img src="data/img/streaming_topics_final.png?raw=true" alt="image" /></p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="3-create-your-schema"> </a>3. Create your schema</h2><p><strong>Introduction</strong>This section will provide DDL to create three tables inside the &quot;ecommerce&quot; keyspace: category, price, and product.</p><h4><a class="anchor" aria-hidden="true" id="session-1-product-data-model"> </a>Session 1 - Product data model</h4><p>The <code>product</code> table supports all product data queries, and uses <code>product_id</code> as a single key.  It has a few columns for specific product data, but any ad-hoc or non-standard properties can be added to the <code>specifications</code> map.</p><p>The <code>category</code> table will support all product navigation service calls.  It is designed to provide recursive, hierarchical navigation without a pre-set limit on the number of levels.  The top-most level only exists as a <code>parent_id</code>, and the bottom-most level contains products.</p><p>The <code>price</code> table was intentionally split-off from product.  There are several reasons for this.  Price data is much more likely to change than pure product data (different read/write patterns).  Also, large enterprises typically have separate teams for product and price, meaning they will usually have different micro-service layers and data stores.</p><p>The <code>featured_product_groups</code> table was a late-add, to be able to provide some extra &quot;atmosphere&quot; of an e-commerce website.  This way, the UI has a means by which to highlight a few, select products.</p><h4><a class="anchor" aria-hidden="true" id="session-2-shopping-cart-data-model"> </a>Session 2 - Shopping Cart data model</h4><p>The <code>user_carts</code> table supports cart metadata.  Carts are not expected to be long-lived, so they have a default TTL (time to live) of 60 days (5,184,000 seconds).  Carts also have a <code>name</code> as a part of the key, so that the user can have multiple carts (think &quot;wish lists&quot;).</p><p>The <code>cart_products</code> table holds data on the products added to the cart.  The cart uses <code>product_timestamp</code> as the first clustering key in descending order; this way products in the cart will be listed with the most-recently-added products at the top.  Like <code>user_carts</code>, each entry has a 60 day TTL.</p><h4><a class="anchor" aria-hidden="true" id="session-3-user-profile-data-model"> </a>Session 3 - User Profile data model</h4><p>The <code>user</code> table holds all data on the user, keyed by a single PRIMARY KEY on <code>user_id</code>.  It's main features contain TEXT (string) data for common user properties, as well as a collection of <code>addresses</code>.  This is because users (especially B-to-B) may have multiple addresses (mail-to, ship-to, bill-to, etc).  The <code>addresses</code> collection is built on a special user defined type (UDT) and <code>FROZEN</code> to treat the collection as a Binary Large OBject (BLOB) to reduce tombstones (required by CQL).</p><p>As mentioned above, the <code>address</code> UDT contains properties used for postal contacts.  All properties are of the TEXT datatype.</p><p>The <code>user_by_email</code> table is intended to be used as a &quot;manual index&quot; on email address. Essentially, it is a lookup table returning the <code>user_id</code> associated with an email address.  This is necessary as <code>user_email</code> is nigh-unique (in terms of cardinality of values), and thus a CQL secondary index would perform quite poorly.</p><h4><a class="anchor" aria-hidden="true" id="session-4-order-processing-system-data-model"> </a>Session 4 - Order Processing System data model</h4><p>The <code>order_by_id</code> table holds detail on each order.  It partitions on <code>order_id</code> for optimal data distribution, and clusters on <code>product_name</code> and <code>product_id</code> for sort order.  The columns specific to the order itself (and not a product) are <code>STATIC</code> so that they are only stored once (with the partition key).</p><p>The <code>order_by_user</code> table holds a reference to each order by <code>user_id</code>.  The idea, is that this table is queried by <code>user_id</code> and the results are shown on an &quot;order history&quot; page for that user.  Then, each order can be clicked-on, revealing the detail contained in the <code>order_by_id</code> table.  <code>order_id</code> is a TimeUUID (version 1 UUID) type, which is converted into a human-readable timestamp in the service layer.</p><p>The <code>order_status_history</code> table maintains a history of each status for an order.  It is meant to be used with queries to the <code>order_by_id</code> table, so that a user may see the status progression of their order.</p><h3><a class="anchor" aria-hidden="true" id="3a-open-the-cqlconsole-on-astra"> </a>✅ 3a. Open the CqlConsole on Astra</h3><pre lang="sql"><code>use ecommerce;</code></pre><h3><a class="anchor" aria-hidden="true" id="3b-execute-the-following-cql-script-to-create-the-schema"> </a>✅ 3b. Execute the following CQL script to create the schema</h3><pre lang="sql"><code>/* Session 1 - Product data model *//* category table */CREATE TABLE IF NOT EXISTS category (    parent_id UUID,    category_id UUID,    name TEXT,    image TEXT,    products LIST&lt;TEXT&gt;,PRIMARY KEY (parent_id,category_id));/* price table */CREATE TABLE IF NOT EXISTS price (    product_id TEXT,    store_id TEXT,    value DECIMAL,PRIMARY KEY(product_id,store_id));/* product table */CREATE TABLE IF NOT EXISTS product (    product_id TEXT,    product_group TEXT,    name TEXT,    brand TEXT,    model_number TEXT,    short_desc TEXT,    long_desc TEXT,    specifications MAP&lt;TEXT,TEXT&gt;,    linked_documents MAP&lt;TEXT,TEXT&gt;,    images SET&lt;TEXT&gt;,PRIMARY KEY(product_id));/* featured product groups table */CREATE TABLE IF NOT EXISTS featured_product_groups (    feature_id INT,    category_id UUID,    name TEXT,    image TEXT,    parent_id UUID,    price DECIMAL,PRIMARY KEY (feature_id,category_id));/* Session 2 - Shopping Cart data model */CREATE TABLE IF NOT EXISTS user_carts (    user_id uuid,    cart_name text,    cart_id uuid,    cart_is_active boolean,    user_email text,    PRIMARY KEY (user_id, cart_name, cart_id)) WITH default_time_to_live = 5184000;CREATE TABLE IF NOT EXISTS cart_products (    cart_id uuid,    product_timestamp timestamp,    product_id text,    product_description text,    product_name text,    quantity int,    PRIMARY KEY (cart_id, product_timestamp, product_id)) WITH CLUSTERING ORDER BY (product_timestamp DESC, product_id ASC)  AND default_time_to_live = 5184000;/* Session 3 - User Profile data model */CREATE TYPE IF NOT EXISTS address (  type TEXT,  mailto_name TEXT,  street TEXT,  street2 TEXT,  city TEXT,  state_province TEXT,  postal_code TEXT,  country TEXT);CREATE TABLE IF NOT EXISTS user (  user_id UUID,  user_email TEXT,  picture_url TEXT,  first_name TEXT,  last_name TEXT,  locale TEXT,  addresses LIST&lt;FROZEN&lt;address&gt;&gt;,  session_id TEXT,  password TEXT,  password_timestamp TIMESTAMP,  PRIMARY KEY (user_id));CREATE TABLE IF NOT EXISTS user_by_email (  user_email TEXT PRIMARY KEY,  user_id UUID);/* Session 4 - Order Processing System data model */CREATE TABLE IF NOT EXISTS order_by_id (    order_id timeuuid,    product_name text,    product_id text,    order_shipping_handling decimal static,    order_status text static,    order_subtotal decimal static,    order_tax decimal static,    order_total decimal static,    payment_method text static,    product_price decimal,    product_qty int,    shipping_address address static,    PRIMARY KEY (order_id, product_name, product_id)) WITH CLUSTERING ORDER BY (product_name ASC, product_id ASC);CREATE TABLE IF NOT EXISTS order_by_user (    user_id uuid,    order_id timeuuid,    order_status text,    order_total decimal,    PRIMARY KEY (user_id, order_id)) WITH CLUSTERING ORDER BY (order_id DESC);CREATE TABLE IF NOT EXISTS order_status_history (    order_id timeuuid,    status_timestamp timestamp,    order_status text,    PRIMARY KEY (order_id, status_timestamp)) WITH CLUSTERING ORDER BY (status_timestamp DESC);</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="4-populate-the-data"> </a>4. Populate the Data</h2><h4><a class="anchor" aria-hidden="true" id="4a-execute-the-following-script-to-populate-the-tables-with-the-data-below"> </a>✅ 4a. Execute the following script to populate the tables with the data below</h4><h4><a class="anchor" aria-hidden="true" id="session-1-product-data"> </a>Session 1 - Product data</h4><pre lang="sql"><code>INSERT INTO category (name,category_id,image,parent_id) VALUES ('Clothing',18105592-77aa-4469-8556-833b419dacf4,'ls534.png',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Tech Accessories',5929e846-53e8-473e-8525-80b666c46a83,'',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Cups and Mugs',675cf3a2-2752-4de7-ae2e-849471c29f51,'',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wall Decor',591bf485-de09-4b46-8fd2-5d9dc7ca101e,'bh001.png',ffdac25a-0244-4894-bb31-a0884bc82aa9);INSERT INTO category (name,category_id,image,parent_id) VALUES ('T-Shirts',91455473-212e-4c6e-8bec-1da06779ae10,'ls534.png',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Hoodies',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,'',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Jackets',d887b049-d16c-46e1-8c94-0a1280dedc30,'',18105592-77aa-4469-8556-833b419dacf4);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Mousepads',d04dfb5b-69c6-4e97-b572-e9e390165a84,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wrist Rests',aa161129-d456-45ba-b1f0-fac7898b6d06,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Laptop Covers',1c4b8599-78df-4f93-9c52-578bd959a3a5,'',5929e846-53e8-473e-8525-80b666c46a83);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Cups',7536fdef-fcd9-44a3-9360-0bffd2904408,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Coffee Mugs',20374300-185c-4ee5-b0bc-77fbdc3a21ed,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Travel Mugs',0660483e-2fad-447b-b19a-63ab4935e482,'',675cf3a2-2752-4de7-ae2e-849471c29f51);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Posters',fdbe9dcb-6878-4216-a64d-27c094b1b075,'',591bf485-de09-4b46-8fd2-5d9dc7ca101e);INSERT INTO category (name,category_id,image,parent_id) VALUES ('Wall Art',943482f9-070c-4390-bb30-2107b6fe653a,'bh001.png',591bf485-de09-4b46-8fd2-5d9dc7ca101e);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Men''s &quot;Go Away...Annotation&quot; T-Shirt',99c4d825-d262-4a95-a04e-cc72e7e273c1,'ls534.png',91455473-212e-4c6e-8bec-1da06779ae10,['LS534S','LS534M','LS534L','LS534XL','LS5342XL','LS5343XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Men''s &quot;Your Face...Autowired&quot; T-Shirt',3fa13eee-d057-48d0-b0ae-2d83af9e3e3e,'ln355.png',91455473-212e-4c6e-8bec-1da06779ae10,['LN355S','LN355M','LN355L','LN355XL','LN3552XL','LN3553XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Bigheads',2f25a732-0744-406d-baee-3e8131cbe500,'bh001.png',943482f9-070c-4390-bb30-2107b6fe653a,['bh001','bh002','bh003']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Gray Track Jacket',f629e107-b219-4563-a852-6909fd246949,'dss821.jpg',d887b049-d16c-46e1-8c94-0a1280dedc30,['DSS821S','DSS821M','DSS821L','DSS821XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Vintage 2015 MVP Hoodie',86d234a4-6b97-476c-ada8-efb344d39743,'dsh915.jpg',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,['DSH915S','DSH915M','DSH915L','DSH915XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Black Hoodie',b9bed3c0-0a76-44ea-bce6-f5f21611a3f1,'dsh916.jpg',6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1,['DSH916S','DSH916M','DSH916L','DSH916XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('Apache Cassandra 3.0 Contributor T-Shirt',95ae4613-0184-46ee-b4b0-adfe882754a8,'apc30a.jpg',91455473-212e-4c6e-8bec-1da06779ae10,['APC30S','APC30M','APC30L','APC30XL','APC302XL','APC303XL']);INSERT INTO category (name,category_id,image,parent_id,products) VALUES ('DataStax Astra &quot;One Team&quot; Long Sleeve Tee',775be203-1a84-4822-9645-4da98ca2b2d8,'dsa1121.jpg',91455473-212e-4c6e-8bec-1da06779ae10,['DSA1121S','DSA1121M','DSA1121L','DSA1121XL','DSA11212XL','DSA11213XL']);INSERT INTO price(product_id,store_id,value) VALUES ('LS534S','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534M','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534L','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS534XL','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS5342XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LS5343XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355S','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355M','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355L','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN355XL','web',14.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN3552XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('LN3553XL','web',16.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121S','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121M','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121L','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA1121XL','web',21.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA11212XL','web',23.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSA11213XL','web',23.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821S','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821M','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821L','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSS821XL','web',44.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915S','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915M','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915L','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH915XL','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916S','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916M','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916L','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('DSH916XL','web',35.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30S','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30M','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30L','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC30XL','web',15.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC302XL','web',17.99);INSERT INTO price(product_id,store_id,value) VALUES ('APC303XL','web',17.99);INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534S','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Small &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Small','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534M','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Medium &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Medium','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534L','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS534XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s Extra Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'Extra Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS5342XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s 2x Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'2x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LS5343XL','LS534','Go Away Annotation T-Shirt','NerdShirts','NS101','Men''s 3x Large &quot;Go Away...Annotation&quot; T-Shirt','Having to answer support questions when you really want to get back to coding?  Wear this to work, and let there be no question as to what you''d rather be doing.',{'size':'3x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ls534.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355S','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Small &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Small','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355M','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Medium &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Medium','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355L','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s Extra Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'Extra Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN3552XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s 2x Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'2x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('LN355XL','LN355','Your Face is an @Autowired @Bean T-Shirt','NerdShirts','NS102','Men''s 3x Large &quot;Your Face...Autowired&quot; T-Shirt','Everyone knows that one person who overuses the &quot;your face&quot; jokes.',{'size':'3x Large','material':'cotton, polyester','cut':'men''s','color':'black'},{'ln355.png'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121S','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Small','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Small','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121M','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Medium','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Medium','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121L','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA1121XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - Extra Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'Extra Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA11212XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - 2X Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'2X Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSA11213XL','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee','DataStax','DSA1121','DataStax Astra &quot;One Team&quot; Long Sleeve Tee - 3X Large','Given out at the internal summit, show how proud you are to talk about the world''s best multi-region, multi-cloud, serverless database!',{'size':'3X Large','material':'cotton, polyester','color':'black'},{'dsa1121.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30S','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Small','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Small','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30M','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Medium','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Medium','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30L','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC30XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - Extra Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'Extra Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC302XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - 2X Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'2X Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('APC303XL','APC30','Apache Cassandra 3.0 Contributor T-Shirt','Apache Foundation','APC30','Apache Cassandra 3.0 Contributor T-Shirt - 3X Large','Own a piece of Cassandra history with this Apache Cassandra 3.0 &quot;Contributor&quot; shirt.  Given out to all of the contributors to the project in 2016, shows the unmistakable Cassandra Eye on the front, with theengine rebuild&quot; on the back.',{'size':'3X Large','material':'cotton, polyester','color':'black'},{'apc30.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821S','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Small','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Small','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821M','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Medium','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Medium','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821L','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Large','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Large','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSS821XL','DSS821','DataStax Gray Track Jacket','DataStax','DSS821','DataStax Gray Track Jacket - Extra Large','This lightweight polyester jacket will be your favorite while hiking the trails or teeing off.',{'size':'Extra Large','material':'polyester','color':'gray'},{'dss821.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915S','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Small','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Small','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915M','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Medium','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Medium','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915L','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Large','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Large','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH915XL','DSH915','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS915','DataStax Vintage 2015 MVP Hoodie - Extra Large','Given out to MVPs at the 2015 DataStax Cassandra Summit.  Warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Extra Large','color':'black'},{'dsh915.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916S','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Small','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Small','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916M','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Medium','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Medium','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916L','DSH916','DataStax Vintage 2015 MVP Hoodie','DataStax','DSS916','DataStax Black Hoodie - Large','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Large','color':'black'},{'dsh916.jpg'});INSERT INTO product(product_id,product_group,name,brand,model_number,short_desc,long_desc,specifications,images)VALUES ('DSH916XL','DSH916','DataStax Black Hoodie','DataStax','DSS916','DataStax Black Hoodie - Extra Large','Super warm!  You will underestimate how many times you will fall asleep wearing this!',{'size':'Extra Large','color':'black'},{'dsh916.jpg'});INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Gray Track Jacket',f629e107-b219-4563-a852-6909fd246949,'dss821.jpg',44.99,d887b049-d16c-46e1-8c94-0a1280dedc30);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Black Hoodie',b9bed3c0-0a76-44ea-bce6-f5f21611a3f1,'dsh916.jpg',35.99,6a4d86aa-ceb5-4c6f-b9b9-80e9a8c58ad1);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'Apache Cassandra 3.0 Contributor T-Shirt',95ae4613-0184-46ee-b4b0-adfe882754a8,'apc30a.jpg',15.99,91455473-212e-4c6e-8bec-1da06779ae10);INSERT INTO featured_product_groups (feature_id,name,category_id,image,price,parent_id) VALUES (202112,'DataStax Astra &quot;One Team&quot; Long Sleeve Tee',775be203-1a84-4822-9645-4da98ca2b2d8,'dsa1121.jpg',21.99,91455473-212e-4c6e-8bec-1da06779ae10);</code></pre><p>Although it's not advised to use wildcards as below, you can verify the data has been created with the following command.</p><pre><code>select * from CATEGORY;</code></pre><p><strong>Notes:</strong></p><ul><li>The &quot;top&quot; categories of the product hierarchy can be retrieved using a <code>parent_id</code> of &quot;ffdac25a-0244-4894-bb31-a0884bc82aa9&quot;.</li><li>Without specifying a <code>category_id</code>, all categories for the <code>parent_id</code> are returned.</li><li>When a category from the &quot;bottom&quot; of the hierarchy is queried, a populated <code>products</code> ArrayList will be returned.  From there, the returned <code>product_id</code>s can be used with the <code>/product</code> service.</li><li>Category navigation is achieved by using the <code>parent_id</code> and <code>category_id</code> properties returned for each category (to build the &quot;next level&quot; category links).</li><li><code>/category/ffdac25a-0244-4894-bb31-a0884bc82aa9</code>  =&gt;  Category[Clothing, Cups and Mugs, Tech Accessories, Wall Decor]</li><li><code>/category/ffdac25a-0244-4894-bb31-a0884bc82aa9/18105592-77aa-4469-8556-833b419dacf4</code>  =&gt;  Category[Clothing]</li><li><code>/category/18105592-77aa-4469-8556-833b419dacf4</code>  =&gt;  Category[T-Shirts, Hoodies, Jackets]</li><li><code>/category/91455473-212e-4c6e-8bec-1da06779ae10</code>  =&gt;  Category[Men's &quot;Your Face...Autowired&quot; T-Shirt, Men's &quot;Go Away...Annotation&quot; T-Shirt]</li><li>The featured products table is a simple way for web marketers to promote small numbers of products, and have them appear in an organized fashion on the main page.  The <code>feature_id</code> key is simply an integer, with the default being <code>202112</code> (for December, 2021).  You can (of course) use other numeric naming schemes.</li></ul><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-create-your-tokens"> </a>5. Create your tokens</h2><h4><a class="anchor" aria-hidden="true" id="5a-create-the-astra-db-token"> </a>✅ 5a. Create the Astra DB token</h4><p>Following the <a href="https://docs.datastax.com/en/astra/docs/manage-application-tokens.html">Manage Application Tokens docs</a> create a token with <code>Database Admnistrator</code> roles.</p><ul><li><p>Go the <code>Organization Settings</code></p></li><li><p>Go to <code>Token Management</code></p></li><li><p>Pick the role <code>Database Administrator</code> on the select box</p></li><li><p>Click Generate token</p></li></ul><p><strong>👁️ Walkthrough</strong></p><p><img src="data/img/astra-create-token.gif?raw=true" alt="image" /></p><p>This is what the token page looks like. You can now download the values as a CSV. We will need those values but you can also keep this window open for use later.</p><p><img src="data/img/astra-token.png?raw=true" alt="image" /></p><ul><li><code>appToken:</code> We will use it as a api token Key to interact with APIs.</li></ul><h4><a class="anchor" aria-hidden="true" id="5b-save-your-db-token-locally"> </a>✅ 5b. Save your DB token locally</h4><p>To know more about roles of each token you can have a look to <a href="https://www.youtube.com/watch?v=TUTCLsBuUd4&amp;list=PL2g2h-wyI4SpWK1G3UaxXhzZc6aUFXbvL&amp;index=8">this video.</a></p><p><strong>Note: Make sure you don't close the window accidentally or otherwise - if you close this window before you copy the values, the application token is lost forever. They won't be available later for security reasons.</strong></p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a tokenbut will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>We are now set with the database and credentials and will incorporate them into the application as we will see below.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h4><a class="anchor" aria-hidden="true" id="5c-view-the-astra-streaming-token-and-connection-details"> </a>✅ 5c. View the Astra Streaming token and connection details</h4><p>Click on the &quot;Connect&quot; tab.  Take note of your tenant name and broker service URL.  It's a good idea to copy/paste those into a text editor for now.  When you're ready, click on the &quot;Token Manager&quot; link.</p><p><img src="data/img/broker_service_url.png?raw=true" alt="image" /></p><p>You should have one token created by default.  Click on the copy icon on the right.  Paste your token into a text editor for now.</p><p><img src="data/img/copy_stream_token.png?raw=true" alt="image" /></p><p>Later on, we will use this information to populate environment variables, allowing us to connect to our Astra Streaming tenant.  It will be similar to the example below:</p><pre><code>export ASTRA_STREAM_TENANT=ecommerce-aaronexport ASTRA_STREAM_URL=&quot;pulsar+ssl://pulsar-gcp-uscentral1.streaming.datastax.com:6651&quot;export ASTRA_STREAM_TOKEN=&quot;eyJhMBhGYBlahBlahBlahNotARealToken37hOAv9t1fHIhJLAHw&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="5d-save-your-streaming-token-locally"> </a>✅ 5d. Save your Streaming token locally</h4><h2><a class="anchor" aria-hidden="true" id="6-setup-your-application"> </a>6. Setup your application</h2><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ecommerce-app"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><h3><a class="anchor" aria-hidden="true" id="know-your-gitpod"> </a>Know your Gitpod</h3><p>Take a moment to read this entire section since it'll help you with the rest of the workshop as you'll be spending most of your time in Gitpod. If you're familiar with Gitpod, you can easily skip this entire section.</p><p>The extreme left side has the explorer view(1). The top left, middle to right is where you'll be editing files(2), etc. and the bottom left, middle to right is what we will refer to as the Gitpod terminal window(3) as shown below.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-01-home-annotated.png?raw=true" alt="gitpod" /></p><p>You can always get back to the file explorer view whenever by clicking on the hamburger menu on the top left followed by <code>View</code> and <code>Explorer</code> as shown below.</p><p><img src="data/img/Filexplorer0.png?raw=true" alt="gitpod" /></p><p>You can allow cutting and pasting into the window by clicking on <code>Allow</code> as shown below.</p><p><img src="data/img/allow.png?raw=true" alt="gitpod" /></p><p>✅ <strong>6a: Enter the token</strong></p><p>To run the application you need to provide the credentials and identifier to the application. you will have to provide 4 values in total as shown below</p><p>Copy the environment sample file as below.</p><pre><code>cp .env.example .env</code></pre><p>Open the <code>.env</code> file as below.</p><pre><code>gp open .env</code></pre><ul><li><p>In Astra DB go back to home page by clicking the logo</p></li><li><p>Select you database <code>demos</code> in the left panel and then copy values for <code>cloud-region</code> and <code>database-id</code> (clusterID) from the details page as shown below.</p></li><li><p><em>The DatabaseID is located on the home page</em></p></li></ul><p><img src="data/img/astra-config-1.png?raw=true" alt="Ecom Welcome Screen" /></p><ul><li><em>The Database region (and keyspace) are located in the details page</em></li></ul><p><img src="data/img/astra-config-2.png?raw=true" alt="Ecom Welcome Screen" /></p><ul><li><p>Replace <code>application-token</code> with values shown on the Astra token screen or picking the values from the CSV token file your dowloaded before including the AstraCS: part of the token.</p></li><li><p><em>Make sure the Token looks something like (with AstraCS: preceeding <code>AstraCS:xxxxxxxxxxx:yyyyyyyyyyy</code></em></p></li></ul><pre lang="yaml"><code># Copy this file to .env and fill in the appropriate values. Refer to README.md# for instructions on where to find them.export ASTRA_DB_ID=export ASTRA_DB_REGION=export ASTRA_DB_APP_TOKEN=export ASTRA_DB_KEYSPACE=ecommerceexport ASTRA_STREAM_TENANT=export ASTRA_STREAM_URL=export ASTRA_STREAM_TOKEN=export GOOGLE_CLIENT_ID=export GOOGLE_CLIENT_SECRET=</code></pre><p>Make sure to inject the environment variables by running the following command</p><pre><code>source .env</code></pre><p>Verify that the environment variables are properly setup with the following command</p><pre><code>env | grep -i astra</code></pre><p>You should see four environment variables (not shown here).</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="7-enable-social-login"> </a>7. Enable Social Login</h2><p>Now that we're done with tests, let's <code>cd</code> to the top directory.</p><pre><code>/workspace/workshop-ecommerce-app/</code></pre><p>On a tab in a browser navigate to <a href="https://console.cloud.google.com/apis/credentials">https://console.cloud.google.com/apis/credentials</a>.</p><p>Consent to using APIs and services and you should finally be presented a screen that looks like below and pick values as shown.</p><p><img src="data/img/Oauthconsent1.png?raw=true" alt="ouath" /></p><p>Pick the appropriate values as shown below and complete the consent.</p><p><img src="data/img/Oauthconsent2.png?raw=true" alt="ouath" /></p><p>Make sure the project is setup for internal testing (and not for production) as shown below with the &quot;MAKE INTERNAL&quot;.</p><p><img src="data/img/Oauthconsent3.png?raw=true" alt="ouath" /></p><p>Now click on the <code>credentials</code> tab, <code>+ CREATE CREDENTIALS</code> tab and finally the <code>OAuth Client ID</code> dropdown as shown in the following screen.</p><p><img src="data/img/Oauthcred0.png?raw=true" alt="ouath" /></p><p>You will be presented with a screen for entering the <code>Authorized JavaScript Origins</code> and <code>Authorized redirect URIs</code> as shown below.</p><p>You'll need the following URIs. Make a note of this. We will use <code>http</code> instead of <code>https</code> as illustrated below.</p><p>For the <code>Authorized JavaScript Origins</code> use the following value from the Gitpod terminal window,</p><pre lang="bash"><code>echo $(gp url 8080 | sed 's/https/http/')</code></pre><p>For the <code>Authorized redirect URIs</code> use the following from the GitPod terminal window.</p><pre lang="bash"><code>echo $(gp url 8080 | sed 's/https/http/')/login/oauth2/code/google</code></pre><p>Enter the respective values as shown below which enables URI redirection and SSO for the app.</p><p><img src="data/img/Oauthcred1.png?raw=true" alt="ouath" /></p><p>Make sure you enter the above values correctly as shown and hit <code>CREATE</code> on bottom as shown.</p><p><img src="data/img/Oauthcred2.png?raw=true" alt="ouath" /></p><p>Now you're ready to fetch the credentials  by using the copy 'n paste icons on right as shown below.</p><p><img src="data/img/Oauthcred3.png?raw=true" alt="ouath" /></p><p>You can copy and paste them in the <code>.env</code> file as entries for Google <code>GOOGLE_CLIENT_ID</code> and <code>GOOGLE_CLIENT_SECRET</code>.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="8-run-unit-tests"> </a>8. Run Unit Tests</h2><p>The application is now set you should be able to interact with your DB. Let's demonstrate some capabilities.</p><p>✅ <strong>8a: Use CqlSession</strong></p><p>Interaction with Cassandra are implemented in Java through drivers and the main Class is <code>CqlSession</code>.</p><p>Higher level frameworks like Spring, Spring Data, or even quarkus will rely on this object so let's make sure it is part of your Spring context with a <code>@SpringBootTest</code>.</p><p>Let's change to the sub-directory from the terminal window as shown below.</p><pre><code>cd backend</code></pre><p>Let's run the first test with the following command.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test01_Connectivity</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>[..init...]Execute some Cql (CqlSession)+ Your Keyspace: sag_ecommerce+ Product Categories:ClothingCups and MugsTech AccessoriesWall DecorList Databases available in your Organization (AstraClient)+ Your OrganizationID: e195fbea-79b6-4d60-9291-063d8c9e6364+ Your Databases:workshops	 : id=8c98b922-aeb0-4435-a0d5-a2788e23dff8, region=eu-central-1sample_apps	 : id=c2d6bd3d-6112-47f6-9b66-b033e6174f0e, region=us-east-1sdk_tests	 : id=a52f5879-3476-42d2-b5c9-81b18fc6d103, region=us-east-1metrics	 : id=d7ded041-3cfb-4dd4-9957-e20003c3ebe2, region=us-east-1</code></pre><p>✅ <strong>8b: Working With Spring Data</strong></p><p>Spring Data allows Mapping <code>Object &lt;=&gt; Table</code> based on annotation at the java bean level. Then by convention CQL query will be executed under the hood.</p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test02_SpringData</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>Categories:- Clothing with children:[T-Shirts, Hoodies, Jackets]- Cups and Mugs with children:[Cups, Coffee Mugs, Travel Mugs]- Tech Accessories with children:[Mousepads, Wrist Rests, Laptop Covers]- Wall Decor with children:[Posters, Wall Art]</code></pre><p>✅ <strong>8c: Working With Rest Controller</strong></p><p><code>TestRestTemplate</code> is a neat way to test a web controller. The application will start on a random port with <code>@SpringBootTest(webEnvironment=WebEnvironment.RANDOM_PORT)</code></p><pre lang="bash"><code>mvn test -Dtest=com.datastax.tutorials.Test03_RestController</code></pre><p><strong>👁️ Expected output</strong></p><pre lang="bash"><code>List Categories:ClothingCups and MugsTech AccessoriesWall Decor</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-start-the-application"> </a>9. Start the Application</h2><p>You can install the backend with the credentials using the following command</p><pre><code>cd /workspace/workshop-ecommerce-appmvn install -f backend/pom.xml -DskipTests</code></pre><p>✅ <strong>9a: Know your public URL</strong></p><p>The workshop application has opened with an ephemeral URL. To know the URL where your application endpoint will be exposed you can run the following command in the terminal after the build has completed. **Please note this URL and we will open this up in a new browser window if required later **.</p><pre lang="bash"><code>gp url 8080</code></pre><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-02-url.png?raw=true" alt="gitpod" /></p><p>✅ <strong>9b: Check APIs are not available (yet)</strong></p><p>Run the following command in the Gitpod terminal window</p><pre><code>curl localhost:8080/api/v1/products/product/LS534S</code></pre><p><strong>👁️ Expected output</strong></p><pre><code>curl: (7) Failed to connect to localhost port 8080: Connection refused</code></pre><p>Not to be overly concerned as we're going to be starting the application that will be served from the port.</p><p>✅ <strong>9c: Start the application</strong></p><p>To start the application, we've provided a very simple convenience script that can be run as below.</p><pre lang="bash"><code>./start.sh</code></pre><p>Pay attention to popups being blocked as shown below and allow the popups.</p><p><img src="data/img/PopupBlocked.png?raw=true" alt="gitpod" /></p><p>You may encounter the following at different steps and although this may not be applicable right away, the steps are included <strong>in advance</strong> and summarized here so that you can keep an eye out for it. Different paths and different environments might be slightly different although Gitpod levels the playing field a bit.</p><p>Your e-commerce application should be up and running.</p><p>✅ <strong>9d: Check APIs are now available</strong></p><p>Get back to Gitpod tab/window.</p><p>Leave the application running and open up another <code>shell</code> in the Gitpod terminal window by clicking on <code>+</code> and clicking on <code>bash</code> dropdown as shown below.</p><p><img src="data/img/gitpod-newbash1.png?raw=true" alt="gitpod" /></p><p>This will bring up a new <code>bash</code> shell as shown below.</p><p><img src="data/img/gitpod-newbash2.png?raw=true" alt="gitpod" /></p><p>Issue the following command in that shell as you did earlier.</p><pre><code>curl localhost:8080/api/v1/products/product/LS534S</code></pre><p>and you should see some output indicating that the API server is serving our ecommerce APIs.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-newbash3.png?raw=true" alt="gitpod" /></p><p>Try a few other APIs (<strong>Hint: Look for the <code>RestController</code> java files in the respective sub-directories.</strong>).</p><p>✅ <strong>9e: OPTIONAL - Open in Gitpod preview window</strong></p><p>This might be useful for troubleshooting if your application does not automatically open up a browser tab.</p><p>If you want, you can run the following command to open your application in the preview window of Gitpod (it's much easier to use the app running in browser, though).</p><pre><code>gp preview $(gp url 8080)</code></pre><p>As indicated in the output below it's a very <code>Simple Browser</code>.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/gitpod-preview-1.png?raw=true" alt="gitpod" /></p><p>If your application is running in the preview window but you have difficulty accessing it from the browser pay attention to popups being blocked by the browser as explained before.</p><p>✅ <strong>9f: Get the Open API specification</strong></p><p>In the new shell window open the specification in the preview or browser with the following command</p><pre><code>gp preview $(gp url 8080)/swagger-ui/index.html</code></pre><p>The preview window looks like below. <strong>It might help to close all the tabs or open this URL in a browser by clicking on the <code>open in browser</code> tab on the top right as shown</strong>.</p><p><strong>👁️ Expected output</strong></p><p><img src="data/img/swagger2.png?raw=true" alt="image" /></p><p>Here's how it looks in the browser tab.</p><p><img src="data/img/swagger.png?raw=true" alt="image" /></p><p>This is the docs for the open APIs that enables the frontend or any other program to obtain the data and manipulate it with REST-based CRUD operations.</p><p>The complete app is running in the browser as shown below.</p><p><img src="data/img/splash.png?raw=true" alt="image" /></p><p>✅ <strong>9g: Use your social login</strong></p><p>Hit login as shown below</p><p><img src="data/img/Oauthlogin0.png?raw=true" alt="login" /></p><p>You should be presented with the Google SSO Login option. Click on the icon as shown below.</p><p><img src="data/img/Oauthlogin1.png?raw=true" alt="login" /></p><p>Pick the Google user account and proceed to login as you would with Google.</p><p><img src="data/img/Oauthlogin2.png?raw=true" alt="login" /></p><p>If all the values are wired properly you should see the following screen with the icon above showing that the authentication worked as below and the <code>Logout</code> button now available.</p><p><img src="data/img/Oauthauthenticated.png?raw=true" alt="ouath" /></p><p>and voila, just like that we are done setting up user profile with Google. We can implement Github and other social logins similarly.</p><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><p>✅ <strong>9h: Process your order(s)</strong></p><p>Did you put items in your cart and check out?  You will likely have an order waiting in your &quot;pending-orders&quot; topic.  To simulate moving the orders between topics, a small Order Processor was created.  To build and run:</p><pre><code>source .envcd orderProcessormvn clean install</code></pre><p>Once that process completes, have a look at the <code>target/</code> directory.  You should see a JAR named <code>ecom-0.0.1-SNAPSHOT-spring-boot.jar</code>.  To process an order on the &quot;pending-orders&quot; topic, you need to have it &quot;picked.&quot;  To simulate a picking process, try this:</p><pre><code>java -jar target/ecom-0.0.1-SNAPSHOT-spring-boot.jar pick</code></pre><p>If an order is present, you should see the order JSON get processed and moved to the next topic:</p><pre><code>{&quot;cartId&quot;:&quot;b8a5bd07-2337-44de-8890-582e88e29754&quot;,&quot;cartName&quot;:&quot;b8a5bd07-2337-44de-8890-582e88e29754&quot;,&quot;orderId&quot;:&quot;e8ecd3b0-498b-11ed-b5a7-fbd1f5143654&quot;,&quot;userId&quot;:&quot;f1dbd2c0-bda4-4ccc-93dd-4aecd78758f5&quot;,&quot;productList&quot;:[{&quot;productId&quot;:&quot;DSS821XL&quot;,&quot;productName&quot;:&quot;DataStax Gray Track Jacket&quot;,&quot;productQty&quot;:1,&quot;productPrice&quot;:44.99},{&quot;productId&quot;:&quot;APC30XL&quot;,&quot;productName&quot;:&quot;Apache Cassandra 3.0 Contributor T-Shirt&quot;,&quot;productQty&quot;:1,&quot;productPrice&quot;:15.99}],&quot;orderStatus&quot;:&quot;PENDING&quot;,&quot;orderTimestamp&quot;:&quot;Oct 11, 2022, 5:41:17 PM&quot;,&quot;orderSubtotal&quot;:60.98,&quot;orderShippingHandling&quot;:4,&quot;orderTax&quot;:3.05,&quot;orderTotal&quot;:68.03,&quot;shippingAddress&quot;:{&quot;street&quot;:&quot;123 Limon Gala Rd.&quot;,&quot;city&quot;:&quot;Maple Grove&quot;,&quot;stateProvince&quot;:&quot;Minnesota&quot;,&quot;postalCode&quot;:&quot;55369&quot;,&quot;country&quot;:&quot;United States&quot;}}Pushed order e8ecd3b0-498b-11ed-b5a7-fbd1f5143654 to ecommerce-aaron/default/picked-orders</code></pre><p><a href="#-table-of-contents">🏠 Back to Table of Contents</a></p><h1><a class="anchor" aria-hidden="true" id="done"> </a>Done?</h1><p>Congratulations: you made it to the end of today's workshop. You will notice that the application is still incomplete as we're evolving it. More building to follow!!!</p><p><img src="data/img/build-an-ecommerce-app.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-ecommerce-app
Getting astra.json for datastaxdevs/workshop-realtime-data-pipelines at 277
Got astrajson
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="real-time-data-pipelines-with-apache-pulsartm-and-apache-cassandratm"> </a>🎓 Real-Time data pipelines with Apache Pulsar™ and Apache Cassandra™</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="architecture-design"> </a>Architecture Design</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="architecture-overview"> </a>Architecture overview</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="injector-component"> </a>Injector Component</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="analyzer-component"> </a>Analyzer Component</h4>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-initialize-your-environment"> </a>Setup - Initialize your environment</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-open-gitpod"> </a><code>✅.setup-01</code>- Open Gitpod</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-your-astra-account-following-web-page-opened-by-gitpod-or-follow-this-link"> </a><code>✅.setup-02</code>- Create your Astra Account: Following web page opened by gitpod or follow this link</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-create-astra-credentials-token-create-an-application-token-by-following-a-href-https-awesome-astra-github-io-docs-pages-astra-create-token-target-blank-these-instructions-a"> </a><code>✅.setup-03</code>- Create Astra Credentials (token): Create an application token by following <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/" target="_blank">these instructions</a>.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-list-your-existing-users"> </a><code>✅.setup-05</code>- List your existing Users.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-create-database-code-workshops-code-and-keyspace-code-trollsquad-code-if-they-do-not-exist"> </a><code>✅.setup-06</code>- Create database <code>workshops</code> and keyspace <code>trollsquad</code> if they do not exist:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-check-the-status-of-database-code-workshops-code"> </a><code>✅.setup-07</code>- Check the status of database <code>workshops</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-setup-08-code-get-the-informations-for-your-database-including-the-keyspace-list"> </a><code>✅.setup-08</code>- Get the informations for your database including the keyspace list</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab1-producer-and-consumer"> </a>LAB1 - Producer and Consumer</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-01-code-generate-an-unique-tenant-name"> </a><code>✅.lab1-01</code>- Generate an unique tenant name</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-02-code-create-the-tenant-using-the-generated-name"> </a><code>✅.lab1-02</code>- Create the tenant using the generated name</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-03-code-list-your-tenants"> </a><code>✅.lab1-03</code>- List your tenants</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-04-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-04</code>- Start <code>Pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-05-code-show-namespaces-in-code-pulsar-shell-code"> </a><code>✅.lab1-05</code>- Show namespaces in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-06-code-show-topics-in-code-pulsar-shell-code-empty"> </a><code>✅.lab1-06</code>- Show topics in <code>pulsar-shell</code> (empty)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-07-code-create-our-4-working-topics-one-command-after-the-other"> </a><code>✅.lab1-07</code>- Create our 4 working topics, one command after the other.</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-08-code-exit-code-pulsar-shell-code"> </a><code>✅.lab1-08</code> -  Exit <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-09-code-create-code-env-code-as-configuration-file"> </a><code>✅.lab1-09</code>- Create <code>.env</code> as configuration file</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-10-code-show-your-topics-on-the-user-interface"> </a><code>✅.lab1-10</code>- Show your topics on the user interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-11-code-show-your-topic-code-rr-raw-in-code-in-astra-user-interface"> </a><code>✅.lab1-11</code>- Show your topic <code>rr-raw-in</code> in Astra User Interface:</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-12-code-start-the-generator"> </a><code>✅.lab1-12</code>- Start the generator</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-13-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-13</code>- Start <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab1-14-code-visualize-messages-with-a-consumer-using-code-client-code"> </a><code>✅.lab1-14</code>- Visualize messages with a consumer using <code>client</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab2-pulsar-functions"> </a>LAB2 - Pulsar functions</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-01-code-locate-and-setup-the-function"> </a><code>✅.lab2-01</code>- Locate and setup the function</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-02-code-start-pulsar-shell-again"> </a><code>✅.lab2-02</code>- Start Pulsar Shell (again)</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-03-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-03</code>- List functions in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-04-code-create-the-pulsar-function"> </a><code>✅.lab2-04</code>- Create the Pulsar-function</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-05-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-05</code>- List functions in <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-06-code-check-on-topics-code-rr-hotel-reviews-code-and-code-rr-restaurant-reviews-code"> </a><code>✅.lab2-06</code>- Check on topics <code>rr-hotel-reviews</code> and <code>rr-restaurant-reviews</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-07-code-consume-5-message-in-topics-content-with-code-pulsar-shell-code"> </a><code>✅.lab2-07</code>- Consume 5 message in topics content with <code>pulsar-shell</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-08-code-run-analyzer"> </a><code>✅.lab2-08</code>- Run Analyzer</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-09-code-change-terminal"> </a><code>✅.lab2-09</code>- Change Terminal</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab2-010-code-start-reader-to-log-anomalies-in-shell-code-reader-code"> </a><code>✅.lab2-010</code>- Start reader to log anomalies in shell <code>reader</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab3-working-with-databases"> </a>LAB3 - Working with databases</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-01-code-display-schema"> </a><code>✅.lab3-01</code>- Display schema</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-02-code-what-restaurants-can-be-queried"> </a><code>✅.lab3-02</code>- What restaurants can be queried?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-03-code-what-reviewers-can-be-queried"> </a><code>✅.lab3-03</code>- What reviewers can be queried?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-04-code-what-s-the-current-status-of-a-restaurant"> </a><code>✅.lab3-04</code>- What's the current status of a restaurant?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-05-code-what-s-the-current-status-of-a-reviewer"> </a><code>✅.lab3-05</code>- What's the current status of a reviewer?</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab3-06-code-what-is-the-timeline-of-reviews-for-a-restaurant"> </a><code>✅.lab3-06</code>- What is the timeline of reviews for a restaurant?</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="lab4-pulsar-i-o"> </a>LAB4 - Pulsar I/O</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-01-code-analyzing-message-syntax-in-code-rr-restaurant-anomalies-code"> </a><code>✅.lab4-01</code>- Analyzing message syntax in <code>rr-restaurant-anomalies</code></h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-02-code-create-the-associated-table"> </a><code>✅.lab4-02</code>- Create the associated Table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-03-code-create-a-sink-with-the-user-interface"> </a><code>✅.lab4-03</code>- Create a Sink with the user interface</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="code-lab4-04-code-query-the-destination-table"> </a><code>✅.lab4-04</code>- Query the destination table</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-realtime-data-pipelines<h2><a class="anchor" aria-hidden="true" id="real-time-data-pipelines-with-apache-pulsartm-and-apache-cassandratm"> </a>🎓 Real-Time data pipelines with Apache Pulsar™ and Apache Cassandra™</h2><img src="images/badge.png?raw=true" width="150" align="right" /><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-realtime-data-pipelines"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Welcome to the <em>RealTime data pipeline with Apache Pulsar and Apache Cassandra</em>* workshop! In this two-hour workshop, we will show you a sample architecture making use of Apache Pulsar™ and Pulsar Functions for real-time, event-streaming-based data ingestion, cleaning and processing.</p><p>⏲️ <strong>Duration :</strong> 2 hours</p><p>🎓 <strong>Level</strong> Beginner to Intermediate</p><p><img src="images/splash.png" alt="" /></p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ul><li><strong>HouseKeeping</strong><ul><li><a href="#objectives">Objectives</a></li><li><a href="#frequently-asked-questions">Frequently asked questions</a></li><li><a href="#materials-for-the-session">Materials for the Session</a></li></ul></li><li><strong>Architecture Design</strong><ul><li><a href="#architecture-overview">Architecture overview</a></li><li><a href="#injector-component">Injector Component</a></li><li><a href="#analyzer-component">Analyzer Component</a></li></ul></li><li><a href="#setup---initialize-your-environment">Setup - Initialize your environment</a></li><li><a href="#lab1---producer-and-consumer">LAB1 - Producer and Consumer</a></li><li><a href="#lab2---pulsar-functions">LAB2 - Pulsar functions</a></li><li><a href="#lab3---working-with-databases">LAB3 - Working with Database</a></li><li><a href="#lab4---pulsar-io">LAB4 - Pulsar I/O</a></li><li><a href="#Homework">Homework</a></li></ul><p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li><p>🎯 Give you an understanding and how and where to position Apache Pulsar</p></li><li><p>🎯 Give an overview of  streaming and datascience ecosystem**</p></li><li><p>🎯 Give you an understanding of Apache Cassandra NoSQL Database</p></li><li><p>🎯 Create your first pipeline with streaming and database.</p></li><li><p>🚀 Have fun with an interactive session</p></li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b><li><b>Python 3.6+</b><li><b>Astra Cli</b><li><b>Pulsar Shell or Pulsar-Client</b></ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><h2><a class="anchor" aria-hidden="true" id="architecture-design"> </a>Architecture Design</h2><p><em>Reviews of various venues (hotels/restaurants), written by various users, keep pouring in. We need a way to clean, normalize and filter them, removing trolls and flagging blatant outlier reviews, and make the running results available to the end user.</em></p><h4><a class="anchor" aria-hidden="true" id="architecture-overview"> </a>Architecture overview</h4><img src="./images/current_arch.png"/><details><summary><b> Show Detailed explanations</b></summary><ul><li>A stream of "events" (messages), some of which are reviews, is poured into a Pulsar topic for "raw reviews".<li>A Pulsar function filters out malformed items and those that do not specify their target type (restaurant/hotel). This function takes care of normalizing the incoming reviews, since - as is often the case in real life - certain field names in the incoming reviews can have multiple forms. All reviews are encoded as JSON strings. The Pulsar function singles out hotel and restaurant reviews and routes them, after normalizing their structure, to two specific topics. <li>We happen to be interested in restaurants, so we have a long-running process ("analyzer") performing the actual analysis on these. Heavy artillery, such as AI/ML-based classifiers, code with fat dependencies and the like, would be placed here (i.e outside Pulsar).<li>The analyzer keeps listening to the restaurant topic and ingests all incoming reviews: it keeps and update a state with key information, such as a rolling average score per each restaurant.<li>As new items arrive, they are checked if they are "troll reviews" (review text in heavy disagreement with the numeric score) and, if so, discarded. Otherwise they enter the rolling average for the target restaurant.<li>The analyzer periodically publishes an assessment for users and restaurants to a database, ready to be queried by any service that may need this data. (The output can also go to console if so desired). The destination DB also offers a ready-to-use REST API that allows to retrieve its data with simple HTTP requests, making it easy to build panels and UIs on top of this pipeline. The analyzer also reroutes "outlier reviews" (scores much different than the current rolling average) to another Pulsar topic, for a hypothetical manual inspection of such outliers.</ul></p></details><h4><a class="anchor" aria-hidden="true" id="injector-component"> </a>Injector Component</h4><img src="./images/plots/02_reviews.png"  width="600px" /><details><summary><b> Show Details</b></summary><p>There is a pseudorandom procedure to generate reviews with features that fluctuate in a predictableway: it is all in the <b>revGenerator</b> directory.<p>There is no &quot;time&quot; in the generation: to keep things simple, we use a &quot;sequence index&quot; in place oftime. Also, some of the &quot;reviews&quot; are not even valid JSON strings but contain gibberish instead,as is often the case in real-life data ingestion pipelines!</p><p>Each time a review is created, a venue (target) and a user (reviewer) are chosen at random: then,score and text are also created according to the following rules:</p><p>Each venue has a &quot;true&quot; quality that is slowly oscillating in time, see for example these two restaurants:</p><img src="./images/plots/01_real-values.png"  width="600px" /><p>Each reviewer has an associate amplitude that dictates how widely the scores they producemay fluctuate away from the &quot;true&quot; value for that venue at that &quot;time&quot;: in this example, the individualscores emitted by two different reviewers, having a large and small associated amplitude, are plotted:</p><img src="./images/plots/02_reviews.png"  width="600px" /><p>While reviews by Rita will presumably all fall in the &quot;expected&quot; region around the current average,a large fraction of the reviews by Anne will be too far away fromit and thus be flagged as &quot;outlier reviews&quot;.</p><p>Each review comes with an associated text, which in this toyexample is simply a bunch of words strung together, some positive (&quot;delicious&quot;) and some negative (&quot;disgusting&quot;).Each reviewer, however, has a Boolean &quot;trolliness&quot; flag: if true, then this text is built in strongdisagreement with the numeric score in the review.</p></p></details><h4><a class="anchor" aria-hidden="true" id="analyzer-component"> </a>Analyzer Component</h4><img src="./images/plots/03_moving-average.png" width="600px"/><details><summary><b> Show Details</b></summary><p>On the <b>analyzer side</b>, the reconstructed rolling average roughly follows the "true" quality fora venue, and is used to detect "outliers": each review that differs too much from the current rollingaverage is deemed an outlier. Here the rolling average corresponding to the above restaurant is plotted:<img src="./images/plots/03_moving-average.png"  width="600px"/><p>The analyzer also discards troll reviews and keeps a runningcounter of them, both per-user and per-restaurant, ready to be exposed with the other data. To do so, a toy version of a sentiment analysis is implemented (simply based on some words with positiveand negative connotation) and used to compare with the numericscore given in the review.</p></p></details><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="setup-initialize-your-environment"> </a>Setup - Initialize your environment</h2><h4><a class="anchor" aria-hidden="true" id="code-setup-01-code-open-gitpod"> </a><code>✅.setup-01</code>- Open Gitpod</h4><p>Gitpod is an IDE based on VSCode deployed in the cloud.</p><blockquote><p>↗️ <em>Right Click and select open as a new Tab...</em></p></blockquote><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-realtime-data-pipelines"><img src="https://dabuttonfactory.com/button.png?t=Open+Gitpod&f=Open+Sans-Bold&ts=16&tc=fff&hp=20&vp=10&c=11&bgt=unicolored&bgc=0b5394" /></a></p><h4><a class="anchor" aria-hidden="true" id="code-setup-02-code-create-your-astra-account-following-web-page-opened-by-gitpod-or-follow-this-link"> </a><code>✅.setup-02</code>- Create your Astra Account: Following web page opened by gitpod or follow this link</h4><p><em><strong><code>ASTRA</code></strong> is the simplest way to run both Cassandra and Pulsar with zero operations at all - just push the button and get your clusters. No credit card required</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p>The Astra registration page should have opened with Gitpod, if not use <a href="https://astra.dev/yt-9-14">this link</a>.</p><h4><a class="anchor" aria-hidden="true" id="code-setup-03-code-create-astra-credentials-token-create-an-application-token-by-following-a-href-https-awesome-astra-github-io-docs-pages-astra-create-token-target-blank-these-instructions-a"> </a><code>✅.setup-03</code>- Create Astra Credentials (token): Create an application token by following <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/" target="_blank">these instructions</a>.</h4><p>Skip this step is you already have a token. You can reuse the same token in our other workshops, too.</p><blockquote><p>Your token should look like: <code>AstraCS:....</code></p></blockquote><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-04-code-setup-astra-cli"> </a><code>✅.setup-04</code>- Setup Astra CLI</h4><p>Go back to your gitpod terminal waiting for your token. Make sure you select the <code>1_producer</code> shell in the bottom-right panel and provide the value where it is asked.</p><p><img src="images/pic-astratoken.png" alt="pic" /></p><blockquote><p>🖥️ <code>setup-04 output</code></p><pre><code>[cedrick.lunven@gmail.com]ASTRA_DB_APPLICATION_TOKEN=AstraCS:AAAAAAAA[What's NEXT ?]You are all set.(configuration is stored in ~/.astrarc) You can now:   • Use any command, 'astra help' will get you the list   • Try with 'astra db list'   • Enter interactive mode using 'astra'Happy Coding !</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-05-code-list-your-existing-users"> </a><code>✅.setup-05</code>- List your existing Users.</h4><pre lang="bash"><code>astra user list</code></pre><blockquote><p>🖥️ <code>setup-05 output</code></p><pre><code>+--------------------------------------+-----------------------------+---------------------+| User Id                              | User Email                  | Status              |+--------------------------------------+-----------------------------+---------------------+| b665658a-ae6a-4f30-a740-2342a7fb469c | cedrick.lunven@datastax.com | active              |+--------------------------------------+-----------------------------+---------------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-06-code-create-database-code-workshops-code-and-keyspace-code-trollsquad-code-if-they-do-not-exist"> </a><code>✅.setup-06</code>- Create database <code>workshops</code> and keyspace <code>trollsquad</code> if they do not exist:</h4><pre lang="bash"><code>astra db create workshops -k trollsquad --if-not-exist --wait</code></pre><p>Let's analyze the command:</p><table><thead><tr><th>Chunk</th><th>Description</th></tr></thead><tbody><tr><td><code>db create</code></td><td>Operation executed <code>create</code> in group <code>db</code></td></tr><tr><td><code>workshops</code></td><td>Name of the database, our argument</td></tr><tr><td><code>-k trollsquad</code></td><td>Name of the keyspace, a db can contains multiple keyspaces</td></tr><tr><td><code>--if-not-exist</code></td><td>Flag for itempotency creating only what if needed</td></tr><tr><td><code>--wait</code></td><td>Make the command blocking until all expected operations are executed (timeout is 180s)</td></tr></tbody></table><blockquote><p><strong>Note</strong>: If the database already exist but has not been used for while the status will be <code>HIBERNATED</code>. The previous command will resume the db an create the new keyspace but it can take about a minute to execute.</p></blockquote><blockquote><p>🖥️ <code>setup-06 output</code></p><pre><code>[ INFO ] - Database 'workshops' already exist. Connecting to database.[ INFO ] - Database 'workshops' has status 'MAINTENANCE' waiting to be 'ACTIVE' ...[ INFO ] - Database 'workshops' has status 'ACTIVE' (took 7983 millis)</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-07-code-check-the-status-of-database-code-workshops-code"> </a><code>✅.setup-07</code>- Check the status of database <code>workshops</code></h4><pre lang="bash"><code>astra db status workshops</code></pre><blockquote><p>🖥️ <code>setup-07 output</code></p><pre><code>[ INFO ] - Database 'workshops' has status 'ACTIVE'</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-setup-08-code-get-the-informations-for-your-database-including-the-keyspace-list"> </a><code>✅.setup-08</code>- Get the informations for your database including the keyspace list</h4><pre lang="bash"><code>astra db get workshops</code></pre><blockquote><p>🖥️ <code>setup-08 output</code></p><pre><code>+------------------------+-----------------------------------------+| Attribute              | Value                                   |+------------------------+-----------------------------------------+| Name                   | workshops                               || id                     | bb61cfd6-2702-4b19-97b6-3b89a04c9be7    || Status                 | ACTIVE                                  || Default Cloud Provider | AWS                                     || Default Region         | us-east-1                               || Default Keyspace       | trollsquad                              || Creation Time          | 2022-08-29T06:13:06Z                    ||                        |                                         || Keyspaces              | [0] trollsquad                          ||                        |                                         ||                        |                                         || Regions                | [0] us-east-1                           ||                        |                                         |+------------------------+-----------------------------------------+</code></pre></blockquote><p><em>Congratulations your environment is all set, let's start the labs !</em></p><h2><a class="anchor" aria-hidden="true" id="lab1-producer-and-consumer"> </a>LAB1 - Producer and Consumer</h2><h4><a class="anchor" aria-hidden="true" id="code-lab1-01-code-generate-an-unique-tenant-name"> </a><code>✅.lab1-01</code>- Generate an unique tenant name</h4><blockquote><p><strong>Note</strong>: Your tenant name must start with a lowercase alphabetic character. It can only contain lowercase alphanumeric characters, and hyphens (kebab-case), and the maximum length is 25.</p></blockquote><p>A tenant name should BE UNIQUE IN ALL CLUSTER. So to get a unique name let's generate one randomly.</p><pre lang="bash"><code>export TENANT=&quot;trollsquad-$(tr -dc a-z0-9 &lt;/dev/urandom | head -c 9 ; echo '')&quot;echo $TENANT</code></pre><blockquote><p>🖥️ <code>lab1-01 output</code></p><pre><code>trollsquad-abcdefghi</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-02-code-create-the-tenant-using-the-generated-name"> </a><code>✅.lab1-02</code>- Create the tenant using the generated name</h4><p>You can create a tenant from the user interface using <a href="https://docs.datastax.com/en/astra-streaming/docs/astream-quick-start.html#create-a-tenant">this tutorial</a> but we will not use this today.</p><p>We will use the CLI for everyone to share the same values for regions and cloud provider. We will default all values for simplicity and because they are harcoded in the configuration file.</p><pre lang="bash"><code>astra streaming create ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-02 output</code></p><pre><code>[ INFO ] - Tenant 'trollsquad-abcdefghi' has being created.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-03-code-list-your-tenants"> </a><code>✅.lab1-03</code>- List your tenants</h4><pre lang="bash"><code>astra streaming list</code></pre><blockquote><p>🖥️ <code>lab1-03 output</code></p><pre><code>+---------------------+-----------+----------------+----------------+| name                | cloud     | region         | Status         |+---------------------+-----------+----------------+----------------+| trollsquad-abcdefghi| aws       | useast2        | active         |+---------------------+-----------+----------------+----------------+</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-04-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-04</code>- Start <code>Pulsar-shell</code></h4><blockquote><p><strong>Note</strong> Pulsar shell is a fast and flexible shell for Pulsar cluster management, messaging, and more. It's great for quickly switching between different clusters, and can modify cluster or tenant configurations in an instant.</p></blockquote><p>Astra CLI will download and install the software if needed. Then it will generate a <code>client.conf</code> based on the tenant name you provide.</p><pre lang="bash"><code>astra streaming pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-04 output</code></p><pre><code>[ INFO ] - pulsar-shell first launch, downloading (~ 60MB), please wait...[ INFO ] - pulsar-shell has been installed/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-pk6oztya8.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651  Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-05-code-show-namespaces-in-code-pulsar-shell-code"> </a><code>✅.lab1-05</code>- Show namespaces in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin namespaces list ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-05 output</code></p><pre><code>trollsquad-abcdefghi/default</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-06-code-show-topics-in-code-pulsar-shell-code-empty"> </a><code>✅.lab1-06</code>- Show topics in <code>pulsar-shell</code> (empty)</h4><pre lang="bash"><code>admin topics list ${TENANT}/default</code></pre><blockquote><p>🖥️ <code>lab1-06 output</code></p><pre><code>&lt;empty&gt;</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-07-code-create-our-4-working-topics-one-command-after-the-other"> </a><code>✅.lab1-07</code>- Create our 4 working topics, one command after the other.</h4><ul><li><code>rr-raw-in</code></li></ul><pre lang="bash"><code>admin topics create persistent://${TENANT}/default/rr-raw-in</code></pre><ul><li><code>rr-hotel-reviews</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-hotel-reviews</code></pre><ul><li><code>rr-restaurant-reviews</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-restaurant-reviews</code></pre><ul><li><code>rr-restaurant-anomalies</code></li></ul><pre><code>admin topics create persistent://${TENANT}/default/rr-restaurant-anomalies</code></pre><ul><li>List the topics</li></ul><pre><code>admin topics list ${TENANT}/default</code></pre><blockquote><p>🖥️ <code>lab1-07 output</code></p><pre><code>persistent://trollsquad-abcdefghi/default/rr-raw-inpersistent://trollsquad-abcdefghi/default/rr-restaurant-anomaliespersistent://trollsquad-abcdefghi/default/rr-hotel-reviewspersistent://trollsquad-abcdefghi/default/rr-restaurant-reviews</code></pre></blockquote><p>Let's dig into what those topics are used for. The will be populated one after this other moving across the labs.</p><table><thead><tr><th>Title</th><th>description</th></tr></thead><tbody><tr><td><code>rr-raw-in</code></td><td>Will get inputs from injector</td></tr><tr><td><code>rr-hotel-reviews</code></td><td>Pulsar function router will put hotels reviews there</td></tr><tr><td><code>rr-restaurant-reviews</code></td><td>Pulsar function router will put restaurants reviews there</td></tr><tr><td><code>rr-restaurant-anomalies</code></td><td>The analyzer will reject reviews there</td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="code-lab1-08-code-exit-code-pulsar-shell-code"> </a><code>✅.lab1-08</code> -  Exit <code>pulsar-shell</code></h4><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab1-09-code-create-code-env-code-as-configuration-file"> </a><code>✅.lab1-09</code>- Create <code>.env</code> as configuration file</h4><pre><code>cp .env.sample .envASTRA_DB_ID=`astra db get workshops --key id`echo &quot;ASTRA_DB_ID=\&quot;${ASTRA_DB_ID}\&quot;&quot; &gt;&gt; .envASTRA_DB_APP_TOKEN=`astra config get default --key ASTRA_DB_APPLICATION_TOKEN`echo &quot;ASTRA_DB_APP_TOKEN=\&quot;${ASTRA_DB_APP_TOKEN}\&quot;&quot; &gt;&gt; .envecho &quot;TENANT=\&quot;${TENANT}\&quot;&quot; &gt;&gt; .envPULSAR_TOKEN=`astra streaming pulsar-token ${TENANT}`echo &quot;PULSAR_TOKEN=\&quot;${PULSAR_TOKEN}\&quot;&quot; &gt;&gt; .envORGID=`astra org id`echo &quot;ORGID=\&quot;${ORGID}\&quot;&quot; &gt;&gt; .envset -asource .envset +atail -5 .env</code></pre><blockquote><p><strong>Note</strong>: If your DB <code>workshops</code> existed before this session and was not started on region <code>us-east-1</code> you will have to edit <code>.env</code> changing the key <code>ASTRA_DB_REGION</code></p></blockquote><blockquote><p>🖥️ <code>lab1-09 output</code></p><pre><code>gitpod /workspace/workshop-realtime-data-pipelines (main) $ tail -5 .envASTRA_DB_ID=&quot;3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23&quot;ASTRA_DB_APP_TOKEN=&quot;AstraCS:gdZaqzmFZ************&quot;TENANT=&quot;trollsquad-abcdefghi&quot;PULSAR_TOKEN=&quot;eyJhbGciOiJSUzI1**********&quot;ORGID=&quot;f9460f14-9879-4ebe-83f2-48d3f3dce13c&quot;</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-10-code-show-your-topics-on-the-user-interface"> </a><code>✅.lab1-10</code>- Show your topics on the user interface</h4><blockquote><p><strong>Note</strong>: <em>You need to be logged in to Astra&quot;. Make sure you have not being autologout before issueing the command</em></p></blockquote><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/</code></pre><p>Sometimes you have to hard refresh or click <code>topics</code> tab again. Notice the ellipsis to expand the list of topics if not present.</p><blockquote><p>🖥️ <code>lab1-10 output</code></p><p><img src="images/pic-topics.png" alt="pic" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-11-code-show-your-topic-code-rr-raw-in-code-in-astra-user-interface"> </a><code>✅.lab1-11</code>- Show your topic <code>rr-raw-in</code> in Astra User Interface:</h4><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-raw-in/1/0/overview</code></pre><blockquote><p>🖥️ <code>lab1-011 output</code></p><p><img src="images/pic-rr-raw-in.png" alt="pic" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-12-code-start-the-generator"> </a><code>✅.lab1-12</code>- Start the generator</h4><pre lang="bash"><code>/workspace/workshop-realtime-data-pipelines/revGenerator/review_generator.py -r 10</code></pre><blockquote><p>🖥️ <code>lab1-012 output</code></p><pre><code>2022-09-13 10:36:24.243 INFO  [140097656701568] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 10:36:24.249 INFO  [140097656701568] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 10:36:24.349 INFO  [140097629259520] ClientConnection:375 | [10.0.5.2:49564 -&gt; 3.138.177.230:6651] Connected to broker2022-09-13 10:36:24.818 INFO  [140097629259520] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-raw-in, ] Getting connection from pool2022-09-13 10:36:24.910 INFO  [140097629259520] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 10:36:24.915 INFO  [140097629259520] ConnectionPool:96 | Created connection for pulsar://192.168.69.127:66502022-09-13 10:36:25.016 INFO  [140097629259520] ClientConnection:377 | [10.0.5.2:56960 -&gt; 18.223.216.1:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.69.127:66502022-09-13 10:36:25.482 INFO  [140097629259520] ProducerImpl:189 | [persistent://trollsquad-pk6oztya8/default/rr-raw-in, ] Created producer on broker [10.0.5.2:56960 -&gt; 18.223.216.1:6651] * 0 ... [{&quot;u_id&quot;: &quot;geri&quot;, &quot;score&quot;: 9.3, &quot;review_type&quot;: &quot;hotel&quot;, &quot;item_id&quot;: &quot;slpsnd&quot;, &quot;item_name&quot;: &quot;SleepSound&quot;, &quot;text&quot;: &quot;we terrible disgusting unsatisfactory cooked terrible&quot;, &quot;idx&quot;: 0}]* 1 ... [a5VH40D^L625Z98b1BKTN@N2aCEQN=VXQTD0IaYPK[RXbZVOQZJGP2`Y;^5OZ@:EE]* 2 ... [{&quot;u_id&quot;: &quot;botz&quot;, &quot;score&quot;: 9.600000000000001, &quot;review_type&quot;: &quot;hotel&quot;, &quot;item_id&quot;: &quot;slpsnd&quot;, &quot;item_name&quot;: &quot;SleepSound&quot;, &quot;text&quot;: &quot;excellent excellent delicious ordinary dish with is tasty&quot;, &quot;idx&quot;: 2}]* 3 ... [{&quot;u_id&quot;: &quot;botz&quot;, &quot;score&quot;: 9.1, &quot;item_id&quot;: &quot;eat_st&quot;, &quot;item_name&quot;: &quot;EatNStay&quot;, &quot;text&quot;: &quot;excellent the is excellent ordinary ordinary eating&quot;, &quot;idx&quot;: 3}]....</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-13-code-start-code-pulsar-shell-code"> </a><code>✅.lab1-13</code>- Start <code>pulsar-shell</code></h4><p>For now on the first terminal will be busy with the generator. As such move to the second terminal called <code>2_consumer</code></p><p><img src="images/pic-bash2.png" alt="" /></p><pre><code>set -asource .envset +asource /home/gitpod/.astra/cli/astra-init.shastra streaming  pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab1-013 output</code></p><pre><code>/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-pk6oztya8.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651  Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab1-14-code-visualize-messages-with-a-consumer-using-code-client-code"> </a><code>✅.lab1-14</code>- Visualize messages with a consumer using <code>client</code></h4><pre lang="bash"><code>client consume persistent://${TENANT}/default/rr-raw-in -s consume_log -n 0</code></pre><blockquote><p>🖥️ <code>lab1-014 output</code></p><pre><code>2022-09-13T10:49:04,150+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConnectionPool - [[id: 0xf990e737, L:/10.0.5.2:54496 - R:pulsar-aws-useast2.streaming.datastax.com/3.16.119.226:6651]] Connected to server2022-09-13T10:49:04,709+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerStatsRecorderImpl - Starting Pulsar consumer status recorder with config: {&quot;topicNames&quot;:[&quot;persistent://trollsquad-pk6oztya8/default/rr-raw-in&quot;],&quot;topicsPattern&quot;:null,&quot;subscriptionName&quot;:&quot;consume_log&quot;,&quot;subscriptionType&quot;:&quot;Exclusive&quot;,&quot;subscriptionProperties&quot;:null,&quot;subscriptionMode&quot;:&quot;Durable&quot;,&quot;receiverQueueSize&quot;:1000,&quot;acknowledgementsGroupTimeMicros&quot;:100000,&quot;negativeAckRedeliveryDelayMicros&quot;:60000000,&quot;maxTotalReceiverQueueSizeAcrossPartitions&quot;:50000,&quot;consumerName&quot;:null,&quot;ackTimeoutMillis&quot;:0,&quot;tickDurationMillis&quot;:1000,&quot;priorityLevel&quot;:0,&quot;maxPendingChunkedMessage&quot;:10,&quot;autoAckOldestChunkedMessageOnQueueFull&quot;:false,&quot;expireTimeOfIncompleteChunkedMessageMillis&quot;:60000,&quot;cryptoFailureAction&quot;:&quot;FAIL&quot;,&quot;properties&quot;:{},&quot;readCompacted&quot;:false,&quot;subscriptionInitialPosition&quot;:&quot;Latest&quot;,&quot;patternAutoDiscoveryPeriod&quot;:60,&quot;regexSubscriptionMode&quot;:&quot;PersistentOnly&quot;,&quot;deadLetterPolicy&quot;:null,&quot;retryEnable&quot;:false,&quot;autoUpdatePartitions&quot;:true,&quot;autoUpdatePartitionsIntervalSeconds&quot;:60,&quot;replicateSubscriptionState&quot;:false,&quot;resetIncludeHead&quot;:false,&quot;keySharedPolicy&quot;:null,&quot;batchIndexAckEnabled&quot;:false,&quot;ackReceiptEnabled&quot;:false,&quot;poolMessages&quot;:true,&quot;startPaused&quot;:false,&quot;maxPendingChuckedMessage&quot;:10}...2022-09-13T10:49:59,192+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerImpl - [persistent://trollsquad-pk6oztya8/default/rr-raw-in][consume_log] Subscribing to topic on cnx [id: 0x797d8d1d, L:/10.0.5.2:50876 - R:pulsar-aws-useast2.streaming.datastax.com/3.138.177.230:6651], consumerId 02022-09-13T10:49:59,288+0000 [pulsar-client-io-1-1] INFO  org.apache.pulsar.client.impl.ConsumerImpl - [persistent://trollsquad-pk6oztya8/default/rr-raw-in][consume_log] Subscribed to topic on pulsar-aws-useast2.streaming.datastax.com/3.138.177.230:6651 -- consumer: 02022-09-13T10:49:59,395+0000 [pulsar-client-io-1-1] INFO  com.scurrilous.circe.checksum.Crc32cIntChecksum - SSE4.2 CRC32C provider initialized----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;geri&quot;, &quot;score&quot;: 5.0, &quot;review_type&quot;: &quot;restaurant&quot;, &quot;item_id&quot;: &quot;vegg00&quot;, &quot;item_name&quot;: &quot;VeggieParadise&quot;, &quot;text&quot;: &quot;roast risotto risotto eating for for dish&quot;, &quot;idx&quot;: 1171}----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;botz&quot;, &quot;score&quot;: 7.300000000000001, &quot;review_type&quot;: &quot;restaurant&quot;, &quot;item_id&quot;: &quot;gold_f&quot;, &quot;item_name&quot;: &quot;Golden Fork&quot;, &quot;text&quot;: &quot;with we ordinary we with cooked we ordinary&quot;, &quot;idx&quot;: 1172}</code></pre></blockquote><p>We can kill this consumer with <code>CTRL + C</code>.</p><h2><a class="anchor" aria-hidden="true" id="lab2-pulsar-functions"> </a>LAB2 - Pulsar functions</h2><p>For now both terminal will 1 and 2 be busy with the generator. As such move to the second terminal called <code>3_analyzer</code></p><p><img src="images/pic-bash3.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab2-01-code-locate-and-setup-the-function"> </a><code>✅.lab2-01</code>- Locate and setup the function</h4><pre lang="bash"><code>set -asource .envset +agp open /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.pysed -i &quot;s/___TENANT___/${TENANT}/&quot; /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.py</code></pre><blockquote><p>🖥️ <code>lab2-01 output</code></p><p>Before <code>sed</code>:<img src="images/sed-before.png" alt="pic" /></p><p>After <code>sed</code>:<img src="images/sed-after.png" alt="" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-02-code-start-pulsar-shell-again"> </a><code>✅.lab2-02</code>- Start Pulsar Shell (again)</h4><pre lang="bash"><code>source /home/gitpod/.astra/cli/astra-init.shastra streaming pulsar-shell ${TENANT}</code></pre><blockquote><p>🖥️ <code>lab2-02 output</code></p><pre><code>/home/gitpod/.astra/lunastreaming-shell-2.10.1.1/conf/client-aws-useast2-trollsquad-abcdefghi.confPulsar-shell is starting please wait for connection establishment...Using directory: /home/gitpod/.pulsar-shellWelcome to Pulsar shell!  Service URL: pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651 Admin URL: https://pulsar-aws-useast2.api.streaming.datastax.comType help to get started or try the autocompletion (TAB button).Type exit or quit to end the shell session.default(pulsar-aws-useast2.streaming.datastax.com)&gt; </code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-03-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-03</code>- List functions in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin functions list --tenant=${TENANT} --namespace=default</code></pre><blockquote><p>🖥️ <code>lab2-03 output</code></p><pre><code>&lt;empty&gt;</code></pre></blockquote><blockquote><p><strong>Note</strong>:<em>If you need to delete a function you can also leverage on the <code>admin</code> command to do so:</em></p><pre lang="bash"><code>admin functions delete    --name rrouter-function     --tenant=${TENANT}     --namespace=default</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-04-code-create-the-pulsar-function"> </a><code>✅.lab2-04</code>- Create the Pulsar-function</h4><pre lang="bash"><code>admin functions create  --py /workspace/workshop-realtime-data-pipelines/pulsar_routing_function/review_router.py  --classname review_router.ReviewRouter  --tenant ${TENANT}  --namespace default  --name rrouter-function  --inputs persistent://${TENANT}/default/rr-raw-in</code></pre><blockquote><p>🖥️ <code>lab2-04 output</code></p><pre><code>Created successfully</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-05-code-list-functions-in-code-pulsar-shell-code"> </a><code>✅.lab2-05</code>- List functions in <code>pulsar-shell</code></h4><pre lang="bash"><code>admin functions list --tenant=${TENANT} --namespace=defaultexit</code></pre><blockquote><p>🖥️ <code>lab2-05 output</code></p><pre><code>rrouter-function</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-06-code-check-on-topics-code-rr-hotel-reviews-code-and-code-rr-restaurant-reviews-code"> </a><code>✅.lab2-06</code>- Check on topics <code>rr-hotel-reviews</code> and <code>rr-restaurant-reviews</code></h4><ul><li>Hotels</li></ul><pre lang="bash"><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-hotel-reviews/1/0</code></pre><blockquote><p>🖥️ <code>lab2-06 output-1</code></p><p>Hotels:<img src="images/pic-hotel-reviews.png" alt="" /></p></blockquote><ul><li>Restaurants</li></ul><pre><code>gp preview --external https://astra.datastax.com/org/${ORGID}/streaming/pulsar-aws-useast2/tenants/${TENANT}/topics/namespaces/default/topics/rr-restaurant-reviews/1/0</code></pre><blockquote><p>🖥️ <code>lab2-06 output-2</code></p><p>Restaurants:<img src="images/pic-restaurant-reviews.png" alt="" /></p></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-07-code-consume-5-message-in-topics-content-with-code-pulsar-shell-code"> </a><code>✅.lab2-07</code>- Consume 5 message in topics content with <code>pulsar-shell</code></h4><ul><li>Start Shell:</li></ul><pre><code>astra streaming pulsar-shell ${TENANT}</code></pre><ul><li>Execute command:</li></ul><pre><code>client consume persistent://${TENANT}/default/rr-restaurant-reviews -s consume_log -n 5</code></pre><blockquote><p>🖥️ <code>lab2-07 output</code></p><p>After initialization you see messages:[...]----- got message -----key:[null], properties:[], content:{&quot;user_id&quot;: &quot;rita&quot;, &quot;r_score&quot;: 3.9000000000000004, &quot;tgt_name&quot;: &quot;VeggieParadise&quot;, &quot;tgt_id&quot;: &quot;vegg00&quot;, &quot;r_text&quot;: &quot;we ordinary roast with is for for is&quot;, &quot;idx&quot;: 9619}[...]</p><p>If we format a sample message it looks like:</p><pre lang="json"><code>{   &quot;user_id&quot;: &quot;geri&quot;,    &quot;r_score&quot;: 1.5,    &quot;tgt_name&quot;: &quot;Pizza Smile&quot;,    &quot;tgt_id&quot;: &quot;pizzas&quot;,    &quot;r_text&quot;: &quot;delicious with for eating stellar excellent is&quot;,    &quot;idx&quot;: 20179 }</code></pre></blockquote><ul><li>Exit <code>pulsar-shell</code></li></ul><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab2-08-code-run-analyzer"> </a><code>✅.lab2-08</code>- Run Analyzer</h4><p>revAnalyzer is a standalone batch to evaluate which reviews are relevant and which are not.</p><pre lang="bash"><code>set -asource .envset +a/workspace/workshop-realtime-data-pipelines/revAnalyzer/review_analyzer.py -r -o -t -f 200</code></pre><blockquote><p>🖥️ <code>lab2-08 output</code></p><pre><code>Checking &quot;known_ids_per_type&quot; ... done.Checking &quot;restaurants_by_id&quot; ... done.Checking &quot;restaurants_by_id_time&quot; ... done.Checking &quot;reviewers_by_id&quot; ... done.2022-09-13 12:46:30.012 INFO  [140019973255808] Client:88 | Subscribing on Topic :persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews2022-09-13 12:46:30.012 INFO  [140019973255808] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:30.019 INFO  [140019973255808] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 12:46:30.121 INFO  [140019938682624] ClientConnection:375 | [10.0.5.2:33432 -&gt; 18.223.216.1:6651] Connected to broker2022-09-13 12:46:30.593 INFO  [140019938682624] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews, review-analyzer, 0] Getting connection from pool2022-09-13 12:46:30.688 INFO  [140019938682624] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:30.696 INFO  [140019938682624] ConnectionPool:96 | Created connection for pulsar://192.168.50.226:66502022-09-13 12:46:30.798 INFO  [140019938682624] ClientConnection:377 | [10.0.5.2:49968 -&gt; 3.138.177.230:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.50.226:66502022-09-13 12:46:31.263 INFO  [140019938682624] ConsumerImpl:224 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-reviews, review-analyzer, 0] Created consumer on broker [10.0.5.2:49968 -&gt; 3.138.177.230:6651] 2022-09-13 12:46:31.358 INFO  [140019938682624] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, ] Getting connection from pool2022-09-13 12:46:31.453 INFO  [140019938682624] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:46:31.460 INFO  [140019938682624] ConnectionPool:96 | Created connection for pulsar://192.168.7.141:66502022-09-13 12:46:31.558 INFO  [140019938682624] ClientConnection:377 | [10.0.5.2:41468 -&gt; 3.16.119.226:6651] Connected to broker through proxy. Logical broker: pulsar://192.168.7.141:66502022-09-13 12:46:32.032 INFO  [140019938682624] ProducerImpl:189 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, ] Created producer on broker [10.0.5.2:41468 -&gt; 3.16.119.226:6651] [ 20827] Outlier detected: &quot;anne&quot; on &quot;Golden Fork&quot; (rev 7.40 != avg 3.47)[ 24252] Outlier detected: &quot;anne&quot; on &quot;Golden Fork&quot; (rev 7.90 != avg 4.63)[ 24256] Outlier detected: &quot;botz&quot; on &quot;Golden Fork&quot; (rev 0.40 != avg 4.21)[ 24616] Outlier detected: &quot;botz&quot; on &quot;Golden Fork&quot; (rev 0.60 != avg 3.97)[ 25239] Restaurant Score Summary:                 [gold_f  25239]   &quot;Golden Fork&quot;      : 3.66   (outliers:      4/    64)                 [pizzas  25239]   &quot;Pizza Smile&quot;      : 0.67   (outliers:      0/    55)                 [vegg00  25239]   &quot;VeggieParadise&quot;   : 1.93   (outliers:      0/    57)[ 25239] Reviewer Summary:                   &quot;anne&quot;  25239 : troll-score = 0.00 (outliers:      2 /     42). Visits: gold_f(18), pizzas(12), vegg00(12)                   &quot;botz&quot;  25239 : troll-score = 0.00 (outliers:      2 /     43). Visits: gold_f(13), pizzas(14), vegg00(16)                   &quot;geri&quot;  25239 : troll-score = 0.66 (outliers:      0 /     41). Visits: gold_f(12), vegg00(2)                   &quot;john&quot;  25239 : troll-score = 0.00 (outliers:      0 /     35). Visits: gold_f(13), pizzas(10), vegg00(12)                   &quot;rita&quot;  25239 : troll-score = 0.00 (outliers:      0 /     39). Visits: gold_f(7), pizzas(18), vegg00(14)[ 25239] Writing to DB ... done.</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab2-09-code-change-terminal"> </a><code>✅.lab2-09</code>- Change Terminal</h4><p>All terminal are busy. Let us move to the terminal called <code>4_reader</code></p><p><img src="images/pic-bash4.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab2-010-code-start-reader-to-log-anomalies-in-shell-code-reader-code"> </a><code>✅.lab2-010</code>- Start reader to log anomalies in shell <code>reader</code></h4><pre lang="bash"><code>set -asource .envset +a/workspace/workshop-realtime-data-pipelines/tools/reader.py -t rr-restaurant-anomalies</code></pre><blockquote><p>🖥️ <code>lab2-10 output</code></p><pre><code>2022-09-13 12:52:16.261 INFO  [139762389439104] Client:88 | Subscribing on Topic :persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies2022-09-13 12:52:16.262 INFO  [139762389439104] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:52:16.267 INFO  [139762389439104] ConnectionPool:96 | Created connection for pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:66512022-09-13 12:52:16.380 INFO  [139762369062656] ClientConnection:375 | [10.0.5.2:40472 -&gt; 3.16.119.226:6651] Connected to broker2022-09-13 12:52:16.852 INFO  [139762369062656] HandlerBase:64 | [persistent://trollsquad-pk6oztya8/default/rr-restaurant-anomalies, my-sub, 0] Getting connection from pool2022-09-13 12:52:16.945 INFO  [139762369062656] ClientConnection:189 | [&lt;none&gt; -&gt; pulsar+ssl://pulsar-aws-useast2.streaming.datastax.com:6651] Create ClientConnection, timeout=100002022-09-13 12:52:16.951 INFO  [139762369062656] ConnectionPool:96 | Created connection for pulsar://192.168.7.141:6650...[2022-09-13T12:52:40] Received message 217:    Type = JSON        {            &quot;detected_by&quot;: &quot;review_analyzer.py&quot;,            &quot;idx&quot;: 22650,            &quot;r_score&quot;: 9.4,            &quot;r_text&quot;: &quot;roast superb roast ordinary superb superb stellar we&quot;,            &quot;tgt_id&quot;: &quot;gold_f&quot;,            &quot;tgt_name&quot;: &quot;Golden Fork&quot;,            &quot;user_id&quot;: &quot;botz&quot;        }...</code></pre></blockquote><blockquote><p><strong>Note</strong>: <em>you can customize the behaviour of those commands - try passing <code>-h</code>to the scripts to see what is available</em>.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="lab3-working-with-databases"> </a>LAB3 - Working with databases</h2><p>All terminal are busy. Let us move to the terminal called <code>5_database</code></p><p><img src="images/pic-bash5.png" alt="" /></p><p>The only missing piece at this point are direct database queries. You can access the tables in any way you want, for instance using the provided <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Cql-Shell">CQL shell on the Astra DB UI</a>: just inspect the <code>trollsquad</code> keyspace and try to <code>SELECT</code> rows from the tables you find there.</p><h4><a class="anchor" aria-hidden="true" id="code-lab3-01-code-display-schema"> </a><code>✅.lab3-01</code>- Display schema</h4><p>You will notice that the restaurant reviews are written in <em>two</em> tables:</p><ul><li>one will simply contain the latest average score for each restaurant</li></ul><pre lang="bash"><code>set -asource .envset +asource /home/gitpod/.astra/cli/astra-init.shastra db cqlsh workshops -e &quot;describe table trollsquad.restaurants_by_id;&quot;</code></pre><blockquote><p>🖥️ <code>lab3-01 output (1)</code></p><pre lang="sql"><code>[ INFO ] - Cqlsh has been installedCqlsh is starting please wait for connection establishment...CREATE TABLE trollsquad.restaurants_by_id (    id text PRIMARY KEY,    average float,    hits int,    name text,    num_outliers int)</code></pre></blockquote><blockquote><p><strong>Note</strong>:<em>Sometimes you can hit a timeout error, it that is the case reexcute the same command.</em></p></blockquote><ul><li>the other is structured to offer historical data for e.g. a plotting client application (there is some built-in eviction of old results to avoid unbound growth of the table).</li></ul><pre lang="bash"><code>source /home/gitpod/.astra/cli/astra-init.shastra db cqlsh workshops -e &quot;describe table trollsquad.restaurants_by_id_time;&quot;</code></pre><blockquote><p>🖥️ <code>lab3-01 output (2)</code></p><pre lang="sql"><code>CREATE TABLE trollsquad.restaurants_by_id_time (    id text,    time timestamp,    average float,    name text,    PRIMARY KEY (id, time)) WITH CLUSTERING ORDER BY (time ASC)</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-02-code-what-restaurants-can-be-queried"> </a><code>✅.lab3-02</code>- What restaurants can be queried?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.known_ids_per_type where id_type='restaurant'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-02 output</code></p><pre lang="sql"><code> id_type    | ids------------+-------------------------------- restaurant | {'gold_f', 'pizzas', 'vegg00'}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-03-code-what-reviewers-can-be-queried"> </a><code>✅.lab3-03</code>- What reviewers can be queried?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.known_ids_per_type where id_type='reviewer'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-03 output</code></p><pre lang="sql"><code> id_type    | ids------------+-------------------------------- reviewer | {'anne', 'botz', 'geri', 'john', 'rita'}</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-04-code-what-s-the-current-status-of-a-restaurant"> </a><code>✅.lab3-04</code>- What's the current status of a restaurant?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.restaurants_by_id where id='vegg00'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-04 output</code></p><pre lang="sql"><code>id     | average | hits | name           | num_outliers--------+---------+------+----------------+-------------- vegg00 | 1.93489 |   57 | VeggieParadise |            0</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-05-code-what-s-the-current-status-of-a-reviewer"> </a><code>✅.lab3-05</code>- What's the current status of a reviewer?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.reviewers_by_id where id='geri'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-05 output</code></p><pre lang="sql"><code> id   | hits | num_outliers | target_map                  | trollings------+------+--------------+-----------------------------+-----------geri |   83 |            0 | {'gold_f': 16, 'vegg00': 4} |        63</code></pre></blockquote><h4><a class="anchor" aria-hidden="true" id="code-lab3-06-code-what-is-the-timeline-of-reviews-for-a-restaurant"> </a><code>✅.lab3-06</code>- What is the timeline of reviews for a restaurant?</h4><pre lang="bash"><code>astra db cqlsh workshops \   -e &quot;select * from trollsquad.restaurants_by_id_time where id='gold_f'&quot;</code></pre><blockquote><p>🖥️ <code>lab3-05 output</code></p><pre lang="sql"><code>id     | time                            | average | name--------+---------------------------------+---------+------------- gold_f | 2022-09-13 00:48:51.481000+0000 | 5.14027 | Golden Fork gold_f | 2022-09-13 00:48:52.782000+0000 | 4.02716 | Golden Fork gold_f | 2022-09-13 00:48:59.465000+0000 |  2.9716 | Golden Fork gold_f | 2022-09-13 00:49:01.645000+0000 | 4.91724 | Golden Fork gold_f | 2022-09-13 00:49:03.377000+0000 | 4.09476 | Golden Fork gold_f | 2022-09-13 00:49:05.156000+0000 | 3.31554 | Golden Fork gold_f | 2022-09-13 00:49:06.902000+0000 | 4.79082 | Golden Fork gold_f | 2022-09-13 00:49:08.588000+0000 | 3.13101 | Golden Fork gold_f | 2022-09-13 00:49:10.141000+0000 | 4.96983 | Golden Fork gold_f | 2022-09-13 00:49:12.284000+0000 | 4.87864 | Golden Fork gold_f | 2022-09-13 00:49:13.722000+0000 | 4.18713 | Golden Fork gold_f | 2022-09-13 00:49:15.501000+0000 |  2.9564 | Golden Fork</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="lab4-pulsar-i-o"> </a>LAB4 - Pulsar I/O</h2><p>We used a standalone analyzer to create the tables and populate values. What if, each time a data is inserted in a topic it is also copied in the db.</p><h4><a class="anchor" aria-hidden="true" id="code-lab4-01-code-analyzing-message-syntax-in-code-rr-restaurant-anomalies-code"> </a><code>✅.lab4-01</code>- Analyzing message syntax in <code>rr-restaurant-anomalies</code></h4><ul><li>Start Pulsar-shell again</li></ul><pre lang="bash"><code>astra streaming pulsar-shell ${TENANT}</code></pre><ul><li>Consume a couple of messages in <code>rr-restaurant-anomalies</code> (the analyzer should be running)</li></ul><pre lang="bash"><code>client consume persistent://${TENANT}/default/rr-restaurant-anomalies -s log -n 5</code></pre><ul><li>Looking at message structure, the output look like</li></ul><pre lang="bashing"><code>[...]key:[null], properties:[], content:{&quot;user_id&quot;: &quot;botz&quot;, &quot;r_score&quot;: 6.4, &quot;tgt_name&quot;: &quot;Pizza Smile&quot;, &quot;tgt_id&quot;: &quot;pizzas&quot;, &quot;r_text&quot;: &quot;eating is for ordinary is&quot;, &quot;idx&quot;: 17261, &quot;detected_by&quot;: &quot;review_analyzer.py&quot;}----- got message -----[...]</code></pre><ul><li>Extracting one message and formatting as <code>JSON</code>:</li></ul><pre lang="json"><code>{   &quot;user_id&quot;: &quot;geri&quot;,   &quot;r_score&quot;: 5.7,   &quot;tgt_name&quot;: &quot;Golden Fork&quot;,   &quot;tgt_id&quot;: &quot;gold_f&quot;,   &quot;r_text&quot;: &quot;dish the the is dish with we&quot;,   &quot;idx&quot;: 17845,    &quot;detected_by&quot;: &quot;review_analyzer.py&quot;}</code></pre><p>Let us do a couple of assumptions:</p><ul><li>idx ensures unicity of a record</li><li>we want to search by user</li></ul><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS trollsquad.msg_rr_restaurant_anomalies (     user_id  text,     idx      int,     r_score  double,     tgt_name text,     tgt_id   text,     r_text   text,     detected_by text,     PRIMARY KEY (user_id, idx)) WITH CLUSTERING ORDER BY (idx ASC);</code></pre><ul><li>Exit the <code>pulsar-shell</code></li></ul><pre lang="bash"><code>exit</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab4-02-code-create-the-associated-table"> </a><code>✅.lab4-02</code>- Create the associated Table</h4><ul><li>Create the table through CQL</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;CREATE TABLE IF NOT EXISTS trollsquad.msg_rr_restaurant_anomalies ( \      user_id  text, \      idx      int, \      r_score  double,       tgt_name text,\      tgt_id   text,\      r_text   text,\      detected_by text,\      PRIMARY KEY (user_id, idx)\  ) WITH CLUSTERING ORDER BY (idx ASC);&quot;</code></pre><ul><li>Check table now exist</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;describe table trollsquad.msg_rr_restaurant_anomalies;&quot;</code></pre><ul><li>Check content of the table</li></ul><pre lang="bash"><code>astra db cqlsh workshops -e &quot;select * FROM trollsquad.msg_rr_restaurant_anomalies LIMIT 10;&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="code-lab4-03-code-create-a-sink-with-the-user-interface"> </a><code>✅.lab4-03</code>- Create a Sink with the user interface</h4><blockquote><p><strong>Note</strong>:<a href="https://docs.datastax.com/en/astra-streaming/docs/astream-astradb-sink.html">Reference Documentation</a></p></blockquote><ul><li>In the dashboard of your tenant, locate the tab <code>Sinks</code> and select button <code>[Create Sink]</code>.</li></ul><p><img src="images/create-sink-01.png" alt="" /></p><ul><li>Enter General attributes (part 1)</li></ul><table><thead><tr><th>Attribute</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>Namespace</td><td><code>default</code></td><td>The namespace we work with from the beginning</td></tr><tr><td>Sink Type</td><td><code>Astra DB</code></td><td>You can define external systems but here we stay in Astra</td></tr><tr><td>Name</td><td><code>sink-anomalies</code></td><td>Pick anything unique, here reminding the source topic</td></tr><tr><td>Topic</td><td><code>rr-restaurant-anomalies</code></td><td>The one we decided to save</td></tr></tbody></table><p><img src="images/create-sink-02.png" alt="" /></p><ul><li>Get your token value. You need to remind the token we used today, the first entry your provided:</li></ul><pre lang="bash"><code>astra config get default --key ASTRA_DB_APPLICATION_TOKEN</code></pre><ul><li>Enter Database attributes (part 2)</li></ul><table><thead><tr><th>Attribute</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>Database</td><td><code>workshops</code></td><td>db created it in the beginning</td></tr><tr><td>Keyspace</td><td><code>trollsquad</code></td><td>keyspace we created in the beginning</td></tr><tr><td>TableName</td><td><code>msg_rr_restaurant_anomalies</code></td><td>Table we created before</td></tr><tr><td>Token</td><td><code>&lt;your_token&gt;</code></td><td>Do not copy-paste the value but use YOUR token.</td></tr></tbody></table><p>And for Mapping. It is a mapping 1 to 1 from message attributes to db columns.</p><pre lang="csv"><code>user_id=value.user_id,idx=value.idx,r_score=value.r_score,tgt_name=value.tgt_name,tgt_id=value.tgt_id,r_text=value.r_text,detected_by=value.detected_by</code></pre><p><img src="images/create-sink-03.png" alt="" /></p><ul><li>These were the last entries you can now click the <code>[Create]</code> button</li></ul><p><img src="images/create-sink-04.png" alt="" /></p><ul><li>The sink will take about a minute to initialize and start:</li></ul><p><img src="images/create-sink-05.png" alt="" /></p><ul><li>When it is ready the status will switch to <code>running</code></li></ul><p><img src="images/create-sink-06.png" alt="" /></p><ul><li>You can get the details by clicking on the sink name in the table</li></ul><p><img src="images/create-sink-07.png" alt="" /></p><h4><a class="anchor" aria-hidden="true" id="code-lab4-04-code-query-the-destination-table"> </a><code>✅.lab4-04</code>- Query the destination table</h4><pre lang="bash"><code>astra db cqlsh workshops -e &quot;select * FROM trollsquad.msg_rr_restaurant_anomalies LIMIT 10;&quot;</code></pre><blockquote><p>🖥️ <code>lab4-04 output</code></p><p><code>YOUR_HOMEWORK</code></p></blockquote><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><p>To submit the <strong>homework</strong>, please take a screenshot in gitpod with the result of lab <code>✅.lab4-04</code>, you will have different values than the ones showed during the live.</p><p>Don't forget to <a href="https://dtsx.io/homework-realtime-data-pipelines">submit your homework</a> and be awarded a nice verified badge!</p><h2><a class="anchor" aria-hidden="true" id="what-s-next"> </a>What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Pulsar and Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.</p><p>There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p>Don't forget to <a href="https://dtsx.io/homework-realtime-data-pipelines">submit your homework</a> and be awarded a nice verified badge!</p><img src="images/badge.png?raw=true" width="350" /><p><strong>... and see you at our next workshop!</strong></p>
SUCCESS SAVING README for datastaxdevs-workshop-realtime-data-pipelines
Getting astra.json for datastaxdevs/workshop-betterreads at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="workshops-better-reads"> </a>Workshops 📘 Better Reads 📘 !</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-acknowledgements"> </a>2. Acknowledgements</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-frequently-asked-questions"> </a>3. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-materials-for-the-session"> </a>4. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-astra-db-instance"> </a>5. Create Astra DB Instance</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-create-astra-token"> </a>6. Create Astra Token</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-start-and-setup-gitpod"> </a>7. Start and setup Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-work-with-cqlsh"> </a>8. Work with CqlSh</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8a-open-new-terminal"> </a>✅ 8a. Open new Terminal</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="8b-enter-the-interactive-cqlsh-em-it-is-a-script-we-have-created-for-you-em"> </a>✅ 8b. Enter the interactive Cqlsh <em>(it is a script we have created for you)</em></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-load-data-with-dsbulk"> </a>9. Load Data with DSBulk</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-use-application-as-anonymous"> </a>10. Use Application as anonymous</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="11-setup-authentication"> </a>11. Setup Authentication</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="11a-setup-google-oauth2-optional"> </a>✅ 11a. Setup Google OAuth2 (optional)</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="11b-setup-up-github"> </a>✅ 11b. Setup up Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="12-authenticate-and-use-application"> </a>12. Authenticate and use application</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="12a-authenticate-with-github"> </a>✅ 12a. Authenticate with Github</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="12b-authenticate-with-google"> </a>✅ 12b. Authenticate with Google.</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2>
HTML FOR datastaxdevs-workshop-betterreads<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="workshops-better-reads"> </a>Workshops 📘 Better Reads 📘 !</h1><img src="img/badge.png?raw=true" width="150" align="right" /><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-goodreads-clone"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><blockquote><p>⚠️ Difficulty: <strong><code>Intermediate</code>, we expect you to already know Java and Spring.</strong></p></blockquote><p>Learn how to build an app end-to-end application with Spring ecosystem <em>(boot, mvc, security, data, test, thymeleaf)</em> and Apache Cassandra™.</p><p><a href="#-start-hands-on">🏁 Access HANDS-ON</a></p><h2><a class="anchor" aria-hidden="true" id="table-of-content"> </a>📋 Table of content</h2><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/screenshot.png?raw=true" align="right" width="400px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-acknowledgements">Acknowledgements</a></li><li><a href="#3-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#4-materials-for-the-session">Materials for the Session</a></li><li><a href="#5-create-astra-db-instance">Create your Database</a></li><li><a href="#6-create-astra-token">Create your Token</a></li><li><a href="#7-start-and-setup-gitpod">Start and setup Gitpod</a></li><li><a href="#8-work-with-cqlsh">Work with CqlSh</a></li><li><a href="#9-load-data-with-dsbulk">Load Data with DSBulk</a></li><li><a href="#10-use-application-as-anonymous">Use Application as anonymous</a></li><li><a href="#11-setup-authentication">Setup Authentication</a></li><li><a href="#12-authenticate-and-use-application">Authenticate and use application</a></li><li><a href="#13-homeworks">Homeworks</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><ul><li>Discover how to use the following technologies:<ul><li><strong>Spring Data:</strong> the Object Mapping layer of Spring</li><li><strong>Spring Data Cassandra:</strong> what traps to avoid</li><li><strong>Spring Security:</strong> how to handle authentication with OAuth2</li><li><strong>Spring MVC:</strong> how to expose REST API and controllers</li><li><strong>Spring Webflux:</strong> how to use the new <code>WebClient</code></li><li><strong>Thymeleaf:</strong> how to build a user interface with Spring</li><li><strong>Spring Test:</strong> How to run tests</li><li><strong>Astra DB</strong> (a Database-as-a-service built on Apache Cassandra)</li></ul></li><li>Han fun with an interactive session</li></ul><h2><a class="anchor" aria-hidden="true" id="2-acknowledgements"> </a>2. Acknowledgements</h2><p>This application has been built based on the work of <a href="https://www.youtube.com/channel/UCYt1sfh5464XaDBH0oH_o7Q"><strong>Java Brains</strong></a>, a famous youtuber <em>(500k+ subscribers)</em>. On his channel you can find the full <a href="https://www.youtube.com/watch?v=LxVGFBRpEFM"><em>Code with me Series</em></a>, 16 episodes for building this application step-by-step. The link to each episode is provided at the end of this readme.</p><h2><a class="anchor" aria-hidden="true" id="3-frequently-asked-questions"> </a>3. Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine, If you do so, you will need the following<ol><li><b>git</b> installed on your local system<li><b>JDK 8+</b> installed on your local system<li><b>Maven 3.6+</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>We can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need an enough *real estate* on screen, we will ask you to open a few windows and it does not file mobiles (tablets should be OK)<li>You will need a GitHub account eventually a google account for the Google Authentication (optional)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As Intermediate level we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open api badge)*</details><p/><blockquote><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="4-materials-for-the-session"> </a>4. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="5-create-astra-db-instance"> </a>5. Create Astra DB Instance</h2><blockquote><p>Leveraging <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-AstraDB-Instance">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p></blockquote><p><a href="https://astra.dev/2-16"><img src="img/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>better_reads</code></td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4><ul><li>If you already have a DB, you may need to resume it using the <a href="https://github.com/datastaxdevs/awesome-astra/wiki/How-to-resume-a-database">Resuming Guide</a>.</li><li>If yout already have an active DB, simply add a keyspace <code>better_reads</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</li></ul><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-create-astra-token"> </a>6. Create Astra Token</h2><blockquote><p>Leveraging <a href="https://github.com/datastaxdevs/awesome-astra/wiki/Create-an-Astra-Token">Token creation guide</a> create a token. (<code>AstraCS:blablablabla</code>)</p></blockquote><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Role</strong></td><td><code>Database Administrator</code></td></tr></tbody></table><h4><a class="anchor" aria-hidden="true" id="notes"> </a>ℹ️ Notes:</h4><ul><li>If you already have a token from previous session you can use it. A token is not related to a particular DB by default but to organization.</li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="7-start-and-setup-gitpod"> </a>7. Start and setup Gitpod</h2><ul><li>Start gitpod with the button below <em>(right-click open in new tab)</em></li></ul><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-betterreads"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><ul><li>Wait for the environment to initialize until you are asked to provide your token:</li></ul><pre><code>✔ Please paste the Database Admin Token here</code></pre><ul><li>Enter your token <code>AstraCS;blahblahblah</code> and press enter. Wait for all the operations to complete.</li></ul><pre lang="bash"><code>[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  18.676 s[INFO] Finished at: 2022-02-14T13:00:07Z[INFO] ------------------------------------------------------------------------</code></pre><h2><a class="anchor" aria-hidden="true" id="8-work-with-cqlsh"> </a>8. Work with CqlSh</h2><h4><a class="anchor" aria-hidden="true" id="8a-open-new-terminal"> </a>✅ 8a. Open new Terminal</h4><p>It would be handy to have access to this CQLSH while doing the exercises and check the content of the database.</p><ul><li>Open a new terminal with the icon looking like a small table on top right hand corner of the Terminal Panel in gitpod (as shown below)</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/new-terminal1.png?raw=true" alt="new_terminal2" /></p><p>... zooming in:</p><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/new-terminal2.png?raw=true" alt="new_terminal" /></p><h4><a class="anchor" aria-hidden="true" id="8b-enter-the-interactive-cqlsh-em-it-is-a-script-we-have-created-for-you-em"> </a>✅ 8b. Enter the interactive Cqlsh <em>(it is a script we have created for you)</em></h4><pre><code>/workspace/workshop-betterreads/cqlsh</code></pre><ul><li>It should look like</li></ul><pre><code>Connected to cndb at 127.0.0.1:9042.[cqlsh 6.8.0 | Cassandra 4.0.0.6816 | CQL spec 3.4.5 | Native protocol v4]Use HELP for help.token@cqlsh&gt;</code></pre><ul><li>List Keyspaces with</li></ul><pre lang="sql"><code>describe keyspaces;</code></pre><ul><li>Check that our keyspace <code>better_reads</code> is there</li></ul><pre><code>token@cqlsh&gt; describe keyspaces;system_virtual_schema  system_auth   data_endpoint_auth  system_tracestemporal_visibility    system_views  better_reads        ecommerce    netflix                system        spring_petclinic    todos        system_schema          datastax_sla  native_java         feeds_reader token@cqlsh&gt; </code></pre><ul><li>List <code>better_reads</code> tables</li></ul><pre><code>use better_reads;describe tables;</code></pre><ul><li>Check that expected tables are there</li></ul><pre lang="bash"><code>token@cqlsh:better_reads&gt; describe tables;author_by_id  books_by_user  book_by_id  book_by_user_and_bookid</code></pre><ul><li>Let this panel opened but for following command we will be back to the termimal</li><li></li></ul><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="9-load-data-with-dsbulk"> </a>9. Load Data with DSBulk</h2><ul><li>Check you have the dataset ready. In the <code>BASH</code> terminal <strong>(⚠️ = NOT the cqlsh)</strong>. You should see the cql file <code>book_by_id_0.csv</code>.</li></ul><pre><code>ls -l /workspace/workshop-betterreads/dataset/</code></pre><ul><li>Check how many rows. It should have more than 250k.</li></ul><pre><code>wc -l /workspace/workshop-betterreads/dataset/book_by_id_0.csv</code></pre><ul><li>Check that Datastax bulk loader is properly installed <em>(It has been installed for you at startup)</em></li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk --version</code></pre><ul><li>Import the DataSet with the following command</li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk load \   -c csv \   -k better_reads \   -t book_by_id \   -u token \   -p ${ASTRA_DB_ADMIN_TOKEN} \   -maxErrors -1 \   -b /home/gitpod/.astra/scb_${ASTRA_DB_ID}_${ASTRA_DB_REGION}.zip \   -url /workspace/workshop-betterreads/dataset/book_by_id_0.csv</code></pre><ul><li>The batch is running and should be able to see the throughput at ~3k records per second.</li></ul><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx2576mUsername and password provided but auth provider not specified, inferring PlainTextAuthProviderA cloud secure connect bundle was provided: ignoring all explicit contact points.A cloud secure connect bundle was provided and selected operation performs writes: changing default consistency level to LOCAL_QUORUM.Operation directory: /workspace/workshop-betterreads/logs/LOAD_20220214-132501-509314 total | failed | rows/s | p50ms | p99ms | p999ms | batches17,152 |      0 |  3,074 | 22.68 | 58.98 | 103.81 |    1.00</code></pre><ul><li>The operation should take about 1 minute to complete. The file can have some errors like invalid title with special characters. IT IS NOT A PROBLEM the dataset is not perfect we will have some failed rows.</li></ul><pre><code>  total | failed | rows/s | p50ms | p99ms | p999ms | batches250,000 |    183 |  3,684 | 21.44 | 56.10 |  66.32 |    1.00Operation LOAD_20220214-185449-001328 completed with 183 errors in 1 minute and 7 seconds.</code></pre><ul><li><p>In the same way - you can also now import <code>book_by_id_1.csv</code>.</p></li><li><p>Count Records in the table <code>book_by_id</code></p></li></ul><pre><code>/workspace/workshop-betterreads/tools/dsbulk-1.8.0/bin/dsbulk count \   -k better_reads \   -t book_by_id \   -u token \   -p ${ASTRA_DB_ADMIN_TOKEN} \   -b /home/gitpod/.astra/scb_${ASTRA_DB_ID}_${ASTRA_DB_REGION}.zip</code></pre><ul><li>Expected output (about 500.000k), during the live speaker will have more because he imported way more files.</li></ul><pre><code>Picked up JAVA_TOOL_OPTIONS:  -Xmx2576mUsername and password provided but auth provider not specified, inferring PlainTextAuthProviderA cloud secure connect bundle was provided: ignoring all explicit contact points.Operation directory: /workspace/workshop-betterreads/logs/COUNT_20220214-190203-775866  total | failed | rows/s |  p50ms |    p99ms |   p999ms499,679 |      0 | 57,806 | 210.15 | 6,207.57 | 6,207.57Operation COUNT_20220214-190203-775866 completed successfully in 8 seconds.499679</code></pre><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="10-use-application-as-anonymous"> </a>10. Use Application as anonymous</h2><ul><li>It would be handy to know the URL of the application</li></ul><pre><code>gp url 8080</code></pre><ul><li>Start the app</li></ul><pre><code>cd /workspace/workshop-betterreads/better-reads-webappmvn spring-boot:run</code></pre><ul><li>Output</li></ul><pre><code> ________          __                   __                  ________                     .__                                      \______ \ _____ _/  |______    _______/  |______  ___  ___ \______ \   _______  __ ____ |  |   ____ ______   ___________  ______  |    |  \\__  \\   __\__  \  /  ___/\   __\__  \ \  \/  /  |    |  \_/ __ \  \/ // __ \|  |  /  _ \\____ \_/ __ \_  __ \/  ___/  |    `   \/ __ \|  |  / __ \_\___ \  |  |  / __ \_&gt;    &lt;   |    `   \  ___/\   /\  ___/|  |_(  &lt;_&gt; )  |_&gt; &gt;  ___/|  | \/\___ \  /_______  (____  /__| (____  /____  &gt; |__| (____  /__/\_ \ /_______  /\___  &gt;\_/  \___  &gt;____/\____/|   __/ \___  &gt;__|  /____  &gt;         \/     \/          \/     \/            \/      \/         \/     \/          \/            |__|        \/           \/  BetterReads with Spring Boot, String Data, Spring NVC, Spring security An application by JabaBrains. The application will start at http://localhost:808013:37:20.276 INFO  com.datastax.astra.sdk.AstraClient              : Setup of AstraClient from application.yml13:37:20.280 INFO  com.datastax.astra.sdk.config.AstraClientConfig : Initializing [AstraClient]13:37:20.459 INFO  com.datastax.astra.sdk.AstraClient              : + API(s) Devops     [ENABLED]13:37:20.459 INFO  com.datastax.astra.sdk.AstraClient              : + Db: id [3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23] and region [eu-west-1]13:37:20.460 INFO  com.datastax.astra.sdk.AstraClient              : + Downloading bundles in: [/home/gitpod/.astra]13:37:21.124 INFO  com.datastax.astra.sdk.databases.DatabaseClient : + SecureBundle found : scb_3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23_eu-west-1.zip13:37:21.124 INFO  com.datastax.astra.sdk.databases.DatabaseClient : + SecureBundle found : scb_3ed83de7-d97f-4fb6-bf9f-82e9f7eafa23_eu-central-1.zip13:37:23.041 INFO  com.datastax.astra.sdk.AstraClient              : [AstraClient] has been initialized.</code></pre><ul><li>Open a new terminal (yes a 3rd one again, 2 previous are busy, same icon) and enter the command.</li></ul><pre><code>gp preview $(gp url 8080)</code></pre><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app1.png?raw=true" alt="new_terminal" /></p><ul><li>In the search item look for <code>Glimpses of ancient Sowams</code> you can search to whatever you want it will request open library ut during this workshop you only imported a subset of books, let us pick one you imported.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app2.png?raw=true" alt="new_terminal" /></p><ul><li>Select the first item, if you select the second you will hit the page book not found as this book is not in the DB.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/app3.png?raw=true" alt="new_terminal" /></p><p>This is only what we can do at this point. To mark the book as read we will need to authenticate with <code>Google</code> or <code>Github</code>.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="11-setup-authentication"> </a>11. Setup Authentication</h2><h3><a class="anchor" aria-hidden="true" id="11a-setup-google-oauth2-optional"> </a>✅ 11a. Setup Google OAuth2 (optional)</h3><ul><li><p>Connect to <a href="https://console.cloud.google.com">Google Cloud Platform</a></p></li><li><p>Create a new project if needed, on the screens i put <code>BetterReadsDemoApps</code> and click <code>[CREATE]]</code></p></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp1.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>[ENABLE APIS AND SERVICES]</code> in menu</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp2.png?raw=true" alt="new_terminal" /></p><ul><li>Search for Gmail and Google Analytics Apis and add them to your project.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp3.png?raw=true" alt="new_terminal" /></p><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp4.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>[OAuth consent screen]</code> in the menu on the left. Provide your application name, a support email and the application logo.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp5.png?raw=true" alt="new_terminal" /></p><ul><li>Check <code>External</code> (or internal as you prefer to limit scope).</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp6.png?raw=true" alt="new_terminal" /></p><ul><li>On menu in the left select <em>Credentials</em> and use the button on top <code>[CREATE CREDENTIALS]</code>/ OAuth ClientID.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp7.png?raw=true" alt="new_terminal" /></p><ul><li>Select <code>Web Application</code> and provide it a name</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp8.png?raw=true" alt="new_terminal" /></p><ul><li>Add the URL home page. It will the result of <code>gp url 8080</code> command on gitpod or <em><a href="http://localhost:8080">http://localhost:8080</a></em> if you work locally.</li></ul><p><strong>The screenshots below show <code>Google</code> authentication when the app is running on <code>localhost</code>. Carefully adjust the URLs accordingly to the Gitpod URL when application is running on Gitpod.</strong></p><ul><li>Add the redirect <em><a href="http://localhost:8080/login/oauth2/code/google">http://localhost:8080/login/oauth2/code/google</a></em> if you work locally or the result of <code>echo $(gp url 8080)/login/oauth2/code/google</code> on gitpod.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp9.png?raw=true" alt="new_terminal" /></p><ul><li>A new page will open with your <code>clientId</code> and <code>client Secret</code>. Make sure you copy them locallym you will need to setup your application with it.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp10.png?raw=true" alt="new_terminal" /></p><pre><code>You are now doomed we will now mine cryptos with your google account.Just kidding ^_^</code></pre><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/gcp11.png?raw=true" alt="new_terminal" /></p><ul><li>Open file <code>src/main/resources/application.yml</code> in your project</li></ul><pre><code>gp open /workspace/workshop-betterreads/better-reads-webapp/src/main/resources/application.yml</code></pre><ul><li>Changes keys <code>client-id</code> and <code>client-secret</code> with your values for the provider <code>Google</code>.</li></ul><pre lang="yaml"><code>  security:    oauth2:      client:        registration:          google:            client-id: change            client-secret: change</code></pre><h3><a class="anchor" aria-hidden="true" id="11b-setup-up-github"> </a>✅ 11b. Setup up Github</h3><p>As each attendee has a different URL in gitpod, you will have to create your own github `OAuth Apps - Let's do this together.</p><ul><li>For github settings we will have to enter a callback URL. To know which one enter use the following command</li></ul><pre><code>clearecho $(gp url 8080)/login/oauth2/code/github</code></pre><ul><li>Login to your github account and go to <code>Organizations</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps1.png?raw=true" alt="new_terminal" /></p><ul><li>There scroll down to locate the last item of the menu <code>Developer Settings</code> <em>(hopefully you have not as many organizations as me)</em>, There pick <code>OAuth Apps</code> (we are using OAuth)</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps2.png?raw=true" alt="new_terminal" /></p><ul><li>Click button <code>[New OAuth Apps]</code> on the page</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps3.png?raw=true" alt="new_terminal" /></p><ul><li>You will be asked to login again for security reasons, then fill the form to register a new Github App. Thre Register your application</li></ul><table><thead><tr><th>Name</th><th>Value</th></tr></thead><tbody><tr><td><code>Application name</code></td><td>The application name shown to user</td></tr><tr><td><code>Homepage URL</code></td><td>Can be anything, just the app (gp url 8080)</td></tr><tr><td><code>Authorization Callback URL</code></td><td>Call back url the one listed above <code>${homepage}/login/oauth2/code/github</code></td></tr></tbody></table><ul><li>Click <code>[Register Application]</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps4.png?raw=true" alt="new_terminal" /></p><ul><li>The application is created. You got your clientId. You will have to generate a clientSecret now. Once you get both save them on a text file in your machine we will need them later</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps5.png?raw=true" alt="new_terminal" /></p><ul><li>When everything is set you can upload am image for your application and save the change with <code>[Update Application]</code>.</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps6.png?raw=true" alt="new_terminal" /></p><ul><li><p>Open <code>application.yml</code></p></li><li><p>Open file <code>src/main/resources/application.yml</code> in your project</p></li></ul><pre><code>gp open /workspace/workshop-betterreads/better-reads-webapp/src/main/resources/application.yml</code></pre><ul><li>Changes keys <code>client-id</code> and <code>client-secret</code> with your values for the provider <code>Github</code>.</li></ul><pre lang="yaml"><code>  security:    oauth2:      client:        registration:          github:            client-id: change            client-secret: change</code></pre><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="12-authenticate-and-use-application"> </a>12. Authenticate and use application</h2><ul><li>After setting up the connection you can now start the application again :</li></ul><pre><code>cd /workspace/workshop-betterreads/better-reads-webappmvn spring-boot:run</code></pre><h3><a class="anchor" aria-hidden="true" id="12a-authenticate-with-github"> </a>✅ 12a. Authenticate with Github</h3><ul><li>On homepage click on <code>Authenticate with Github</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps7.png?raw=true" alt="new_terminal" /></p><ul><li>Eventually you get the SSO screen for you organization</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps8.png?raw=true" alt="new_terminal" /></p><ul><li>Then you authorize the application again</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps9.png?raw=true" alt="new_terminal" /></p><pre><code>HAHAHA EVIL LAUGH YOU ARE DOOMED AGAIN WE ALSO HAVE YOUR GITHUB ACCOUNT NOWWE WILL FEED OUR TROLLS AND CODEX.AI WITH IT.</code></pre><ul><li>More seriously, Your are in !</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/githubapps10.png?raw=true" alt="new_terminal" /></p><h3><a class="anchor" aria-hidden="true" id="12b-authenticate-with-google"> </a>✅ 12b. Authenticate with Google.</h3><ul><li>Use the button <code>[Login via Google]</code></li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google1.png?raw=true" alt="new_terminal" /></p><ul><li>Validate with the familiar Google Screen</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google2.png?raw=true" alt="new_terminal" /></p><ul><li>You are in !</li></ul><p><img src="https://github.com/datastaxdevs/workshop-betterreads/blob/master/img/google3.png?raw=true" alt="new_terminal" /></p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="13-homeworks"> </a>13. Homeworks</h2><img src="img/badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your verified skill badge! Finish and submit your homework!</p><ol><li><p>Complete the practice steps as described below until you have your own app running in Gitpod. (up to step 11)</p></li><li><p>Answer the technical questions in the form (We promise, it is NOT difficult if you follow the workshop).</p></li><li><p>Take a screenshot of you authenticated in the app with a few books</p></li><li><p>Submit your homework <a href="https://dtsx.io/homework-betterreads">here</a></p></li><li><p><em>(totally optional)</em> Watch the full course on Javabrains.io</p></li></ol><ul><li><a href="https://www.youtube.com/watch?v=LxVGFBRpEFM">01 - Introduction to the series</a></li><li><a href="https://www.youtube.com/watch?v=HAiCwq4jfn8">02 - About the app</a></li><li><a href="https://www.youtube.com/watch?v=SnQXdvFkq4U">03 - System Design</a></li><li><a href="https://www.youtube.com/watch?v=106jIBE9XSc">04 - Cassandra Schema</a></li><li><a href="https://www.youtube.com/watch?v=waLSHx-VN08">05 - Setting up hosted</a></li><li><a href="https://www.youtube.com/watch?v=d28t_QySyzs">06 - Creating the Data Loader</a></li><li><a href="https://www.youtube.com/watch?v=7I37-awpaGg">07 - Connecting Spring Boot app to DataStax Astra</a></li><li><a href="https://www.youtube.com/watch?v=uezZIPK8kPk">08 - Using Repository pattern with Spring Data</a></li><li><a href="https://www.youtube.com/watch?v=24NrLl8EhDM">09 - Saving all the authors in the world to Cassandra</a></li><li><a href="https://www.youtube.com/watch?v=Fm-XrOTgOto">10 - Setting up books by ID </a></li><li><a href="https://www.youtube.com/watch?v=nwyf_4aSkqM">11 - Starting with Spring boot and security</a></li><li><a href="https://www.youtube.com/watch?v=-IuafzgS3fU">12 - Implementing the Book view flow</a></li><li><a href="https://www.youtube.com/watch?v=6K0im9vcoCk">13 - Building book search feature</a></li><li><a href="https://www.youtube.com/watch?v=NEZGCpN1J6M">14 - Tracking user interactions with books</a></li><li><a href="https://www.youtube.com/watch?v=ZIGImCqRr1I">15 - Building the My Books feature</a></li><li><a href="https://www.youtube.com/watch?v=hJLtsn2aSr4">16 - Wrapping Up</a></li></ul><hr />
SUCCESS SAVING README for datastaxdevs-workshop-betterreads
Getting astra.json for datastaxdevs/workshop-ai-as-api at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="during-this-hands-on-workshop-you-will"> </a>During this hands-on workshop, you will:</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="credits-and-acknowledgements"> </a>Credits and Acknowledgements</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="resources-and-homework"> </a>Resources and Homework</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="create-and-setup-astra-db"> </a>Create and setup Astra DB</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="load-the-project-into-gitpod"> </a>Load the project into Gitpod</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-the-starting-dataset"> </a>Inspect the starting dataset</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="prepare-the-dataset-for-training"> </a>Prepare the dataset for training</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="the-training-process"> </a>The training process</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="test-the-trained-model"> </a>Test the trained model</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="expose-as-api"> </a>Expose as API</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-dot-env-file"> </a>Configure dot-env file</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="baby-steps-a-minimal-api"> </a>Baby steps: a minimal API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="query-the-minimal-api"> </a>Query the minimal API</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="inspect-the-minimal-api-code"> </a>Inspect the minimal API code</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="inspect-the-full-api"> </a>Inspect the full API</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-and-caching"> </a>Database and Caching</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="documentation-and-typed-response"> </a>Documentation and typed response</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="call-logging-and-streamingresponse"> </a>Call logging and StreamingResponse</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="support-for-a-get-endpoint"> </a>Support for a GET endpoint</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="launch-the-full-api"> </a>Launch the full API</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="use-the-api"> </a>Use the API</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="open-the-swagger-ui"> </a>Open the Swagger UI</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="fun-with-caching"> </a>Fun with caching</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="call-log"> </a>Call log</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="inspect-the-database"> </a>Inspect the database</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-detailed-instructions"> </a>Homework detailed instructions</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="appendix-i-deploy-behind-a-reverse-proxy-nginx"> </a>Appendix I: deploy behind a reverse proxy (nginx)</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="appendix-ii-model-versioning-with-fastapi"> </a>Appendix II: model versioning with FastAPI</h3>
HTML FOR datastaxdevs-workshop-ai-as-api<h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ai-as-api"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p>Time: <em>50 minutes</em>. Difficulty: <em>Intermediate</em>. <a href="#lets-start">Start Building!</a></p><p>Learn to build your own NLP text classifier and expose it as an API: aninteractive workshop featuring</p><ul><li>AI-based text analysis with Tensorflow/Keras</li><li>Astra DB, a Database-as-a-Service built on Apache Cassandra™</li><li>FastAPI, the high-performance Python framework for creating APIs</li><li>lots of useful Python libraries and packages (<code>pandas</code>, <code>pydantic</code>, <code>dotenv</code>, <code>sklearn</code>, <code>uvicorn</code>, ...)</li></ul><p><img src="images/nlp-classifier-api-cover.png" alt="Workshop cover" /></p><h2><a class="anchor" aria-hidden="true" id="during-this-hands-on-workshop-you-will"> </a>During this hands-on workshop, you will:</h2><ul><li>prepare the labeled dataset for model training;</li><li>train the model to classify any input text;</li><li>export the trained model and test it interactively;</li><li>create your free NoSQL database for data storage;</li><li>set up and start an API exposing the classifier as a reusable class;</li><li>learn how to speed up the API with DB-based caching;</li><li>inspect how a streaming response is handled in the API.</li></ul><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><ol><li><a href="#frequently-asked-questions">FAQ</a></li><li><a href="#credits-and-acknowledgements">Credits/Acknowledgements</a></li><li><a href="#resources-and-homework">Resources &amp; Homework</a></li><li><a href="#create-and-setup-astra-db">Create your Astra DB instance</a></li><li><a href="#load-the-project-into-gitpod">Load the project into Gitpod</a></li><li><a href="#train-the-model">Train the model</a></li><li><a href="#expose-as-api">Expose as API</a></li><li><a href="#use-the-api">Use the API</a></li><li><a href="#homework-detailed-instructions">Homework instructions</a></li></ol><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>Frequently asked questions</h2><ul><li><em>Can I run the workshop on my computer?</em></li></ul><blockquote><p>You don't have to, <strong>you can do everything in the cloud from the comfort of your browser</strong>! But there is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li><code>git</code> installed on your local system;</li><li><a href="https://www.python.org/downloads/">Python v3.6+ installed on your local system</a>.</li></ul><p>In this readme, we try to provide instructions for local development as well - but keep in mind thatthe main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local developmentin order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></blockquote><ul><li><em>What other prerequisites are there?</em></li></ul><blockquote><ul><li>You will need a GitHub account;</li><li>You will also need an Astra account: don't worry, we'll work through that in the following.</li></ul></blockquote><ul><li><em>Do I need to pay for anything for this workshop?</em></li></ul><blockquote><ul><li><strong>No.</strong> All tools and services we provide here are FREE.</li></ul></blockquote><ul><li><em>Will I get a certificate if I attend this workshop?</em></li></ul><blockquote><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice participation certificate a.k.a. badge.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="credits-and-acknowledgements"> </a>Credits and Acknowledgements</h2><img src="images/coding_enterpreneurs.jpg?raw=true" width="100" align="right" /><p>The core of this workshop is an adaptation from the excellent content <a href="https://www.youtube.com/watch?v=56qQNcHJxyQ">&quot;AI as an API,&quot;</a>created by <a href="https://www.youtube.com/channel/UCWEHue8kksIaktO8KTTN_zg">CodingEntrepreneurs</a>.You are very much encouraged to watch it, as it touches on more topicsand includes steps that unavoidably had to be taken out when converting tothis shorter format.</p><p>However, the opposite is also true: the code you'll see here is almost completelyrewritten from scratch, generally using different tools or techniques;the API has a different structure and offers differentendpoints, which better fit the particular pedagogical intent we had in mindand highlight some best practices for using databases such as Cassandra for storage.</p><p>So, all in all, you'd be better off by watching both contents!</p><h2><a class="anchor" aria-hidden="true" id="resources-and-homework"> </a>Resources and Homework</h2><h3><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h3><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="https://www.youtube.com/watch?v=3LQBJP3JL6A">Workshop Video</a></li><li><a href="slides/AI-as-API-Python-FastAPI-text-classifier.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li></ul><h3><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h3><img src="images/ai_as_api_badge.png?raw=true" width="200" align="right" /><p>Don't forget to complete your assignment and get your <strong>verified skill badge</strong>:</p><ol><li>Do all practice steps described below until you can query your API running in Gitpod.</li><li>Now roll up your sleeves and modify the code as follows: add an endpoint that exposes the neural net configuration of the classifier model. <a href="#homework-detailed-instructions"><strong>See below for detailed explanations</strong></a>.</li><li>Take a SCREENSHOT of requests/responses showing the new endpoint at work. <em>Note: you will have to restart the API for the changes to take effect.</em></li><li>Submit your homework <a href="https://dtsx.io/homework-ai-as-api">here</a>.</li></ol><p>That's it, you are done! Expect an email in a few days!</p><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="create-and-setup-astra-db"> </a>Create and setup Astra DB</h2><p>You will now create a database with a keyspace in it (a <em>keyspace</em> can contain <em>tables</em>).The API needs a couple of tables for persistent storage: they will be created programmatically on startupif they don't exist, so there's no need to worry too much about them.</p><p>Besides creating the database, you need to retrieve a &quot;Token&quot;, that is,a set of credentials used later to connect to it in a secure and authenticated way.</p><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, $25.00 USD credit every month, roughly 20M read/write operations and 80GB storage monthly - sufficient to run small production workloads.</em></p><p><img src="images/astranaut.png?raw=true" width="50" /> Start by Ctrl-clicking on the orange button (to open in a new tab)and then follow the instructions below:</p><p><a href="https://astra.dev/yt-11-09"><img src="images/create_astra_db_button.png?raw=true" /></a></p><ul><li>create an Astra DB instance <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/">as explained here</a>, in the GCP cloud provider, with database name = <code>workshops</code> and keyspace = <code>spamclassifier</code>.;</li><li>generate and retrieve a DB Token <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">as explained here</a>. <strong>Important</strong>: use the role &quot;DB Administrator&quot; for the token. Save the token in a secure place for later use. <em>Note: the token auto-generated while creating the database has not enough permissions for our purposes today, you can disregard it.</em></li></ul><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="load-the-project-into-gitpod"> </a>Load the project into Gitpod</h2><p>Gitpod is an IDE in the cloud (modeled after VSCode). It comes with a full&quot;virtual machine&quot; (actually a Kubernetes-managed container), which you willuse as if it were your own computer (e.g. downloading files, executing programsand scripts, training the model and eventually starting the API from it).</p><p>The button below will:</p><ul><li>spawn your own Gitpod container;</li><li>clone this repository in it and open it in the IDE;</li><li>preinstall the required dependencies.</li></ul><p><img src="images/astranaut.png?raw=true" width="50" /> <strong>ctrl-click on the Gitpod button</strong> to make sure you &quot;Open in new tab&quot;(Note: you may have to authenticatethrough Github in the process):</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-ai-as-api"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>In a few minutes, a full IDE will be ready in the browser, with a fileexplorer on the left, a file editor on the top(with this very README open for convenience), and a console (<code>bash</code>) below it.Actually three consoles will be spawned for later convenience, called<code>work-shell</code> (where the main work is done including running the API),<code>curl-shell</code> (to later issue <code>curl</code> commands to the API),and <code>notebook-shell</code> (where Jupyter will keep running).</p><blockquote><p>If you want to work on your laptop, make sure you install all Pythondependencies listed in <code>requirements.txt</code> (doing so in a Python virtualenvironment is <em>strongly suggested</em>) and add the main repo rootto the <code>PYTHONPATH</code>. (You might see &quot;errors&quot; related to mismatching versionsbetween the <code>tensorflow</code> package and others, notably <code>numpy</code>: you shouldbe able to ignore them and just go ahead.)If you are on Python 3.6, you will additionally need toinstall the <code>dataclasses</code> package (i.e. <code>pip install dataclasses</code>).Also, please note that the model training phase may takemuch longer than ten minutes, depending on your processing power.</p></blockquote><details><summary>Show me a map of the Gitpod starting layout</summary><img src="images/gitpod_view.png?raw=true" /><ol><li>File explorer</li><li>Editor</li><li>Panel for console(s)</li><li>Console switcher</li></ol><p>There are many more other features, probably familiar to those who haveexperience with VSCode. Feel free to play around a bit!</p></details><h2><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h2><p>The goal of this phase is to have your text classifier model readyto be used: that means, not only will you train it on a labeled dataset,but also you will take care of exporting it in a format suitablefor later loading by the API.</p><h3><a class="anchor" aria-hidden="true" id="inspect-the-starting-dataset"> </a>Inspect the starting dataset</h3><p>Open the file <code>training/dataset/spam-dataset.csv</code> and have a lookat the lines there. (<em>Tip</em>: you can open a file in Gitpod by locatingit with the &quot;File Explorer&quot; on your left, but if you like using the keyboardyou may simply issue the command <code>gp open training/dataset/spam-dataset.csv</code>from the <code>bash</code> Console at the bottom.)</p><p>This is a CSV file with three columns (separated by commas):</p><ul><li>whether the line is spam or &quot;ham&quot; (i.e. the opposite of spam),</li><li>a short piece of text (a &quot;message&quot;),</li><li>the tag identifying the source of this datapoint (this will be ignored by the scripts).</li></ul><p>The third column betrays the mixed origin of the data: in order tocreate a labeled dataset of around 7.5K messages marked as spam/ham,two different (publicly available) sets have been merged(namely <a href="https://archive.ics.uci.edu/ml/datasets/SMS+Spam+Collection">this one</a>and <a href="https://archive.ics.uci.edu/ml/datasets/YouTube+Spam+Collection">this one</a>,made available by the <a href="https://archive.ics.uci.edu/ml/index.php">UCI Machine Learning Repository</a>).</p><p>Luckily, the (not always fun) task of cleaning, validating and normalizing theheterogeneous (and usually imperfect) data has been already done for you -- somethingthat is seldom the case, alas, in a real-world task.</p><p>Look at line 352 of this file for example:is that message spam or ham? (<em>Tip</em>: hit Ctrl-G in the Gitpod editor tojump to a specific line number.)</p><details><summary>Show me that line in Gitpod's editor</summary>    <img src="images/gitpod_gotoline.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="prepare-the-dataset-for-training"> </a>Prepare the dataset for training</h3><blockquote><p><strong>Note</strong>: this step is meant to run as an <strong>interactive Jupyter notebook</strong>.In case you run into trouble with Jupyter, you can equivalentlyjust run the command <code>python prepareDataset.py -v</code> and watch theshow (<code>-v</code> stands for &quot;verbose&quot;, to catch a glimpse at what it does).</p></blockquote><p>You want to &quot;teach&quot; a machine to distinguish between spam and ham: unfortunately,machines prefer to speak numbers rather than words.You then need to transform the human-readable CSV file above into a formatthat, albeit less readable by us puny humans, is more suited to the subsequent taskof training the classifier.You will express (a cleaned-out version of) the text into a sequenceof numbers, each representing a token (one word) forming the message text.</p><p>More precisely:</p><ol><li>first you'll initialize a &quot;tokenizer&quot;, asking it to build a dictionary (i.e. a token/number mapping) best suited for the texts at hand;</li><li>then, you'll use the tokenizer to reduce all messages into (variable-length) sequences of numbers;</li><li>these sequences will be &quot;padded&quot;, i.e. you'll make sure they end up all having the same length: in this way, the whole dataset will be represented by a rectangular matrix of integer numbers, each row possibly having leading zeroes;</li><li>the &quot;spam/ham&quot; column of the input dataset is recast with the <strong>&quot;one-hot encoding&quot;</strong>: that is, it will become two columns, one for &quot;spamminess&quot; and one for &quot;hamminess&quot;, both admitting the values zero or one (but with a single &quot;one&quot; per row): this turns out to be a formulation much friendlier to categorical classification tasks in general;</li><li>finally you'll split the labeled dataset into a &quot;training&quot; and a &quot;testing&quot; disjoint parts. This is a very important concept: the effectiveness of a model should always be validated on data points <strong>not used during training</strong>.</li></ol><p>All these steps can be largely automated by using data-science Python packagessuch as <code>pandas</code>, <code>numpy</code>, <code>tensorflow/keras</code>.</p><p>The above steps are accomplished by running a <strong>Jupyter interactive notebook</strong>(which you should inspect closely to learn more)as described below.In this way, you can run the steps one at a time and explore the contentsof the variables you create, for a better understanding of the transformationsbeing applied to the data.</p><p><img src="images/astranaut.png?raw=true" width="50" /> In the Gitpod environment, we started Jupyter for you (it is running in the <code>notebook-shell</code> console).To open it, run the following command, which will open the domain corresponding, in Gitpod, to the local portwith the notebook server listening:</p><pre><code>gp preview --external `gp url 8888`</code></pre><p>Now, <strong>CHECK YOUR POPUP BLOCKER</strong> to let the tab with the notebook get through.</p><blockquote><p>The password to unlock the notebooks is <code>spamclassifier</code>.</p></blockquote><p>Once the notebook is available, navigate to the <code>notebook</code> directory and click on <code>prepareDataset.ipynb</code> to open it (in yet another tab).</p><p>Run one cell at a time, in sequence, by selecting it and hitting <code>Shift-Enter</code>. <strong>There are cells with the sole purpose of inspecting the contents of some variables</strong>: take your time, use them to better understand what's going on.</p><blockquote><p><em>Note</em>: don't worry if you see a message such as <code>Could not load dynamic library 'libcudart.so.11.0'; dlerror: libcudart.so.11.0: cannot open shared object file: No such file or directory</code>. It just means that this environment lacks the CUDA libraries, hence most Tensorflow tasks will be considerably slower than on a GPU. If you work on your laptop, you may want to switch to using a GPU for the training task, if you have the option to do so.</p></blockquote><p>The dataset preparation starts with the CSV file you saw earlierand ends up exporting the new data format in the <code>training/prepared_dataset</code>directory. Two observations are in order:</p><ul><li>the &quot;big matrix of numbers&quot; encoding the messages and the (narrower) one containing their spam/ham status are useless without the tokenizer: after all, to process a new message you would need to make it into a sequence of numbers using the same mapping. For this reason, it is important to export the tokenizer as well, in order to later <em>use</em> the classifier.</li><li>the <code>pickle</code> protocol used in writing the reformulated data is strictly Python-specific and should not be treated as a long-term (or interoperable!) format. Please see next step (below) for a sensible way to store model, tokenizer and metadata on disk.</li></ul><p>Try to have a look at the <code>pickle</code> file created by the <code>prepareDataset.py</code> script. Well,it's a binary file indeed, and there is not much to be seen there. Let's move along.</p><p>When you are finished, choose &quot;Close and Halt&quot; from the notebook &quot;File&quot; menu;</p><p>At the end, close main Jupyter the browser tab and stop the notebook backend that was running in the console (<code>Ctrl-C</code> + <code>y</code> for confirmation);</p><blockquote><p>If you are running <strong>on your local machine</strong>, simply run <code>jupyter notebook</code> in a terminal window and the main Jupyter browser tab should open already for you.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="train-the-model"> </a>Train the model</h3><p>It is time to train the model, i.e. fit a neural network to the task ofassociating <em>a spam/ham label to a text message</em>.Well, actually the task is now more like &quot;associating probabilities for 0/1 to a sequenceof integer numbers (padded to fixed length with leading zeroes)&quot;.</p><p><img src="images/astranaut.png?raw=true" width="50" /> The code for creating and training the model is very short (a handful of lines of code,excluding loading from disk and writing to it), but running it will take several minutes:launch the script</p><pre><code>python trainModel.py</code></pre><p>and wait for it to finish (it will take probably eight minutes or so on Gitpod,possibly more on your own computer, depending on the specs).</p><p>The training script works as follows:</p><ol><li>all variables created and stored in the previous steps are loaded back to memory;</li><li>a specific architecture of a neural network is created, still a &quot;blank slate&quot; in terms of what it &quot;knows&quot;. Its core structure is that of a LSTM (<a href="https://en.wikipedia.org/wiki/Long_short-term_memory">long-short-term-memory</a>), a <a href="https://www.tensorflow.org/api_docs/python/tf/keras/layers/LSTM">specific kind</a> of recurrent neural network with some clever modifications aimed at enhancing its ability to &quot;remember&quot; things between non-adjacent locations in a sequence, such as two displaced positions in a string of text;</li><li>the network (your classifier) is trained: that means it will progressively adapt its internal (many thousands of) parameters in order to best reproduce the input training set. Each individual neuron in the network is a relatively simple component - the &quot;intelligence&quot; coming from their sheer quantity and the particular choice of parameters determining which neurons affect which other and by how much;</li><li>Once the training process has finished, the script carefully saves everything (model, tokenizer and associated metadata) in a format that can be later loaded by the API in a stand-alone way.</li></ol><details><summary>Show me Gitpod during training</summary><h4><a class="anchor" aria-hidden="true" id="the-training-process"> </a>The training process</h4><p>Training progresses in &quot;epochs&quot;, each epoch representing a complete sweepthrough the input dataset. Several metrics are printed during training:</p><ul><li><code>accuracy</code>: this is the fraction of predictions that match the labeled input (higher is better);</li><li><code>loss</code>: the value of the &quot;loss function&quot;, which measures how close are the predictions to the input data (lower is better). The precise definition of the loss function is derived from information theory: the idea is to quantify &quot;departure from ideal predictions&quot; fairly in all directions and in a way that favors gradual improvement of the parameters. <em>In <a href="https://keras.io/api/losses/probabilistic_losses/#categoricalcrossentropy-class">our case</a>, we employ the <a href="https://en.wikipedia.org/wiki/Cross_entropy">&quot;categorical cross-entropy&quot;</a> loss function, particularly suitable for models that choose between two or more output labels</em>;</li><li><code>val_accuracy</code>, <code>val_loss</code>: the same quantities as above, but calculated at end of epoch on the validation dataset (i.e. the <code>X_test</code> and <code>y_test</code> portion of the input labeled data).</li></ul><img src="images/during_training.png?raw=true" /></details><p>Perhaps by now the training process is completed and everything has beensaved in the <code>training/trained_model_v1</code> directory.</p><blockquote><p><strong>Note</strong>: it's advisable to keep a versionnumber in the model to be able to seamlessly switch to a newer classifier, or evenhypothetically to expose several of them at once in a single API._This aspect, and its implications in how to design the API, is examinedin more detail in the example found at<a href="https://github.com/hemidactylus/mlops-speedrun-spamclassifier">hemidactylus/mlops-speedrun-spamclassifier</a>,which builds from the one you are reading.</p></blockquote><p>Take a look in the output directory: there should be</p><ul><li>a (small) JSON file with some metadata describing some features of the model;</li><li>a (larger) JSON file containing the full definition of the tokenizer. This has been created, and will be loaded, using helper functions provided with the tokenizer itself for our convenience;</li><li>a (rather large) binary file containing &quot;the model&quot;. That means, among other things, the shape and topology of the neural network and all &quot;weights&quot;, i.e. the parameters dictating which neurons will affect which others, and by how much. Saving and loading this file, which is in the <a href="https://www.tensorflow.org/tutorials/keras/save_and_load#hdf5_format">HDF5 format</a>, is best left to routines kindly offered by Keras.</li></ul><blockquote><p><strong>Note</strong>: if it is not possible to train the model (it takes too long, orthe hardware resources are not enough, whatever), no fear! You will still beable to complete the practice and play with the API using a lightweight<em>mock model class</em>. Just remember, when starting the API, to edit the <code>.env</code>file so that it reads <code>MOCK_MODEL_CLASS=&quot;0&quot;</code>.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="test-the-trained-model"> </a>Test the trained model</h3><p>Before moving on to the API section, make sure that the savedtrained model is self-contained: that is, check that by loadingthe contents of <code>training/trained_model_v1</code>, and nothing else, you are ableto perform meaningful estimates of the spam/ham status for a new arbitrarypiece of text.</p><p><img src="images/astranaut.png?raw=true" width="50" /> The script <code>loadTestModel.py</code> does exactly that: it loads the saved modeland uses that to &quot;predict&quot; the ham/spam labels for new texts. Try it with</p><pre><code>python loadTestModel.py</code></pre><p>or even, if you feel creative, something like</p><pre><code>python loadTestModel.py This is my example sentence and let us see if this is ham</code></pre><p>Note that the output is given in terms of &quot;probabilities&quot;, or &quot;confidence&quot;:one can interpret a result like <code>{'ham': 0.92, 'spam': 0.08}</code> as meaning<em><strong>the input is ham with 92% confidence</strong></em>. Indeed, generally speaking,ML-based classifiers are very sophisticated and specialized machinesfor statistical inference.</p><p>If you look at the (very simple) code of this function, you will see how themodel, once loaded, is used to make predictions (it all boils down to the model's<code>predict</code> method, but first the input text must be recast as sequence of numberswith the aid of the tokenizer,and likewise the result must be made readable by humans again).</p><p><em>Note</em>: the model lends itself very well to processing several input textsin parallel (which generally is a big advantage in terms of performance);this fact will be exploited in the API as well. <strong>Can you see where this is apparentin this test code?</strong></p><details><summary>Tell me the answer</summary><p><strong>Answer:</strong> The function <code>predictSpamStatus</code> always receives a single text as input,but this text is made into a one-element list before encoding as numbers(<code>pTokenizer.texts_to_sequences([text])</code>). Much in the same way,once the model has emitted its prediction, the code gets the first (and only)element of a list of results (<code>yOutput[0]</code>).</p><p>Just by looking at these manipulations one can guess that multiple textscan be processed in parallel with negligible changes to the code, which indeedturns out to be the case.</p></details><h2><a class="anchor" aria-hidden="true" id="expose-as-api"> </a>Expose as API</h2><p>Now your model is trained and saved to disk, ready to be used.It is time to expose it with FastAPI in the form of easy-to-useHTTP requests.</p><p>You'll first look at a minimal version of the API, just to get ataste of how FastAPI works, and then turn to a full-fledged version,with more endpoints and a database-backed caching layer.</p><h3><a class="anchor" aria-hidden="true" id="configure-dot-env-file"> </a>Configure dot-env file</h3><p>Now you need to prepare a configuration file to give the API all requiredparameters to connect to the database. Fortunately, the Astra CLI has youcovered and will automate most of it for you: all you need is to run a coupleof commands.</p><p><img src="images/astranaut.png?raw=true" width="50" /> First, configure the Astra CLI so that it knows the &quot;token&quot; partof your DB Admin Token (i.e. the string starting with <code>AstraCS:...</code>):</p><pre><code>astra setup</code></pre><blockquote><p>If you get a &quot;command not found&quot; error, please install Astra CLI manuallywith <code>curl -Ls &quot;https://dtsx.io/get-astra-cli&quot; | bash</code>and retry the above commands after running <code>source ~/.bashrc</code>.</p></blockquote><details><summary>Show me the setup step</summary>    <img src="images/astra-setup-token.png?raw=true" /></details><p>You can test that everything works by inspecting your database:</p><pre><code>astra db get workshops</code></pre><details><summary>Show me a typical output</summary>    <img src="images/astra-db-get.png?raw=true" /></details><p><img src="images/astranaut.png?raw=true" width="50" /> At this point you can have the CLI prepare a <code>.env</code> file with all requiredconnection information (keyspace name, access token, location of the<a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">secure connect bundle</a> which it downloads automatically)available as environment variables:</p><pre><code>astra db create-dotenv -k spamclassifier workshops</code></pre><details><summary>Show me an alternative to the above command</summary><p>The <code>create-dotenv</code> runs only with the newest Astra CLI. In case you experience trouble,make sure you have a working CLI (<code>curl -Ls &quot;https://dtsx.io/get-astra-cli&quot; | bash</code>and then <code>source ~/.bashrc</code>) and then run the following:</p><pre><code>astra db download-scb workshops -f secure-connect-workshops.zipecho &quot;ASTRA_DB_SECURE_BUNDLE_PATH=\&quot;$PWD/secure-connect-workshops.zip\&quot;&quot; &gt; .envecho &quot;ASTRA_DB_KEYSPACE=\&quot;spamclassifier\&quot;&quot; &gt;&gt; .env# REPLACE YOUR &quot;AstraCS:...&quot; TOKEN IN THE FOLLOWINGecho &quot;ASTRA_DB_APPLICATION_TOKEN=\&quot;AstraCS:...\&quot;&quot; &gt;&gt; .env</code></pre><p>You are now good to go, as long as your <code>.env</code> defines the following variables:<code>ASTRA_DB_SECURE_BUNDLE_PATH</code>, <code>ASTRA_DB_KEYSPACE</code>, <code>ASTRA_DB_APPLICATION_TOKEN</code>.</p></details><p><img src="images/astranaut.png?raw=true" width="50" /> Let us add to this file a couple of settings specific to our API:</p><pre><code>cat .app-env.sample &gt;&gt; .env</code></pre><p>At this point, the <code>.env</code> file should be OK. If you are curious, have a lookat what's in it: there will be keyspace name, connection secrets, APIsettings and so on.</p><details><summary>Show me what the dot-env file might look like</summary>    <img src="images/dot-env-2.png?raw=true" /></details><blockquote><p>If you don't have (or don't want to use) the actual trained model at hand,you can switch to a lightweight mock by setting<code>MOCK_MODEL_CLASS=&quot;1&quot;</code> in this dot-env file. The API part of the practicewould &quot;not even notice the change&quot;.</p></blockquote><h3><a class="anchor" aria-hidden="true" id="baby-steps-a-minimal-api"> </a>Baby steps: a minimal API</h3><p><img src="images/astranaut.png?raw=true" width="50" /> Now that the trained model is there, the <code>.env</code> file is ready and thesecure bundle is in place, you can start a minimal form of the API with:</p><pre><code>uvicorn api.minimain:miniapp --reload</code></pre><blockquote><p>In this command, you are telling <code>uvicorn</code> (an <a href="https://www.uvicorn.org/">ASGI server</a>capable of runningasynchronous Python APIs) to launch the <code>miniapp</code> API found in the <code>minimain</code> module;you also ask it to keep a watch on all involved files and auto-reload on anyfile change.</p></blockquote><p>After some (rather verbose) output from Tensorflow, you should see the<code>INFO: Application startup complete.</code> notice: the API has loaded the classifierand is ready to acceptrequests (on localhost and port 8000, as per defaults).You will first fire some requests and then have a quick look at howthe code is structured.</p><blockquote><p>Note that this code is purposefully kept very simple: besidesnot implementing all the features, it also refrains from using some of the facilitiesprovided by FastAPI to better focus on the basics. Look at the full API belowfor a more comprehensive usage of the framework.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="query-the-minimal-api"> </a>Query the minimal API</h4><p>You'll use the command-line tool <code>curl</code> to issue simple HTTP requests at yourrunning API (but, of course, any tool capable of doing GETs and POSTs would do).</p><p><img src="images/astranaut.png?raw=true" width="50" /> While the API is running, switch to the other <code>bash</code> console in Gitpod (usingthe console switcher at the bottom right of your IDE) and try the following command:</p><pre><code>curl -s http://localhost:8000 | python -mjson.tool</code></pre><p>This issues a GET request to the <code>&quot;/&quot;</code> API endpoint. The result is a smallsummary, in JSON form, of some of the API parameters inherited through the<code>.env</code> file.</p><p>The logic to retrieve these settings and make them available to the APIis in the <code>config.py</code> module and relies on the <code>pydantic</code> package,that excels at data validation while allowing for surprisingly short and cleancode. <code>pydantic</code> pairs very well with FastAPI (<a href="https://fastapi.tiangolo.com/advanced/settings/">documentation</a>).</p><blockquote><p>If you are feeling adventurous, try stopping the API (Ctrl-C in the APIshell) and re-starting as<code>API_NAME=&quot;Fire Dragon!&quot; uvicorn api.minimain:miniapp --reload</code>.Try again the above <code>curl</code> command to see the redefined environmentvariable <code>API_NAME</code> taking precedence over the dot-env file.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> This minimal API already accomplishes the basic task for today: namely,it makes the spam classifier available as an API. Let's try with some POST requests:</p><pre><code># single-text endpointcurl -s -XPOST \  localhost:8000/prediction \  -d '{&quot;text&quot;: &quot;Click TO WIN a FREE CAR&quot;}' \  -H 'Content-Type: application/json' | python -mjson.tool# multiple-texts endpointcurl -s -XPOST \  localhost:8000/predictions \  -d '{&quot;texts&quot;: [&quot;Click TO WIN a FREE CAR&quot;, &quot;I like this endpoint&quot;]}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>That's it: the API correctly receives requests, uses the model to getpredictions (i.e. spam/ham scores for each message), and returnsthem back to the caller.</p><details><summary>Show me what the output could look like</summary><p><strong>Note</strong>: since training is a randomized process, the actual numbers you willobtain will not necessarily match what you see here. But you can expecta broad agreement, with the first text being seen as &quot;spam&quot; with at least 80%confidence and the second one being labeled &quot;ham&quot; at least as clearly.</p><img src="images/miniapi_requests.png?raw=true" /></details><h4><a class="anchor" aria-hidden="true" id="inspect-the-minimal-api-code"> </a>Inspect the minimal API code</h4><p>What is running now is a basic API architecture, which makes use of justthe fundamental features of FastAPI: you will shortly launch a moresophisticated one. But first we want to make some observations on thecode structure:</p><p>The main object is the <code>FastAPI</code> instance called <code>miniapp</code>: this exposes a<em>decorator</em> that can be used to <a href="https://fastapi.tiangolo.com/tutorial/first-steps/#define-a-path-operation-decorator">attach a Python function</a>to an API endpoint(see e.g. the <code>@miniapp.get('/')</code> preceding the function definition).FastAPI will try to match the function arguments with the request parameters.</p><p>To make this matching more effective, and gain input validation &quot;for free&quot; withthat, the code defines &quot;models&quot; in the <code>pydantic</code> sense and specifies them as the typesfor the endpoint functions. Try to invoke the API as follows and see what happens(note the empty body):</p><pre><code>curl -v -s -XPOST \  localhost:8000/prediction -d '{}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>The core of the API, the classifier model, is conveniently wrapped into a separateclass, <code>AIModel</code>, that takes care of loading from files and predicting; it alsoperforms the necessary conversions to offer a friendlier interface to the caller.The model is instantiated within a special <code>@miniapp.on_event(&quot;startup&quot;)</code>utility decorator offered by FastAPI whichis used to &quot;register&quot; some operations, effectively scheduling them for executionas soon as the rest of the API is loaded. Then, the model will live as a globalvariable accessible from the various endpoint functions.</p><p><strong>Note</strong>: have a look at the class in <code>AIModel.py</code>: there is nothing specificto spam classification there. Indeed, this is a widely <strong>reusable class</strong>, that canload and expose any text classifier based on a similar tokenizer-then-predictstructure as it is.</p><h3><a class="anchor" aria-hidden="true" id="inspect-the-full-api"> </a>Inspect the full API</h3><p>You can now stop the minimal API (Ctrl-C in its console) and get ready to startthe full API. This is your &quot;production-ready&quot; result and, as such, has many morenice features that we will now list (just giving pointers for those interestedin knowing more):</p><details><summary>Tell me about the nice features of this API</summary><h4><a class="anchor" aria-hidden="true" id="database-and-caching"> </a>Database and Caching</h4><p>In general, running a classifier on some input can be expensive in terms of CPUand time. Since,once the model is trained, predictions are deterministic, it would make senseto introduce a caching mechanism, whereby texts that were already processedand cached are not computed again.</p><p>You happen to have a database, our Astra DB instance, and you'll use itto store all predictions for later querying and retrieval. To do so, you need:a table, containing processed text data; a connection to the database,that will be kept alive throughout the life of the API; and methods to write,and read, entries in that table.</p><p>Technically, you will use the Cassandra Python drivers, and in particularthe <a href="https://docs.datastax.com/en/developer/python-driver/3.25/object_mapper/">Object Mapper facility</a>they offer. Look into <code>api/database/*.py</code>:there is a module that <a href="https://docs.datastax.com/en/developer/python-driver/3.25/getting_started/#connecting-to-astra">sets up the connection</a>, using the secrets found in the <code>.env</code>,and another where the models are defined - in particular the <code>SpamCacheItem</code> model, representing an entry in the cache.</p><p>The database initialization will go together with the spam-model loading intothe API &quot;startup&quot; hook.Note that there is no need to explicitly create the table: creation,when needed, is handledautomatically by the <code>sync_table</code> calls in the <code>onStartup()</code> method.</p><p>This table is a Cassandra table: we have modeled it according to the query it needsto support. In this case that means that &quot;model version&quot; and &quot;input text&quot;form the primary key (also partition key), and the prediction outputs are additional data columns.(Note: using the object mapper, the structure of the table is impliedin the attributes given to the fields in the corresponding model).</p><p>At this point, the endpoint functions can use the <code>cachePrediction</code> and<code>readCachedPrediction</code> functions to look for entries in the cache and store them.</p><p>Note that caching introduces a nontrivial possibility in the multi-input endpoint:namely, only some of the input texts may be cached: as a demonstration, and assumingthe cost of computation is way higher than the cost of development/maintenance(which in many cases is true, especially with ML!), the code goes to great lengthsto ensure this is handled sparingly and transparently to the caller. See the logicin <code>multiple_text_predictions</code> for the details.</p><h4><a class="anchor" aria-hidden="true" id="documentation-and-typed-response"> </a>Documentation and typed response</h4><p>We all love well-documented APIs. And FastAPI makes it pretty easy to do so:</p><ul><li>when instantiating the main <code>FastAPI</code> object, all sorts of properties (version number, grouping of endpoints, API title and so on) <a href="https://fastapi.tiangolo.com/tutorial/metadata/">can be passed to it</a>;</li><li>docstrings in the endpoint functions, and even the function names themselves, <a href="https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#description-from-docstring">are known to FastAPI</a>;</li><li>additional annotations can be passed to the endpoint decorators, such as the expected structure of the <a href="https://fastapi.tiangolo.com/tutorial/response-model/#response-model">response JSON</a> (for this reason, we took the extra care of defining <code>pydantic</code> models for the responses as well, for instance <code>PredictionResult</code>).</li></ul><p>This is all used by FastAPI to automatically expose a Swagger UI that makes it easyto experiment with the running API and test it(you'll later see how this makes developers' lives easier).Also a machine-readable description of the APIconforming to the OpenAPI specifications is produced and made available.</p><h4><a class="anchor" aria-hidden="true" id="call-logging-and-streamingresponse"> </a>Call logging and StreamingResponse</h4><p>Caching is not the only use you'll make of a database: also alltext classification requests are logged to a table, keeping track of the time, the textthat was requested and the identity of the caller.</p><blockquote><p>This may be useful, for instance, to implement rate limiting; in this APIyou simply expose the datum back to the caller, who is able to issue a requestsuch as <code>curl -s http://localhost:8000/recent_log | python -mjson.tool</code> andexamine their own recent calls.</p></blockquote><p>The problem is, in principle this may be a huge list, and you do notwant to have it all in memory on the API side before sending out a giant responseto the caller. Especially considering the data from the database will be paginated(in a way that is handled automatically for us by the Cassandra drivers' object models).</p><p>So what do you do here? It would be nice to start streaming out the API responseas the first chunk of data arrives from the database ... and that is exactly what we do,with the <code>StreamingResponse</code> construct <a href="https://fastapi.tiangolo.com/advanced/custom-response/?h=streamingresponse#streamingresponse">provided by FastAPI</a>.</p><p>The idea is very simple: you wrap something like a generator with <code>StreamingResponse</code> and FastAPI handles the rest.In this case, however, you want the full response to also be a valid JSON, so you do some tricks to ensure that(taking care of the opening/closing square brackets, to avoid a trailing comma at end of list, etc).In practice the full JSON response is crafted semi-manually (see function <code>formatCallerLogJSON</code> for the gory details).</p><p>For a look at the structure and contents of the database table with the call log data,and a short account on the reason for that choice, see below (section &quot;Inspect the database&quot;).</p><h4><a class="anchor" aria-hidden="true" id="support-for-a-get-endpoint"> </a>Support for a GET endpoint</h4><p>For illustrative purposes, the API also has a GET endpoint for requesting(single-)text classification. A useful feature is that the <code>pydantic</code> modelsdeclared as endpoint dependencies will be filled also using queryparameters, if they are available and the names match. In this way, theGET endpoint will work, and will internally be able to use a <code>SingleTextQuery</code>,even when invoked as follows (try it!)</p><pre><code>curl -s \    &quot;localhost:8000/prediction?text=This+is+a+nice+day&amp;skip_cache=true&amp;echo_input=1&quot; \    | python -mjson.tool</code></pre><p>(The way to have this mechanism working goes through the topic of dependency injectionin FastAPI and in particular the &quot;classes as dependencies&quot; part. See<a href="https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies#shortcut">here</a>for more details on this).</p></details><h3><a class="anchor" aria-hidden="true" id="launch-the-full-api"> </a>Launch the full API</h3><p>Without further ado, it is time to start the full-fledged API.</p><p><img src="images/astranaut.png?raw=true" width="50" /> Hit Ctrl-C in the API console (if you didn't already stop the &quot;minimal API&quot;)and launch the following command this time (you're now closer to &quot;production&quot;,so you do not want the <code>--reload</code> flag any more):</p><pre><code>uvicorn api.main:app</code></pre><p>The full API is starting (and again, after a somewhat lengthy output you willsee something like <code>Uvicorn running on http://127.0.0.1:8000</code> being printed).</p><blockquote><p>If the API cannot start and you see an error such as<code>urllib.error.HTTPError: HTTP Error 503: Service Unavailable</code> while connectingto the DB, most likely your Astra DB instance is currently hibernated. In that case, just open the CQLConsole on the Astra UI to bring your DB back to operation.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> Quickly launch a couple of requests with <code>curl</code> on the <code>bash</code> console(the same requests already sent to the minimal API earlier) and check theoutput:</p><pre><code># get basic infocurl -s http://localhost:8000 | python -mjson.tool</code></pre><p>This output has been enriched with the &quot;ID of the caller&quot; (actually the IPthe call comes from). To access this piece of information from within the route,you make use of the very flexible dependency system offered by FastAPI, simplydeclaring the endpoint function as having a parameter of type <code>Request</code>:you will be then able to read its <code>client</code> member to access the caller IP address.</p><blockquote><p>Note: when running behind a reverse-proxy one would have to configurethe latter so that it makes use of the <code>X-Forwarded-For</code> header, and it is thatheader instead that has to be read within the Python code.See <a href="https://stackoverflow.com/questions/60098005/fastapi-starlette-get-client-real-ip">this</a> for more information.</p></blockquote><p><img src="images/astranaut.png?raw=true" width="50" /> Now for an actual request to process some text:</p><pre><code># single-text endpointcurl -s -XPOST \  localhost:8000/prediction \  -d '{&quot;text&quot;: &quot;Click TO WIN a FREE CAR&quot;}' \  -H 'Content-Type: application/json' | python -mjson.tool</code></pre><p>Also this output is somewhat richer: there is an <code>&quot;input&quot;</code> field (not filledby default) and, most important, a <code>&quot;from_cache&quot;</code> field - presumably <code>false</code>.But, if you re-launch the very same <code>curl</code> command (try it!), the responsewill have <code>&quot;from_cache&quot;</code> set to <code>true</code>: this is the caching mechanism at work.</p><p>You could play a bit more with the API, but to do so, let us move to a friendlierinterface, offered for free by FastAPI: the Swagger UI.</p><h2><a class="anchor" aria-hidden="true" id="use-the-api"> </a>Use the API</h2><h4><a class="anchor" aria-hidden="true" id="open-the-swagger-ui"> </a>Open the Swagger UI</h4><p>In principle, you <em>could</em> access the Swagger UI by visiting <code>http://127.0.0.1:8000/docs</code>.If you are running locally that's the URL you should open, end of story.</p><p>If you are working in Gitpod, however, the notion of &quot;localhost&quot; makes senseonly within Gitpod itself. Luckily for you, Gitpod maps local ports to actual domainnames (that can optionally be made publicly accessible as well).</p><p><img src="images/astranaut.png?raw=true" width="50" /> To find out the URL for your docs, then, run this command in the <code>bash</code> shell:</p><pre><code>echo `gp url 8000`/docs</code></pre><p>and open the output URL in a new tab (it would look more or lesslike <code>https://8000-&lt;something-something&gt;.gitpod.io/docs</code>).You will see the Swagger UI: you can now browse the API documentation and eventry the endpoints out.</p><details><summary>Show me the Swagger UI main page</summary><img src="images/swagger_ui.png?raw=true" /></details><p>Take a moment to look around: look at the details for an endpoint and noticethat schema description are provided for both the payload and the responses.</p><h4><a class="anchor" aria-hidden="true" id="fun-with-caching"> </a>Fun with caching</h4><p>Let's have some fun with the caching mechanism and the multiple-text endpoint.For this experiment you will borrow a few lines from a famous poem by T. S. Eliot.</p><p><img src="images/astranaut.png?raw=true" width="50" /> First locate the <code>/predictions</code> endpoint, expand it and click &quot;Try it out&quot;to access the interactive form. Edit the &quot;Request Body&quot; field pasting thefollowing:</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;When the wind blows the water white and black.&quot;  ]}</code></pre><p>Click the big &quot;Execute&quot; blue button and look for the &quot;Response body&quot; below.You will see that both lines are new to the classifier, indeed their <code>from_cache</code>returns <code>false</code>.</p><p>Now add a third line and re-issue the request, with body</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;When the wind blows the water white and black.&quot;,    &quot;By sea-girls wreathed with seaweed red and brown&quot;  ]}</code></pre><p>and check the response this time: the <code>from_cache</code> will have a <code>true-true-false</code>pattern this time. (You can also try adding <code>&quot;skip_cache&quot;: true</code> to the bodyand see what happens to the response).</p><p>Finally, reinstate all lines of the stanza (so far only the odd ones were passed!):</p><pre><code>{  &quot;texts&quot;: [    &quot;I have seen them riding seaward on the waves&quot;,    &quot;Combing the white hair of the waves blown back&quot;,    &quot;When the wind blows the water white and black.&quot;,    &quot;We have lingered in the chambers of the sea&quot;,    &quot;By sea-girls wreathed with seaweed red and brown&quot;,    &quot;Till human voices wake us, and we drown.&quot;  ]}</code></pre><p>How do the values of <code>from_cache</code> look like now? (well, no surprises here).</p><p>Take a look at the cache-reading logic in the <code>multiple_text_predictions</code>function code in <code>main.py</code>. Sometimes it pays off to carefully avoid wasting CPUcycles.</p><h4><a class="anchor" aria-hidden="true" id="call-log"> </a>Call log</h4><p>You can also try the <code>recent_log</code> endpoint in Swagger to have a (time-ordered)listing of all the classification requests you issued recently.</p><p>As you saw earlier, behind the scenes this is a <code>StreamingResponse</code> and,instead of relying on FastAPI to package your response as JSON, you manuallyconstruct its pieces as the data arrives from the database.</p><p><img src="images/astranaut.png?raw=true" width="50" /> Try the <code>/recent_log</code>endpoint in Swagger and check the output matches your previous experiments.</p><p>Go back, for this endpoint, to the <code>bash</code> console as well,and check the result of:</p><pre><code>curl -s localhost:8000/recent_log | python -mjson.tool</code></pre><p>Surprise! Most likely you are not seeing your Eliot lines being listed,at least not on Gitpod (but you may see the calls you issued earlier with <code>curl</code>).The reason is that requests coming from the Swagger UI pass through Gitpod'sport and domain mappings and appear to come from a different IP than thosefrom &quot;the local localhost&quot;.</p><p>You may want to verify this by comparing the <code>caller_id</code> returned by theSwagger invocation of the <code>/</code> endpoint and the result of<code>curl -s localhost:8000 | python -mjson.tool</code>.</p><h4><a class="anchor" aria-hidden="true" id="inspect-the-database"> </a>Inspect the database</h4><p><img src="images/astranaut.png?raw=true" width="50" /> You can alsodirectly look at the contents of the tables on Astra DB. To do so,invoke the Astra CLI to open a <code>cqlsh</code> console connected to the database:</p><pre><code>. ~/.bashrcastra db cqlsh workshops</code></pre><details><summary>Click for an alternative way: the CQL Web Console in Astra</summary><p>A Web-based CQL Console is available in the browser within the Astra UI as well.</p><p>Choose your database in the Astra main dashboard and click on it;next, go to the &quot;CQL Console&quot; tab in the main panel. In a few seconds theconsole will open in your browser, already connected to your database andwaiting for your input.</p><img src="images/astra_get_to_cql_console.gif?raw=true" /></details><blockquote><p>Commands entered in the CQL Console are terminated with a semicolon (<code>;</code>)and can span multiple lines. Run them with the <code>Enter</code> key. If you want tointerrupt the command you are entering, hit <code>Ctrl-C</code> to be brought backto the prompt. To leave <code>cqlsh</code>, use the <code>EXIT</code> command.See <a href="https://docs.datastax.com/en/cql-oss/3.x/cql/cql_reference/cqlCommandsTOC.html">here</a>for more references to the CQL language commands.</p></blockquote><p>Start by telling the console that you will be using the <code>spamclassifier</code> keyspace:</p><pre><code>USE spamclassifier;</code></pre><p>Which tables are there?</p><pre><code>DESC TABLES;</code></pre><p>List some sample records from the cache table:</p><pre><code>SELECT * FROM spam_cache_items LIMIT 10;</code></pre><p>And, similarly, look at the recent call log for the &quot;localhost&quot; caller:</p><pre><code>SELECT * FROM spam_calls_per_caller    WHERE caller_id = '127.0.0.1'    AND called_hour='2022-11-09 17:00:00.000Z';</code></pre><blockquote><p>For the above to show results, you have to take care of adapting thedate and (whole) hour to current time, and possibly the <code>caller_id</code>could be edited to reflect what you see from the Swagger <code>/</code> response.</p></blockquote><p>The reason why the call log is partitioned in hourly chunks (and not onlyby <code>caller_id</code>) has to do with the way the Cassandra database, on which Astra DBis built, works: in short we do not want our partitions to grow indefinitely.Unfortunately a thorough discussion of this topic would lead us too far away.If you are curious, we strongly recommend you start from the exercises <a href="https://www.datastax.com/learn/data-modeling-by-example">Data modeling by example</a>and <a href="https://www.datastax.com/cassandra">What is Cassandra?</a>.You will embark on a long and exciting journey!</p><h2><a class="anchor" aria-hidden="true" id="homework-detailed-instructions"> </a>Homework detailed instructions</h2><p>You are asked to add a new GET endpoint in the API that takes no arguments and returnsa description of how the neural net of the spam classifier model is structured.</p><p>Luckily for you, the <code>tensorflow/keras</code> model (that gets loaded from disk withinthe <code>AIModel</code> class at startup) already has a <code>to_json()</code> method that returnsa long JSON string similar to:</p><pre><code>{    &quot;class_name&quot;: &quot;Sequential&quot;,    &quot;config&quot;: {        &quot;name&quot;: &quot;sequential&quot;,        &quot;layers&quot;: [            {                &quot;class_name&quot;: &quot;InputLayer&quot;,                &quot;config&quot;: {                    &quot;batch_input_shape&quot;: [                        null,                        300                    ],                    &quot;dtype&quot;: &quot;float32&quot;,    ...    ...</code></pre><p>Your task is to expose this JSON object to the user, who might legitimately beinterested in what choice of network topology is the classifier based on.</p><details><summary>Show me how that could look like</summary>    <img src="images/neural_config.png?raw=true" /></details><h3><a class="anchor" aria-hidden="true" id="appendix-i-deploy-behind-a-reverse-proxy-nginx"> </a>Appendix I: deploy behind a reverse proxy (nginx)</h3><p>So far, you've been running the API with <code>uvicorn</code> from the command line.For a final deploy to production (on a Linux box), some last steps are missing.These are not covered in the practice of this interactive workshops, howeverwe outline them here, assuming you are using <code>nginx</code> as reverse proxy,and you do have a domain name (but no HTTPS configured):</p><p><strong>First</strong> ensure your Python virtualenv, say <code>spamclassifier</code>, is availableon the server.</p><p><strong>Second</strong> you will create a service file, <code>/etc/systemd/system/spamclassifier.service</code>,tasked with keeping the <code>uvicorn</code> instance running. Here we assume the service manager is <code>systemd</code>.</p><pre><code>[Unit]Description= ...After=network.target[Service]User=...Group=...WorkingDirectory=/path/to/repo_dir# these may be here and override the .envEnvironment=&quot;API_NAME=Deployed Spam Classifier&quot;ExecStart=/path/to/virtual/environments/spamclassifier/bin/uvicorn api.main:app --host 127.0.0.1 --port 9999 --workers 4[Install]WantedBy=multi-user.target</code></pre><p>(<code>9999</code> is an internal port you may choose at will, but it must match the file below;<code>4</code> is the number of workers <code>uvicorn</code> will spawnand should be tuned to your predicted workload and the server capacity.<strong>Note</strong> that you will have a set of resources, model and DB connection, per each worker).</p><p><strong>Third</strong>, after starting the service (<code>sudo systemctl daemon-reload &amp;&amp; sudo systemctl start spamclassifier</code>),make your API known to <code>nginx</code> by creating a file <code>/etc/nginx/sites-available/spamclassifier_api</code>:</p><pre><code>server {    listen 80;    server_name api.myspamclassifier.com;    location / {        proxy_set_header Host $http_host;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header X-Forwarded-Proto $scheme;        proxy_redirect off;        proxy_buffering off;        proxy_pass http://uvicorn_spamclassifier;    }}upstream uvicorn_spamclassifier {  server 127.0.0.1:9999;  keepalive 64;}</code></pre><p><strong>Fourth</strong>, create a symlink to the above file in <code>/etc/nginx/sites-available/</code> and restart <code>nginx</code>(<code>sudo systemctl restart nginx</code>).</p><p>This should get the API running and accessible from outside. As mentioned earlier, to properly identifythe <code>caller_id</code> at API level, your code should be modified to inspect the <code>X-Forwarded-For</code> headerinstead of the actual caller IP address. Access to request headers in FastAPIis described <a href="https://fastapi.tiangolo.com/tutorial/header-params/#header-parameters">here</a>.</p><h3><a class="anchor" aria-hidden="true" id="appendix-ii-model-versioning-with-fastapi"> </a>Appendix II: model versioning with FastAPI</h3><p>It is a standard requirement in production-grade ML to have several versionsof a model, which possibly have to be exposed at the same time by the API.Of course, in that case a clear labeling of the endpoints(e.g. <code>/v1/predict</code> vs. <code>/v2/predict</code>) is essential to avoid messing up!</p><p>This topic is not examined in detail here, but if you want to know moreyou are encouraged to look at the<a href="https://github.com/hemidactylus/mlops-speedrun-spamclassifier">hemidactylus/mlops-speedrun-spamclassifier</a>repository, which shows a possible way to build re-usable standardized routeswhich can be attached to different models in a single API.</p>
SUCCESS SAVING README for datastaxdevs-workshop-ai-as-api
Getting astra.json for datastaxdevs/workshop-cassandra-application-development at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="workshop-application-development-with-cassandra"> </a>Workshop - Application Development with Cassandra</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="pre-requisites"> </a>Pre-requisites</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="database-pre-requisites"> </a>Database pre-requisites</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-setup"> </a>1. Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="gitpod"> </a>Gitpod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="configure-the-astra-cli"> </a>Configure the Astra CLI</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="create-and-populate-tables"> </a>Create and populate tables</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="prepare-connection-settings"> </a>Prepare connection settings</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-3-now-to-the-exercises"> </a>2 &amp; 3. Now to the exercises!</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework-instructions"> </a>Homework instructions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="conclusion"> </a>Conclusion</h2>
HTML FOR datastaxdevs-workshop-cassandra-application-development<h1><a class="anchor" aria-hidden="true" id="workshop-application-development-with-cassandra"> </a>Workshop - Application Development with Cassandra</h1><p>Learn about drivers, connectivity and requests by running a simple API withApache Cassandra/Astra DB as its data backend. The steps are available in <em>several languages</em>.</p><p>Click here for the workshop <a href="slides/slides.pdf">slide deck</a>.</p><h3><a class="anchor" aria-hidden="true" id="pre-requisites"> </a>Pre-requisites</h3><p>This workshop, the third in a series, builds on the same example used in the two previous episodes (an IoT application to access temperature measurements collected from a network of sensors).</p><p>Besides some knowledge of the <a href="https://www.datastax.com/learn/data-modeling-by-example/sensor-data-model">example domain</a> used in this workshop, it is desirable to have familiarity with the concepts explored in the two previous installments of the series:</p><ul><li><a href="https://github.com/datastaxdevs/workshop-cassandra-fundamentals">Cassandra Fundamentals</a></li><li><a href="https://github.com/datastaxdevs/workshop-cassandra-data-modeling">Data Modeling with Cassandra</a></li></ul><h4><a class="anchor" aria-hidden="true" id="database-pre-requisites"> </a>Database pre-requisites</h4><p>It is assumed in the following that you already have created your <a href="https://github.com/datastaxdevs/workshop-cassandra-fundamentals#4-create-your-astra-db-instance">Astra DB instance</a> as instructed in the first episode, and that you have a valid &quot;DB Administrator&quot; Token.<strong>Note</strong>: the Token that is created with the database does not have all permissions we need, so you <em>need</em> to manually <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">create a Token</a> with the higher &quot;DB Administrator&quot; permission and use it in what comes next.</p><p><em>In case you haven't your Astra DB yet, go ahead and create it now for free by clicking here:</em></p><p><a href="https://astra.dev/yt-01-25-23"><img src="images/create_astra_db_button.png?raw=true" /></a></p><blockquote><p><em>Tip</em>: call the database <code>workshops</code> and the keyspace <code>sensor_data</code>.</p></blockquote><p><em>In case you already have a database <code>workshops</code> but no <code>sensor_data</code> keyspace, simply add it using the &quot;Add Keyspace&quot; button on the bottom right hand corner of your DB dashboard: please do so, avoiding the creation of another database with the same name. (Also, on the free tier you have to &quot;Resume&quot; the database if it is &quot;Hibernated&quot; for prolonged inactivity.)</em></p><h2><a class="anchor" aria-hidden="true" id="1-setup"> </a>1. Setup</h2><h3><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h3><p>If you don't have a &quot;DB Administrator&quot; token yet, log in to your Astra DBand create a token with this role.To create the token, click on the &quot;...&quot; menu next to your database in the mainAstra dashboard and choose &quot;Generate token&quot;. Then make sure you select the &quot;DB Administrator&quot; role.<em>Download or note down all components of the token before navigating away:these will not be shown again.</em><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">See here</a>for more on token creation.</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><p>Mind that, as mentioned already, <em>the default Token auto-created for you whencreating the database is not powerful enough for us today.</em></p><h3><a class="anchor" aria-hidden="true" id="gitpod"> </a>Gitpod</h3><p>First, open this repo in Gitpod by right-clicking the following button (&quot;open in new tab&quot;):</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-cassandra-application-development"><img src="images/open_in_gitpod.svg?raw=true" /></a></p><p>In a couple of minutes you will have your Gitpod IDE up and running, with this repo cloned, ready and waiting for you (you may have to authorize the Gitpod single-sign-on to continue).</p><blockquote><p>You may see a dialog about &quot;opening this workspace in VS Code Desktop&quot;: you can safely dismiss it.</p></blockquote><p><em>Note</em>: The next steps are to be executed <em>within the Gitpod IDE.</em></p><h3><a class="anchor" aria-hidden="true" id="configure-the-astra-cli"> </a>Configure the Astra CLI</h3><p>Astra CLI is preinstalled: configure it by providing your<code>AstraCS:...</code> database token when prompted:</p><pre lang="bash"><code>astra setup</code></pre><p>(<em>Optional)</em> Now you can use the CLI to get some info on your database(s):</p><pre lang="bash"><code>astra db listastra db get workshops</code></pre><details><summary>Click here if you have <strong>multiple databases</strong> called "workshops"</summary><p>DB names are not required to be unique: what <em>is</em> unique is the <a href="https://awesome-astra.github.io/docs/pages/astra/faq/#where-should-i-find-a-database-identifier">&quot;Database ID&quot;</a>.</p><p>In case you find yourself having more than one &quot;workshops&quot; database, you can provide the ID instead of the name to the CLI commandsand, being able to unambiguously determine the target, it will work flawlessly.</p></details><h3><a class="anchor" aria-hidden="true" id="create-and-populate-tables"> </a>Create and populate tables</h3><p>The Astra CLI can also launch a <code>cqlsh</code> session for you, automatically connected to your database. Use this feature to execute a <code>cql</code> script that resets the contents of the <code>sensor_data</code> keyspace, creating the right tables and writing representative data on them:</p><pre lang="bash"><code># Make sure the DB exists (resuming it if hibernated)astra db create workshops -k sensor_data --if-not-exist --wait# Launch the initialization scriptastra db cqlsh workshops -f initialize.cql</code></pre><p>You are encouraged to peek at the contents of the script to see what it does.</p><p><em>(Optional)</em> Interactively run some test queries on the newly-populated keyspace</p><details><summary>Click to show test queries</summary><p>Open an interactive <code>cqlsh</code> shell with:</p><pre lang="bash"><code>astra db cqlsh workshops -k sensor_data</code></pre><p>Now you can copy-paste any of the queries below and execute them with the <kbd>Enter</kbd> key:</p><pre lang="sql"><code>-- Q1 (note 'all' is the only partition key in this table)SELECT  name, description, region, num_sensorsFROM    networksWHERE   bucket = 'all';-- Q2SELECT  date_hour, avg_temperature, latitude, longitude, sensorFROM    temperatures_by_networkWHERE   network    = 'forest-net'  AND   week       = '2020-07-05'  AND   date_hour &gt;= '2020-07-05'  AND   date_hour  &lt; '2020-07-07';-- Q3SELECT  *FROM    sensors_by_networkWHERE   network = 'forest-net';-- Q4SELECT  timestamp, valueFROM    temperatures_by_sensorWHERE   sensor = 's1003'  AND   date   = '2020-07-06';</code></pre><p>To close <code>cqlsh</code> and get back to the shell prompt, execute the <code>EXIT</code> command.</p></details><h3><a class="anchor" aria-hidden="true" id="prepare-connection-settings"> </a>Prepare connection settings</h3><p>You can use the Astra CLI to prepare a dotenv file which defines all connectionparameters and secrets needed for your application to run:</p><pre lang="bash"><code>astra db create-dotenv workshops -k sensor_data</code></pre><p>A <code>.env</code> file will be created (you can peek at it with Gitpod's file editor, e.g. running <code>gp open .env</code>).</p><p>You can now source it with:</p><pre lang="bash"><code>source .env</code></pre><blockquote><p><strong>Note</strong>: The <code>.env</code> is handled differently in each implementation (Java, Python, Javascript), as will be shown later.</p><p><strong>Note</strong>: While creating the <code>.env</code>, the database's <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">Secure Connect Bundle</a>has also been downloaded for you: you may want to check that the fileis about 12-13 KiB in size with <code>ls $ASTRA_DB_SECURE_BUNDLE_PATH -lh</code>.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="2-3-now-to-the-exercises"> </a>2 &amp; 3. Now to the exercises!</h2><p><em>Note: it is suggested to check the <a href="https://www.datastax.com/learn/data-modeling-by-example/sensor-data-model">sensor data model</a> in order to be better prepared for what follows. Keep it open in another tab.</em></p><p>Choose your path:</p><ul><li><a href="python/Python_README.md">Python</a></li><li><a href="java/Java_README.md">Java</a></li><li><a href="javascript/Javascript_README.md">Javascript</a></li></ul><h2><a class="anchor" aria-hidden="true" id="homework-instructions"> </a>Homework instructions</h2><img src="images/api-micro.png?raw=true" width="150" align="left" /><p>In order to get a badge of completion for this workshop, complete the following assignment:</p><blockquote><p>Add a GET endpoint to your API corresponding to query <code>Q1</code>(<em>&quot;Find information about all networks; order by name (asc)&quot;</em>).<strong>Tip</strong>: remember the data-modeling optimization of having inserted the <code>bucket</code> column.</p></blockquote><p>Take a <em>screenshot</em> of the relevant code block and of a successful request to that endpoint and head over to <a href="https://dtsx.io/homework-appdev">this form</a>. Answer a couple of &quot;theory&quot; questions, attach your screenshot, and hit &quot;Submit&quot;.</p><p>That's it! Expect to be awarded your badge in the next week or so!</p><h2><a class="anchor" aria-hidden="true" id="conclusion"> </a>Conclusion</h2><p>This is not the end of your journey, rather the start: come visit us for more cool content, and learn how to succeed using Cassandra and Astra DB in your applications!</p><p>Congratulations and see you at our next workshop!</p><blockquote><p>Sincerely yours, the DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-application-development
Getting astra.json for datastaxdevs/workshop-cassandra-fundamentals at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandratm-fundamentals"> </a>🎓 Apache Cassandra™ Fundamentals</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-create-tables"> </a>5. Create tables</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 5a. Navigate to the CQL Console and login to the database</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5b-describe-keyspaces-and-use-one-of-them"> </a>✅ Step 5b. Describe keyspaces and USE one of them</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5c-create-the-code-networks-code-table"> </a>✅ Step 5c. Create the <code>networks</code> table</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-5d-create-the-tables-for-code-sensors-code-and-code-temperatures-code"> </a>✅ Step 5d. Create the tables for <code>sensors</code> and <code>temperatures</code></h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-execute-crud-operations"> </a>6. Execute CRUD operations</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6a-c-rud-create-insert-data-users"> </a>✅ Step 6a. (C)RUD = create = insert data, users</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6b-c-rud-create-insert-data-posts"> </a>✅ Step 6b. (C)RUD = create = insert data, posts</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6c-c-r-ud-read-read-data"> </a>✅ Step 6c. C(R)UD = read = read data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6d-cr-u-d-update-update-data"> </a>✅ Step 6d. CR(U)D = update = update data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6e-cru-d-delete-remove-data"> </a>✅ Step 6e. CRU(D) = delete = remove data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="step-6f-design"> </a>✅ Step 6f. Design</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-cassandra-fundamentals<h1><a class="anchor" aria-hidden="true" id="apache-cassandratm-fundamentals"> </a>🎓 Apache Cassandra™ Fundamentals</h1><p>Welcome to the <strong>Apache Cassandra™ Fundamentals</strong> workshop! In this two-hour workshop, we shows the most important fundamentals and basics of the powerful distributed <code>NoSQL database Apache Cassandra™</code>.</p><p>Using <strong>Astra DB</strong>, the cloud based <em>Cassandra-as-a-Service</em> platform delivered by DataStax, we will cover the very first steps for every developer who wants to try to learn a new database: creating tables and CRUD operations.</p><p><img src="images/splash.png" alt="" /></p><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><img src="https://github.com/datastaxdevs/workshop-cassandra-fundamentals/blob/main/images/cassandra_fundamentals.png?raw=true" align="right" width="300px"/><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create your Database</a></li><li><a href="#5-create-tables">Create tables</a></li><li><a href="#6-execute-crud-operations">Execute CRUD operations</a></li><li><a href="#7-homework">Homework</a></li><li><a href="#8-whats-next-">What's NEXT </a></li></ol><p><br/><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Give you an understanding and how and where to position Apache Cassandra™</strong></p><p>2️⃣ <strong>Give an overview of the NoSQL ecosystem and its rationale</strong></p><p>3️⃣ <strong>Provide an overview of Cassandra Architecture</strong></p><p>4️⃣ <strong>Make you create your first tables and run your first statements</strong></p><p>🚀 <strong>Have fun with an interactive session</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2><p/><details><summary><b> 1️⃣ Can I run this workshop on my computer?</b></summary><hr><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need the following:<ol><li><b>git</b> installed on your local system</ol></p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</details><p/><details><summary><b> 2️⃣ What other prerequisites are required?</b></summary><hr><ul><li>You will need enough *real estate* on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK)<li>You will need an Astra account: don't worry, we'll work through that in the following<li>As "Intermediate level" we expect you to know what java and Spring are. </ul></p></details><p/><details><summary><b> 3️⃣ Do I need to pay for anything for this workshop?</b></summary><hr><b>No.</b> All tools and services we provide here are FREE. FREE not only during the session but also after.</details><p/><details><summary><b> 4️⃣ Will I get a certificate if I attend this workshop?</b></summary><hr>Attending the session is not enough. You need to complete the homework detailed below and you will get a nice badge that you can share on linkedin or anywhere else *(open badge specification)*</details><p/><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://community.datastax.com/">Questions and Answers</a></li><li><a href="https://www.twitch.tv/datastaxdevs">Twitch backup</a></li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <em>Right-Click the button</em> with <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-01-11-23"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>sensor_data</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>sensor_data</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of db dashboard page.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong>:save it somewhere safe, as it will be needed to later in other workshop (In particular the string starting with <code>AstraCS:...</code>.)</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-create-tables"> </a>5. Create tables</h2><p>Ok, now that you have a database created the next step is to create tables to work with.</p><p><em>General Methodology Notes</em>: We'll work with a (rather simplified) <em>Internet of things</em> application where we'll be recording temperatures coming from a network of sensors.</p><ul><li><code>networks</code> identified by a unique name represent a region, an area where you find related infrastructure.</li></ul><h4><a class="anchor" aria-hidden="true" id="step-5a-navigate-to-the-cql-console-and-login-to-the-database"> </a>✅ Step 5a. Navigate to the CQL Console and login to the database</h4><p>In the Summary screen for your database, select <strong><em>CQL Console</em></strong> from the top menu in the main window. This will take you to the CQL Console and automatically log you in.</p><details>    <summary>Show me! </summary>    <img src="images/astra-cql-console.gif" /></details><blockquote><p><em>Note</em>: if you are working with your own Cassandra cluster (other than Astra DB), you will reach the CQL Console differently.Moreover, in that case you have to manually create the keyspace once in the CQL Console: this is done with a command similar to<code>CREATE KEYSPACE sensor_data WITH REPLICATION = {'class': 'NetworkTopologyStrategy', 'replication_factor': 3};</code>.See the Cassandra documentation for more details on this.</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-5b-describe-keyspaces-and-use-one-of-them"> </a>✅ Step 5b. Describe keyspaces and USE one of them</h4><p>Ok, now we're ready to rock. Creating tables is quite easy, but before we create one we need to tell the database which keyspace we are working with.</p><p>First, let's <strong><em>DESCRIBE</em></strong> all of the keyspaces that are in the database. This will give us a list of the available keyspaces.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC KEYSPACES;</code></pre><p><em>&quot;desc&quot; is short for &quot;describe&quot;, either is valid.</em></p><blockquote><p>CQL commands usually end with a semicolon <code>;</code>. If you hit Enter and nothing happens -- you don't even get your prompt back -- most likely it's because you have not ended the command with <code>;</code>. If in trouble, you can always get back to the prompt with <code>Ctrl-C</code> and start typing the command anew.</p></blockquote><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/01_desc_keyspaces.png" alt="Keyspaces in CQL" /></p><blockquote><p>ℹ️ Depending on your setup you might see a different set of keyspaces than in the image. The one we care about for now is <strong><em>sensor_data</em></strong>. From here, execute the <strong><em>USE</em></strong> command with the <strong><em>sensor_data</em></strong> keyspace to tell the database our context is within <strong><em>sensor_data</em></strong>.</p></blockquote><blockquote><p>Take advantage of the TAB-completion in the CQL Console. Try typing <code>use sens</code> and then pressing TAB, for example.</p></blockquote><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>USE sensor_data;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/02_use_sensor_data.png" alt="USE keyspace" /></p><p>Notice how the prompt displays <code>&lt;username&gt;@cqlsh:sensor_data&gt;</code> informing us we are <strong>using</strong> the <strong><em>sensor_data</em></strong> keyspace. Now we are ready to create our tables.</p><h4><a class="anchor" aria-hidden="true" id="step-5c-create-the-code-networks-code-table"> </a>✅ Step 5c. Create the <code>networks</code> table</h4><p>At this point we can execute a command to create the <strong>networks</strong> table.Just copy/paste the following command into your CQL console at the prompt.Try to identify the primary key, the partition key and the clustering columns(if any) for this table in the command:</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS networks (  name        TEXT,  description TEXT,  region      TEXT,  PRIMARY KEY ((name)));</code></pre><p>Then <strong><em>DESCRIBE</em></strong> your keyspace tables to ensure it is there.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC TABLES;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/03_networks_table_created.png" alt="A table created" /></p><p>Aaaand <strong>BOOM</strong>, you created a table in your database. That's it.Now let's go ahead and create a couple more tables before we dosomething interesting with the data.</p><h4><a class="anchor" aria-hidden="true" id="step-5d-create-the-tables-for-code-sensors-code-and-code-temperatures-code"> </a>✅ Step 5d. Create the tables for <code>sensors</code> and <code>temperatures</code></h4><ul><li><p>A network will contain several <code>sensors</code>. Sensors are uniquely identified by their name, such as <code>s1001</code>. The design of our application is such that we need to be able to <em>retrieve all <code>sensors</code> for a given <code>network</code>, sorted by the sensor name</em>.</p></li><li><p>Next, for each sensor you want to be able to retrieve <code>temperatures</code> sorted by descending date.</p></li></ul><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>CREATE TABLE IF NOT EXISTS sensors_by_network (  network         TEXT,  sensor          TEXT,  latitude        DECIMAL,  longitude       DECIMAL,  characteristics MAP&lt;TEXT,TEXT&gt;,  PRIMARY KEY ((network),sensor));CREATE TABLE IF NOT EXISTS temperatures_by_sensor_bad (  sensor TEXT,  timestamp TIMESTAMP,  value FLOAT,  PRIMARY KEY ((sensor),timestamp)) WITH CLUSTERING ORDER BY (timestamp DESC);</code></pre><ul><li><p><code>networks</code> to <code>sensors</code> is a one-to-many relationship yet there is no integrity constraint. This is on you, at application level to ensure the coherence.</p></li><li><p>You should notice than sensors are grouped by network (as the name stated. The partition key <code>network</code> groups all sensors for a given network on the same Cassandra node meaning a request with network in the where clause will access a single node.</p></li><li><p><code>sensors</code> to <code>temperatures</code> is a also a one-to-many relation. Every temperature for a sensor will be saved in the same partition.</p></li></ul><p/><details><summary><b>This table has a major issue... can you guess what it is?</b></summary><hr>The SIZE. The more the sensors capture information the bigger the partitions become. There is a good practice rule stating that the upper limit for a partition is 100MB or 100k records. You need to split values across multiple partitions. This technique is called <i>bucketing.</i></details><p/><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DROP TABLE  temperatures_by_sensor_bad;CREATE TABLE temperatures_by_sensor (  sensor TEXT,  date DATE,  timestamp TIMESTAMP,  value FLOAT,  PRIMARY KEY ((sensor, date),timestamp)) WITH CLUSTERING ORDER BY (timestamp DESC);</code></pre><blockquote><p>ℹ️ <em>Dropping a table can lead to a timeout in the user interface, do not worry, it is not harmful: the table is effectively deleted under the hood.</em></p></blockquote><p><strong><em>DESCRIBE</em></strong> your keyspace tables: you should see all three listed.</p><p>📘 <strong>Command to execute</strong></p><pre lang="sql"><code>DESC TABLES;</code></pre><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/04_post_tables_created.png" alt="A table created" /></p><p>And tables list:</p><p><img src="images/cql/04_post_tables_created_2.png" alt="A table created" /></p><p>You may wonder, how did we arrive at this particular structure for the <code>sensors_by_network</code> and <code>temperatures_by_sensors</code> tables ?</p><p>The answer lies in the methodology for data modelingwith Cassandra, which, at its very core, states: <strong>first look at application's needs, determine the required workflows, then map them to a number of queries, finally design a table around each query</strong>.</p><ul><li><p>We create table <code>sensors_by_network</code> to support a query such as <em>&quot;get all sensors for a network <code>X</code>&quot;</em></p></li><li><p>We create table <code>temperatures_by_sensors</code> to support a query such as <em>&quot;get all temperatures for a sensor <code>Y</code>&quot;</em></p></li></ul><p><a href="#table-of-contents">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="6-execute-crud-operations"> </a>6. Execute CRUD operations</h2><p>CRUD stands for &quot;<strong>create, read, update, and delete</strong>&quot;. Simply put, they are the basic types of commands you need to work with ANY database in order to maintain data for your applications.</p><h4><a class="anchor" aria-hidden="true" id="step-6a-c-rud-create-insert-data-users"> </a>✅ Step 6a. (C)RUD = create = insert data, users</h4><p>Our tables are in place so let's put some data in them. This is done with the <strong>INSERT</strong> statement. We'll start by inserting 2 rows into the <strong><em>networks</em></strong> table.</p><p>Copy and paste the following in your CQL Console:<em>(Once you have carefully examined the first of the following <strong>INSERT</strong> statements below, you can simply copy/paste the others which are very similar.)</em></p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO networks (name,description,region)VALUES ('forest-net',        'forest fire detection network',        'south');INSERT INTO networks (name,description,region)VALUES ('volcano-net',        'volcano monitoring network',        'north');   </code></pre><h4><a class="anchor" aria-hidden="true" id="step-6b-c-rud-create-insert-data-posts"> </a>✅ Step 6b. (C)RUD = create = insert data, posts</h4><p>Let's run some more <strong>INSERT</strong> statements, this time for <strong>sensors</strong>. We'll insert data into the <strong><em>sensors_by_network</em></strong> table.</p><p><em>(Once you have carefully examined the first of the following <strong>INSERT</strong> statements below, you can simply copy/paste the others which are very similar.)</em></p><blockquote><p><em>Note</em>: in the following, we are using <code>MAP&lt;&gt;</code> which lets you define you our key/value mapping, thereby adding a bit of flexibility -- Cassandra Data models are strongly typed.</p></blockquote><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1001',30.526503,-95.582815,       {'accuracy':'medium','sensitivity':'high'});INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1002',30.518650,-95.583585,       {'accuracy':'medium','sensitivity':'high'});     INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('forest-net','s1003',30.515056,-95.556225,       {'accuracy':'medium','sensitivity':'high'});     INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('volcano-net','s2001',44.460321,-110.828151,       {'accuracy':'high','sensitivity':'medium'});    INSERT INTO sensors_by_network (network,sensor,latitude,longitude,characteristics)VALUES ('volcano-net','s2002',44.463195,-110.830124,       {'accuracy':'high','sensitivity':'medium'});    </code></pre><p>Ok, we have a lovely bunch of sensors in our application.</p><p>Now let's add temperature measurements in table <strong><em>temperatures_by_sensors</em></strong> as well! Let's do it with the following command (please note that the <code>INSERT</code> statements are similar to the ones seen above, with different columns and table name):</p><blockquote><p><em>Note</em>: In a relational database you may have use a join on 3 tables <code>Networks &gt; Sensors &gt; Temperatures</code>. In the following, we are putting back the network name in temperature table and this is because it will be required in the where clause.</p></blockquote><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 00:00:01',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 00:59:59',79);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 12:00:01',97);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-04','2020-07-04 12:59:59',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 00:00:01',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 12:00:01',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-04','2020-07-04 12:59:59',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 00:00:01',81);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 12:00:01',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-04','2020-07-04 12:59:59',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 00:00:01',81);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 00:59:59',80);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 12:00:01',98);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-05','2020-07-05 12:59:59',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:00:01',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:59:59',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 12:00:01',100);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 12:59:59',99);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 00:00:01',83);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 00:59:59',82);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 12:00:01',101);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-05','2020-07-05 12:59:59',102);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 12:00:01',106);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1001','2020-07-06','2020-07-06 12:59:59',107);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 12:00:01',108);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-06','2020-07-06 12:59:59',110);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 00:00:01',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 00:59:59',90);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 12:00:01',1315);INSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1003','2020-07-06','2020-07-06 12:59:59',1429);</code></pre><h4><a class="anchor" aria-hidden="true" id="step-6c-c-r-ud-read-read-data"> </a>✅ Step 6c. C(R)UD = read = read data</h4><p>Now that we've inserted a set of rows (two sets, to be precise), let's take a look at how to read the data back out. This is done with a <strong>SELECT</strong> statement. In its simplest form we could just execute a statement like the following <strong><em>**cough</em></strong> <strong><em>**cough</em></strong>:</p><pre lang="sql"><code>SELECT * FROM networks;</code></pre><pre><code> name        | description                   | region-------------+-------------------------------+--------  forest-net | forest fire detection network |  south volcano-net |    volcano monitoring network |  north</code></pre><p>or</p><pre lang="sql"><code>SELECT * FROM sensors_by_network;</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; SELECT * FROM sensors_by_network; network     | sensor | characteristics                               | latitude  | longitude-------------+--------+-----------------------------------------------+-----------+-------------  forest-net |  s1001 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.526503 |  -95.582815  forest-net |  s1002 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.518650 |  -95.583585  forest-net |  s1003 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.515056 |  -95.556225 volcano-net |  s2001 | {'accuracy': 'high', 'sensitivity': 'medium'} | 44.460321 | -110.828151 volcano-net |  s2002 | {'accuracy': 'high', 'sensitivity': 'medium'} | 44.463195 | -110.830124</code></pre><p>You may have noticed my coughing fit a moment ago. Even though you can execute a <strong>SELECT</strong> statement with no partition key defined, this is NOT something you should do when using Apache Cassandra. We are doing it here for illustration purposes only and because our whole dataset is just a handful of values.</p><p>Given the data we inserted earlier, a more proper statement would be something like (while we are at it, we also explicitly specify which columns we want back):</p><pre lang="sql"><code>SELECT sensor, characteristics, latitude, longitude FROM sensors_by_networkWHERE network = 'forest-net';</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; SELECT sensor, characteristics, latitude, longitude               ... FROM sensors_by_network               ... WHERE network = 'forest-net'; sensor | characteristics                               | latitude  | longitude--------+-----------------------------------------------+-----------+------------  s1001 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.526503 | -95.582815  s1002 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.518650 | -95.583585  s1003 | {'accuracy': 'medium', 'sensitivity': 'high'} | 30.515056 | -95.556225</code></pre><p>The key is to ensure we are <strong>always selecting by some partition key</strong> at a minimum, so to avoid the dreaded <em>full-cluster scans</em> which yield performances that are generally unacceptable in production.</p><p>Ok, with that out of the way we can <strong>READ</strong> the data from the other table as well - remember we <strong>INSERT</strong>ed on both tables?</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>SELECT * FROM temperatures_by_sensor;SELECT timestamp, value FROM temperatures_by_sensorWHERE sensor='s1002' AND date='2020-07-05';</code></pre><p>(again, in the second <strong>SELECT</strong> we specify some columns - it is something we may want to do in most cases).</p><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; select timestamp, value from temperatures_by_sensor where sensor='s1002' and DATE='2020-07-05'; timestamp                       | value---------------------------------+------- 2020-07-05 12:59:59.000000+0000 |    99 2020-07-05 12:00:01.000000+0000 |   100 2020-07-05 00:59:59.000000+0000 |    82 2020-07-05 00:00:01.000000+0000 |    82</code></pre><p>Once you execute the above <strong>SELECT</strong> statements you should see something like the expected output above. We have now <strong>READ</strong> the data we <strong>INSERTED</strong> earlier. Awesome job!</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>SELECT * FROM temperatures_by_sensorWHERE sensor='s1002';</code></pre><p>📗 <strong>Expected output</strong></p><p>This is a surprise.</p><p/><details><summary><b> Can you explain the error message ?</b></summary>As you did not provide the full partition key (2 columns) Cassandra needs to perform a full scan of your cluster (request on every node).<p>It will be bad, it will be ugly, it will be your fault. Always code your applications as if the DBA was a serial killer and he knows your address.</p></p></details><p/><h4><a class="anchor" aria-hidden="true" id="step-6d-cr-u-d-update-update-data"> </a>✅ Step 6d. CR(U)D = update = update data</h4><p>At this point we've <strong><em>CREATED</em></strong> and <strong><em>READ</em></strong> some data, but what happens when you want to change some existing data to some new value? That's where <strong>UPDATE</strong> comes into play.</p><p><em>The use case is as follows: We notice the sensor was not correctly calibrated and the data needs to be updated.</em></p><p>Let's take one of the records we created earlier and modify it. Recall that we <strong><em>INSERTED</em></strong> the following record in the <strong><em>temperatures_by_sensors</em></strong> table.</p><pre lang="sql"><code>// For referenceINSERT INTO temperatures_by_sensor (sensor,date,timestamp,value)VALUES ('s1002','2020-07-05','2020-07-05 00:00:01', 82);</code></pre><blockquote><p>Let's say that at this particular moment the temperature was not 82 but 92 (Climate change ...).</p></blockquote><p>Looking at <code>PRIMARY KEY ((sensor, date), timestamp)</code>, we know that  <strong>sensor</strong>, <strong>date</strong> and <strong>timestamp</strong> are used to define uniqueness of the row. We'll need all of them to update our record (plus, of course, some of the data columns, otherwise we are not changing anything in that row!).</p><p>📘 <strong>Commands to execute</strong></p><pre lang="sql"><code>UPDATE temperatures_by_sensor SET value = 92WHERE sensor = 's1002'AND date = '2020-07-05'AND timestamp = '2020-07-05 00:00:01';SELECT *FROM temperatures_by_sensor WHERE sensor='s1002' AND DATE='2020-07-05';</code></pre><p>📗 <strong>Expected output</strong></p><pre><code>token@cqlsh:sensor_data&gt; select *  from temperatures_by_sensor where sensor='s1002' and DATE='2020-07-05'; sensor | date       | timestamp                       | value--------+------------+---------------------------------+-------  s1002 | 2020-07-05 | 2020-07-05 12:59:59.000000+0000 |    99  s1002 | 2020-07-05 | 2020-07-05 12:00:01.000000+0000 |   100  s1002 | 2020-07-05 | 2020-07-05 00:59:59.000000+0000 |    82  s1002 | 2020-07-05 | 2020-07-05 00:00:01.000000+0000 |    92(4 rows)token@cqlsh:sensor_data&gt; </code></pre><blockquote><p><em>Note</em>: you could also achieve the same result with another <code>INSERT</code> statement,which will simply overwrite the previous values if the partition key is the same.This is because Cassandra <em>does not read before writing</em>, i.e. updates are inserts!</p></blockquote><h4><a class="anchor" aria-hidden="true" id="step-6e-cru-d-delete-remove-data"> </a>✅ Step 6e. CRU(D) = delete = remove data</h4><p>The final operation from our <strong>CRUD</strong> acronym is <strong>DELETE</strong>. This is the operation we use when we want to remove data from the database.In Apache Cassandra you can <strong>DELETE</strong> from the cell level all the way up to the partition<em>(meaning I could remove a single column in a single row or I could remove a whole partition)</em> using the same <strong>DELETE</strong> command.</p><p><em>Generally speaking, it's best to perform as few delete operations as possible on the largest amount of data. Think of it this way, if you want to delete ALL data in a table, don't delete each individual cell, just <strong>TRUNCATE</strong> the table. If you need to delete all the rows in a partition, don't delete each row, <strong>DELETE</strong> the partition, and so on.</em></p><p>When deleting a row on a given table, we have to specify the values of the primary key for that table. <em>(And don't forgetthat, if your data model has the same information stored twice in different tables, it will be up to you toissue two different <strong>DELETE</strong> operations!)</em></p><p>📘 <strong>Commands to execute</strong></p><ul><li>Partition level delete</li></ul><pre lang="sql"><code>// Get a partitionSELECT *  FROM temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-05';// Delete at Partition levelDELETE FROM temperatures_by_sensorWHERE sensor='s1002' AND date='2020-07-05';// Read againSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-05';</code></pre><ul><li>Row-level delete</li></ul><pre lang="sql"><code>// Get a partitionSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-04';// Delete at Row levelDELETE FROM temperatures_by_sensorwhere sensor='s1002' AND date='2020-07-04' AND timestamp='2020-07-04 00:00:01.000000+0000';// Read againSELECT *  from temperatures_by_sensor WHERE sensor='s1002' AND date='2020-07-04';</code></pre><p>(Notice in the above, for your convenience, we read the tables, then delete the rows, then read them again).</p><p>📗 <strong>Expected output</strong></p><p><img src="images/cql/07_deleting.png" alt="Deleting in CQL" /></p><p>Notice the rows are now removed from both tables: it is as simple as that.</p><h4><a class="anchor" aria-hidden="true" id="step-6f-design"> </a>✅ Step 6f. Design</h4><pre><code>What is the table we need in order to:  - find hourly average temperatures ...  - for every sensor ...  - in a specified network ...  - for a given date range ?How can you do that?</code></pre><p>Maybe you select every sensors...</p><ul><li><p>...then for every sensors you select the list of temperatures...</p></li><li><p>...but you could do the latest queries in parallel doing map reduce</p></li></ul><p>Maybe you can query all temperatures and then filter by network...</p><ul><li><p>... but you will need to add this column network....</p></li><li><p>....</p></li><li><p>....</p></li></ul><p><code>STOP IT !!!!</code></p><p>With Cassandra for a new request, you create a new table, even if its mean duplicating the data. I think you got it <code>^_^</code></p><p/><details><summary><b> Can you find what the table looks like ?</b></summary><hr><p><pre>CREATE TABLE temperatures_by_network (  network TEXT,  week DATE,  date_hour TIMESTAMP,  sensor TEXT,  avg_temperature FLOAT,  latitude DECIMAL,  longitude DECIMAL,  PRIMARY KEY ((network,week),date_hour,sensor)) WITH CLUSTERING ORDER BY (date_hour DESC, sensor ASC);</pre></details><p/><h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2><p>To submit the <strong>homework</strong>, please take a screenshot of the CQL Console showing the rows in tables<code>temperatures_by_sensor</code> and <code>sensors_by_network</code> before <em>and</em> after executing the DELETE statements.</p><p>You should also complete two mini-courses (a few minutes each) about using CQL and designing tables:</p><ul><li>Complete the mini-course <a href="https://www.datastax.com/learn/cassandra-fundamentals/cql">Cassandra Query Language</a> and take a screenshot of the final screen (&quot;Congratulations!&quot; on the left + console output on the right).</li><li>Complete the mini-course <a href="https://www.datastax.com/learn/data-modeling-by-example/digital-library-data-model">&quot;Cassandra Data Modeling / Digital Library&quot;</a> (link for hands-on at the bottom of the lessons). Take a screenshot of the final screen (&quot;Congratulations!&quot; on the left + console output on the right).</li></ul><p>Don't forget to <a href="https://dtsx.io/homework-intro-to-cassandra">submit your homework</a> and be awarded a nice verified badge!</p><h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Astra DB, built on Apache Cassandra.Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p>Congratulations: you made to the end of today's workshop.</p><p>Don't forget to <a href="https://dtsx.io/homework-intro-to-cassandra">submit your homework</a> and be awarded a nice verified badge!</p><p><img src="images/badge/intro-to-cassandra.png" alt="Badge" /></p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-cassandra-fundamentals
Getting astra.json for datastaxdevs/workshop-introduction-to-machine-learning at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="machine-learning-with-apache-spark-cassandra"> </a>Machine Learning with Apache Spark &amp; Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="requirements"> </a>Requirements</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-setup"> </a>5. Setup</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-algorithms"> </a>6. Algorithms</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT</h2>
HTML FOR datastaxdevs-workshop-introduction-to-machine-learning<h1><a class="anchor" aria-hidden="true" id="machine-learning-with-apache-spark-cassandra"> </a>Machine Learning with Apache Spark &amp; Cassandra</h1><p><img src="images/intro-to-ML-cover.png" alt="Workshop cover" /></p><p>Welcome to the <strong>Introduction to machine learning</strong> workshop! In this two-hour workshop, we show you how you can leverage the distributed <code>NoSQL database Apache Cassandra™</code> to save your datasets, train you models and predict at scale.</p><p>Want to learn about the awesomeness of distributed databases and computational systems?Want to get hands-on with DataStax's Cassandra-as-a-Service offering (<em>for free!</em>) and use popular Machine Learning tools and algorithms?Join in and follow along with this workshop!</p><ul><li><p>Spark + Cassandra = :heart:</p></li><li><p>Spark + DataStax Astra DB = :fire: :rocket: :stars:</p></li></ul><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#1-objectives">Objectives</a></li><li><a href="#2-frequently-asked-questions">Frequently asked questions</a></li><li><a href="#3-materials-for-the-session">Materials for the Session</a></li><li><a href="#4-create-your-astra-db-instance">Create your Database</a></li><li><a href="#5-setup">Setup</a></li><li><a href="#6-algorithms">Algorithms</a></li><li><a href="#7-homework">Homework</a></li><li><a href="#8-whats-next">What's NEXT</a></li></ol><blockquote><p><a href="#-start-hands-on">🔖 Accessing HANDS-ON</a></p></blockquote><h2><a class="anchor" aria-hidden="true" id="1-objectives"> </a>1. Objectives</h2><p>1️⃣ <strong>Learn about the NoSQL database Apache Cassandra™</strong></p><p>2️⃣ <strong>Meet Apache Spark™ and its superpowers</strong></p><p>3️⃣ <strong>Learn about the main ideas and practice of Machine Learning (ML)</strong></p><p>4️⃣ <strong>Get a practical understanding of some of the main ML algorithms</strong></p><p>🚀 <strong>Have fun with an interactive session (Python interactive notebooks + Cassandra + Spark)</strong></p><h2><a class="anchor" aria-hidden="true" id="2-frequently-asked-questions"> </a>2. Frequently asked questions</h2><details><summary><strong>1️⃣ Can I run this workshop on my computer?</strong></summary><p>There is nothing preventing you from running the workshop on your own machine. If you do so, you will need: <code>git</code>, <code>docker</code>, <code>docker-compose</code>.</p><p>In this readme, we try to provide instructions for local development as well - but keep in mind that the main focus is development on Gitpod, hence <strong>we can't guarantee live support</strong> about local development in order to keep on track with the schedule. However, we will do our best to give you the info you need to succeed.</p></details><details><summary><strong>2️⃣ Are there other prerequisites?</strong></summary><p>You will need enough <em>real estate</em> on screen, we will ask you to open a few windows and it would not fit on mobiles (tablets should be OK).</p><p>You will need an Astra account: don't worry, we'll work through that in the following.</p></details><details><summary><strong>3️⃣ Do I need to pay for anything for this workshop?</strong></summary><p><strong>No.</strong> All tools and services we provide here are FREE. FREE not only during the session but also afterwards.</p></details><details><summary><strong>4️⃣ Will I get a certificate if I attend this workshop?</strong></summary><p>Attending the session is not enough. You need to complete the <a href="#7-homework">homework detailed below</a>and you will get a nice badge that you can share on linkedin or anywhere else<em>(the badge conforms to the &quot;open badge&quot; specifications)</em>.</p></details><h2><a class="anchor" aria-hidden="true" id="3-materials-for-the-session"> </a>3. Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to work at your own pace,we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="/slides/slides.pdf">Slide deck</a></li><li><a href="https://dtsx.io/discord">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/ask?tags=cassandra">Ask on StackOverflow</a> (or <a href="https://dba.stackexchange.com/questions/ask?tags=cassandra">StackExchange</a> for operators)</li></ul><h3><a class="anchor" aria-hidden="true" id="requirements"> </a>Requirements</h3><ul><li><a href="https://git-scm.com/book/en/v2/Getting-Started-Installing-Git">git</a></li><li><a href="https://astra.dev/yt-8-31">DataStax Astra Registration</a> (<em>sign up with the email you used to register for the workshop!</em>)</li><li><a href="https://www.docker.com/products/docker-desktop">Docker</a></li><li><a href="https://docs.docker.com/compose/install/">Docker-compose</a> (<em>included with Docker Desktop for Mac and Windows installs</em>)</li></ul><hr /><h1><a class="anchor" aria-hidden="true" id="start-hands-on"> </a>🏁 Start Hands-on</h1><h2><a class="anchor" aria-hidden="true" id="4-create-your-astra-db-instance"> </a>4. Create your Astra DB instance</h2><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you end your credits the databases will pause, no charge</em></p><p>Leveraging the <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a>, create a database. <em>Right-Click the following button</em> and <em>Open in a new TAB:</em></p><p><a href="https://astra.dev/yt-8-31" target="_blank" rel="noopener"><img src="images/create_astra_db_button.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>machine_learning</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCKER 🔒 icons, those are the region you can use for free.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>machine_learning</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB dashboard page.</p></blockquote><p>While the database is being created, you will also get a<a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#b-prerequisites"><strong>Security token</strong></a>:save it somewhere safe, since you'll need it later during setup.</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show you on screen how to create a token but will have to destroy to token immediately for security reasons.</code></pre></blockquote><p>The database status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this will only take 2-3 minutes. You will also receive an email when it is ready.</p><blockquote><p>If you already had the database, you can still create a new token: see <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#b-prerequisites">here</a>.</p></blockquote><p>Then go to the <em>Connect</em> tab for your database and download your <strong>Secure Connect Bundle</strong>, as described <a href="https://awesome-astra.github.io/docs/pages/astra/download-scb/">at this link</a>. It's a ZIP file of about 12Kb, which you will need later.</p><p><a href="#-table-of-content">🏠 Back to Table of Contents</a></p><h2><a class="anchor" aria-hidden="true" id="5-setup"> </a>5. Setup</h2><p>We suggest to use Gitpod: <strong>right-click</strong> on the following button and <strong>open in new tab</strong>:</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-introduction-to-machine-learning"><img src="images/open_in_gitpod.svg?raw=true" /></a></p><blockquote><p>You can also run everything locally. In this case, you may need to know what you are doing, as we won't be able to troubleshoot live.</p></blockquote><p>If you are on Gitpod, simply follow the on-screen instructions to get everything running:</p><ul><li>⌛ <em>Wait 2-3 minutes as your IDE (and Linux box) gets provisioned...</em></li><li>When prompted in the Gitpod Console, enter the following information to connect to DB:<ul><li>Astra DB Token ID</li><li>Astra DB Token Secret</li><li>Keyspace name (<code>machine_learning</code> by default)</li></ul></li><li>When asked, drag-and-drop (or copy) the Secure bundle to the required destination</li><li>⌛ <em>Wait another 1-2 minutes (while tables are created and populated in your database) ...</em></li><li>Eventually the Gitpod console will spawn a new tab with the Jupter UI running (<strong>check your pop-up blocker</strong> to let it through)</li><li>Insert the password <code>mlrules</code> to access the Jupyter UI</li></ul><details><summary>Steps for running locally (click to show)</summary><ul><li>Clone the repo, <code>cd</code> into it and launch <code>./init_tools.sh</code> (to get the required tools ready and <code>docker-compose</code> up and running).</li><li>Once that is finished, launch <code>./setup.sh</code> and follow the instructions, similarly as for Gitpod.</li></ul><blockquote><p>You may need to use some custom IP instead of <code>localhost</code> if youuse docker-for-mac, docker-for-windows or similar installation.</p></blockquote><blockquote><p><em>Known Issue</em>: in some cases executing the exercises may lead to memory issues, especiallyon weaker or non-Linux machines due to docker limitations on memory. If you have anyissues with exercises after the first few, try to clean up and start again<code>docker-compose kill &amp;&amp; docker-compose down &amp;&amp; docker-compose up -d</code>.You may need to repeat steps of the notebook you were working on.</p></blockquote></details><details><summary>🤦 "I messed up and I need to re-initialize" (click to show)</summary><p>Don't worry, it happens. Re-initialization of the full repo goes as follows:</p><ul><li><code>./init_tools.sh</code>: this downloads Astra DB client utilities and starts your <code>docker-compose</code> image(s). Make sure you have no runningDocker images before re-launching this.</li><li><code>./setup.sh</code>: this allows you to re-create the secrets file. Launch again if you messed up with token info, bundle zipfile and so on. This, in turn, invokes the following ...</li><li><code>./initialize/initialize.sh</code>: table creation and bulk migration of needed datasets from files to database tables.</li></ul></details><h2><a class="anchor" aria-hidden="true" id="6-algorithms"> </a>6. Algorithms</h2><p>The main Jupyter web interface will list five numbered notebooks available.Each one illustrates a key algorithm in Machine Learning:</p><ul><li><strong>K-Means</strong> Clustering</li><li><strong>Naive Bayes</strong> inference</li><li><strong>Random Forest</strong> classification</li><li><strong>FP-Growth</strong> recommendation</li><li><strong>Collaborative Filtering</strong> recommendation</li></ul><p>Click a notebook to open it in a new tab, then you can run all code cellssequentially by clicking on them and hitting <code>Ctrl + Enter</code>.Watch each code cell execute (its numbering will display <code>[*]</code> while running)and, when it finishes, move on to the next.</p><blockquote><p><em>Note</em>: if you see errors such as empty or nonexisting tables, chances areyou started the lab while the database was still being created or was in&quot;maintenance mode&quot;. To fix this, simply issue the command <code>./initialize/initialize.sh</code>and wait one minute or so for it to complete.</p></blockquote><h2><a class="anchor" aria-hidden="true" id="7-homework"> </a>7. Homework</h2><p><em>Now it's your turn!</em></p><p>Try to improve the accuracy (as computed on the test set) of theRandom Forest classification model by tweaking its parameters.You will need to re-train the model and re-evaluate the accuracy at each try.</p><blockquote><p>Tip: look at the <a href="https://spark.apache.org/docs/latest/api/python/reference/api/pyspark.ml.classification.RandomForestClassifier.html">documentation</a>as a starting point, to see what options there are, pyspark.ml.classification.RandomForestClassifier).</p></blockquote><img src="images/intro-ml-badge.png?raw=true" width="150" align="right" /><p>You can proceed by selecting some parameters (such as <code>numTrees</code> or <code>maxDepth</code>),increase and decrease their value a bit, and compare the accuracy with the&quot;baseline&quot; result from the model you started with.Ideally you should change one parameter at a time,keeping all others the same as the &quot;baseline&quot;.Is the model accuracy more sensitive to <code>numTrees</code> or <code>maxDepth</code>?</p><p>If you really want to get serious, you could even automate this<em>hyperparameter search</em> in the code itself - possibly on a <em>grid</em> of choicesfor the parameters you want to test, such as:</p><pre><code>{numTrees in [5, 10, 20]} x {maxDepth in [2, 5, 10]} x { ... other parameters ... } ...</code></pre><p><strong>Provide a screenshot of an improved choice of parameters, yielding anaccuracy higher than the &quot;baseline&quot;</strong>(Note: an improvement of at least 0.05 is possible).</p><p>Go to <a href="https://dtsx.io/homework-intro-ml">this form</a> to submit your homework, give us a few days to review it,and wait for your well-deserved &quot;Intro to Machine Learning&quot; badge!</p><h2><a class="anchor" aria-hidden="true" id="8-what-s-next"> </a>8. What's NEXT</h2><p>We've just scratched the surface of what you can do with</p><ul><li>Astra DB, built on Apache Cassandra™;</li><li>Apache Spark™;</li><li>the awesome algorithm in the Machine Learning field.</li></ul><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> to see what else is possible.There's plenty to dig into!</p><p><strong>Congratulations: you made to the end of today's workshop.</strong></p><p>Don't forget to <a href="#7-homework">submit your homework</a> and be awarded a nice verified badge!</p><p><strong>... and see you at our next workshop!</strong></p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-introduction-to-machine-learning
Getting astra.json for datastaxdevs/workshop-python-astra-app at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="get-started-on-python-and-nosql-with-apache-cassandra"> </a>Get Started on Python and NoSQL with Apache Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-database-setup"> </a>2. Database Setup</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-gitpod-setup"> </a>3. GitPod Setup</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3a-install-and-configure-the-astra-cli"> </a>3a. Install and configure the Astra CLI</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3b-download-the-secure-connect-bundle"> </a>3b. Download the Secure Connect Bundle</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3c-configure-the-dot-env-file"> </a>3c. Configure the dot-env file</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="3d-cassandra-python-driver"> </a>3d. Cassandra Python driver</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-simple-demos"> </a>4. Simple Demos</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4a-python-scripts"> </a>4a. Python scripts</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="4b-fastapi"> </a>4b. FastAPI</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-sales-data-generator"> </a>5. Sales Data Generator</h2>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5a-lookup-tables"> </a>✅ 5a. Lookup Tables</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5b-generate-user-and-product-data"> </a>✅ 5b. Generate User and Product Data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5c-generate-order-data"> </a>✅ 5c. Generate Order Data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5d-check-generated-data"> </a>✅ 5d. Check Generated Data</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="5e-sales-data-via-fastapi"> </a>✅ 5e. Sales Data via FastAPI</h4>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-what-s-next"> </a>6. What's NEXT ?</h2>
HTML FOR datastaxdevs-workshop-python-astra-app<h1><a class="anchor" aria-hidden="true" id="get-started-on-python-and-nosql-with-apache-cassandra"> </a>Get Started on Python and NoSQL with Apache Cassandra</h1><img src="images/python_nosql_workshop.png?raw=true" /><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>📋 Table of contents</h2><ol><li><a href="#1-introduction">Introduction</a></li><li><a href="#2-database-setup">Database Setup</a></li><li><a href="#3-gitpod-setup">GitPod - Dev Environment Setup</a></li><li><a href="#4-simple-demos">Simple Demos</a></li><li><a href="#5-sales-data-generator">Sales Data Generator</a></li><li><a href="#6-whats-next">What's NEXT ?</a></li></ol><h2><a class="anchor" aria-hidden="true" id="1-introduction"> </a>1. Introduction</h2><p>In this workshop you will learn about building small Python applications to load and query data, while using DataStax Astra DB as its data storage layer.</p><h2><a class="anchor" aria-hidden="true" id="2-database-setup"> </a>2. Database Setup</h2><p>For this workshop you will need an Astra DB instance.  You will be able to create one and use it for free.  If you already have an Astra DB instance, you can certainly use that.</p><p><em>In case you haven't created your Astra DB cluster yet, go ahead and create it now (for free) by clicking here:</em></p><p><a href="https://astra.dev/yt-02-11"><img src="images/create_astra_db_button.png?raw=true" /></a></p><ul><li>Database Name: <code>workshops</code></li><li>Keyspace Name: <code>sales</code></li></ul><p><strong>Note</strong>: the Token that is created with the database does not have all permissions we need, so you <em>need</em> to manually <a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">create a Token</a> with the higher &quot;DB Administrator&quot; permission and use it in what comes next.</p><p><em>If you have a database named <code>workshops</code> but not a <code>sales</code> keyspace,simply add it using the &quot;Add Keyspace&quot; button on the bottom right hand corner of your DB dashboard.</em></p><h4><a class="anchor" aria-hidden="true" id="astra-db-administrator-token"> </a>Astra DB &quot;Administrator&quot; token</h4><p>If you do not have a &quot;DB Administrator&quot; token yet, log in to your Astra DBand create a token with the &quot;Database Administrator&quot; role.To create the token, click on the &quot;...&quot; menu next to your database in the mainAstra dashboard and choose &quot;Generate token&quot;. Then make sure you select the &quot;Database Administrator&quot; role.<em>Download or note down all components of the token before navigating away:these will not be shown again.</em><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/">See here</a>for more on token creation.</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><p>Remember, as mentioned already, <em>the default Token auto-created for you whencreating the database is not powerful enough for us today.</em></p><h2><a class="anchor" aria-hidden="true" id="3-gitpod-setup"> </a>3. GitPod Setup</h2><p>First, open this repo in Gitpod by right-clicking the following button (select &quot;open in new tab&quot;):</p><p><a href="https://gitpod.io/#https://github.com/datastaxdevs/workshop-python-astra-loader"><img src="images/open_in_gitpod.svg?raw=true" /></a></p><p>In a couple of minutes you will have your Gitpod IDE up and running, with this repo cloned, ready and waiting for you (you may have to authorize the Gitpod single-sign-on to continue).</p><p><em>Note</em>: The next steps are to be executed <em>within the Gitpod IDE.</em></p><h3><a class="anchor" aria-hidden="true" id="3a-install-and-configure-the-astra-cli"> </a>3a. Install and configure the Astra CLI</h3><p>In a console within Gitpod, provide the &quot;token proper&quot; part of the Token (the string starting with <code>AstraCS:...</code>) by running:</p><pre><code>. ~/.bashrc ; astra setup</code></pre><p>You will be prompted to paste your Astra token.  Remember, that token needs &quot;Database Administrator&quot; permissions.  The default, auto-generated token will not work.</p><p><em>(Optional)</em> If the above step was successful, try getting some information on your Astra DB by executing the following commands:</p><pre><code>astra db list</code></pre><pre><code>astra db list-keyspaces workshops</code></pre><pre><code>astra db get workshops</code></pre><h3><a class="anchor" aria-hidden="true" id="3b-download-the-secure-connect-bundle"> </a>3b. Download the Secure Connect Bundle</h3><p>The driver also need the &quot;Secure Connect Bundle&quot; zipfile to work (it contains proxy and routing information as well as the necessary certificates).</p><p>To download it:</p><pre><code>astra db download-scb -f secure-connect-workshops.zip workshops</code></pre><p>You can check it has been saved with <code>ls *.zip</code>.</p><h3><a class="anchor" aria-hidden="true" id="3c-configure-the-dot-env-file"> </a>3c. Configure the dot-env file</h3><p>Copy the template dot-env and edit it with:</p><pre><code>cp .env.sample .env ; gp open .env</code></pre><p>Replace the Client ID and Client Secret strings from the database Token.</p><p>Finally, <code>source</code> the .env file:</p><pre lang="bash"><code>source .env</code></pre><p>You can verify that your environment variables have been appropriately sourced by executing:</p><pre lang="bash"><code>env | grep ASTRA</code></pre><h3><a class="anchor" aria-hidden="true" id="3d-cassandra-python-driver"> </a>3d. Cassandra Python driver</h3><p>For these examples to work, the Cassandra Python driver will need to be installed.  The GitPod instance has automatically taken care of that, and you can verify it from a terminal with the following command:</p><pre><code>pip show cassandra-driver</code></pre><h2><a class="anchor" aria-hidden="true" id="4-simple-demos"> </a>4. Simple Demos</h2><p>To verify that we've done everything correctly so far, let's run a couple simple scripts.  First, make sure you're in the <code>21_SimpleDemos</code> directory:</p><h3><a class="anchor" aria-hidden="true" id="4a-python-scripts"> </a>4a. Python scripts</h3><pre><code>cd 21_SimpleDemos</code></pre><p>Now, execute the getCassClusterInfo.py script:</p><pre><code>python getCassClusterInfo.py</code></pre><p>That should show you some simple properties about your Astra DB cluster:</p><pre><code>% python getCassClusterInfo.pyConnected to cndb and it is running 4.0.0.6816 version.Done.</code></pre><p>Next, let's build a table and load a few rows of data.  If you like, have a look at the <a href="21_SimpleDemos/01_cassdemo_emp_cassandraTable.cql">01_cassdemo_emp_cassandraTable.cql</a> file.  Once you're done, execute this command to run the CQL commands within:</p><pre><code>astra db cqlsh workshops -f 01_cassdemo_emp_cassandraTable.cql</code></pre><p>With the <code>emp</code> table created and a few rows of data INSERTed, let's run the <code>readWriteCassEmp.py</code> script.</p><pre><code>python readWriteCassEmp.py</code></pre><p>That should show the following output:</p><pre><code>% python readWriteCassEmp.py---- 1 row inserted --------------------------------------- select and print only 1 row -----------------------------------------------------------------------------first_name | last_name | empid-------------------------------------------------------Scott | Tiger | 1001----------------------------------------------------------- select and print 5 rows ---------------------------------------------------------------------------------first_name | last_name | empid-------------------------------------------------------0b1cdc3f78 | c3394c9d7b | 7206f6b22d5a99 | e721642623 | 6762Scott | Tiger | 10017807b62524 | a7390c4762 | 9278Queen | John | 1003-------------------------------------------------------Done.</code></pre><h3><a class="anchor" aria-hidden="true" id="4b-fastapi"> </a>4b. FastAPI</h3><p>Now let's pull the same data back with restful endpoints.  To begin, we first need to host our service layer with a small webserver.  Uvicorn is a simple webserver for Python, so we'll use that to invoke our simpleDemoApi.py service.</p><pre><code>uvicorn simpleDemoApi:app</code></pre><p>Once that's up and running, let's run a quick test on it.  Open another terminal and try the <code>/cluster_info</code> endpoint with curl.  Or, you can also open a web browser with the following URL: <a href="http://127.0.0.1:8000/cluster_info">http://127.0.0.1:8000/cluster_info</a></p><pre><code>curl -s -XGET localhost:8000/cluster_info \     -H 'Content-Type: application/json'</code></pre><p>Whether you use a browser or the command line, the output should be the same:</p><pre><code>[{&quot;name&quot;:&quot;cndb&quot;,&quot;version&quot;:&quot;4.0.0.6816&quot;}]</code></pre><p>Now let's reproduce work similar to what we did with <code>readWriteCassEmp.py</code>.  First, let's add a new employee to our <code>emp</code> table.  We'll add an employee named &quot;Wayne Gretzky&quot; with the employee number of 99.</p><pre><code>curl -s -XPOST localhost:8000/employee/create \     -d'{&quot;empid&quot;:99,&quot;first_name&quot;:&quot;Wayne&quot;,&quot;last_name&quot;:&quot;Gretzky&quot;}' \     -H 'Content-Type: application/json'</code></pre><p>The employee number of 99 should be the value returned.  Let's make sure by running a <code>GET</code> on the <code>/employee/{id}</code> endpoint URL: <a href="http://127.0.0.1:8000/employee/99">http://127.0.0.1:8000/employee/99</a></p><pre><code>curl -s -XGET http://127.0.0.1:8000/employee/99 \-H 'Content-Type: application/json'</code></pre><p>This should return the output of:</p><pre><code>[{&quot;empid&quot;:99,&quot;first_name&quot;:&quot;Wayne&quot;,&quot;last_name&quot;:&quot;Gretzky&quot;}]</code></pre><p>Likewise, we can also pull back the first 5 rows of the table, using the <code>/employees/{limit}</code> endpoint URL:</p><p><a href="http://127.0.0.1:8000/employees/5">http://127.0.0.1:8000/employees/5</a></p><pre><code>curl -s -XGET http://127.0.0.1:8000/employees/5 \-H 'Content-Type: application/json'</code></pre><p>This should return the output of:</p><pre><code>[{&quot;empid&quot;:99,&quot;first_name&quot;:&quot;Wayne&quot;,&quot;last_name&quot;:&quot;Gretzky&quot;}, {&quot;empid&quot;:7206,&quot;first_name&quot;:&quot;0b1cdc3f78&quot;,&quot;last_name&quot;:&quot;c3394c9d7b&quot;}, {&quot;empid&quot;:6762,&quot;first_name&quot;:&quot;f6b22d5a99&quot;,&quot;last_name&quot;:&quot;e721642623&quot;}, {&quot;empid&quot;:1001,&quot;first_name&quot;:&quot;Scott&quot;,&quot;last_name&quot;:&quot;Tiger&quot;}, {&quot;empid&quot;:9278,&quot;first_name&quot;:&quot;7807b62524&quot;,&quot;last_name&quot;:&quot;a7390c4762&quot;}]</code></pre><h2><a class="anchor" aria-hidden="true" id="5-sales-data-generator"> </a>5. Sales Data Generator</h2><p>First of all, let's make sure we're in the right directory:</p><pre><code>cd ../31_SalesApp_AutoSalesGenerator</code></pre><p>Let's start by making sure that our keyspace has the necessary tables.  Have a look at the <a href="31_SalesApp_AutoSalesGenerator/02_sales_create_tables.cql">02_sales_create_tables.cql</a> file.  Once you're donw, execute this command to run the CQL commands within:</p><pre><code>astra db cqlsh workshops -f 02_sales_create_tables.cql</code></pre><p>Once that script completes, we can verify that it created our new tables with the following command:</p><pre><code>astra db cqlsh workshops -e &quot;desc keyspace sales&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="5a-lookup-tables"> </a>✅ 5a. Lookup Tables</h4><p>Next, let's load the lookup tables.  Feel free to look through the <a href="31_SalesApp_AutoSalesGenerator/03_load_data_in_lookup_tables.cql">03_load_data_in_lookup_tables.cql</a> file:</p><pre><code>astra db cqlsh workshops -f 03_load_data_in_lookup_tables.cql</code></pre><p>You can verify the contents of the <code>lookup_product_categories</code>, <code>lookup_user_platforms</code>, <code>lookup_usa_states</code>, and <code>lookup_email_servers</code> tables with cqlsh:</p><pre><code>astra db cqlsh workshops</code></pre><p>You should be able to quickly sample the tables like this:</p><pre><code>% astra db cqlsh workshops[INFO]  Secure connect bundles have been downloaded.[INFO]Cqlsh is starting, please wait for connection establishment...Connected to cndb at 127.0.0.1:9042.[cqlsh 6.8.0 | Cassandra 4.0.0.6816 | CQL spec 3.4.5 | Native protocol v4]Use HELP for help.token@cqlsh&gt; use sales;token@cqlsh:sales&gt; SELECT * FROM lookup_usa_states LIMIT 4; id | state_code | state_name----+------------+---------------- 23 |         MI |       Michigan 33 |         NM |     New Mexico  5 |         CA |     California 28 |         NC | North Carolina(4 rows)</code></pre><h4><a class="anchor" aria-hidden="true" id="5b-generate-user-and-product-data"> </a>✅ 5b. Generate User and Product Data</h4><p>Let's have a look at the <code>globalSettings.py</code> file.</p><pre lang="python"><code>### https://docs.datastax.com/en/developer/python-driver/3.25/api/cassandra/#cassandra.ConsistencyLevelCASS_READ_CONSISTENCY  = ConsistencyLevel.LOCAL_QUORUMCASS_WRITE_CONSISTENCY = ConsistencyLevel.LOCAL_QUORUM### for small systemTOTAL_USERS    = 1000        # SalesApp_GenerateUsers.py    will generate this number of usersTOTAL_PRODUCTS = 5000        # SalesApp_GenerateProducts.py will generate this number of productsGEN_MAX_ORDERS = 120          # minimum 10. SalesApp_GenerateOrders.py will generate less than this number of orders randomlyGEN_MAX_PRODUCTS_ORDER = 6   # minimum 5. SalesApp_GenerateOrders.py will generate less than this number of products per order randomly</code></pre><p>Next, let's generate data for users and products.  There are two Python scripts which will randomly generate users and products.  Feel free to take a look at them:</p><ul><li><a href="31_SalesApp_AutoSalesGenerator/SalesApp_GenerateUsers.py">SalesApp_GenerateUsers.py</a></li><li><a href="31_SalesApp_AutoSalesGenerator/SalesApp_GenerateProducts.py">SalesApp_GenerateProducts.py</a></li></ul><p>The behaviors of these scripts are controlled by the <a href="31_SalesApp_AutoSalesGenerator/globalSettings.py">globalSettings.py</a> script, which is used as an import.  We've preset the variables with some good defaults.</p><p>Let's start by running the <a href="31_SalesApp_AutoSalesGenerator/SalesApp_GenerateUsers.py">SalesApp_GenerateUsers.py</a> script:</p><pre><code>% python SalesApp_GenerateUsers.py100 users generated.200 users generated.300 users generated.400 users generated.500 users generated.600 users generated.700 users generated.800 users generated.900 users generated.1000 users generated.Done.</code></pre><p>Next, we will run the <a href="31_SalesApp_AutoSalesGenerator/SalesApp_GenerateProducts.py">SalesApp_GenerateProducts.py</a> script:</p><pre><code>% python SalesApp_GenerateProducts.py1000 products generated.2000 products generated.3000 products generated.4000 products generated.5000 products generated.Done.</code></pre><h4><a class="anchor" aria-hidden="true" id="5c-generate-order-data"> </a>✅ 5c. Generate Order Data</h4><p>With the users and products generated, we can finally generate orders with the <a href="31_SalesApp_AutoSalesGenerator/SalesApp_GenerateOrders.py">SalesApp_GenerateOrders.py</a> script:</p><pre><code>% python SalesApp_GenerateOrders.py2023-01-09 10:57:29.644454 | 50 orders generated.93 total orders generated.Done.</code></pre><h4><a class="anchor" aria-hidden="true" id="5d-check-generated-data"> </a>✅ 5d. Check Generated Data</h4><p>Now that everything has been generated, we can have a look at the tables with cqlsh.  We can use the Astra CLI to bring up a cqlsh session with our workshops database like this:</p><pre><code>% astra db cqlsh workshops[INFO]  Secure connect bundles have been downloaded.[INFO]Cqlsh is starting, please wait for connection establishment...Connected to cndb at 127.0.0.1:9042.[cqlsh 6.8.0 | Cassandra 4.0.0.6816 | CQL spec 3.4.5 | Native protocol v4]Use HELP for help.token@cqlsh&gt;</code></pre><p>Let's <code>use</code> our sales keyspace and <code>describe</code> the tables within:</p><pre><code>token@cqlsh&gt; use sales;token@cqlsh:sales&gt; desc tables;emp                        lookup_usa_states      sales_order_productslookup_email_servers       lookup_user_platforms  sales_orderslookup_product_categories  products               users</code></pre><p>You can sample the generated data using cqlsh:</p><pre><code>token@cqlsh:sales&gt; SELECT * FROm users LIMIT 10; user_id | user_email_id             | user_name    | user_phone_number | user_platform  | user_state_code---------+---------------------------+--------------+-------------------+----------------+-----------------     990 |   e7dd093a18f4@icloud.com | e7dd093a18f4 |      852-852-7693 |          Linux |              NV     655 | c279111c20a4@fastmail.com | c279111c20a4 |      734-491-7328 | Android Tablet |              VA     937 |    fc1cbfb4b754@lycos.com | fc1cbfb4b754 |      799-215-5954 |        Mozilla |              WA     111 |     2491ff02c8f4@mail.com | 2491ff02c8f4 |      827-375-5187 | Android Tablet |              AL     873 |    4f7642b67084@yahoo.com | 4f7642b67084 |      873-894-4802 | Android Tablet |              TN     412 | 09614cf4eda4@fastmail.com | 09614cf4eda4 |      793-621-2836 |  Android Phone |              DC     332 |    1b8339b37a04@email.net | 1b8339b37a04 |      812-738-3762 |         iPhone |              IL     697 |      5ecc01fc8a14@aol.com | 5ecc01fc8a14 |      714-837-8714 |     ChromeBook |              NH     383 |      1d645c6d44b4@aol.com | 1d645c6d44b4 |      763-129-7112 |        Mozilla |              NH     314 |     8bcdbf085ee4@mail.com | 8bcdbf085ee4 |      774-335-8667 |        Firefox |              GA(10 rows)token@cqlsh:sales&gt; SELECT * FROm products LIMIT 10; product_id | product_category | product_code | product_description          | product_name     | product_price | product_qoh------------+------------------+--------------+------------------------------+------------------+---------------+-------------       1535 |     Collectibles | b12f191b14c4 |       2f195 16a906 87 97390d |       bb9c9 ebfc |         23.97 |        2759       1929 |            Games | 9b2795b36994 |     fe5a4 d8d57ac c2 e35e684 |    7a55 2a09c591 |         52.50 |         596       4292 |  Beauty Products | a90d57817bf4 |        7055b 022bc 49 38899e |    d92e5d56 6a4d |         59.62 |        5161       1235 |        Magazines | 5d33216893d4 | 3278a 868c13ee aeaa 85e99616 | 55b64e59 f38dcb8 |         42.37 |        3769       1434 |     Garden Tools | 441c62e1a004 |      d9b6c f2e86 4f 41687b56 |       8bb9c 0b7e |         39.39 |        1354       2482 |            Music | 6d1deeab3c74 |    8107 cc33f8db fc cbba2b57 |    a1f169a 2df86 |          13.6 |        2773       3843 |            Games | 0d2e85f96084 |       cd53 756a9 aced 2aa92c |  200df11c a14cb2 |         38.28 |        3454        990 |       Appliances | 1e91c433ab64 |       e60b 6ce4eb5 2d 9ab10f |   e3fab 02bc801d |         49.27 |         647       3236 |      Electronics | bf0499ef8cd4 |        6e0f8 029cc cb 436aa8 |   6add32a7 9ef6f |         20.68 |         945       1041 |            Games | 2a2de6dc1b14 |      5b99 059346 bd1 e70163d |       5d09 e42d7 |         36.55 |        5523(10 rows)token@cqlsh:sales&gt; SELECT * FROM sales_orders LIMIT 10; order_date | order_date_hour | order_timestamp                 | order_code                           | order_actual_shipping_date | order_discount_percent | order_estimated_shipping_date   | order_grand_total | order_number_of_products | order_total | user_email_id             | user_id | user_name    | user_phone_number | user_platform | user_state_code------------+-----------------+---------------------------------+--------------------------------------+----------------------------+------------------------+---------------------------------+-------------------+--------------------------+-------------+---------------------------+---------+--------------+-------------------+---------------+----------------- 2023-01-20 |              15 | 2023-01-20 15:25:05.302000+0000 | 97867e70-b0bb-433c-982a-1bf9002c2e27 |                       null |                      3 | 2023-01-31 00:00:00.000000+0000 |         1365.9443 |                        5 |     1408.19 | 09bacfa1c734@hushmail.com |     239 | 09bacfa1c734 |      895-534-5551 |          iPad |              NC 2023-01-20 |              15 | 2023-01-20 15:25:06.429000+0000 | 08629a2f-1e8d-439f-b335-5c49e390bab8 |                       null |                      5 | 2023-01-28 00:00:00.000000+0000 |         1521.2825 |                        5 |     1601.35 |    2748de4b7d74@yahoo.com |     826 | 2748de4b7d74 |      838-375-6071 |    BlackBerry |              VA 2023-01-20 |              15 | 2023-01-20 15:25:07.583000+0000 | e081ff06-457c-4602-859e-fe198c4e056f |                       null |                      1 | 2023-02-03 00:00:00.000000+0000 |         1925.7579 |                        5 |     1945.21 | f686215b1434@hushmail.com |     536 | f686215b1434 |      727-586-9388 |         Linux |              SD 2023-01-20 |              15 | 2023-01-20 15:25:08.648000+0000 | 956c916a-d5a9-452f-b5df-eecf990c9486 |                       null |                      0 | 2023-01-23 00:00:00.000000+0000 |            958.21 |                        3 |      958.21 | 8051919c0594@hushmail.com |     766 | 8051919c0594 |      818-755-8518 |        iPhone |              NC 2023-01-20 |              15 | 2023-01-20 15:25:09.365000+0000 | f929daed-8867-4cb2-938b-7629796923a1 |                       null |                      2 | 2023-02-01 00:00:00.000000+0000 |          395.8612 |                        3 |      403.94 | 56fdd656e5d4@fastmail.com |      75 | 56fdd656e5d4 |      879-217-1128 |        Mac OS |              MN 2023-01-20 |              15 | 2023-01-20 15:25:10.029000+0000 | be405566-6ff7-404d-b081-cc651056abdf |                       null |                      3 | 2023-01-28 00:00:00.000000+0000 |          963.2973 |                        3 |      993.09 |    539933567d94@gmail.com |      53 | 539933567d94 |      838-529-3149 | Android Phone |              MA 2023-01-20 |              15 | 2023-01-20 15:25:10.727000+0000 | 19058b67-2146-4e5a-aeec-52743146a63e |                       null |                      2 | 2023-02-09 00:00:00.000000+0000 |         1447.8226 |                        5 |     1477.37 |    2395e5b0dba4@lycos.com |     994 | 2395e5b0dba4 |      880-164-2794 | Android Phone |              AL 2023-01-20 |              15 | 2023-01-20 15:25:11.767000+0000 | b9479b1c-719c-413e-aa5b-0d19716ba775 |                       null |                      0 | 2023-02-09 00:00:00.000000+0000 |            692.45 |                        4 |      692.45 |    35fd9eb1cd24@email.net |     355 | 35fd9eb1cd24 |      851-397-8540 |        iPhone |              OH 2023-01-09 |              10 | 2023-01-09 10:56:44.471000+0000 | ea372b07-63d1-40ca-ad12-3757fbf25dee |                       null |                      5 | 2023-01-21 00:00:00.000000+0000 |           888.136 |                        4 |      934.88 |   332b20a042f4@icloud.com |     543 | 332b20a042f4 |      840-351-4919 |        iPhone |              MI 2023-01-09 |              10 | 2023-01-09 10:56:45.838000+0000 | 3b3f5511-13c2-4518-9471-91eb070d4314 |                       null |                      0 | 2023-01-21 00:00:00.000000+0000 |           1647.27 |                        4 |     1647.27 |    302903178444@inbox.com |     528 | 302903178444 |      735-452-2509 |       Mozilla |              HI(10 rows)token@cqlsh:sales&gt; SELECT * FROM sales_order_products LIMIT 10; order_date | order_code                           | product_id | product_category | product_code | product_name  | product_price_each | product_price_total | product_sold_quantity------------+--------------------------------------+------------+------------------+--------------+---------------+--------------------+---------------------+----------------------- 2023-01-09 | 8a711501-f8f6-4ec7-b070-d77a9318db4b |       1074 |        Fine Arts | 3babfc747854 | 5713c3 952888 |              57.35 |              172.05 |                     3 2023-01-09 | 8a711501-f8f6-4ec7-b070-d77a9318db4b |       4905 |     Pet Supplies | c0376db4ce84 |   1059f3 4829 |               44.0 |               440.0 |                    10 2023-01-09 | 30386b08-d503-49b9-a478-319a0cb4fa96 |       1043 |         Software | cb7fc23cbc14 |   2e69 4eb50b |              32.82 |              459.48 |                    14 2023-01-09 | 30386b08-d503-49b9-a478-319a0cb4fa96 |       4258 |       Gift Cards | a1e6d671d654 |  b0553 b48bcf |               43.8 |               481.8 |                    11 2023-01-09 | 2e81ab4b-045f-4e0c-a9d2-38ac7d549811 |        913 |      Travel Gear | 63ffd5cebd94 |    8f1fd 1f68 |              59.21 |              177.63 |                     3 2023-01-09 | 2e81ab4b-045f-4e0c-a9d2-38ac7d549811 |       2154 |       Gift Cards | 42ba43214b84 |  bdf64 321b0a |              53.33 |              426.64 |                     8 2023-01-09 | 2e81ab4b-045f-4e0c-a9d2-38ac7d549811 |       2321 |     Garden Tools | 6b1acebdf0f4 | 22fc5c9 ad313 |              35.11 |              386.21 |                    11 2023-01-09 | 2e81ab4b-045f-4e0c-a9d2-38ac7d549811 |       2999 |        Fine Arts | 1bdb689915b4 |   7853aa ae94 |              40.79 |              407.90 |                    10 2023-01-09 | 2e81ab4b-045f-4e0c-a9d2-38ac7d549811 |       3113 |     Garden Tools | 7a96575c96e4 |  62ebd2 eb9c3 |              50.91 |              407.28 |                     8 2023-01-09 | 736194ba-ad66-405a-b51a-baa97321732e |        959 |      Light Bulbs | 6f58f7706204 |   44b8a2 1e21 |              44.74 |              134.22 |                     3</code></pre><h4><a class="anchor" aria-hidden="true" id="5e-sales-data-via-fastapi"> </a>✅ 5e. Sales Data via FastAPI</h4><p>Before we go too much further, have a look at the <a href="31_SalesApp_AutoSalesGenerator/salesAppApi.py">salesAppApi.py</a> code.  In it, you can see how we prepared our CQL statements, defined our object models, and exposed our restful endpoints.</p><p>Now let's stand-up our FastAPI <code>SalesAppApi</code> code with Uvicorn:</p><pre><code>uvicorn salesAppApi:app</code></pre><p>Now, let's pull back the top 5 users by hitting the <code>/users</code> endpoints with <code>curl</code>:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/users/5 \-H 'Content-Type: application/json'</code></pre><p>In the output, look for a specific user's ID.  We can use that ID to pull back specific data for that <code>user_id</code>:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/user/990 \-H 'Content-Type: application/json'</code></pre><p>Remember, as these are GET requests, you should be able to run these using a web browser, as well.  Now, let's do the same for products:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/products/5 \-H 'Content-Type: application/json'</code></pre><p>As we did with users above, let's look for a specific <code>product_id</code> in our output, and pull back specific data for it:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/product/1535 \-H 'Content-Type: application/json'</code></pre><p>Let's try this with our <code>orders</code> endpoint.  First, let's just bring back the first 5 orders:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/orders/5 \-H 'Content-Type: application/json'</code></pre><p>To bring back orders for a specific day, we need to make note of an order's date and hour.  Now, let's use that on our <code>/orders/date/hour</code> endpoint:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/orders/date/2023-01-20/hour/15 \-H 'Content-Type: application/json'</code></pre><p>If we wanted to see the specific products for one of those orders, we can take a specific <code>order_code</code> from one of the orders shown above.  Then we can use that with our original <code>order_date</code> and hit the <code>/orderproducts/date/code</code> endpoint:</p><pre><code>curl -s -XGET http://127.0.0.1:8000/orderproducts/date/2023-01-20/code/b9479b1c-719c-413e-aa5b-0d19716ba775 \-H 'Content-Type: application/json'</code></pre><h2><a class="anchor" aria-hidden="true" id="6-what-s-next"> </a>6. What's NEXT ?</h2><p>We've just scratched the surface of what you can do using Python with Astra DB or Apache Cassandra.</p><p>Go take a look at <a href="https://www.datastax.com/dev">DataStax for Developers</a> and our DataStax <a href="https://www.youtube.com/@DataStaxDevs/featured">Developers channel on YouTube</a> to see what else is possible.  There's plenty to dig into!</p><p>Congratulations: You made it to the end of today's workshop!</p><blockquote><p>Sincerely yours, The DataStax Developers</p></blockquote>
SUCCESS SAVING README for datastaxdevs-workshop-python-astra-app
Getting astra.json for datastaxdevs/testing-markdown at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2>
HTML FOR datastaxdevs-testing-markdown<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>🎓 Netflix Clone using Astra DB and GraphQL</h1><p><a href="https://gitpod.io/from-referrer/"><img src="https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod" alt="Gitpod ready-to-code" /></a><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a><a href="https://discord.com/widget?id=685554030159593522&amp;theme=dark"><img src="https://img.shields.io/discord/685554030159593522" alt="Discord" /></a></p><p><em>50 minutes, Intermediate, <a href="#1-login-or-register-to-astradb-and-create-database">Start Building</a></em></p><p>A simple <strong>ReactJS</strong> Netflix homepage clone running on <em>Astra DB</em> that leverages the GraphQL API with <em>paging</em> and <em>infinite scrolling.</em>This application is the result of the collaboration between <a href="https://www.youtube.com/channel/UC5DNytAJ6_FISueUfzZCVsw">Ania Kubow</a> and the Datastax Developer Advocate team.</p><!--- ENDEXCLUDE ---><p>See the <a href="https://imgur.com/3ns3UJB">Video Walkthrough</a> of what you will build!</p><p><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/ui.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>🎯 Objectives</h2><ul><li>Build and run a Netflix clone.</li><li>Learn <strong>GraphQL API</strong> and how to use it with a database to create the tables and navigate the data.</li><li>Learn about <strong>pagination</strong> and <strong>infinite scrolling</strong> in a Web UI.</li><li>Leverage Netlify and DataStax Astra DB.</li><li>Deploy the Netflix clone to production with Netlify.</li></ul><h2><a class="anchor" aria-hidden="true" id="frequently-asked-questions"> </a>ℹ️ Frequently asked questions ℹ️</h2><details><summary><strong>Can I run the workshop on my computer?</strong></summary><p>There is nothing preventing you from running the workshop on your own machine.If you do so, you will need</p><ul><li>git installed on your local system</li><li><a href="https://www.whitesourcesoftware.com/free-developer-tools/blog/update-node-js/">node 15 and npm 7 or later</a></li></ul><p>You will have to adapt commands and paths based on your environment and install the dependencies by yourself. <strong>We won't provide support</strong> to keep on track with schedule. However, we will do our best to give you the info you need to be successful.</p></details><details><summary><strong>What other prerequisites are there?</strong></summary><ul><li>You will need a github account</li><li>You will also need Netlify and Astra DB accounts, but we'll work through that in the exercises</li><li>Use <strong>Chrome</strong> or <strong>Firefox</strong> for the best experience. Other browsers are great, but don't work well with the GitPod integration we use a bit later.</li></ul></details><details><summary><strong>Do I need to pay for anything for this workshop?</strong></summary><p><strong>No.</strong> All tools and services we provide here are FREE.</p></details><details><summary><strong>Will I get a certificate if I attend this workshop?</strong></summary><p>Attending the session is not enough. You need to complete the homeworks detailed below and you will get a nice badge.</p></details><h2><a class="anchor" aria-hidden="true" id="materials-for-the-session"> </a>Materials for the Session</h2><p>It doesn't matter if you join our workshop live or you prefer to do at your own pace, we have you covered. In this repository, you'll find everything you need for this workshop:</p><ul><li><a href="slides/slides.pdf">Slide deck</a></li><li><a href="https://bit.ly/cassandra-workshop">Discord chat</a></li><li><a href="https://stackoverflow.com/questions/tagged/cassandra">&quot;cassandra&quot; on StackOverflow</a></li><li><a href="https://dba.stackexchange.com/questions/tagged/cassandra">&quot;cassandra&quot; on DBA StackExchange</a></li></ul><h1><a class="anchor" aria-hidden="true" id="let-s-start"> </a>Let's start</h1><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of contents</h2><p>[TOC]</p><h3><a class="anchor" aria-hidden="true" id="part-i-db-setup-data-ingest"> </a>Part I - DB Setup &amp; Data Ingest</h3><ol><li><a href="#1-login-or-register-to-astradb-and-create-database">Create Astra DB Instance</a></li><li><a href="#2-create-a-security-token">Create a security token</a></li><li><a href="#3-create-table-for-genres-with-graphql">Create table for genres with GraphQL</a></li><li><a href="#4-insert-genre-data-with-graphql">Insert genre data with GraphQL</a></li><li><a href="#5-retrieve-genres-with-graphql">Retrieve genres with GraphQL</a></li><li><a href="#6-create-a-table-for-movies">Create a table for movies</a></li><li><a href="#7-insert-a-few-movies">Insert a few movies</a></li><li><a href="#8-retrieve-movies-pagination">Retrieve movies: Pagination</a></li></ol><h3><a class="anchor" aria-hidden="true" id="part-ii-build-and-deploy-front-end"> </a>Part II - Build and Deploy Front-End</h3><ol><li><a href="#1-deploy-skeletal-gui-to-netlify">Deploy skeletal GUI to Netlify</a></li><li><a href="#2-launch-gitpod-from-your-github-repo">Launch Gitpod from YOUR Github repo</a></li><li><a href="#3-set-up-and-use-astra-cli">Set up and use <code>astra-cli</code></a></li><li><a href="#4-serverless-functions">Serverless Functions</a></li><li><a href="#5-fetching-from-the-front-end">Fetching from the Front-End</a></li><li><a href="#6-install-the-netlify-cli">Install the Netlify CLI</a></li><li><a href="#7-provide-db-connection-parameters">Provide DB connection parameters</a></li><li><a href="#8-run-the-app-in-dev-mode">Run the app in dev mode</a></li><li><a href="#9-connect-to-your-netlify-site">Connect to your Netlify site</a></li><li><a href="#10-deploy-in-production">Deploy in production!</a></li></ol><p><a href="#homework"><strong>🎓 Complete the assignment, receive your Badge!</strong></a></p><h3><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h3><ul><li><a href="https://github.com/datastaxdevs/workshop-intro-to-graphql">Intro to GraphQL Workshop</a></li><li><a href="https://github.com/datastaxdevs/react-basics">React starter using NPX</a></li><li><a href="https://github.com/datastaxdevs/appdev-week1-todolist">React ToDo app</a></li><li><a href="https://github.com/datastaxdevs/workshop-battlestax/blob/master/README_JAM.md">What is JamStack?</a></li><li><a href="#video-tutorial-with-ania-kubow">Video tutorial with Ania Kubow</a></li></ul><h1><a class="anchor" aria-hidden="true" id="part-1-db-setup-data-ingest"> </a>Part 1 - DB Setup &amp; Data Ingest</h1><h2><a class="anchor" aria-hidden="true" id="1-login-or-register-to-astradb-and-create-database"> </a>1. Login or Register to AstraDB and create database</h2><blockquote><p>🎁 <em>When creating your instance, use the promotion code <strong>ANIA200</strong> to get 200$ of additional free credit!</em></p></blockquote><p><em><strong><code>ASTRA DB</code></strong> is the simplest way to run Cassandra with zero operations at all - just push the button and get your cluster. No credit card required, 40M read/write operations and about 80GB storage monthly for free - sufficient to run small production workloads. If you use up your credits the databases will pause, no charge, and you will be given the option to upgrade to a higher tier.</em></p><p>Leveraging <a href="https://awesome-astra.github.io/docs/pages/astra/create-instance/#c-procedure">Database creation guide</a> create a database. <strong>Right-Click</strong> the following button and <em>Open in a new TAB.</em></p><p><a href="https://astra.dev/yt-01-04" target="blank"><img src="https://github.com/datastaxdevs/workshop-graphql-netflix/raw/master/images/create_astra_db.png?raw=true" /></a></p><table><thead><tr><th>Field</th><th>Value</th></tr></thead><tbody><tr><td><strong>Database Name</strong></td><td><code>workshops</code></td></tr><tr><td><strong>Keyspace Name</strong></td><td><code>netflix</code></td></tr><tr><td><strong>Regions</strong></td><td>Select <code>GOOGLE CLOUD</code>, then an Area close to you, then a region with no LOCK 🔒 icons: the LOCKed regions are the region not accessible to the Free Tier.</td></tr></tbody></table><blockquote><p><strong>ℹ️ Note:</strong> If you already have a database <code>workshops</code>, simply add a keyspace <code>netflix</code> using the <code>Add Keyspace</code> button on the bottom right hand corner of the DB Dashboard page. You may have to &quot;Resume&quot; the database first in case it is in &quot;hibernated&quot; state.</p></blockquote><p>While the database is being created, you will also get a <strong>Security token</strong> (needed to authenticate with your database and start using it):<strong>please IGNORE THIS ONE, as we will be soon creating a new, more powerful token for today</strong>.</p><p>The status will change from <code>Pending</code> to <code>Active</code> when the database is ready, this usually only takes 2-3 minutes.</p><h2><a class="anchor" aria-hidden="true" id="2-create-a-security-token"> </a>2. Create a security token</h2><blockquote><p>Note: this step is very important, as the token generated automatically for you withthe database lacks some permissions we'll use in the workshop.</p></blockquote><p><a href="https://awesome-astra.github.io/docs/pages/astra/create-token/#c-procedure">Create a token for your app</a>, <em>using the <strong>&quot;Database Administrator&quot;</strong> role</em>.Keep it handy for later use (best to download it in CSV format, as the valueswill not be visible afterward).This will provide authentication later when interacting with the database.Today, in particular, you'll need the string labeled &quot;token&quot; (the one starting with <code>AstraCS:...</code>).</p><blockquote><p><strong>⚠️ Important</strong></p><pre><code>The instructor will show the token creation on screen,but will then destroy it immediately for security reasons.</code></pre></blockquote><h2><a class="anchor" aria-hidden="true" id="3-create-table-for-genres-with-graphql"> </a>3. Create table for genres with GraphQL</h2><p>✅  <strong>Step 3a:</strong> Open <strong>GraphQL Playground</strong>:</p><ol start="0"><li>Ensure you are logged on to your <a href="https://astra.datastax.com">Astra</a> account</li><li>Click on the &quot;workshops&quot; database on the left (expanding the list if needed)</li><li>Click <code>Connect</code> TAB</li><li>Click the <code>APIs</code>  connection method</li><li>Make sure <code>GraphQL API</code> is selected</li><li>Locate the link to your GraphQL Playground in the text</li></ol><p><img src="images/open-playground-2-wh.png" alt="Open Astra DB GraphQL Playground image" /></p><details><summary><strong>Click here if you are not using the "New Astra Experience" UI (yet)</strong></summary><p><img src="images/open-playground-2.png" alt="Open Astra DB GraphQL Playground image, old Astra UI" /></p></details><p><strong>Note</strong>: in the following, we will refer to &quot;playground tabs&quot;. These are <em>not</em> the tabsin your browser, rather they are tabs <em>within</em> the Playground application,to switch between the (logically distinct) realms of &quot;managing schema&quot; and &quot;managing data in the tables&quot;(more on that later).</p><p><img src="images/tabs-vs-playgroundtabs-labeled-2.png" alt="Playground tabs VS Browser tabs" /></p><p>✅  <strong>Step 3b:</strong> Provide the database token as header</p><p>In the GraphQL Playground, <strong>Populate HTTP HEADER</strong> variable <code>x-cassandra-token</code> on the bottom of the page with your token (including the <code>AstraCS:</code> part).<em>This is the &quot;Database Administrator&quot; token you created earlier on the Astra DB dashboard (Step 2 above).</em></p><details><summary><strong>Note</strong>: make sure you are on the <strong>graphql-schema</strong> playground tab in this step. Click here to show image.</summary><p><img src="images/graphql-playground.png" alt="GraphQL Playground and token header, Schema playground tab" /></p></details><blockquote><p>Note: the GraphQL Playground starts with a ready-to-use <em>temporary token</em> as the <code>x-cassandra-token</code> header. But you want the queries run in the Playgroundto be identical to those that the Netlify functions will run from code, so <strong>please replace the token with your DB token as instructed</strong>.</p></blockquote><p>✅  <strong>Step 3c:</strong> In GraphQL Playground, create the <code>reference_list</code> table:</p><p>Copy the following <strong>mutation</strong> to the left panel</p><pre lang="yaml"><code>mutation createReferenceList {  reference_list: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;reference_list&quot;,    ifNotExists:true    partitionKeys: [       { name: &quot;label&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [      { name: &quot;value&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]  )}</code></pre><details><summary>and then use the big "play button" arrow in the center to execute it. Click for screenshot.</summary><p><img src="images/playground-1.png" alt="image" /></p></details><p><strong>GraphQL Playground troubleshooting</strong> (covers this whole section)</p><table><thead><tr><th>Trouble</th><th>Shooting</th></tr></thead><tbody><tr><td>Server cannot be reached</td><td>Add Astra token to headers (including <code>AstraCS:...</code>; check quotes)</td></tr><tr><td>Server cannot be reached (second playground tab)</td><td>Check playground target URL ends with <code>netflix</code></td></tr><tr><td>Response not successful: Received status code 401</td><td>Same as &quot;server cannot be reached&quot;</td></tr><tr><td>Response not successful: Received status code 404</td><td>Check spelling of keyspace in target URL</td></tr><tr><td>&quot;Play&quot; button does nothing</td><td>Ensure query is syntactically correct</td></tr><tr><td>&quot;Validation error of type FieldUndefined&quot;</td><td>Most likely query in the wrong playground tab, or writing to table not created yet</td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="4-insert-genre-data-with-graphql"> </a>4. Insert genre data with GraphQL</h2><p>✅  <strong>Step 4a:</strong> Get to the API URL for your keyspace</p><p>In graphQL playground, <strong>change playground tab</strong> to now use <code>graphql</code>. The Playground has its own address bar(<strong>note</strong>: it's <em>not</em> the address bar of your browser). Edit the ending of the URL shown there, from <code>system</code> to thename of the keyspace: <code>netflix</code></p><p>✅  <strong>Step 4b:</strong> Repeat the insertion of the <code>x-cassandra-token</code> header for this playground tab (as you did for the first one):</p><details><summary>Show me!</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>✅  <strong>Step 4c:</strong> In the GraphQL Playground, run the mutation that writes genre data:</p><p>Copy the following mutation on the left panel:</p><pre lang="yaml"><code>mutation insertGenres {  action: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Action&quot;}) {    value{value}  }  anime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Anime&quot;}) {     value{value}  }  award: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Award-Winning&quot;}) {     value{value}  }  children: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Children &amp; Family&quot;}) {     value{value}  }  classic: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Classic&quot;}) {     value{value}  }   comedies: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Comedies&quot;}) {     value{value}  }  crime: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Crime&quot;}) {     value{value}  }   cult: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Cult&quot;}) {     value{value}  }    documentaries: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Documentaries&quot;}) {     value{value}  }  drama: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Dramas&quot;}) {     value{value}  }  fantasy: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Fantasy&quot;}) {     value{value}  }  french: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;French&quot;}) {     value{value}  }  horror: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Horror&quot;}) {     value{value}  }  independent: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Independent&quot;}) {     value{value}  }  international: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;International&quot;}) {     value{value}  }   italian: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Italian&quot;}) {     value{value}  }   musicmusicals: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Music &amp; Musicals&quot;}) {     value{value}  }   realitytv: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Reality TV&quot;}) {     value{value}  }   romance: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Romance&quot;}) {     value{value}  }  scifi: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Sci-Fi&quot;}) {     value{value}  }  thriller: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;Thriller&quot;}) {     value{value}  }   tvshow: insertreference_list(value: {label:&quot;genre&quot;, value:&quot;TV Show&quot;}) {     value{value}  } }</code></pre><p>then click on the big &quot;play button&quot; arrow in the center to execute the mutation</p><h2><a class="anchor" aria-hidden="true" id="5-retrieve-genres-with-graphql"> </a>5. Retrieve genres with GraphQL</h2><p>✅  <strong>Step 5a:</strong> In GraphQL Playground, not changing playground tab (stay on the second: &quot;graphql&quot;, yeah) run the following query to read the <code>value</code> column of all table rows:</p><pre lang="yaml"><code>query getAllGenres {    reference_list (value: {label:&quot;genre&quot;}) {      values {      	value      }    }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-3.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="6-create-a-table-for-movies"> </a>6. Create a table for movies</h2><p>✅  <strong>Step 6a:</strong> Switch back to first playground tab (&quot;graphql-schema&quot;; the token header will be already set).</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-back.png" alt="image" /></p></details><p>Use the following mutation to create a new table:</p><pre lang="yaml"><code>mutation createMoviesTable {  movies_by_genre: createTable(    keyspaceName:&quot;netflix&quot;,    tableName:&quot;movies_by_genre&quot;,    ifNotExists: true,    partitionKeys: [      { name: &quot;genre&quot;, type: {basic: TEXT} }    ]    clusteringKeys: [       { name: &quot;year&quot;, type: {basic: INT}, order: &quot;DESC&quot; },      { name: &quot;title&quot;, type: {basic: TEXT}, order: &quot;ASC&quot; }    ]    values: [      { name: &quot;synopsis&quot;, type: {basic: TEXT} },      { name: &quot;duration&quot;, type: {basic: INT} },      { name: &quot;thumbnail&quot;, type: {basic: TEXT} }    ]  )}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-4.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="7-insert-a-few-movies"> </a>7. Insert a few movies</h2><p>✅  <strong>Step 7a:</strong> Go to playground tab &quot;graphql&quot; again.</p><details><summary>Click for screenshot</summary><p><img src="images/graphql-playground-2.png" alt="image" /></p></details><p>Use the following mutation to populate the <code>movies_by_genre</code> table with four movies:</p><pre lang="yaml"><code>mutation insertMovies {  inception: insertmovies_by_genre(    value: {       genre:&quot;Sci-Fi&quot;,       year:2010,      title:&quot;Inception&quot;,      synopsis:&quot;Cobb steals information from his targets by entering their dreams.&quot;,      duration:121,      thumbnail:&quot;https://i.imgur.com/RPa4UdO.mp4&quot;}) {        value{title}    }    prometheus: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:2012,      title:&quot;Prometheus&quot;,      synopsis:&quot;After a clue to mankind's origins is discovered, explorers are sent to the darkest corner of the universe.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/L8k6Bau.mp4&quot;}) {        value{title}    }    	aliens: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1986,      title:&quot;Aliens&quot;,      synopsis:&quot;Ellen Ripley is sent back to the planet LV-426 to establish contact with a terraforming colony.&quot;,      duration:134,      thumbnail:&quot;https://i.imgur.com/QvkrnyZ.mp4&quot;}) {        value{title}    }      bladeRunner: insertmovies_by_genre(value: {       genre:&quot;Sci-Fi&quot;,       year:1982,      title:&quot;Blade Runner&quot;,      synopsis:&quot;Young Blade Runner K's discovery of a long-buried secret leads him to track down former Blade Runner Rick Deckard.&quot;,      duration:145,      thumbnail:&quot;https://i.imgur.com/xhhvmj1.mp4&quot;}) {        value{title}    }  }</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-5.png" alt="image" /></p></details><h2><a class="anchor" aria-hidden="true" id="8-retrieve-movies-pagination"> </a>8. Retrieve movies: Pagination</h2><p>✅  <strong>Step 8a:</strong> In GraphQL Playground, not changing playground tab (stay on the second tab, &quot;graphql&quot;, yeah) list values from the table with the following command:</p><pre lang="yaml"><code>query getMovieAction {  movies_by_genre (      value: {genre:&quot;Sci-Fi&quot;},      orderBy: [year_DESC]  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }  }}</code></pre><details><summary>Show me!</summary><p><img src="images/graphql-playground-6.png" alt="image" /></p></details><p>✅ <strong>Step 8b: Enable pagination:</strong> On a small dataset, you can retrieve all values in the table at once; but in general, for performance or network reasons, you'll need pagination. Run a similar query as before, but this time asking for a <em>page size of 2</em>:</p><pre lang="yaml"><code>query getMovieActionPag1 {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-2.png" alt="image" /></p></details><p>✅ <strong>Step 8c: Fetch the next page:</strong></p><p>Notice that <code>pageState</code> now is also returned. Use it to fetch the next 2 items (next page):edit the next query to replace <code>YOUR_PAGE_STATE</code> with your own string value:</p><pre lang="yaml"><code>query getMovieActionNextPage {    movies_by_genre (        value: {genre:&quot;Sci-Fi&quot;},        options: {pageSize: 2, pageState: &quot;YOUR_PAGE_STATE&quot;},        orderBy: [year_DESC]    ) {      values {        year,        title,        duration,        synopsis,        thumbnail      }    pageState    }}</code></pre><details><summary>Show me!</summary><p><img src="images/playground-3.png" alt="image" /></p></details><p>If you try to paste the <em>newly-obtained</em> value for <code>pageState</code> and re-run the query, you get an empty list and a null <code>pageState</code> in return. D'oh! You had scrolled through all rows already:<em>this is how pagination signals the end of the full results list.</em></p><h1><a class="anchor" aria-hidden="true" id="part-2-build-and-deploy-front-end"> </a>Part 2 - Build and Deploy Front-End</h1><h2><a class="anchor" aria-hidden="true" id="1-deploy-skeletal-gui-to-netlify"> </a>1. Deploy skeletal GUI to Netlify</h2><p>✅ <strong>Step 1a: Netlify Button:</strong> Click the following button to deploy the skeletal GUI to Netlify. There is no data since there is no database connected to the app (yet); we will connect the database to the app shortly.</p><p><strong>Note</strong>: preferrably Ctrl-click for a new tab.</p><details><summary>What does the Netlify deploy button do?</summary><p>The Netlify deploy button will:</p><ul><li>Create a new repository for you on Github (Note: it's an unrelated <em>copy</em>, not a fork)</li><li>Create a site on Netlify (and deploy a nonworking build of the app, which lacks the DB connection parameters still)</li><li>Link the two together.</li></ul></details><p><a href="https://app.netlify.com/start/deploy?repository=https://github.com/datastaxdevs/workshop-graphql-netflix"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></p><details><summary>Show me!</summary><p><img src="images/deploy-to-netlify.gif" alt="Netlify button in action" /></p></details><p>This will take a few minutes:</p><ul><li>you may have to authenticate through Github in the process;</li><li>confirm the repo name and &quot;Save &amp; Deploy&quot; when asked.</li></ul><p><em>Note: if there is an existing account in Netlify, check the settings to make sure the Netlify account is connected to your Github account.</em></p><details><summary>Show me!</summary><p><img src="images/netlify-connect-01.png" alt="Deploy to Netlify, &quot;connected accounts&quot;" /></p></details><p>✅ <strong>Step 1b: Check the deploy logs:</strong> Click on <code>Site deploy in progress</code> within the Netlify UI.</p><details><summary>Show me!</summary><p><img src="images/deploy-1.png" alt="Deploy to Netlify, &quot;site deploy in progress&quot;" /></p></details><p>Then click the top deploy link to see the build process.</p><details><summary>Show me!</summary><p><img src="images/deploy-2.png" alt="Deploy to Netlify, &quot;Production/Building&quot;" /></p></details><p>✅ <strong>Step 1c: Complete the build:</strong> Wait until the build shows <code>Netlify Build Complete</code>,  <strong>When you see &quot;<em>Pushing to repository...</em>&quot;</strong> you're ready to move on.</p><details><summary>Show me!</summary><p><img src="images/deploy-3b.png" alt="Deploy to Netlify, logs showing build finishing" /></p></details><p>✅ <strong>Step 1d: Get back to your new site:</strong> Scroll up to the top and click on the site name (it'll be after &quot;<em>[your login]</em>'s Team&quot; next to the Netlify button). Then locate your app's full URL and click to open it.</p><details><summary>Show me!</summary><p><img src="images/deploy-4.png" alt="Deploy to Netlify, site name next to your team's name" /></p><p>Clicking on the full URL (something like <code>https://YOUR-SITE-NAME.netlify.app</code>) you will see the skeletal GUI (without the data from the database) in a new tab. Here is where to click:</p><p><img src="images/deploy-4sitename.png" alt="Deploy to Netlify, access the skeletal GUI" /></p><p>and here, finally, your skeletal GUI in its full splendour:</p><p><img src="images/deploy-4skeletal.png" alt="Netlify site, no data yet (skeletal GUI)" /></p></details><h2><a class="anchor" aria-hidden="true" id="2-launch-gitpod-from-your-github-repo"> </a>2. Launch Gitpod from YOUR Github repo</h2><p>✅ <strong>Step 2a: Jump to YOUR repo:</strong> Click on the <code>GitHub</code> in <code>Deploys from GitHub</code> to get to your new repository on Github.Scroll to where you were in the README.</p><details><summary>Show me!</summary><p><img src="images/deploy-5.png" alt="Deploy to Netlify, " /></p></details><blockquote><p><strong>Note</strong> At this point, you MUST be reading this README from <strong>YOUR</strong> Github repository.That is, if the address bar still says <code>https://github.com/datastaxdevs/...</code> pleasehead over to YOUR copy of the repo before going the Gitpod route!</p></blockquote><p>✅ <strong>Step 2b: Launch Gitpod:</strong></p><p>Use this link to open Gitpod from <strong>YOUR</strong> repository! (<em>Tip: Ctrl-click on the button to open in new tab.</em>)</p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p><em>Note: the button works on <img src="images/chrome-logo.svg" height="20"/> Chrome and <img src="images/firefox-logo.svg" height="20"/> Firefox.</em></p><details><summary>Click to troubleshoot if you have another browser</summary><img src="images/gitpod_trick.png" /></details><p>ℹ️ <em>It may take a few minutes (approx. 3-5) for GitPod to fully initialize.Please wait until the console in the lower half of Gitpod is responsive.</em></p><blockquote><p>You may see a dialog about &quot;opening this workspace in VS Code Desktop&quot;: you can safely dismiss it.</p></blockquote><p>Gitpod will be your IDE from now on. If you are familiar with VSCode, you can probablyjust use it. Otherwise, take a moment to review a separate page<a href="know_your_gitpod.md">&quot;Know your Gitpod&quot;</a>and then come back here.</p><h2><a class="anchor" aria-hidden="true" id="3-set-up-and-use-code-astra-cli-code"> </a>3. Set up and use <code>astra-cli</code></h2><p>You are going to use a CLI tool to simplify operations with Astra DB. The toolis <a href="https://docs.datastax.com/en/astra-classic/docs/astra-cli/installation.html">preinstalled</a>on your Gitpod.</p><p>✅ <strong>Step 3a: Set up the CLI:</strong></p><p>Run the following in the Gitpod terminal and,when prompted, enter the <code>AstraCS:...</code> you obtained at the beginning.</p><pre lang="bash"><code>astra setup</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-setup-2.png" alt="astra-cli" /></p></details><p>✅ <strong>Step 3b: Bulk data load:</strong> Load a large movie dataset in the database.This command installs and properly launches the <code>DSBulk</code> tool (<a href="https://docs.datastax.com/en/dsbulk/docs/dsbulkAbout.html">docs</a>):</p><pre lang="bash"><code>astra db load workshops \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre><details><summary>Show me!</summary><p><img src="images/astra-cli-dsbulk-2.png" alt="astra-cli" /></p></details><details><summary>Show the syntax for old versions of astra-cli (click here)</summary><p>Note: you should not need this.</p><pre lang="bash"><code>astra db dsbulk workshops load \  -url data/movies_by_genre.csv \  -k netflix \  -t movies_by_genre</code></pre></details><blockquote><p><em>Note</em>: we mock the trailers for these thousands of movies by using a handfulof them over and over. Don't be surprised if you'll see the wrong trailersfor your favorite movie!</p></blockquote><p>That's it! All 6000+ movies are now loaded and ready to go!</p><h2><a class="anchor" aria-hidden="true" id="4-serverless-functions"> </a>4. Serverless Functions</h2><blockquote><p><em>Note</em>: this section and the next one (&quot;Fetching from the Front-End&quot;)are not steps to &quot;perform&quot;, rather suggestions to dive in the appcode and figure out how the various parts (React components, Netlifyfunctions and finally the GraphQL server in Astra DB) fit together.<strong>You can skip these and jump to the <a href="#6-install-the-netlify-cli">next practical step</a></strong>if you are in a hurry, but please come back to thesefor reference if you want to dissect the code!</p></blockquote><details><summary>Show me this section</summary><p>Take a look at <code>functions/getGenres.js</code></p><pre lang="javascript"><code>const fetch = require('node-fetch')exports.handler = async function (event) {  const body = JSON.parse(event.body)  const url = process.env.ASTRA_DB_GRAPHQL_URL  const query = `    query getAllGenres {      reference_list (        value: { label: &quot;genre&quot;},        options: {          pageSize: ${JSON.stringify(body.pageSize)},          pageState: ${JSON.stringify(body.pageState)}        }      ) {        values {          value        }        pageState      }    }  `  const response = await fetch(url, {    method: 'POST',    headers: {      &quot;Content-Type&quot;: &quot;application/json&quot;,      &quot;x-cassandra-token&quot;: process.env.ASTRA_DB_APPLICATION_TOKEN    },    body: JSON.stringify({ query })  })  try {    const responseBody = await response.json()    return {      statusCode: 200,      body: JSON.stringify(responseBody)    }  } catch (e) {    console.log(e)    return {      statusCode: 500,      body: JSON.stringify(e)    }  }}</code></pre><p>You'll notice the familiar GraphQL query &quot;getAllGenres&quot; you used previously in the playground.It's been modified a bit to utilize pagination.When building the GraphQL query, you pass the desired page size and state to the GraphQL API:</p><pre lang="javascript"><code>options: {  pageSize: ${JSON.stringify(body.pageSize)},  pageState: ${JSON.stringify(body.pageState)}}</code></pre><p>You ask the API server to give us back the table column &quot;value&quot; (containing the genre name), but also the page statefor when you'll need the next page:</p><pre lang="javascript"><code>{  values {    value  }  pageState}</code></pre><p>The serverless function <code>functions/getMovies.js</code> works in much the same way, but you provide the specific genre you want and the page size is hardcoded:</p><pre lang="javascript"><code>query {  movies_by_genre (    value: { genre: ${JSON.stringify(genre)}},    orderBy: [year_DESC],    options: { pageSize: 6, pageState: ${JSON.stringify(pageState)} }  ) {    values {      year,      title,      duration,      synopsis,      thumbnail    }    pageState  }}</code></pre></details><h2><a class="anchor" aria-hidden="true" id="5-fetching-from-the-front-end"> </a>5. Fetching from the Front-End</h2><details><summary>Show me this section</summary><p>Take a look at how you fetch from these serverless functions from the front-end. Start in <code>src/App.js</code></p><p>There is a fetch method defined, that will retrieve a page of genres by calling the <code>getGenres</code> serverless function.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  if (! isFetching)  {    setIsFetching(true)    const response = await fetch(&quot;/.netlify/functions/getGenres&quot;, {      method: &quot;POST&quot;,      body: JSON.stringify({pageState, pageSize}),    })    const responseBody = await response.json()    setPageState(responseBody.data.reference_list.pageState)    setGenres(gs =&gt; (gs || []).concat(responseBody.data.reference_list.values))    setIsFetching(false)  }}</code></pre><p>You pass in the current <code>pageState</code> and <code>pageSize</code> state variables and receive a response from the serverless function. You then set the <code>pageState</code> var to the new pagestate, and set the <code>genres</code> state variable to the received data. (Note that you are concatenating the new data to the var, since you want to keep all previously fetched data, not replace).</p><p>When rendering the page, you generate a <code>&lt;Section&gt;</code> component for each genre, plus a <code>&lt;div&gt;</code> at the bottom, which will detect a <code>mouseEnter</code> event and trigger the loading of a new pageful of genres:</p><pre lang="javascript"><code>&lt;&gt;  &lt;NavBar /&gt;  &lt;HeroSection /&gt;  {genres &amp;&amp; (    &lt;div className=&quot;container&quot;&gt;      {Object.values(genres).map((genre) =&gt; (        &lt;Section key={genre.value} genre={genre.value} /&gt;      ))}    &lt;/div&gt;  )}  &lt;div    className=&quot;page-end&quot;    onMouseEnter={() =&gt; {      setRequestedPage( np =&gt; np + 1 )    }}  /&gt;&lt;/&gt;</code></pre><p>The <code>&lt;Section&gt;</code> component works in the same way, but you will fully replace the data in the <code>movies</code> variable this time.</p><pre lang="javascript"><code>const fetchData = async () =&gt; {  const response = await fetch(&quot;/.netlify/functions/getMovies&quot;, {    method: &quot;POST&quot;,    body: JSON.stringify({ genre: genre, pageState: pageState }),  })  const responseBody = await response.json()  setMovies(responseBody.data.movies_by_genre.values)  setPageState(responseBody.data.movies_by_genre.pageState)}</code></pre><p>Now that you know how the front-end works, launch the app!</p></details><h2><a class="anchor" aria-hidden="true" id="6-install-the-netlify-cli"> </a>6. Install the Netlify CLI</h2><p>In the <code>workshop-graphql-netflix</code> directory, run the following:</p><pre><code>npm install -g netlify-cli</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-install-cli.png" alt="Install Netlify CLI" /></p></details><p>With the Netlify command-line interface you will build and deploythe application directly from the Gitpod terminal.</p><h2><a class="anchor" aria-hidden="true" id="7-provide-db-connection-parameters"> </a>7. Provide DB connection parameters</h2><p>The &quot;serverless functions&quot; part of your app, in order to speak toyour DB through GraphQL, needs two important pieces of information:the API endpoint and the token. You will now create a <code>.env</code> file whichdefines them as environment variables.</p><p>The quickest way is to have <code>astra-cli</code> generate one for you:</p><pre><code>astra db create-dotenv -k netflix workshops</code></pre><details><summary>I want to do it manually</summary><p>If for some reason you don't use <code>astra-cli</code>, follow these steps:</p><ul><li>copy <code>cp .env.sample .env</code> and open it: <code>gp open .env</code>;</li><li><code>.env</code> is now open in the IDE editor and has two placeholders to replace:</li><li>insert the <code>AstraCS:...</code> database token (keep the quotes);</li><li>insert the GraphQL API address (it will look something like <code>https://b2f[...]/graphql/netflix</code>).</li></ul><p>You can generate a new database token if you want. The GraphQL addresscan be found in the playground: it is the URL you have edited to end in <code>netflix</code>in the second playground tab (<a href="#4-insert-genre-data-with-graphql">Part 1, step 4a</a>).</p></details><h2><a class="anchor" aria-hidden="true" id="8-run-the-app-in-dev-mode"> </a>8. Run the app in dev mode</h2><p>✅ <strong>Step 8a: Install dependencies:</strong></p><pre lang="bash"><code>npm install</code></pre><p>✅ <strong>Step 8b: Start the app:</strong> With the command</p><pre><code>netlify dev</code></pre><p>the application should automatically be displayed in GitPod's &quot;simple browser&quot;.Note that in this <strong>dev-mode run</strong> everything is local to your Gitpod instance:<em>the &quot;serverless functions&quot;, in particular, are actually running there,alongside the rest of the application!</em></p><details><summary>Show me!</summary><p><img src="images/preview.png" alt="run-in-preview-pane" /></p></details><p>You can copy the URL found in Gitpod's simple browser and open in a new tab(of your real browser, that is) for abetter experience. But now it's time to move to the actual deploy phase.</p><h2><a class="anchor" aria-hidden="true" id="9-connect-to-your-netlify-site"> </a>9. Connect to your Netlify site</h2><p>✅ <strong>Step 9a:</strong> Stop the dev run with <code>Ctrl-C</code>.</p><p>✅ <strong>Step 9b:</strong> Authenticate with Netlify: run</p><pre><code>netlify login</code></pre><p>then grab the URL printed on the console(something like <code>https://app.netlify.com/authorize?response[...]</code>)and manually <strong>open it in a new tab</strong> (Gitpod blocks it for security).You will be asked to authorize &quot;netlify-cli&quot; to access your Netlify accountin the process.</p><details><summary>Show me!</summary><p><img src="images/waiting_for_authorization-2.png" alt="Netlify login" /></p></details><p>Once you complete the login, you will see a console output like this:</p><p><img src="images/netlify-login-2.png" alt="Netlify login" /></p><p>✅ <strong>Step 9c:</strong> Associate to your Netlify site: run</p><pre><code>netlify link</code></pre><p>and make sure you confirm the choice of associating to&quot;current git remote origin&quot;.</p><details><summary>Show me!</summary><p><img src="images/netlify-link-2.png" alt="Netlify link" /></p></details><h2><a class="anchor" aria-hidden="true" id="10-deploy-in-production"> </a>10. Deploy in production!</h2><p>✅ <strong>Step 10a:</strong> Inject secrets to the Netlify site</p><pre><code>netlify env:import .env</code></pre><p>Now the (actually) serverless functions in Netlify have the connectionparameters they need.</p><details><summary>Show me!</summary><p><em>Note: If you generated the <code>.env</code> with<code>astra-cli</code>, the actual output is much more verbose.</em></p><p><img src="images/netlify_env_import.png" alt="image" /></p></details><p>✅ <strong>Step 10b:</strong> Build the app</p><p>Run</p><pre><code>netlify build</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-build.png" alt="Netlify build" /></p></details><p>✅ <strong>Step 10c:</strong> Deploy!</p><pre><code>netlify deploy --prod</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-deploy-prod-2.png" alt="Netlify deploy in prod" /></p></details><p>✅ <strong>Step 10d:</strong> Visit your site.</p><pre><code>netlify open:site</code></pre><details><summary>Show me!</summary><p><img src="images/netlify-open-site-2.png" alt="Netlify Open site" /></p></details><p>If needed, manually copy-paste your site URL in a new browser tab... and enjoyyour work!</p><p><img src="images/deployed_netflix_clone.png" alt="Netlify Setup Example" /></p><h2><a class="anchor" aria-hidden="true" id="the-end"> </a>The END</h2><p>Congratulations, you made it!</p><p>Now don't forget to complete your assignment and <a href="#homework">submit it</a>to get your badge of completion!</p><pre><code>       ██╗    ██╗███████╗██╗     ██╗                 ██║    ██║██╔════╝██║     ██║                 ██║ █╗ ██║█████╗  ██║     ██║                 ██║███╗██║██╔══╝  ██║     ██║                 ╚███╔███╔╝███████╗███████╗███████╗             ╚══╝╚══╝ ╚══════╝╚══════╝╚══════╝                                                          ██████╗  ██████╗ ███╗   ██╗███████╗██╗        ██╔══██╗██╔═══██╗████╗  ██║██╔════╝██║        ██║  ██║██║   ██║██╔██╗ ██║█████╗  ██║        ██║  ██║██║   ██║██║╚██╗██║██╔══╝  ╚═╝        ██████╔╝╚██████╔╝██║ ╚████║███████╗██╗        ╚═════╝  ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝ </code></pre><h2><a class="anchor" aria-hidden="true" id="homework"> </a>Homework</h2><img src="images/netflix-badge.png?raw=true" width="200" align="right" /><p>🎓 Complete your upgrade and get your verified skill badge! Do the assignment and submit your homework!</p><ol><li>Complete the practice steps from this repository as described below.</li><li>Insert a movie OR genre of your choice in the database (It's OK to re-use the trailer file URL from another movie! Just make the title recognizable as yours).</li><li>Take a screenshot of your Netflix clone running either from your Gitpod or (better) deployed to production in Netlify (in this case, you could also give us the Netlify URL).</li><li>The screenshot should clearly show the movie/genre you added (make sure you tell us its name when submitting).</li><li>(Optional for extra wisdom) Watch the 2-hour video by Ania <a href="#video-tutorial-with-ania-kubow">HERE</a>, build the app yourself, and show us the running final result.</li><li>Submit your homework <a href="https://dtsx.io/homework-graphql-netflix">here</a>.</li></ol><p>That's it, you are done: expect an email in the next days!</p><h1><a class="anchor" aria-hidden="true" id="extra-resources"> </a>Extra resources</h1><h2><a class="anchor" aria-hidden="true" id="video-tutorial-with-ania-kubow"> </a>Video tutorial with Ania Kubow</h2><p>Thank you to our wonderful friend Ania Kubow for producing the Netflix clone. If you are not aware of Ania and love learning about coding you should absolutely check out her YouTube channel listed below.</p><p>While we focused on getting you up and running to production with Astra DB and Netlify, Ania's video will dig into more details on the app itself. Check it out to dig in more.</p><p><a href="https://www.youtube.com/watch?v=g8COh40v2jU">Ania's Netflix Video</a></p>
SUCCESS SAVING README for datastaxdevs-testing-markdown
Getting astra.json for DataStax-Examples/getting-started-with-astra-csharp at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-c-using-datastax-astra"> </a>Getting Started with Apache Cassandra™ and C# using DataStax Astra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-sample-works"> </a>How this Sample Works</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="connecting-to-astra-with-a-secure-connect-bundle"> </a>Connecting to Astra with a Secure Connect Bundle</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="managing-cassandra-session-within-a-net-web-application"> </a>Managing Cassandra Session Within a .NET Web Application</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-and-running"> </a>Setup and Running</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3>
HTML FOR DataStax-Examples-getting-started-with-astra-csharp<h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-c-using-datastax-astra"> </a>Getting Started with Apache Cassandra™ and C# using DataStax Astra</h1><p>This provides an example REST backend built in C# using .NET Core 2.1 for use with the <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">Getting Started with Astra UI</a>.</p><p>Create a free-forever Cassandra Database with DataStax Astra: <a href="https://astra.datastax.com/register?utm_source=devplay&amp;utm_medium=github&amp;utm_campaign=getting-started-with-astra-csharp">click here to get started</a> 🚀</p><p>Contributors:</p><ul><li><a href="https://github.com/bechbd">bechbd</a></li><li><a href="https://github.com/msmygit">msmygit</a></li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>How to connect to Astra via the Secure Connect Bundle</li><li>How to manage a Cassandra Session within a .NET web application</li></ul><h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2><p>This sample also contains several interesting files that worth noting specifically:</p><ul><li><a href="Services/AstraService.cs">Services/AstraService.cs</a> - This file contains all the logic for connecting to the Astra database using the secure connect bundle.</li><li><a href="Startup.cs">Startup.cs</a> - This file contains the logic for adding a singleton for the Session object for reuse across our application.</li></ul><p>See <a href="https://docs.datastax.com/en/devapp/doc/devapp/driversBestPractices.html#Useasinglesessionobjectperapplication">here</a> for additional details on how the session object in Cassandra works and why it is best practice to only have a single Session object per application</p><ul><li><p><a href="schema.cql">schema.cql</a> - The database schema required for the Astra keyspace</p></li><li><p><a href="Controllers/InstrumentsController.cs">Controllers/InstrumentController.cs</a> - If you would like to see how to implement paging in C# then this would be the place to look.  Paging in Cassandra is different than what you are likely used to so it is beneficial to read <a href="https://docs.datastax.com/en/devapp/doc/devapp/driversResultPaging.html">this</a> article describing how paging works with Cassandra.</p></li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-sample-works"> </a>How this Sample Works</h2><p>This is am example .NET Core Web API backend for use with the Astra Getting Started UI which is found <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">here</a>.</p><p>This application serves as the connection between the UI website and an underlying Astra database.</p><p>It has Swagger installed so once it is running you can look at the Swagger UI here:</p><p><code>http://localhost:5000/swagger/index.html#/</code></p><h3><a class="anchor" aria-hidden="true" id="connecting-to-astra-with-a-secure-connect-bundle"> </a>Connecting to Astra with a Secure Connect Bundle</h3><p>To see how to connect to Astra using the Secure Connect Bundle you can look at the <code>ConnectToAstra()</code> method in <a href="Services/AstraService.cs">Services/AstraService.cs</a>.  In this method you will find the code which:</p><ol><li><p>Creates a <code>Cluster</code> instance using the builder.</p><p><code>var session = Cluster.Builder()</code></p></li><li><p>Specifies the local file path to the Secure Connect Bundle ZIP file that has been downloaded from your Astra Database.</p><p><code>.WithCloudSecureConnectionBundle(secureConnectBundlePath)</code></p></li><li><p>Set the username and password for your Astra Database</p><p><code>.WithCredentials(username, password)</code></p></li><li><p>Set the default Consistency Level to <code>LOCAL_QUORUM</code>.  <code>LOCAL_QUORUM</code> is the only supported consistency level for Astra queries.</p><p><code>.WithQueryOptions(new QueryOptions().SetConsistencyLevel(ConsistencyLevel.LocalQuorum))</code></p></li><li><p>Build the <code>Cluster</code> object then connect to your Astra database specifying the keyspace to use.</p><p><code>.Build().Connect(keyspace);</code></p></li></ol><p>Once you have completed all these steps you will now have a fully configured, connected, and ready to run CQL queries.</p><h3><a class="anchor" aria-hidden="true" id="managing-cassandra-session-within-a-net-web-application"> </a>Managing Cassandra Session Within a .NET Web Application</h3><p>Creation of <code>Session</code> objects within an application is an expensive process as they take awhile to initialize and become aware of the clusters topology.  Due to this it is a best practice to create a <code>Session</code> object once per application and reuse it throughout the entire lifetime of that application.  When building an ASP.NET Core application as shown this is easily supported through the use of singleton and .NET Core's built in Dependency Injection mechanisms.</p><p>For our Web API endpoints we created a singleton instance of our <code>AstraService</code> object inside the <code>ConfigureServices()</code> method in <a href="Startup.cs">Startup.cs</a> using the following code:</p><p><code>services.AddSingleton(typeof(Interfaces.IDataStaxService), typeof(Services.AstraService));</code></p><p>This code specifies that we are adding a singleton instance of <code>AstraService</code> for any dependency requiring an object instantiating the <code>Interfaces.IDataStaxService</code> interface.</p><p>To use this within our controllers, we need to specify a property on the constructor of the controller that requires the <code>Interfaces.IDataStaxService</code> interface as shown below.</p><p><code>        public CredentialsController(IDataStaxService service) { Service = service; }</code></p><p>With each call to the <code>CredentialsController</code> the <code>AstraService</code> singleton we created at startup will be passed to the constructor.  This mechanism of dependency injection allows us a simple mechanism to use a single <code>Session</code> object throughout the entirety of the application lifecycle.</p><h2><a class="anchor" aria-hidden="true" id="setup-and-running"> </a>Setup and Running</h2><h3><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h3><ul><li>.NET Core 2.1</li><li>An Astra compatible C# driver, instructions may be found <a href="https://helpdocs.datastax.com/aws/dscloud/astra/dscloudConnectCsharpDriver.html">here</a> to install this locally.</li><li>An Astra database with the CQL schema located in <a href="schema.cql">schema.cql</a> already added.</li><li>The username, password, keyspace name, and secure connect bundle downloaded from your Astra Database.  For information on how to obtain these credentials please read the documentation found <a href="https://helpdocs.datastax.com/aws/dscloud/astra/dscloudObtainingCredentials.html">here</a>.</li></ul><h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3><p>This application is a .NET 2.1 web application configured to serve it's web application via the Kestrel web server.  This sample can be run from the root directory using:</p><p><code>dotnet run</code></p><p>This will startup the application running on <code>http://localhost:5000</code></p><p>You will know that you are up and working when you get the following in your terminal window:</p><pre><code>Hosting environment: DevelopmentContent root path: /Users/dave.bechberger/Documents/projects/bechbd/getting-started-with-astra-csharpNow listening on: http://localhost:5000Application started. Press Ctrl+C to shut down.</code></pre>
SUCCESS SAVING README for DataStax-Examples-getting-started-with-astra-csharp
Getting astra.json for DataStax-Examples/getting-started-with-astra-java at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-java-using-datastax-astra-db"> </a>Getting Started with Apache Cassandra™ and Java using DataStax Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this Works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="access-the-api-documentation-from-a-browser"> </a>Access the API documentation from a browser</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="setup-the-user-interface-to-use-this-backend"> </a>Setup the user interface to use this backend</h4>
HTML FOR DataStax-Examples-getting-started-with-astra-java<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-java-using-datastax-astra-db"> </a>Getting Started with Apache Cassandra™ and Java using DataStax Astra DB</h1><p><em>50 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/getting-started-with-astra-java#prerequisites">Start Building</a></em></p><p>This provides an example REST backend built in Java using <code>Spring Boot</code> for use with the <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">Getting Started with Astra UI</a>.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>How to connect to Astra DB via the Secure Connect Bundle</li><li>How to manage a Cassandra Session within a JAVA web application</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this Works</h2><p>This is an example of a Spring Boot Microservice for use with the Astra Getting Started UI which is found <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">here</a>.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/getting-started-with-astra-java#prerequisites">https://github.com/DataStax-Examples/getting-started-with-astra-java</a></p><!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/3zBltF7">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/getting-started-with-astra-java">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-your-local-machine">Running on your local machine</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><p>Make sure that you have:</p><ul><li>Java 11</li><li>An Astra DB compatible Java driver, instructions may be found <a href="https://docs.datastax.com/en/astra/docs/connect/drivers/connect-java.html">here</a> to install this locally.</li><li>An Astra database with the CQL schema located in <a href="https://raw.githubusercontent.com/DataStax-Examples/getting-started-with-astra-java/master/src/main/resources/schema.cql">schema.cql</a> already added.</li><li>The username, password, keyspace name, and secure connect bundle downloaded from your Astra DB.  For information on how to obtain these credentials please read the documentation found <a href="https://docs.datastax.com/en/astra/docs/connect/secure-connect-bundle.html">here</a></li></ul><p>This application is a Spring Boot web application. This sample can be run from the root directory using:</p><pre lang="sh"><code>cd getting-started-with-astra-javamvn spring-boot:run</code></pre><p>This will startup the application running on <code>http://localhost:8080</code></p><p>You will know that you are up and working when you get the following in your terminal window:</p><pre lang="sh"><code>16:23:01.569 INFO  com.datastax.astra.GettingStartedWithAstra  : Started GettingStartedWithAstra in 1.851 seconds (JVM running for 2.39)</code></pre><h4><a class="anchor" aria-hidden="true" id="access-the-api-documentation-from-a-browser"> </a>Access the API documentation from a browser</h4><p><a href="http://localhost:8080">http://localhost:8080</a></p><p><em>Note: If you want to change the listening port of the application, locate the file <code>src/main/resources/application.yml</code> and change key <code>server.port</code></em></p><h4><a class="anchor" aria-hidden="true" id="setup-the-user-interface-to-use-this-backend"> </a>Setup the user interface to use this backend</h4><p>To setup the UI to connect to Java backend define a <code>.env</code> file in the <code>getting-started-with-astra-ui</code> project main directory. Inside the file it should have one entry pointing to this project's API endpoint:</p><pre lang="sh"><code>BASE_ADDRESS=http://localhost:8080/api</code></pre><p>Once you start that project with a <code>npm run build</code> it will point the UI to the backend API which will then be using Astra DB as a database. When you first connect to the UI, a dialog box will open asking for Astra DB connection information.</p><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-getting-started-with-astra-java
Getting astra.json for DataStax-Examples/getting-started-with-astra-python at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-python-using-datastax-astra-db"> </a>Getting Started with Apache Cassandra™ and Python using DataStax Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="astra-db-quick-start"> </a>Astra DB Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h2>
HTML FOR DataStax-Examples-getting-started-with-astra-python<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="getting-started-with-apache-cassandratm-and-python-using-datastax-astra-db"> </a>Getting Started with Apache Cassandra™ and Python using DataStax Astra DB</h1><p><em>50 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/getting-started-with-astra-python#prerequisites">Start Building</a></em></p><p>This sample Python backend provides a REST API service that is used with the <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">Getting Started with Astra UI</a> to show asimple example of how to connect to and query DataStax Astra DBs.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="astra-db-quick-start"> </a>Astra DB Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/38B5JGj">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li></ul><h2><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h2><p>If you are familiar with Python, then you've likely gotten your hands on Python virtual environments.We'll be leveraging pyenv while setting up this backend, which will serve ourSpacecraft frontend that will have you flying through the stars.</p><p>If you aren't familiar with Python, hop over to our <a href="https://helpdocs.datastax.com/aws/dscloud/astra/dscloudPythonDriver.html#Installingpyenv,Python,andvirtualenv">official documentation</a>for setting that up on your machine, and come back here after you have it installed ( specifically after Step 5 of the Procedure ).</p><p>Now that we have that out of the way, we'll use pyenv to install Python 3.6.9</p><pre lang="sh"><code>pyenv install 3.6.9</code></pre><p>Next create a new virtualenv using that Python version we just installed.</p><pre lang="sh"><code>pyenv virtualenv 3.6.9 astra-venv</code></pre><p>Almost off to the races, go ahead and activate that virtualenv</p><pre lang="sh"><code>pyenv activate astra-venv</code></pre><p>Woot, now 3 quick dependencies ( Flask, Flask CORS,  and the DataStax Cassandra Driver )</p><pre lang="sh"><code>pip install Flask flask-cors cassandra-driver</code></pre><p>Last one, clone this repo</p><pre lang="sh"><code>git clone https://github.com/DataStax-Examples/getting-started-with-astra-python.git</code></pre><p>If everything above went smoothly, fingers crossed, then we are ready to rock.Go to the directory that you just cloned this repo into</p><pre lang="sh"><code>cd getting-started-with-astra-python</code></pre><p>Fire up the engines</p><pre lang="sh"><code>FLASK_ENV=development FLASK_APP=getting_started_with_astra.py flask run</code></pre><p>You should be met with the following output, note that it's running on <code>localhost</code> and port <code>5000</code></p><pre lang="sh"><code> * Serving Flask app &quot;getting_started_with_astra.py&quot; (lazy loading) * Environment: development * Debug mode: on * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit) * Restarting with stat * Debugger is active! * Debugger PIN: 204-527-831</code></pre><p>Once the backend is running, you can start the <a href="https://github.com/DataStax-Examples/getting-started-with-astra-ui">Getting Started with Astra UI</a> in order to use a web page that leverages this backend.</p>
SUCCESS SAVING README for DataStax-Examples-getting-started-with-astra-python
Getting astra.json for DataStax-Examples/azure-functions-nodejs at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandra-rest-api-with-azure-functions-in-node-js"> </a>Apache Cassandra REST API with Azure Functions in Node.js</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-running"> </a>Setup &amp; Running</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="using-the-http-endpoints"> </a>Using the HTTP Endpoints</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4>
HTML FOR DataStax-Examples-azure-functions-nodejs<h1><a class="anchor" aria-hidden="true" id="apache-cassandra-rest-api-with-azure-functions-in-node-js"> </a>Apache Cassandra REST API with Azure Functions in Node.js</h1><p>This example shows how to use <a href="https://azure.microsoft.com/en-us/services/functions/">Azure Functions</a> with the <a href="https://docs.datastax.com/en/developer/nodejs-driver/latest">Node.js DataStax Cassandra Driver</a> to set up a basic REST API for a Cassandra database via HTTP Endpoints. The <a href="https://serverless.com/">Serverless Framework</a> is used to facilitate the setup and deployment of the functions.</p><p>Contributor(s): <a href="https://github.com/csplinter">Chris Splinter</a></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>How to use the DataStax Cassandra Driver with Azure Functions</li><li>How to use the Serverless Framework to set up Azure Functions HTTP Endpoints</li></ul><h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2><ul><li><a href="index.js">index.js</a>: Contains the DataStax Cassandra Driver connection and queries as well as the Azure Functions entry points.</li><li><a href="serverless.yml">serverless.yml</a>: Used by serverless to deploy and configure the Azure artifacts needed to run the function.</li><li><a href="package.json">package.json</a>: Defines the dependencies and descriptive example metadata.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2><p>The Serverless Framework handles the packaging and deployment of the functions to the Azure resources. Once the functions are deployed, the DataStax Cassandra Driver establishes the connection to the database and returns the results to the Azure HTTP Endpoints which can be accessed to interact with the database.</p><h2><a class="anchor" aria-hidden="true" id="setup-running"> </a>Setup &amp; Running</h2><h3><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h3><p>Before running with this example, head over to the <a href="SETUP-README.md">SETUP-README</a> for instructions on how to</p><ol><li>launch an instance in Azure</li><li>install and start an Apache Cassandra database</li><li>setup your local development environment for Node.js and <a href="https://serverless.com">serverless</a></li></ol><p>Once the above is completed, you will have all of the needed pieces in place to run this example.</p><ol><li>Clone this repository</li></ol><pre><code>git clone https://github.com/DataStax-Examples/azure-functions-nodejs.git</code></pre><ol start="2"><li>Go to the directory</li></ol><pre><code>cd azure-functions-nodejs</code></pre><ol start="3"><li>Install the DataStax Cassandra Driver</li></ol><pre><code>npm install cassandra-driver</code></pre><ol start="4"><li>Install serverless-azure-functions plugin</li></ol><pre><code>npm install serverless-azure-functions</code></pre><ol start="5"><li>Configure <code>serverless.yml</code> with your Contact Points ( public IP of Azure instance ), and Local Data Center ( likely <code>datacenter1</code> )</li></ol><h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3><p>From the project directory, deploy your function. This should output the endpoints that you can use to access the database.</p><pre><code>sls deploy</code></pre><ul><li>When you are done, don't forget to clean things up with</li></ul><pre><code>sls remove</code></pre><h3><a class="anchor" aria-hidden="true" id="using-the-http-endpoints"> </a>Using the HTTP Endpoints</h3><h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4><p>Note the <code>-d '{}'</code> is required here</p><pre><code>curl -X POST -d '{}' &lt;function-app-name&gt;.azurewebsites.net/api/catalog/create</code></pre><p>expected output:</p><pre><code>Successfully created shopping.catalog schema</code></pre><h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4><pre><code>curl -X POST -d '{&quot;item_id&quot;: 0, &quot;name&quot;: &quot;name_0&quot;, &quot;description&quot;: &quot;desc_0&quot;, &quot;price&quot;: 10.1}' &lt;function-app-name&gt;.azurewebsites.net/api/catalog/add</code></pre><p>expected output:</p><pre><code>{&quot;query&quot;:&quot;INSERT INTO shopping.catalog (item_id, name, description, price) VALUES (?, ?, ?, ?)&quot;,&quot;item_id&quot;:0,&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:10.1}</code></pre><h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4><pre><code>curl -X GET &lt;function-app-name&gt;.azurewebsites.net/api/catalog/get/0</code></pre><p>expected output:</p><pre><code>{&quot;query&quot;:&quot;SELECT name, description, price FROM shopping.catalog WHERE item_id = ?&quot;,&quot;item_id&quot;:&quot;0&quot;,&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:&quot;10.1&quot;}</code></pre>
SUCCESS SAVING README for DataStax-Examples-azure-functions-nodejs
Getting astra.json for DataStax-Examples/aws-lambda-nodejs at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="apache-cassandra-rest-api-with-aws-lambda-in-node-js"> </a>Apache Cassandra REST API with AWS Lambda in Node.js</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="setup-running"> </a>Setup &amp; Running</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="using-the-http-endpoints"> </a>Using the HTTP Endpoints</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4>
HTML FOR DataStax-Examples-aws-lambda-nodejs<h1><a class="anchor" aria-hidden="true" id="apache-cassandra-rest-api-with-aws-lambda-in-node-js"> </a>Apache Cassandra REST API with AWS Lambda in Node.js</h1><p>This example shows how to use <a href="https://aws.amazon.com/lambda/">AWS Lambda</a> with the <a href="https://docs.datastax.com/en/developer/nodejs-driver/latest">Node.js DataStax Cassandra Driver</a> to set up a basic REST API for a Cassandra database via HTTP Endpoints. The <a href="https://serverless.com/">Serverless Framework</a> is used to facilitate the setup and deployment of the functions.</p><p>Contributor(s): <a href="https://github.com/csplinter">Chris Splinter</a></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>How to use the DataStax Cassandra Driver with AWS Lambda functions</li><li>How to use the Serverless Framework to set up AWS LAmbda functions HTTP Endpoints</li></ul><h2><a class="anchor" aria-hidden="true" id="project-layout"> </a>Project Layout</h2><ul><li><a href="handler.js">handler.js</a>: Contains the DataStax Cassandra Driver connection and queries as well as the AWS Lambda function entry points.</li><li><a href="serverless.yml">serverless.yml</a>: Used by serverless to deploy and configure the AWS Lambda artifacts needed to run the function.</li><li><a href="package.json">package.json</a>: Defines the dependencies and descriptive example metadata.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2><p>The Serverless Framework handles the packaging and deployment of the functions to the AWS resources. Once the functions are deployed, the DataStax Cassandra Driver establishes the connection to the database and returns the results via the AWS Lambda HTTP Endpoints which can be accessed to interact with the database.</p><h2><a class="anchor" aria-hidden="true" id="setup-running"> </a>Setup &amp; Running</h2><h3><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h3><p>Before running with this example, head over to the <a href="SETUP-README.md">SETUP-README</a> for instructions on how to</p><ol><li>launch an instance in AWS EC2</li><li>install and start a Cassandra database</li><li>setup your local development environment for Node.js and <a href="https://serverless.com">serverless</a></li></ol><p>Once the above is completed, you will have all of the needed pieces in place to run this example.</p><ol><li>Clone this repository</li></ol><pre><code>git clone https://github.com/DataStax-Examples/aws-lambda-nodejs.git</code></pre><ol start="2"><li>Go to the <code>aws-lambda-nodejs</code> directory</li></ol><pre><code>cd aws-lambda-nodejs</code></pre><ol start="3"><li>Install the DataStax Cassandra Driver</li></ol><pre><code>npm install cassandra-driver</code></pre><ol start="4"><li>Configure <code>serverless.yml</code> with your S3 bucket, Contact Points ( public IP of AWS EC2 instance ), and Local Data Center ( likely <code>datacenter1</code> )</li></ol><h3><a class="anchor" aria-hidden="true" id="running"> </a>Running</h3><p>From the project directory, deploy your function. This should output the endpoints that you can use to access the database.</p><pre><code>sls deploy</code></pre><ul><li>When you are done, don't forget to clean things up with</li></ul><pre><code>sls remove</code></pre><h3><a class="anchor" aria-hidden="true" id="using-the-http-endpoints"> </a>Using the HTTP Endpoints</h3><h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4><pre><code>curl -X POST https://&lt;function-id&gt;.execute-api.us-east-2.amazonaws.com/dev/catalog/create</code></pre><p>expected output:</p><pre><code>Successfully created shopping.catalog schema</code></pre><h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4><pre><code>curl -X POST -d '{&quot;item_id&quot;: 0, &quot;name&quot;: &quot;name_0&quot;, &quot;description&quot;: &quot;desc_0&quot;, &quot;price&quot;: 10.1}' https://&lt;function-id&gt;.execute-api.us-east-2.amazonaws.com/dev/catalog/add</code></pre><p>expected output:</p><pre><code>{&quot;query&quot;:&quot;INSERT INTO shopping.catalog (item_id, name, description, price) VALUES (?, ?, ?, ?)&quot;,&quot;item_id&quot;:0,&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:10.1}</code></pre><h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4><pre><code>curl -X GET https://&lt;function-id&gt;.execute-api.us-east-2.amazonaws.com/dev/catalog/get/0</code></pre><p>expected output:</p><pre><code>{&quot;query&quot;:&quot;SELECT name, description, price FROM shopping.catalog WHERE item_id = ?&quot;,&quot;item_id&quot;:&quot;0&quot;,&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:&quot;10.1&quot;}</code></pre>
SUCCESS SAVING README for DataStax-Examples-aws-lambda-nodejs
Getting astra.json for DataStax-Examples/google-cloud-functions-nodejs at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-db-rest-api-with-google-cloud-functions-in-node-js"> </a>Astra DB REST API with Google Cloud Functions in Node.js</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4>
HTML FOR DataStax-Examples-google-cloud-functions-nodejs<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="astra-db-rest-api-with-google-cloud-functions-in-node-js"> </a>Astra DB REST API with Google Cloud Functions in Node.js</h1><p><em>30 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/google-cloud-functions-nodejs#prerequisites">Start Building</a></em></p><p>This example shows how to use <a href="https://cloud.google.com/functions/">Google Cloud Functions</a> with the <a href="https://docs.datastax.com/en/developer/nodejs-driver/latest">Node.js DataStax Cassandra Driver</a> to set up a basic REST API for a Cassandra database via HTTP Endpoints. The <a href="https://serverless.com/">Serverless Framework</a> is used to facilitate the setup and deployment of the functions.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>How to use the DataStax Cassandra Driver with Google Cloud Functions</li><li>How to use the Serverless Framework to set up Google Cloud Functions HTTP Endpoints</li></ul><h2><a class="anchor" aria-hidden="true" id="how-it-works"> </a>How it works</h2><p>The Serverless Framework handles the packaging and deployment of the functions to the Google Cloud resources. Once the functions are deployed, the DataStax Cassandra Driver establishes the connection to the database and returns the results via the Google Cloud HTTP Endpoints which can be accessed to interact with the database.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/google-cloud-functions-nodejs#prerequisites">https://github.com/DataStax-Examples/google-cloud-functions-nodejs</a></p><!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><!--- enter a unique UTM_CODE for your sample app below ---><ol><li><p>Create a <a href="https://dtsx.io/3jENJkP">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/google-cloud-functions-nodejs">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-your-local-machine">Running on your local machine</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><p>Before running with this example, head over to the <a href="https://raw.githubusercontent.com/DataStax-Examples/google-cloud-functions-nodejs/master/SETUP-README.md">SETUP-README</a> for instructions on how to</p><ol><li>launch an instance in Google Cloud</li><li>install and start a Cassandra database</li><li>setup your local development environment for Node.js and <a href="https://serverless.com">serverless</a></li></ol><p>Once the above is completed, you will have all of the needed pieces in place to run this example.</p><ol><li>Install the DataStax Cassandra Driver</li></ol><pre lang="sh"><code>npm install cassandra-driver</code></pre><ol start="4"><li>Install serverless-google-cloudfunctions plugin</li></ol><pre lang="sh"><code>npm install serverless-google-cloudfunctions</code></pre><ol start="5"><li>Configure <code>serverless.yml</code> with your project-id, credentials file, Contact Points ( public IP of GCP instance ), and Local Data Center ( likely <code>datacenter1</code> )</li></ol><p>From the project directory, deploy your function. This should output the endpoints that you can use to access the database.</p><pre lang="sh"><code>sls deploy</code></pre><ul><li>When you are done, don't forget to clean things up with</li></ul><pre><code>sls remove</code></pre><h4><a class="anchor" aria-hidden="true" id="createcatalog"> </a>createCatalog</h4><pre lang="sh"><code>curl -X POST https://us-central1-&lt;project-id&gt;.cloudfunctions.net/createCatalog</code></pre><p>expected output:</p><pre lang="sh"><code>&quot;Successfully created shopping.catalog schema&quot;</code></pre><h4><a class="anchor" aria-hidden="true" id="additem"> </a>addItem</h4><p>Note the <code>-H &quot;Content-Type:application/json&quot;</code> is required here.</p><pre lang="sh"><code>curl -X POST -H &quot;Content-Type:application/json&quot; -d '{&quot;item_id&quot;: 0, &quot;name&quot;: &quot;name_0&quot;, &quot;description&quot;: &quot;desc_0&quot;, &quot;price&quot;: 10.1}' https://us-central1-&lt;project-id&gt;.cloudfunctions.net/addItem</code></pre><p>expected output:</p><pre lang="sh"><code>{&quot;query&quot;:&quot;INSERT INTO shopping.catalog (item_id, name, description, price) VALUES (?, ?, ?, ?)&quot;,&quot;item_id&quot;:0,&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:10.1}</code></pre><h4><a class="anchor" aria-hidden="true" id="getitem"> </a>getItem</h4><pre lang="sh"><code>curl -X GET https://us-central1-&lt;project-id&gt;.cloudfunctions.net/getItem/0</code></pre><p>expected output:</p><pre lang="sh"><code>{&quot;query&quot;:&quot;SELECT name, description, price FROM shopping.catalog WHERE item_id = ?&quot;,&quot;item_id&quot;:[&quot;0&quot;],&quot;name&quot;:&quot;name_0&quot;,&quot;description&quot;:&quot;desc_0&quot;,&quot;price&quot;:&quot;10.1&quot;}</code></pre><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-google-cloud-functions-nodejs
Getting astra.json for DataStax-Examples/dsbulk-to-astra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="loading-data-into-astra-db-with-datastax-bulk-loader"> </a>Loading Data into Astra DB with DataStax Bulk Loader</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this Works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="loading-from-csv"> </a>Loading from CSV</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="loading-from-an-existing-cassandra-table"> </a>Loading from an existing Cassandra table</h4>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="option-1-unload-and-load-in-separate-steps"> </a>Option 1 - Unload and Load in Separate Steps</h5>
REPLACED LINE WITH <h5><a class="anchor" aria-hidden="true" id="option-2-unload-and-load-by-chaining-steps"> </a>Option 2 - Unload and Load by Chaining Steps</h5>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="validating-the-results"> </a>Validating the Results</h4>
HTML FOR DataStax-Examples-dsbulk-to-astra<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="loading-data-into-astra-db-with-datastax-bulk-loader"> </a>Loading Data into Astra DB with DataStax Bulk Loader</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/dsbulk-to-astra#prerequisites">Start Building</a></em></p><p>If you're trying to load data into Astra DB from a CSV file or from an existing Cassandra table, then you've come to the right place. This example shows how to quickly load data into Astra DB using the <a href="https://docs.datastax.com/en/dsbulk/doc/index.html">DataStax Bulk Loader</a> (DSBulk for short).</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/dsbulk-to-astra/master/screenshot.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Show how to load data into Astra DB from a CSV file on the filesystem or from an existing table in Cassandra</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this Works</h2><p>Loading data into Astra DB using DSBulk is much like loading data into other Cassandra databases with the addition of the requirement to specify the <a href="https://docs.datastax.com/en/astra/aws/doc/dscloud/astra/dscloudObtainingCredentials.html">secure connect bundle</a> as well as the username and password for your Astra DB.</p><p>The secure connect bundle is specified using the <code>-b &lt;INSERT PATH&gt;</code> parameter on the command line. <a href="https://docs.datastax.com/en/dsbulk/doc/dsbulk/reference/driverOptions.html#driverOptions__driverBasicCloudSecureConnectBundle">See here for more details</a></p><p>The username is specified using the <code>-u &lt;INSERT USERNAME&gt;</code> parameter on the command line.  <a href="https://docs.datastax.com/en/dsbulk/doc/dsbulk/reference/driverOptions.html#driverOptions__datastaxJavaDriverAdvancedConnectionAuthProviderUsername">See here for more details</a></p><p>The password is specified using the <code>-p &lt;INSERT PASSWORD&gt;</code> parameter on the command line.  <a href="https://docs.datastax.com/en/dsbulk/doc/dsbulk/reference/driverOptions.html#driverOptions__datastaxJavaDriverAdvancedConnectionAuthProviderPassword">See here for more details</a></p><p>This example only touches the tip of the iceberg of functionality. DSBulk has all the functionality to perform complex loading operations to Astra DB as it does to other DDAC and DSE clusters. Check out the docs below for details of the other things it can do:</p><ul><li><a href="https://docs.datastax.com/en/dsbulk/doc/">DataStax Bulk Loader Documentation</a></li></ul><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/dsbulk-to-astra#prerequisites">https://github.com/DataStax-Examples/dsbulk-to-astra</a></p><!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/3jKXkql">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/dsbulk-to-astra">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-your-local-machine">Running on your local machine</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><p>Make sure that you have:</p><ul><li>DS Bulk v1.4.0 or greater</li><li>An Astra cluster with the schema (<a href="https://raw.githubusercontent.com/DataStax-Examples/dsbulk-to-astra/master/schema.cql">from schema.cql</a> loaded and credential information<strong>Note</strong> If you need further instruction on how to obtain the secure connect bundle for your Astra instance then please refer to the documentation located <a href="https://docs.datastax.com/en/astra/aws/doc/dscloud/astra/dscloudObtainingCredentials.html">here</a>.</li><li>A Cassandra cluster (optional if you want to load from Cassandra)</li></ul><p>To migrate data into Astra DB using DS Bulk you first need to ensure that the target Astra DB keyspace has had the schema for the <code>video_ratings_by_user</code> table created.  This is done via using the DataStax Developer Studio that is embedded in your Astra DB instance.  For more information on how to use the embedded Studio instance please check the documentation located <a href="https://docs.datastax.com/en/astra/aws/doc/dscloud/astra/dscloudConnectStudio.html">here</a>.</p><h4><a class="anchor" aria-hidden="true" id="loading-from-csv"> </a>Loading from CSV</h4><p>Here is an example command that will load the data.csv file into the <code>video_ratings_by_user</code> table in your Astra DB instance.</p><p><strong>Note</strong> This loads the data from the file stored in the github repo so the machine running this command will need access to the internet.</p><pre lang="sh"><code>./dsbulk load -url https://raw.githubusercontent.com/DataStax-Examples/dsbulk-to-astra/master/data.csv -b /path/to/bundle.zip -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt;</code></pre><h4><a class="anchor" aria-hidden="true" id="loading-from-an-existing-cassandra-table"> </a>Loading from an existing Cassandra table</h4><p>To load data from an existing table in a Cassandra keyspace into Astra DB there are two options to accomplish this.</p><h5><a class="anchor" aria-hidden="true" id="option-1-unload-and-load-in-separate-steps"> </a>Option 1 - Unload and Load in Separate Steps</h5><p>The first option for loading data from an existing Cassandra cluster into Astra DB requires that you unload the data from the Cassandra cluster into a local file and then load the data into Astra DB.  The commands to accomplish this look like this:</p><pre lang="sh"><code>./dsbulk unload -h &lt;CASSANDRA CLUSTER IP&gt; -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -url /path/to/file/migrate.csv./dsbulk load -url /path/to/file/migrate.csv -b /path/to/bundle.zip -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt;</code></pre><h5><a class="anchor" aria-hidden="true" id="option-2-unload-and-load-by-chaining-steps"> </a>Option 2 - Unload and Load by Chaining Steps</h5><p>The second option for loading data from an existing Cassandra cluster into Astra DB requires that you unload the data from the Cassandra cluster and pipe that into a command load the data into Astra DB.  This has some advantages as it will run in a single command but it will only run single threaded as it uses stdin/stdout. The commands to accomplish this look like this:</p><pre lang="sh"><code>./dsbulk unload -h &lt;CASSANDRA CLUSTER IP&gt; -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -url /path/to/file/migrate.csv | ./dsbulk load -url /path/to/file/migrate.csv -b /path/to/bundle.zip -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -u &lt;USERNAME&gt; -p &lt;PASSWORD&gt;</code></pre><h4><a class="anchor" aria-hidden="true" id="validating-the-results"> </a>Validating the Results</h4><p>After running any of these commands you should see a result printed to the screen similar to</p><pre lang="sh"><code>total | failed | rows/s | p50ms | p99ms | p999ms | batches  101 |      0 |     94 | 63.92 | 70.25 |  70.25 |   10.10Operation LOAD_20191113-185907-331567 completed successfully in 0 seconds.Last processed positions can be found in positions.txt</code></pre><p>If you would like to check to see that all your data has loaded correctly then you can use the count functionality of DS Bulk to verify that the data has been loaded using the command below:</p><pre lang="sh"><code>./dsbulk count -b /path/to/bundle.zip -k &lt;KEYSPACE NAME&gt; -t video_ratings_by_user -u &lt;USERNAME&gt; -p </code></pre><p>If you were following along with this example you will get a number of <code>101</code> rows.</p><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-dsbulk-to-astra
Getting astra.json for DataStax-Examples/todo-astra-jamstack-netlify at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-db-cassandra"> </a>JAMStack + Netlify + Astra DB + Cassandra</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-todo-astra-jamstack-netlify<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="jamstack-netlify-astra-db-cassandra"> </a>JAMStack + Netlify + Astra DB + Cassandra</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/todo-astra-jamstack-netlify#quick-start">Start Building</a></em></p><p>This is an example React To-Do application using a <a href="https://dtsx.io/2Yhvqtv">DataStax Astra</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/todo-astra-jamstack-netlify/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ol start="0"><li><a href="https://dtsx.io/2Yhvqtv">Signup for DataStax Astra</a>, or login to your already existing account.</li></ol><!--- ENDEXCLUDE ---><ol><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> or use an existing one.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_todo_jamstack</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ol><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a fullstack development example using Astra DB as the storage backend</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra DB credentials are provided, the necessary tables are created in the database. The webservice will be available on port 8888 once the application has been deployed.</p><p><a href="https://jamstack.org/">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p>
SUCCESS SAVING README for DataStax-Examples-todo-astra-jamstack-netlify
Getting astra.json for DataStax-Examples/astra-gatsbyjs-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-db-and-gatsby-js-starter"> </a>Astra DB and Gatsby.js Starter</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-gatsbyjs-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="astra-db-and-gatsby-js-starter"> </a>Astra DB and Gatsby.js Starter</h1><p><em>30 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-gatsbyjs-starter#quick-start">Start Building</a></em></p><p>Create a React.js, Gatsby application that reads data from <a href="https://dtsx.io/3BEQp7R">DataStax Astra DB</a> using GraphQL.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-gatsbyjs-starter/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3BEQp7R">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_gatsby_starter</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-gatsbyjs-starter"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run develop</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a development example using GraphQL with Astra DB as the storage backend.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra DB credentials are provided, Gatsby can connect to your Astra DB's GraphQL endpoint. The webservice will be available on port 8080 once the application has been deployed.</p><p><a href="https://www.gatsbyjs.org/">Gatsby</a> is a React-based, GraphQL powered, static site generator, with much of the functionality of a modern front-end framework. It brings together the best components of React, webpack, react-router, GraphQL, and other front-end tools. This is used to generate the application.</p>
SUCCESS SAVING README for DataStax-Examples-astra-gatsbyjs-starter
Getting astra.json for DataStax-Examples/astra-next.js-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="next-js-and-astra-db-starter"> </a>Next.js and Astra DB Starter</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-next.js-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="next-js-and-astra-db-starter"> </a>Next.js and Astra DB Starter</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-next.js-starter#quick-start">Start Building</a></em></p><p>A sample Next.js + <a href="https://dtsx.io/3BzlUQU">DataStax Astra DB</a> starter app that integrates Astra DB into a Next.js API.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-next.js-starter/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3BzlUQU">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_nextjs_starter</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-next.js-starter"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a Next.js starter using Astra DB as the storage backend</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra DB credentials are provided, the Next.js endpoint will fetch your Astra DB keyspaces. The webservice will be available on port 3000 once the application has been deployed. Once the application is running, you can begin to make changes to your app by editing <code>pages/index.js</code>.</p><p><a href="https://nextjs.org/">Next.js</a> is an open-source JavaScript framework that lets you build server-side rendering and static web applications using React. It is not nescessary to configuration of webpack or similar to start using Next.js, as it comes with its configuration. This make it very simple to start a project, as we only need to execute simple commands and the project is ready.</p><p><a href="https://vercel.com/">Vercel</a> is a cloud platform for static sites and Serverless Functions, it enables developers to host Jamstack websites and web services that deploy instantly. You also have the option to deloy this app in Vercel.</p>
SUCCESS SAVING README for DataStax-Examples-astra-next.js-starter
Getting astra.json for DataStax-Examples/spring-data-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="spring-data-cassandra-rest-api"> </a>Spring Data Cassandra REST API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-spring-data-cassandra-rest-api"> </a>Running Spring Data Cassandra REST API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3>
HTML FOR DataStax-Examples-spring-data-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="spring-data-cassandra-rest-api"> </a>Spring Data Cassandra REST API</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/spring-data-starter#prerequisites">Start Building</a></em></p><p>This application uses Spring Data Cassandra and DataStax Astra DB to build a REST API for a backend service that interacts with products and orders.</p><!--- ENDEXCLUDE ---><p><img src="https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Run a REST API that connects to DataStax Astra DB</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>We're using Spring Data Cassandra and Datastax Astra DB to build a REST API that stores Products and Orders.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/spring-data-starter#prerequisites">https://github.com/DataStax-Examples/spring-data-starter</a></p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-spring-data-cassandra-rest-api"> </a>Running Spring Data Cassandra REST API</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/38HWu73">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/spring-data-starter">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-gitpod">Running on Gitpod</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3><ol><li><p>Click the 'Open in Gitpod' link:<a href="https://dtsx.io/2QjoULs"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></p></li><li><p>Once your Gitpod workspace has loaded, you'll be asked to paste your service account credentials in the Gitpod terminal at the bottom of the screen:<img src="https://user-images.githubusercontent.com/3254549/90944321-e900c300-e3d2-11ea-9624-dae5f81b6a0a.png" alt="image" /></p></li><li><p>When the app is finished building, click the 'Open Browser' button on the bottom right of the screen:<img src="https://user-images.githubusercontent.com/3254549/90944371-249b8d00-e3d3-11ea-8305-b7d4fad9742c.png" alt="image" /></p></li><li><p>You've successfully build a Spring Data Cassandra application!<img src="https://user-images.githubusercontent.com/3254549/90944387-439a1f00-e3d3-11ea-9df4-e8a5580c62cd.png" alt="image" /></p></li></ol><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-spring-data-starter
Getting astra.json for DataStax-Examples/java-framework-compare at 277
Got astrajson
ERROR SAVING README for DataStax-Examples-java-framework-compare
Getting astra.json for DataStax-Examples/Astra101Java at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra101java"> </a>✨ Astra101Java</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="2-download-the-secure-bundle"> </a>2. Download the secure bundle</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="3-run-the-application"> </a>3. Run the application</h2>
HTML FOR DataStax-Examples-Astra101Java<h1><a class="anchor" aria-hidden="true" id="astra101java"> </a>✨ Astra101Java</h1><p>Minimal code sample to work ASTRA in Java</p><p><a href="http://www.apache.org/licenses/LICENSE-2.0"><img src="https://img.shields.io/hexpm/l/plug.svg" alt="License Apache2" /></a></p><h2><a class="anchor" aria-hidden="true" id="table-of-contents"> </a>Table of Contents</h2><table><thead><tr><th>Steps</th><th>Description and Links</th></tr></thead><tbody><tr><td>0. Create your Astra instance</td><td><a href="#1-create-your-astra-instance">Prerequisites</a></td></tr><tr><td>1. Download the secure bundle</td><td><a href="#2-download-the-secure-bundle">Download secure bundle</a></td></tr><tr><td>2. Run the demo</td><td><a href="#3-run-the-application">Connectivity</a></td></tr></tbody></table><h2><a class="anchor" aria-hidden="true" id="1-create-your-astra-instance"> </a>1. Create your Astra instance</h2><p><code>ASTRA</code> service is available at url <a href="https://astra.datastax.com/">https://astra.datastax.com</a></p><p><strong>✅ Step 1a. Register (if needed) and Sign In to Astra</strong> : You can use your <code>Github</code>, <code>Google</code> accounts or register with an <code>email</code></p><ul><li><a href="https://astra.datastax.com/register?utm_source=devplay&amp;utm_medium=github&amp;utm_campaign=Astra101Java">Registration Page</a></li></ul><p><img src="images/astra-create-register.png?raw=true" alt="Registration Image" /></p><ul><li><a href="https://astra.datastax.com/">Authentication Page</a></li></ul><p><img src="images/astra-create-login.png?raw=true" alt="Login Image" /></p><p><strong>✅ Step 1b. Fill the create new Database Form</strong></p><p>If you don't have have any Astra instances you will be routed to creation form. Here are some insights.</p><p><img src="images/astra-create-2.png?raw=true" alt="Database Form" /></p><ul><li><p><strong>Set the Compute Size</strong>: Please use <code>Free tier</code>. You instance will be there forever, free of charge, no credit card what so ever.</p></li><li><p><strong>Select the region</strong>: This is the region where your database will reside physically (choose one close to you or your users). For people in EMEA please use <code>europe-west-1</code> idea here is to reduce latency.</p></li><li><p><strong>Database name</strong> - It should be alpha numeric without spaces we propose here <code>demo</code></p></li><li><p><strong>Keyspace name</strong> - It should be alpha numeric without spaces we propose here <code>astra101</code>. You will be able to add keyspaces later.</p></li><li><p><strong>Database User name</strong> - Provide a username your will remember let's user <code>astra</code></p></li><li><p><strong>Password</strong> - Provide a username your will remember let's user <code>astra2020</code></p></li><li><p><strong>Launch the database</strong>. if all fields are filled click the Launch Database button.</p></li></ul><p><img src="images/astra-create-3.png?raw=true" alt="Launch Database" /></p><p><strong>✅ Step 1c. View your Database and connect</strong></p><p>View your database. It may take 2-3 minutes for your database to spin up. You will receive an email at that point. But, go ahead and continue with the rest of the exercise now.</p><p><img src="images/astra-create-4.png?raw=true" alt="View Database" /></p><p>Once Database is ready you should see the following home page:</p><p><img src="images/astra-create-5.png?raw=true" alt="Home Page" /></p><p>Let’s review the database you have configured. In the box on the left side of the window, you can see the database and keyspace name metadata. The box on the right describes the size and location of your database along with your estimated cost. Once Astra initializes the database completely, the left box will have connection details.</p><p><a href="#table-of-content">🏠 Back to Table of Content</a></p><h2><a class="anchor" aria-hidden="true" id="2-download-the-secure-bundle"> </a>2. Download the secure bundle</h2><p><strong>✅ Step 2a. Download the secure connect bundle</strong> : Go to the home page. Execute a <em>refresh</em> of the page using (F5) (the download link will be valid for 5 minutes and we want to ensure NOT to reach the timeout). Locate link <code>Download secure connect bundle</code> and click. You should download a file named <code>secure-connect-&lt;your_db_name&gt;.zip</code>. Please remember the location of the file.</p><p><img src="images/astra-create-7.png?raw=true" alt="TodoBackendClient" /></p><p>Save the file in a path you will remember, again we will need it for the next exercises.</p><p><a href="#table-of-contents">🏠Back to HOME workshop</a></p><h2><a class="anchor" aria-hidden="true" id="3-run-the-application"> </a>3. Run the application</h2><p><strong>✅ Step 3a. Edit the configuration files</strong> :</p><p>locate the file <code>application.conf</code> and edit #1, #2, #3 reflecting user,passwordmzip and keyspace.</p><pre lang="yaml"><code>datastax-java-driver {   basic {    request {    	timeout     = 10 seconds        consistency = LOCAL_QUORUM        page-size   = 5000    }    # 1. Enter keyspacec     session-keyspace = astra101    cloud {      #2. Where is the zip      secure-connect-bundle = /Users/cedricklunven/Downloads/secure-connect-astra.zip    }  }  advanced {    auth-provider {      class = PlainTextAuthProvider      # 3. User and password      username = astra       password = astra2020    }    connection {      init-query-timeout = 10 seconds      set-keyspace-timeout = 10 seconds    }    control-connection.timeout = 10 seconds  }}</code></pre><p><strong>✅ Step 3b. Run the demo</strong> :</p><p>You can now run with</p><pre><code>mvn exec:java</code></pre><p>If you are not using Maven all dependencies are in the folder <code>libs</code> at root of this repo</p><p>You should have the following output</p><pre><code>Initializing connection to ASTRA+ Connection Successfully established.+ Table 'messages' has been created.+ Messages '52e0d0a0-f21d-11ea-8327-93731335709d' has been created.+ Messages '537e7030-f21d-11ea-8327-93731335709d' has been created.+ Reading records from table:   Astra says 'Hello' to 'You'   Astra says ' World !' to 'You'[OK] - End of Demo</code></pre>
SUCCESS SAVING README for DataStax-Examples-Astra101Java
Getting astra.json for DataStax-Examples/astra-spark-migration at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="spark-migration-tool-for-astra-db"> </a>Spark Migration Tool for Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-the-astra-db-to-spark-migration-tool"> </a>Running the Astra DB to Spark Migration Tool</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
HTML FOR DataStax-Examples-astra-spark-migration<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="spark-migration-tool-for-astra-db"> </a>Spark Migration Tool for Astra DB</h1><p><em>40 minutes, Expert, <a href="https://github.com/DataStax-Examples/astra-spark-migration#prerequisites">Start Building</a></em></p><p>Migrate data from an existing Cassandra cluster to Astra DB using a Spark application.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-spark-migration/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Leverage Spark to migrate data from a Cassandra cluster to Cassandra on Astra DB.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>We're using Spark to migrate data from a Cassandra cluster to Cassandra on Astra DB.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/astra-spark-migration#prerequisites">https://github.com/DataStax-Examples/astra-spark-migration</a></p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-the-astra-db-to-spark-migration-tool"> </a>Running the Astra DB to Spark Migration Tool</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/3yGg7Y3">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/astra-spark-migration">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-astra-spark-migration
Getting astra.json for DataStax-Examples/astra-nodejs-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="nodejs-starter"> </a>NodeJS Starter</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-nodejs-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="nodejs-starter"> </a>NodeJS Starter</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-nodejs-starter/blob/master/README.md#quick-start">Start Building</a></em></p><p>Bootstrap your next NodeJS app with an Astra integration.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/2YmhZJ6">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_nodejs_starter</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-nodejs-starter"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database and upload it to your Gitpod instance. Rename it to <code>secure-connect-bundle.zip</code></li><li>Start the example by running <code>npm start</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>Bootstrap a NodeJS app with Astra already integrated.</p><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the NodeJS starter app.</p>
SUCCESS SAVING README for DataStax-Examples-astra-nodejs-starter
Getting astra.json for DataStax-Examples/spring-petclinic-reactive at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="reactive-implementation-of-spring-petclinic"> </a>Reactive Implementation of 🐈 Spring PetClinic 🐕</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3>
HTML FOR DataStax-Examples-spring-petclinic-reactive<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="reactive-implementation-of-spring-petclinic"> </a>Reactive Implementation of 🐈 Spring PetClinic 🐕</h1><p><em>15 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisites">Start Building</a></em></p><p>This sample is a fully reactive version of the Spring PetClinic application using Spring WebFlux.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/spring-petclinic-reactive/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/spring-petclinic-reactive#prerequisite">https://github.com/DataStax-Examples/spring-petclinic-reactive</a></p><!--- STARTEXCLUDE ---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/38yYuif">DataStax Astra DB account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="GITHUB_URL">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-gitpod">Running on Gitpod</a></li><li><a href="#deploying-to-vercel">Deploying to Vercel</a></li><li><a href="#deploying-to-netlify">Deploying to Netlify</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3><ol><li>Click the 'Open in Gitpod' link:<a href="https://gitpod.io/#https://github.com/spring-petclinic/spring-petclinic-reactive"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li></ol><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-spring-petclinic-reactive
Getting astra.json for DataStax-Examples/battlestax at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="battlestax"> </a>BattleStax</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-battlestax"> </a>Running BattleStax</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-the-full-game"> </a>Running the full game</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="tutorial-steps"> </a>Tutorial Steps</h2>
HTML FOR DataStax-Examples-battlestax<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="battlestax"> </a>BattleStax</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">Start Building</a></em></p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>BattleStax is a stateful JAMStack game that is wholesome fun for the entire crew.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Deploy a scalable JAMStack app to production</li><li>Leverage a good CI/CD process to manage your JAMStack App</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>The BattleStax players watch a lobby screen while playing the game on their devices.</p><p><img src="https://raw.githubusercontent.com/DataStax-Examples/battlestax/master/tutorial/architecture1.png" alt="image" /></p><p><a href="https://jamstack.org/">JAMstack</a> is a big leap forward in how we can write web applications that are easy to write, deploy, scale, and also maintain. Using this approach means that newly created content is rendered from a content API, while a static render of it is being built into the site for future.</p><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">https://github.com/DataStax-Examples/battlestax</a></p><!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="running-battlestax"> </a>Running BattleStax</h1><p>Follow the instructions below to get started.</p><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><ol><li><p>Create a <a href="https://dtsx.io/3jGT8b4">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li><li><p>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><ol><li><p>Click <code>Use this template</code> at the top of the <a href="https://github.com/DataStax-Examples/battlestax">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><h2><a class="anchor" aria-hidden="true" id="running-the-full-game"> </a>Running the full game</h2><p><em>Make sure you've completed the <a href="https://github.com/DataStax-Examples/battlestax#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="https://github.com/DataStax-Examples/battlestax#running-on-your-local-machine">Running on your local machine</a></li></ul><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><ol><li>Check out the <code>full-game</code> branch</li></ol><pre lang="sh"><code>git fetchgit checkout full-game</code></pre><ol start="2"><li><p>Create a <code>.env</code> file and fill it with values from the <code>.env.example</code> file.</p></li><li><p>Make sure the package dependencies are installed</p></li></ol><pre lang="sh"><code># install dependenciesnpm install</code></pre><ol start="3"><li>Then, start the app in dev mode. Changes in the <code>src</code> or <code>functions</code> directories will trigger reloads.</li></ol><pre lang="sh"><code># start battlestax in dev modenpm run dev</code></pre><h2><a class="anchor" aria-hidden="true" id="tutorial-steps"> </a>Tutorial Steps</h2><p>The above instructions are great to get you up and running pretty quickly, but if you would like to learn how to fully deploy the application to production with JAMStack then click the button below to get started.</p><p align="center"><a href="https://github.com/DataStax-Examples/battlestax/wiki"> <img src="https://dabuttonfactory.com/button.png?t=Open+the+workshop&f=Roboto-Bold&ts=26&tc=fff&hp=45&vp=20&c=11&bgt=unicolored&bgc=15d798" /></a></p><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-battlestax
Getting astra.json for DataStax-Examples/doom-patrol at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="doom-patrol"> </a>Doom Patrol</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="components"> </a>Components</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="astra-stargate"> </a>Astra &amp; Stargate</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="backend"> </a>Backend</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="running"> </a>Running</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="unit-tests"> </a>Unit Tests</h4>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="frontend"> </a>Frontend</h3>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4>
REPLACED LINE WITH <h4><a class="anchor" aria-hidden="true" id="running"> </a>Running</h4>
HTML FOR DataStax-Examples-doom-patrol<p><img src="doom.png" alt="Doom Patrol" /></p><h1><a class="anchor" aria-hidden="true" id="doom-patrol"> </a>Doom Patrol</h1><p>Geospatial data store based on Astra and Stargate leveraging both the keyspace and document APIs.</p><h2><a class="anchor" aria-hidden="true" id="components"> </a>Components</h2><h3><a class="anchor" aria-hidden="true" id="astra-stargate"> </a>Astra &amp; Stargate</h3><p>Awesome C*aaS and API interfaces for powering the data layer behind our application.</p><h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4><ol><li><p>Create an <a href="https://astra.datastax.com">Astra Database</a></p></li><li><p>Take note of the Database ID, Region, Username and Password</p></li><li><p>Export these values for the backend to use later</p><pre lang="console"><code>export ASTRA_DATABASE_ID=00000000-0000-0000-0000-000000000000export ASTRA_REGION=us-east1export ASTRA_DATABASE_USERNAME=MyAwesomeUsernameexport ASTRA_DATABASE_PASSWORD=MrNobodyexport ASTRA_KEYSPACE=dooooom</code></pre></li><li><p>Create a new table in the CQLSH Console</p><pre lang="console"><code>CREATE TABLE dooooom.geohash (    hash text PRIMARY KEY,    id text);</code></pre></li></ol><h3><a class="anchor" aria-hidden="true" id="backend"> </a>Backend</h3><p>Lightweight Flask application with helper libraries around GeoJSON, GeoHashing, and the Astra REST APIs.</p><h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4><pre lang="console"><code>cd backendvirtualenv venvsource venv/bin/activatepip3 install -r requirements.txt</code></pre><h4><a class="anchor" aria-hidden="true" id="running"> </a>Running</h4><pre lang="console"><code>cd backendsource venv/bin/activatepython3 main.py</code></pre><h4><a class="anchor" aria-hidden="true" id="unit-tests"> </a>Unit Tests</h4><pre lang="console"><code>cd backendsource venv/bin/activatepython -m unittest discover -s test -v -p '**test_*.py'</code></pre><p><img src="alaska.png" alt="Frontend Screenshot" /></p><h3><a class="anchor" aria-hidden="true" id="frontend"> </a>Frontend</h3><p>React Single Page Application (SPA) leveraging the <a href="https://kepler.gl/">Kepler.gl</a> for visualizing GeoJSON data served by the backend.</p><h4><a class="anchor" aria-hidden="true" id="setup"> </a>Setup</h4><ol><li>Sign up for a MapBox API token</li></ol><pre lang="console"><code>cd frontendnpm install</code></pre><h4><a class="anchor" aria-hidden="true" id="running"> </a>Running</h4><pre lang="console"><code>cd frontendnpm run start</code></pre>
SUCCESS SAVING README for DataStax-Examples-doom-patrol
Getting astra.json for DataStax-Examples/astra-tik-tok at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="social-media-app-using-react-jamstack-and-astra-db"> </a>Social Media App using React, JAMStack and Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="video-content"> </a>Video Content:</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="if-you-did-like-this-video-please-hit-the-like-and-subscribe-button-so-i-know-to-make-more"> </a>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3>
HTML FOR DataStax-Examples-astra-tik-tok<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="social-media-app-using-react-jamstack-and-astra-db"> </a>Social Media App using React, JAMStack and Astra DB</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/astra-tik-tok/blob/master/README.md#quickstart">Start Building</a></em></p><p>A simple Tik-Tok clone running on Astra DB that leverages the Document API.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-tik-tok/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/2WMxoBQ">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_tiktok</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-tik-tok"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><!--- STARTEXCLUDE ---><h3><a class="anchor" aria-hidden="true" id="video-content"> </a>Video Content:</h3><ul><li><a href="https://youtu.be/IATOicvih5A">https://youtu.be/IATOicvih5A</a></li><li>(00:00) Introduction</li><li>(03:05) Creating our Database on DataStax</li><li>(06:52) Setting up our App</li><li>(12:37) Routing Pages</li><li>(18:02) Creating Components</li><li>(28:32) Introduction to Data with Netlify and Stargate</li><li>(30:10) Introduction to using the astrajs/collections</li><li>(34:01) Posting data to our Database (creating dummy Tik Tok posts)</li><li>(34:01) Adding authorization to access our Database</li><li>(43:10) Getting data from our Database (getting all our Tik Tok posts)</li><li>(50: 32) Viewing all our Data</li><li>(51:56) Rendering components based on our Data</li><li>(01:17:01) Editing our Data (following/unfollowing a user)</li><li>(01:32:57) Adding new Data to our Database (creating a Tik Tok post)</li></ul><h3><a class="anchor" aria-hidden="true" id="if-you-did-like-this-video-please-hit-the-like-and-subscribe-button-so-i-know-to-make-more"> </a>If you did like this video, please hit the Like and Subscribe button so I know to make more!</h3><ul><li>Twitter: <a href="https://twitter.com/ania_kubow">https://twitter.com/ania_kubow</a></li><li>YouTube: <a href="https://youtube.com/aniakubow">https://youtube.com/aniakubow</a></li><li>Instagram: <a href="https://instagram.com/aniakubow">https://instagram.com/aniakubow</a></li></ul><!--- ENDEXCLUDE --->
SUCCESS SAVING README for DataStax-Examples-astra-tik-tok
Getting astra.json for DataStax-Examples/sample-app-template at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="name"> </a>{name}</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="running-name"> </a>Running {name}</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="deploying-to-vercel"> </a>Deploying to Vercel</h3>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="deploying-to-netlify"> </a>Deploying to Netlify</h3>
HTML FOR DataStax-Examples-sample-app-template<!--- WARNING: You must remove all comments (except exclusion tags) in your Sample App README.md ---><!--- Use the below tags to exclude content from the Astra DB UI ---><!--- STARTEXCLUDE ---><!--- ENDEXCLUDE ---><!--- The Project Name, duration and skillLevel, make sure these values matchthe astra.jsonUpdate the INSTRUCTIONS_LINK with the absolute path to your INSTRUCTIONS.md---><h1><a class="anchor" aria-hidden="true" id="name"> </a>{name}</h1><p><em>{duration}, {skillLevel}, <a href="INSTRUCTIONS_LINK">Start Building</a></em></p><!---  A short few sentences describing what is the purpose of the example and what the user will learne.g.This application shows how to use configure your NodeJs application to connect to DDAC/Cassandra/DSE or an Apollo database at runtime.This should be the same as the "description" key in the astra.json file. ---><p>{description}</p><!--- heroImage example:![image](https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-sample-app-default.png)Be sure to include 2 line breaks before and after the hero image--><p>{heroImage}</p><!--- A list of the top objectives that are being demonstrated by this samplee.g.* To demonstrate how to specify at runtime between a standard (DSE/DDAC/C*) client configuration and an Apollo configuration for the same application.---><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>{objective 1}</li></ul><!--- A description of how this sample works and how it demonstrates the objectives outlined above--->  <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>{howThisWorks}</p><!--- Replace INSTRUCTIONS_LINK with an absolute path link to your instructions---><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><p>To build and play with this app, follow the build instructions that are located here: <a href="INSTRUCTIONS_LINK">INSTRUCTIONS_LINK</a></p><!--- Everything below Get Started should be excluded from the Astra UI ---><!--- STARTEXCLUDE ---><!--- ENDEXCLUDE ---><!--- Enter the repository name ---><h1><a class="anchor" aria-hidden="true" id="running-name"> </a>Running {name}</h1><p>Follow the instructions below to get started.</p><!--- Modify this section as needed, however always include the Astra DB setup parts---><h2><a class="anchor" aria-hidden="true" id="prerequisites"> </a>Prerequisites</h2><p>Let's do some initial setup by creating a serverless(!) database.</p><h3><a class="anchor" aria-hidden="true" id="datastax-astra"> </a>DataStax Astra</h3><!--- enter a unique UTM_CODE for your sample app below ---><ol><li><p>Create a <a href="https://astra.datastax.com/register?utm_source=github&amp;utm_medium=referral&amp;utm_campaign=UTM_CODE">DataStax Astra account</a> if you don't already have one:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-register-basic-auth.png" alt="image" /></p></li><li><p>On the home page. Locate the button <strong><code>Create Database</code></strong><img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-dashboard.png" alt="image" /></p></li><li><p>Locate the <strong><code>Get Started</code></strong> button to continue<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-select-plan.png" alt="image" /></p></li><li><p>Define a <strong>database name</strong>, <strong>keyspace name</strong> and select a database <strong>region</strong>, then click <strong>create database</strong>.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-create-db.png" alt="image" /></p></li><li><p>Your Astra DB will be ready when the status will change from <em><code>Pending</code></em> to <strong><code>Active</code></strong> 💥💥💥<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-active.png" alt="image" /></p></li><li><p>After your database is provisioned, we need to generate an Application Token for our App. Go to the <code>Settings</code> tab in the database home screen.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings.png" alt="image" /></p></li><li><p>Select <code>Admin User</code> for the role for this Sample App and then generate the token. Download the CSV so that we can use the credentials we need later.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-settings-token.png" alt="image" /></p></li></ol><!--- When connecting via an API, use the connect screen step below---><ol><li>After you have your Application Token, head to the database connect screen and copy the connection information that we'll need later. We'll replace <code>ASTRA_DB_APPLICATION_TOKEN</code> with the <code>Token</code> value that is part of your Application Token.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect.png" alt="image" /></li></ol><!--- When connecting with a secure bundle, use the service account steps below---><ol><li><p>After you have your Application Token, head to the database connect screen and select the driver connection that we need. Go ahead and download the <code>Secure Bundle</code> for the driver.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle.png" alt="image" /></p></li><li><p>Make note of where to use the <code>Client Id</code> and <code>Client Secret</code> that is part of the Application Token that we generated earlier.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/astra-db-connect-bundle-driver.png" alt="image" /></p></li></ol><h3><a class="anchor" aria-hidden="true" id="github"> </a>Github</h3><!-- Enter your GITHUB_URL below --><ol><li><p>Click <code>Use this template</code> at the top of the <a href="GITHUB_URL">GitHub Repository</a>:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-use-template.png" alt="image" /></p></li><li><p>Enter a repository name and click 'Create repository from template':<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-create-repository.png" alt="image" /></p></li><li><p>Clone the repository:<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/github-clone.png" alt="image" /></p></li></ol><!--- Include locally as a minimum so that folks willcreate an Astra DB and use your repository as a template.Remove paths that you don't need.---><h2><a class="anchor" aria-hidden="true" id="getting-started-paths"> </a>🚀 Getting Started Paths:</h2><p><em>Make sure you've completed the <a href="#prerequisites">prerequisites</a> before starting this step</em></p><ul><li><a href="#running-on-your-local-machine">Running on your local machine</a></li><li><a href="#running-on-gitpod">Running on Gitpod</a></li><li><a href="#deploying-to-vercel">Deploying to Vercel</a></li><li><a href="#deploying-to-netlify">Deploying to Netlify</a></li></ul><!--- Include the appropriate commands to run the app locally (post cloning). If you're usingDocker or something similar, include that setup here.---><h3><a class="anchor" aria-hidden="true" id="running-on-your-local-machine"> </a>Running on your local machine</h3><!--- Include Gitpod where possible, it provides a good DX for experimentation ---><h3><a class="anchor" aria-hidden="true" id="running-on-gitpod"> </a>Running on Gitpod</h3><!-- Enter your GITPOD_LINK below --><ol><li>Click the 'Open in Gitpod' link:<a href="GITPOD_LINK"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li></ol><h3><a class="anchor" aria-hidden="true" id="deploying-to-vercel"> </a>Deploying to Vercel</h3><!-- Enter your VERCEL_URL below --><ol><li>Click the 'Deploy' button:<a href="VERCEL_URL"><img src="https://vercel.com/button" alt="Deploy with Vercel" /></a></li></ol><h3><a class="anchor" aria-hidden="true" id="deploying-to-netlify"> </a>Deploying to Netlify</h3><!-- Enter your NETLIFY_URL below --><ol><li>Click the 'Deploy to Netlify' button:<a href="NETLIFY_URL"><img src="https://www.netlify.com/img/deploy/button.svg" alt="Deploy to Netlify" /></a></li></ol>
SUCCESS SAVING README for DataStax-Examples-sample-app-template
Getting astra.json for DataStax-Examples/astra-loom at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-db-loom"> </a>Astra DB Loom</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-loom<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="astra-db-loom"> </a>Astra DB Loom</h1><p><em>60 minutes, Advanced, <a href="https://github.com/DataStax-Examples/astra-loom#prerequisites">Start Building</a></em></p><p>Loom is a thread based chat server, where users can send messages to one or more threads via hashtags (ex. &quot;I'm heading to the park at noon #family #friends #frisbee_club&quot; ). Users can subscribe to new threads they see by clicking them and start new threads but just adding a new hashtag to a message.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-loom/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ol start="0"><li><a href="https://dtsx.io/38DEkDw">Signup for DataStax Astra</a>, or login to your already existing account.</li></ol><!--- ENDEXCLUDE ---><ol><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> or use an existing one.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_loom</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running the following command in the Gitpod console:</li></ol><pre lang="bash"><code>source .envmix phx.server</code></pre><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>The app demonstrates working with DataStax Astra DB, Elixir, and Phoenix Liveviews together. The project attempts to make the best use of this stack. Messages histories are saved and loaded in Astra DB, while new messages are shared via Phoenix channels between all active users in a &quot;thread&quot;. The goal is a fast, scalable, and durable chat/messaging application.</p>
SUCCESS SAVING README for DataStax-Examples-astra-loom
Getting astra.json for DataStax-Examples/glitch-astra-starter at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="glitch-and-astra-db-starter"> </a>Glitch and Astra DB Starter</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-glitch-astra-starter<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="glitch-and-astra-db-starter"> </a>Glitch and Astra DB Starter</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/glitch-astra-starter#quick-start">Start Building</a></em></p><p>Jumpstart your next NodeJS prototype with this starter!</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/glitch-astra-starter/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/2YmhZJ6">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_glitch_starter</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Login to or create a <a href="https://glitch.com">Glitch</a> account.</li><li>Start a new project using the sample app github repository (<a href="https://github.com/DataStax-Examples/glitch-astra-starter">https://github.com/DataStax-Examples/glitch-astra-starter</a>).<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/glitch-new-project.png" alt="image" /></li><li>Add your Astra DB connection information into the <code>.env</code> section provided by Glitch.<img src="https://raw.githubusercontent.com/DataStax-Examples/sample-app-template/master/screenshots/glitch-env-vars.png" alt="image" /></li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Provide a fullstack development example using Astra DB as the storage backend</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Run this sample in Glitch or on your local machine and then use it to jump start your next App.</p><p><a href="https://glitch.com/">Glitch</a> is a a place to prototype fast, full-stack web apps in your browser for free.</p>
SUCCESS SAVING README for DataStax-Examples-glitch-astra-starter
Getting astra.json for DataStax-Examples/astra-netflix at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>Netflix Clone using Astra DB and GraphQL</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-netflix<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-clone-using-astra-db-and-graphql"> </a>Netflix Clone using Astra DB and GraphQL</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-netflix#quick-start">Start Building</a>, <a href="https://sag-astra-netflix.netlify.app">View Demo</a></em></p><p>Let's code a Netflix Clone with GraphQL Pagination!</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-netflix/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3sYwYUL">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_netflix</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-netflix"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Build a Netflix clone using GraphQL</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the astra-netflix app. You can view a demo of the running app <a href="https://sag-astra-netflix.netlify.app">here</a>.</p><p>Follow along with Ania's <a href="https://www.youtube.com/watch?v=g8COh40v2jU">walkthrough video</a>.</p><p>Additionally, there is a workshop repository for this sample app <a href="https://github.com/datastaxdevs/appdev-week3-graphql">located here</a>.</p>
SUCCESS SAVING README for DataStax-Examples-astra-netflix
Getting astra.json for DataStax-Examples/fastsite-console at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="fastsite"> </a>FastSite</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-fastsite-console<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="fastsite"> </a>FastSite</h1><p><em>60m, advanced, <a href="https://github.com/DataStax-Examples/fastsite-console#quick-start">Start Building</a></em></p><p>FastSite is a no-code tool to generate content-driven websites. It leverages the power of modern JAMStack and cloud-native technologies.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/fastsite-console/master/hero.png" alt="fastsite" /></p><p>Demo Video: <a href="https://youtu.be/3Pw0-7XqjC8">https://youtu.be/3Pw0-7XqjC8</a></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ol start="0"><li><a href="https://dtsx.io/3DKySgr">Signup for DataStax Astra</a>, or login to your already existing account.</li></ol><!--- ENDEXCLUDE ---><ol><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> or use an existing one.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_sites</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/todo-astra-jamstack-netlify"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>.env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ol><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><table><thead><tr><th>Layer</th><th>Technology</th><th>Provider</th></tr></thead><tbody><tr><td>Front-end</td><td>SPA/ SPA-SSR/ Static website</td><td>Netlify/ Vercel</td></tr><tr><td>Back-end</td><td>Serverless Functions</td><td>Netlify/ Vercel</td></tr><tr><td>Database</td><td>Cloud-native NoSQL DB</td><td>DataStax Astra</td></tr></tbody></table>
SUCCESS SAVING README for DataStax-Examples-fastsite-console
Getting astra.json for DataStax-Examples/nf-data-explorer at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="netflix-data-explorer"> </a>Netflix Data Explorer</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-nf-data-explorer<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="netflix-data-explorer"> </a>Netflix Data Explorer</h1><p><em>10 minutes, Beginner, <a href="https://github.com/DataStax-Examples/nf-data-explorer#prerequisites">Start Building</a></em></p><p><a href="https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></p><p>Launch Netlfix's Open Source Data Explorer in Gitpod and connect to your Astra DB instance!</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/nf-data-explorer/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3tuBCKj">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_nf_data_explorer</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database.</li><li>Start the example by running <code>yarn start</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Connect the Netflix Data Explorer that is running in Gitpod to your Astra DB instance.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Run the Netflix Data Explorer in Gitpod by selecting &quot;Open in IDE&quot; or by launching from this <a href="https://gitpod.io/#https://github.com/DataStax-Examples/nf-data-explorer">link</a>.</p>
SUCCESS SAVING README for DataStax-Examples-nf-data-explorer
Getting astra.json for DataStax-Examples/todo-native-mobile at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="react-native-todo-list-an-astra-db-netlify-workshop"> </a>React Native Todo List, an Astra DB + Netlify Workshop</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2>
HTML FOR DataStax-Examples-todo-native-mobile<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="react-native-todo-list-an-astra-db-netlify-workshop"> </a>React Native Todo List, an Astra DB + Netlify Workshop</h1><p><em>40 minutes, Beginner/Intermediate</em></p><p><a href="https://gitpod.io/from-referrer/"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in Gitpod" /></a></p><p>In this workshop, you will learn how to convert the Todo web application from a previous <a href="https://github.com/datastaxdevs/appdev-week1-todolist">DataStaxDevs workshop</a> into a React Native mobile and web application. We will actually be using the same database setup as before, so if you've already created it during the prior workshop, you can skip the Database setup section of this workshop.</p><p>Before going all React Native, if you would like to learn more about React and create your first React app take a look at our previous Todo app workshop. <a href="https://github.com/datastaxdevs/appdev-week1-todolist">HERE</a>.</p><p>This is an example React Native Todo application using a <a href="https://dtsx.io/3nvKRsO">DataStax AstraDB</a> free tier database.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/todo-native-mobile/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Implement a <strong>React Native</strong> Todo app using Expo</li><li>Learn about <strong>React Native</strong> components and how they are used to dynamically update the DOM with new information</li><li>Learn how to convert a React web app to a <strong>React Native</strong> mobile and web app</li><li>Learn how <strong>state</strong> and <strong>props</strong> changes are used</li><li>Leverage Netlify and DataStax AstraDB</li></ul><h2><a class="anchor" aria-hidden="true" id="get-started"> </a>Get Started</h2><!--- STARTEXCLUDE ---><p>Create a <a href="https://dtsx.io/3nvKRsO">DataStax Astra account</a> if you don't already have one.</p><!--- ENDEXCLUDE ---><p>To build and play with this app, follow the workshop instructions that are located here: <a href="https://github.com/DataStax-Examples/todo-native-mobile/blob/master/WORKSHOP.md">https://github.com/DataStax-Examples/todo-native-mobile/blob/master/WORKSHOP.md</a></p>
SUCCESS SAVING README for DataStax-Examples-todo-native-mobile
Getting astra.json for DataStax-Examples/django-cassandra-blog at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-a-blog-with-django-and-astra-db"> </a>Build a Blog With Django and Astra DB</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-django-cassandra-blog<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="build-a-blog-with-django-and-astra-db"> </a>Build a Blog With Django and Astra DB</h1><p><em>15 minutes, Intermediate, <a href="https://github.com/DataStax-Examples/django-cassandra-blog/blob/master/README.md#quick-start">Start Building</a></em></p><p>Learn how to build a blog application with Django and connect it to Astra DB by following along with Tomi's video, located <a href="https://youtu.be/JH24exA7-CA">here</a>.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/django-cassandra-blog/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3z81JIa">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_tech_blog</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/django-cassandra-blog"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>. (The Django setting <code>SECRET_KEY</code> is unrelated to Astra and can be any alphanumeric string.)</li><li>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database and upload it to your Gitpod instance. Rename it to <code>bundle.zip</code>. (To upload the file, drag-and-drop it to the Explorer section of your Gitpod window.)</li><li>Create the project tables in Astra DB by running this command in the console:</li></ul><pre lang="bash"><code>python manage.py syncdb</code></pre><ul><li>Run the Django project by running this command in the console:</li></ul><pre lang="bash"><code>python manage.py runserver</code></pre><ul><li>The app should open in a new browser tab by itself (if it doesn't, check your popup blocker). If you are on Gitpod,its URL will be something like <code>https://8000-sapphire-sailfish-wfxezcum.ws-eu18.gitpod.io/</code>; if you are running locally,open <code>http://127.0.0.1:8000/</code> in your browser instead.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Work through a video tutorial to build a blog with Django and Astra DB</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Follow along in this video tutorial: <a href="https://youtu.be/JH24exA7-CA">https://youtu.be/JH24exA7-CA</a>.</p>
SUCCESS SAVING README for DataStax-Examples-django-cassandra-blog
Getting astra.json for DataStax-Examples/telco-billing-app at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="telco-billing-app"> </a>Telco Billing App</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-telco-billing-app<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="telco-billing-app"> </a>Telco Billing App</h1><p><em>30 minutes, Advanced, <a href="https://github.com/DataStax-Examples/telco-billing-app/blob/master/README.md#quick-start">Start Building</a>, <a href="https://sag-telco-billing-app.netlify.app">View Demo</a></em></p><p>An example of a telcom app dashboard, built with <a href="https://reactjs.org/">React</a> and <a href="https://www.netlify.com">Netlify</a>.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/telco-billing-app/master/hero.png" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/2YNyxJT">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_telco_billing</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/telco-billing-app"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>Launch and explore an example of a telco app dashboard in <a href="https://www.gitpod.io/">Gitpod</a>, built with <a href="https://reactjs.org/">React</a> and <a href="https://www.netlify.com">Netlify</a>.</p><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the telco app. You can view a demo of the running app <a href="https://sag-telco-billing-app.netlify.app">here</a>.</p>
SUCCESS SAVING README for DataStax-Examples-telco-billing-app
Getting astra.json for DataStax-Examples/astra-nextjs-tutorial at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="nextjs-fullstack-tutorial"> </a>NextJS Fullstack Tutorial</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-nextjs-tutorial<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="nextjs-fullstack-tutorial"> </a>NextJS Fullstack Tutorial</h1><p><em>30 minutes, Advanced, <a href="https://github.com/DataStax-Examples/astra-nextjs-tutorial/blob/master/README.md#quick-start">Start Building</a></em></p><p>Create a fullstack NextJS app while following along with the tutorial <a href="https://www.youtube.com/watch?v=FhcCgg4pIg4">video</a> and <a href="https://www.eddiejaoude.io/blog-august-2021-nextjs-datastax">blogpost</a> from Eddie Jaoude.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-nextjs-tutorial/master/hero.jpeg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3AMqKu0">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_nextjs_fullstack</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-nextjs-tutorial"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>Create a fullstack NextJS app while following along with the tutorial <a href="https://www.youtube.com/watch?v=FhcCgg4pIg4">video</a> and <a href="https://www.eddiejaoude.io/blog-august-2021-nextjs-datastax">blogpost</a> from Eddie Jaoude.</p><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the NextJS tutorial app.</p>
SUCCESS SAVING README for DataStax-Examples-astra-nextjs-tutorial
Getting astra.json for DataStax-Examples/astra-nuxtjs-nestjs at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="nuxtjs-nestjs-fullstack-tutorial"> </a>NuxtJS + NestJS Fullstack Tutorial</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-astra-nuxtjs-nestjs<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="nuxtjs-nestjs-fullstack-tutorial"> </a>NuxtJS + NestJS Fullstack Tutorial</h1><p><em>50 minutes, Advanced, <a href="https://github.com/DataStax-Examples/astra-nuxtjs-nestjs/blob/master/README.md#quick-start">Start Building</a></em></p><p>Create a fullstack NuxtJS + NestJS app while following along with the tutorial <a href="https://www.youtube.com/watch?v=TbUpYeLn6SI">video</a> from Eddie Jaoude.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-nuxtjs-nestjs/master/hero.jpeg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3APkrFZ">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_nuxtjs_fullstack</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/astra-nuxtjs-nestjs"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file in the <code>api</code> folder to a file named <code>.env</code> in the <code>api</code> folder and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm start</code> in the Gitpod console while in the <code>api</code> folder.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>Create a fullstack NuxtJS + NestJS app while following along with the tutorial <a href="https://www.youtube.com/watch?v=TbUpYeLn6SI">video</a> from Eddie Jaoude.</p><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Opening and running the app will populate the database you specify in your <code>.env</code> file with the required data, allowing you to explore the NuxtJS + NestJS tutorial app.</p>
SUCCESS SAVING README for DataStax-Examples-astra-nuxtjs-nestjs
Getting astra.json for DataStax-Examples/python-website-scraper at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-a-website-scraper-with-astra-db-python"> </a>Build a Website Scraper with Astra DB + Python</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-python-website-scraper<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="build-a-website-scraper-with-astra-db-python"> </a>Build a Website Scraper with Astra DB + Python</h1><p><em>180 minutes, Advanced, <a href="https://github.com/DataStax-Examples/python-website-scraper/blob/master/README.md">Start Building</a></em></p><p>Learn how to scrape websites with Astra DB, Python, Selenium, Requests HTML, Celery, &amp; FastAPI by following along with CodingEntrepreneurs' video, located <a href="https://youtu.be/NyDT3KkscSk">here</a>.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/python-website-scraper/master/hero.jpeg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3ogyCAI">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><p><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_python_scraper</code> in your database.</p></li><li><p><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</p></li><li><p>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database and save it to your project folder. Rename it to <code>bundle.zip</code></p></li><li><p>Setup your system: Below is a preflight checklist to ensure you system is fully setup to work with this course. All guides and setup can be found in the <a href="https://github.com/DataStax-Examples/python-website-scraper/tree/master/setup">setup</a> directory of this repo.</p><ul><li>Install Selenium &amp; Chromedriver - <a href="https://github.com/DataStax-Examples/python-website-scraper/tree/master/setup/Install%20Selenium%20%26%20Chromedriver%20on%20your%20System.md">setup guide</a></li><li>Install Redis  - <a href="https://github.com/DataStax-Examples/python-website-scraper/tree/master/setup/Setup%20Redis.md">setup guide</a></li><li>Create a virtual environment &amp; install dependencies</li><li>Setup an account with DataStax</li><li>Create your first AstraDB and get API credentials</li><li>Use <code>cassandra-driver</code> to verify your connection to AstraDB</li></ul></li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Follow along in this video tutorial: <a href="https://youtu.be/NyDT3KkscSk">https://youtu.be/NyDT3KkscSk</a>.</p><p>This series is broken up into 4 parts:</p><ul><li><strong>Scraping</strong> How to scrape and parse data from nearly any website with Selenium &amp; Requests HTML.</li><li><strong>Data models</strong> how to store and validate data with <code>cassandra-driver</code>, <code>pydantic</code>, and <strong>AstraDB</strong>.</li><li><strong>Worker &amp; Scheduling</strong> how to schedule periodic tasks (ie scraping) integrated with Redis &amp; AstraDB</li><li><strong>Presentation</strong> How to combine the above steps in as robust web application service</li></ul><p>Here's what each tool is used for:</p><ul><li><strong>Python 3.9</strong> <a href="https://www.python.org/download/">download</a> - programming the logic.</li><li><strong>AstraDB</strong> <a href="https://dtsx.io/3ogyCAI">sign up</a> - highly perfomant and scalable database service by DataStax. AstraDB is a Cassandra NoSQL Database. <a href="https://cassandra.apache.org/_/index.html">Cassandra</a> is used by Netflix, Discord, Apple, and many others to handle astonding amounts of data.</li><li><strong>Selenium</strong> <a href="https://selenium-python.readthedocs.io/">docs</a> - an automated web browsing experience that allows:<ul><li>Run all web-browser actions through code</li><li>Loads JavaScript heavy websites</li><li>Can perform standard user interaction like clicks, form submits, logins, etc.</li></ul></li><li><strong>Requests HTML</strong> <a href="https://docs.python-requests.org/">docs</a> - we're going to use this to parse an HTML document extracted from Selenium</li><li><strong>Celery</strong> <a href="https://docs.celeryproject.org/">docs</a> - Celery providers worker processes that will allow us to schedule when we need to scrape websites. We'll be using <a href="https://redis.io/">redis</a> as our task queue.</li><li><strong>FastAPI</strong> <a href="https://fastapi.tiangolo.com/">docs</a> - as a web application framework to Display and monitor web scraping results from anywhere</li></ul>
SUCCESS SAVING README for DataStax-Examples-python-website-scraper
Getting astra.json for DataStax-Examples/betterreads-webapp at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="betterreads-spring-app"> </a>BetterReads Spring App</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-betterreads-webapp<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="betterreads-spring-app"> </a>BetterReads Spring App</h1><p><em>180 minutes, Advanced, <a href="https://github.com/DataStax-Examples/betterreads-webapp#quick-start">Start Building</a></em></p><p>Companion code for the Java Brains &quot;code with me&quot; series that reads data from <a href="https://dtsx.io/3FkFP94">DataStax Astra DB</a>. The video series is located <a href="https://www.youtube.com/playlist?list=PLqq-6Pq4lTTZgMZbKkvJyr7u2repYYXE-">here</a></p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/betterreads-webapp/master/hero.jpeg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3FkFP94">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_betterreads</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/betterreads-webapp"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Activate your environment settings by running <code>source .env</code> in the Gitpod console.</li><li>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database and upload it to your Gitpod instance. Rename it to <code>secure-connect.zip</code></li><li>Move your <code>secure-connect.zip</code> to <code>src/main/resources</code> in the Gitpod file explorer.</li><li>Start the example by running <code>./mvnw spring-boot:run</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><ul><li>Follow along with the Java Brains &quot;code with me&quot; series. The video playlist is located <a href="https://www.youtube.com/playlist?list=PLqq-6Pq4lTTZgMZbKkvJyr7u2repYYXE-">here</a>.</li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Once the Astra DB credentials are provided, BetterReads can connect to Astra DB.</p>
SUCCESS SAVING README for DataStax-Examples-betterreads-webapp
Getting astra.json for DataStax-Examples/ai-as-an-api at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2>
HTML FOR DataStax-Examples-ai-as-an-api<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="ai-as-an-api"> </a>AI as an API</h1><p><em>180 minutes, Advanced, <a href="https://github.com/DataStax-Examples/ai-as-an-api/blob/master/README.md">Start Building</a></em></p><p>Train a ML Model and turn it into an Rest API using Astra DB, Keras, and FastAPI by following along with CodingEntrepreneurs' video, part one is located <a href="https://youtu.be/56qQNcHJxyQ">here</a>, part two is located <a href="https://www.youtube.com/watch?v=nTdMjFcK3SM">here</a>.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/ai-as-an-api/master/hero.jpeg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3aKPUOt">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_ai_api</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Get your <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-an-astra-db-secure-connect-bundle">secure connect bundle</a> from the connect page of your database and save it to your project folder. Rename it to <code>bundle.zip</code></li></ul><h2><a class="anchor" aria-hidden="true" id="how-this-works"> </a>How this works</h2><p>Follow along in this video tutorial: <a href="https://youtu.be/56qQNcHJxyQ">https://youtu.be/56qQNcHJxyQ</a>.</p>
SUCCESS SAVING README for DataStax-Examples-ai-as-an-api
Getting astra.json for DataStax-Examples/astra-ide-plugin at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="jetbrains-astra-db-plugin"> </a>JetBrains Astra DB Plugin</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
HTML FOR DataStax-Examples-astra-ide-plugin<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="jetbrains-astra-db-plugin"> </a>JetBrains Astra DB Plugin</h1><p><em>15 minutes, Beginner, <a href="https://github.com/DataStax-Examples/astra-ide-plugin/blob/master/README.md#quick-start">Get Started</a></em></p><p>A Jetbrains plugin that allows you to connect and explore your data on Astra DB or any Apache Cassandra cluster running with Stargate.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/astra-ide-plugin/master/hero.jpeg" alt="image" /></p><p>View the plugin's information page at JetBrains: <a href="https://plugins.jetbrains.com/plugin/17013-datastax-astra-db-explorer/">https://plugins.jetbrains.com/plugin/17013-datastax-astra-db-explorer/</a></p><p>View the plugin's source code on GitHub: <a href="https://github.com/datastax/astra-ide-plugin">https://github.com/datastax/astra-ide-plugin</a></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://dtsx.io/3B1szT3">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/datastax/astra-ide-plugin/wiki/Getting-Started">Install the Plugin</a> Follow the installation instructions at the plugin GitHub repository.</li></ul>
SUCCESS SAVING README for DataStax-Examples-astra-ide-plugin
Getting astra.json for DataStax-Examples/rpg-astra at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="build-an-astra-db-rpg"> </a>Build an Astra DB RPG</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2>
HTML FOR DataStax-Examples-rpg-astra<!--- STARTEXCLUDE ---><h1><a class="anchor" aria-hidden="true" id="build-an-astra-db-rpg"> </a>Build an Astra DB RPG</h1><p><em>30 minutes, Advanced, <a href="https://github.com/DataStax-Examples/rpg-astra/blob/master/README.md#quick-start">Start Building</a></em></p><p>This example is a simple RPG application that allows you to add skills and allocate skill points to them, gaining you experience and levels as a result.</p><!--- ENDEXCLUDE ---><p><img src="https://raw.githubusercontent.com/DataStax-Examples/rpg-astra/master/hero.jpg" alt="image" /></p><h2><a class="anchor" aria-hidden="true" id="quick-start"> </a>Quick Start</h2><!--- STARTEXCLUDE ---><ul><li><a href="https://astra.dev/3ANTraE">Signup for DataStax Astra</a>, or login to your already existing account.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db">Create an Astra DB Database</a> if you don't already have one.</li></ul><!--- ENDEXCLUDE ---><ul><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-astra-db-keyspace">Create an Astra DB Keyspace</a> called <code>sag_rpg</code> in your database.</li><li><a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#create-an-application-token">Generate an Application Token</a> with the role of <code>Database Administrator</code> for the Organization that your Astra DB is in.</li><li>Click the 'Open in Gitpod' link: <a href="https://gitpod.io/#https://github.com/DataStax-Examples/rpg-astra"><img src="https://gitpod.io/button/open-in-gitpod.svg" alt="Open in IDE" /></a></li><li>Once the app is finished launching in the Gitpod IDE, copy the <code>env.example</code> file to a file named <code>.env</code> and fill the required values in from your Application Token and <a href="https://github.com/DataStax-Examples/sample-app-template/blob/master/GETTING_STARTED.md#get-your-astra-db-connection-settings">Astra DB connection settings</a>.</li><li>Start the example by running <code>npm run dev</code> in the Gitpod console.</li></ul><h2><a class="anchor" aria-hidden="true" id="objectives"> </a>Objectives</h2><p>Launch and explore an example of a RPG app in <a href="https://www.gitpod.io/">Gitpod</a>, built with <a href="https://reactjs.org/">React</a> and <a href="https://www.netlify.com">Netlify</a>.</p>
SUCCESS SAVING README for DataStax-Examples-rpg-astra
Getting astra.json for DataStax-Examples/weatherapp at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="weatherapp"> </a>weatherapp</h1>
REPLACED LINE WITH <h3><a class="anchor" aria-hidden="true" id="app-dev-framework"> </a>App Dev Framework</h3>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-on-local"> </a>Running on local</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="learn-more"> </a>Learn More</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="deploy-on-vercel"> </a>Deploy on Vercel</h2>
HTML FOR DataStax-Examples-weatherapp<h1><a class="anchor" aria-hidden="true" id="weatherapp"> </a>weatherapp</h1><p>Stargate Document API as TimeSeries DB for Weather Monitoring</p><p>Stargate is a data gateway deployed between the client applications and a database. The Stargate Document API modifies and queries data stored as unstructured JSON documents in collections. This gives the application developers native json support without having to give up any of the reliability and scalability goodness of Cassandra. This Stargate Docs API lets most Cassandra distros (Cassandra 3.11, Cassandra 4.0, and DataStax Enterprise 6.8), work with JSON through a REST API. The deep dive details on how to the Stargate Docs API stores the json as C* column family within Cassandra are at <a href="https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html">https://stargate.io/2020/10/19/the-stargate-cassandra-documents-api.html</a>.</p><p>In this blog, you would see how to use the Stargate Docs API and build a simple TimeSeries DB for Weather monitoring on top of the DataStax Astra DB. The demo is restricted to the data model, data extraction, storage and retrieval queries for the Weather monitoring app.</p><p>The retrieval queries for various reports are available as Postman collection at <a href="https://www.postman.com/datastax/workspace/stargate-cassandra/collection/24325908-23927518-65bd-4797-911b-e872931bb735?ctx=documentation">https://www.postman.com/datastax/workspace/stargate-cassandra/collection/24325908-23927518-65bd-4797-911b-e872931bb735?ctx=documentation</a></p><h3><a class="anchor" aria-hidden="true" id="app-dev-framework"> </a>App Dev Framework</h3><p>This is a <a href="https://nextjs.org/">Next.js</a> project bootstrapped with <a href="https://github.com/vercel/next.js/tree/canary/packages/create-next-app"><code>create-next-app</code></a>.</p><h2><a class="anchor" aria-hidden="true" id="running-on-local"> </a>Running on local</h2><ol><li><p>add the configuration params to <code>.env.local</code></p></li><li><p>run the development server:</p></li></ol><pre lang="bash"><code>npm run dev# oryarn dev</code></pre><p>Open <a href="http://localhost:3000">http://localhost:3000</a> with your browser to see the result.</p><p>You can start editing the page by modifying <code>pages/index.tsx</code>. The page auto-updates as you edit the file.</p><p>The <code>pages/api</code> directory is mapped to <code>/api/*</code>. Files in this directory are treated as <a href="https://nextjs.org/docs/api-routes/introduction">API routes</a> instead of React pages.</p><h2><a class="anchor" aria-hidden="true" id="learn-more"> </a>Learn More</h2><p>To learn more about Next.js, take a look at the following resources:</p><ul><li><a href="https://nextjs.org/docs">Next.js Documentation</a> - learn about Next.js features and API.</li><li><a href="https://nextjs.org/learn">Learn Next.js</a> - an interactive Next.js tutorial.</li></ul><p>You can check out <a href="https://github.com/vercel/next.js/">the Next.js GitHub repository</a> - your feedback and contributions are welcome!</p><h2><a class="anchor" aria-hidden="true" id="deploy-on-vercel"> </a>Deploy on Vercel</h2><p>The easiest way to deploy your Next.js app is to use the <a href="https://vercel.com/new?utm_medium=default-template&amp;filter=next.js&amp;utm_source=create-next-app&amp;utm_campaign=create-next-app-readme">Vercel Platform</a> from the creators of Next.js.</p><p>Check out our <a href="https://nextjs.org/docs/deployment">Next.js deployment documentation</a> for more details.</p>
SUCCESS SAVING README for DataStax-Examples-weatherapp
Getting astra.json for DataStax-Examples/astra-cli-github-action at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="astra-cli-github-action"> </a>astra-cli-github-action</h1>
HTML FOR DataStax-Examples-astra-cli-github-action<h1><a class="anchor" aria-hidden="true" id="astra-cli-github-action"> </a>astra-cli-github-action</h1><p>Trigger the creation of a DB by github actions</p>
SUCCESS SAVING README for DataStax-Examples-astra-cli-github-action
Getting astra.json for DataStax-Examples/springboot3-astrastreaming-db at 277
Got astrajson
REPLACED LINE WITH <h1><a class="anchor" aria-hidden="true" id="datastock"> </a>DataStock</h1>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="running-the-application"> </a>Running the application</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="deploying-to-production"> </a>Deploying to Production</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="project-structure"> </a>Project structure</h2>
REPLACED LINE WITH <h2><a class="anchor" aria-hidden="true" id="useful-links"> </a>Useful links</h2>
HTML FOR DataStax-Examples-springboot3-astrastreaming-db<h1><a class="anchor" aria-hidden="true" id="datastock"> </a>DataStock</h1><p>This project can be used as a starting point to create your own Vaadin application with Spring Boot.It contains all the necessary configuration and some placeholder files to get you started.</p><h2><a class="anchor" aria-hidden="true" id="running-the-application"> </a>Running the application</h2><p>The project is a standard Maven project. To run it from the command line,type <code>mvnw</code> (Windows), or <code>./mvnw</code> (Mac &amp; Linux), then open<a href="http://localhost:8080">http://localhost:8080</a> in your browser.</p><p>You can also import the project to your IDE of choice as you would with anyMaven project. Read more on <a href="https://vaadin.com/docs/latest/guide/step-by-step/importing">how to import Vaadin projects to differentIDEs</a> (Eclipse, IntelliJ IDEA, NetBeans, and VS Code).</p><h2><a class="anchor" aria-hidden="true" id="deploying-to-production"> </a>Deploying to Production</h2><p>To create a production build, call <code>mvnw clean package -Pproduction</code> (Windows),or <code>./mvnw clean package -Pproduction</code> (Mac &amp; Linux).This will build a JAR file with all the dependencies and front-end resources,ready to be deployed. The file can be found in the <code>target</code> folder after the build completes.</p><p>Once the JAR file is built, you can run it using<code>java -jar target/datastock-1.0-SNAPSHOT.jar</code></p><h2><a class="anchor" aria-hidden="true" id="project-structure"> </a>Project structure</h2><ul><li><code>MainLayout.java</code> in <code>src/main/java</code> contains the navigation setup (i.e., theside/top bar and the main menu). This setup uses<a href="https://vaadin.com/docs/components/app-layout">App Layout</a>.</li><li><code>views</code> package in <code>src/main/java</code> contains the server-side Java views of your application.</li><li><code>views</code> folder in <code>frontend/</code> contains the client-side JavaScript views of your application.</li><li><code>themes</code> folder in <code>frontend/</code> contains the custom CSS styles.</li></ul><h2><a class="anchor" aria-hidden="true" id="useful-links"> </a>Useful links</h2><ul><li>Read the documentation at <a href="https://vaadin.com/docs">vaadin.com/docs</a>.</li><li>Follow the tutorials at <a href="https://vaadin.com/tutorials">vaadin.com/tutorials</a>.</li><li>Watch training videos and get certified at <a href="https://vaadin.com/learn/training">vaadin.com/learn/training</a>.</li><li>Create new projects at <a href="https://start.vaadin.com/">start.vaadin.com</a>.</li><li>Search UI components and their usage examples at <a href="https://vaadin.com/components">vaadin.com/components</a>.</li><li>View use case applications that demonstrate Vaadin capabilities at <a href="https://vaadin.com/examples-and-demos">vaadin.com/examples-and-demos</a>.</li><li>Build any UI without custom CSS by discovering Vaadin's set of <a href="https://vaadin.com/docs/styling/lumo/utility-classes">CSS utility classes</a>.</li><li>Find a collection of solutions to common use cases at <a href="https://cookbook.vaadin.com/">cookbook.vaadin.com</a>.</li><li>Find add-ons at <a href="https://vaadin.com/directory">vaadin.com/directory</a>.</li><li>Ask questions on <a href="https://stackoverflow.com/questions/tagged/vaadin">Stack Overflow</a> or join our <a href="https://discord.gg/MYFq5RTbBn">Discord channel</a>.</li><li>Report issues, create pull requests in <a href="https://github.com/vaadin">GitHub</a>.</li></ul>
SUCCESS SAVING README for DataStax-Examples-springboot3-astrastreaming-db
SUCCESS for all
{"documentId": "all"}
SUCCESS for spring
{"documentId": "spring"}
SUCCESS for noastrajson
{"documentId": "noastrajson"}
SUCCESS for httpie
{"documentId": "httpie"}
SUCCESS for javascript
{"documentId": "javascript"}
SUCCESS for react
{"documentId": "react"}
SUCCESS for doc api
{"documentId": "doc api"}
SUCCESS for apps
{"documentId": "apps"}
SUCCESS for building-sample-apps
{"documentId": "building-sample-apps"}
SUCCESS for astradb
{"documentId": "astradb"}
SUCCESS for dse
{"documentId": "dse"}
SUCCESS for netlify
{"documentId": "netlify"}
SUCCESS for dev
{"documentId": "dev"}
SUCCESS for graphql api
{"documentId": "graphql api"}
SUCCESS for cassandra
{"documentId": "cassandra"}
SUCCESS for workshop
{"documentId": "workshop"}
SUCCESS for gitpod
{"documentId": "gitpod"}
SUCCESS for redux
{"documentId": "redux"}
SUCCESS for java
{"documentId": "java"}
SUCCESS for starters
{"documentId": "starters"}
SUCCESS for rest api
{"documentId": "rest api"}
SUCCESS for labs
{"documentId": "labs"}
SUCCESS for angular
{"documentId": "angular"}
SUCCESS for spark
{"documentId": "spark"}
SUCCESS for grpc api
{"documentId": "grpc api"}
SUCCESS for killrvideo
{"documentId": "killrvideo"}
SUCCESS for python
{"documentId": "python"}
SUCCESS for csharp
{"documentId": "csharp"}
SUCCESS for elixir
{"documentId": "elixir"}
SUCCESS for devops
{"documentId": "devops"}
SUCCESS for ansible-playbooks
{"documentId": "ansible-playbooks"}
SUCCESS for astra-data
{"documentId": "astra-data"}
SUCCESS for devops-apis
{"documentId": "devops-apis"}
SUCCESS for keyspaces
{"documentId": "keyspaces"}
SUCCESS for cql
{"documentId": "cql"}
SUCCESS for nosql
{"documentId": "nosql"}
SUCCESS for database
{"documentId": "database"}
SUCCESS for data modeling
{"documentId": "data modeling"}
SUCCESS for drivers
{"documentId": "drivers"}
SUCCESS for fastapi
{"documentId": "fastapi"}
SUCCESS for express
{"documentId": "express"}
SUCCESS for search
{"documentId": "search"}
SUCCESS for sai
{"documentId": "sai"}
SUCCESS for machine learning
{"documentId": "machine learning"}
SUCCESS for jupyter
{"documentId": "jupyter"}
SUCCESS for pandas
{"documentId": "pandas"}
SUCCESS for pyspark
{"documentId": "pyspark"}
SUCCESS for spark-ml
{"documentId": "spark-ml"}
SUCCESS for jupyter-notebook
{"documentId": "jupyter-notebook"}
SUCCESS for performance testing
{"documentId": "performance testing"}
SUCCESS for nosqlbench
{"documentId": "nosqlbench"}
SUCCESS for performance
{"documentId": "performance"}
SUCCESS for benchmark
{"documentId": "benchmark"}
SUCCESS for test
{"documentId": "test"}
SUCCESS for docker
{"documentId": "docker"}
SUCCESS for helm
{"documentId": "helm"}
SUCCESS for kubernetes
{"documentId": "kubernetes"}
SUCCESS for k8ssandra
{"documentId": "k8ssandra"}
SUCCESS for stargate
{"documentId": "stargate"}
SUCCESS for cloud-native
{"documentId": "cloud-native"}
SUCCESS for certification
{"documentId": "certification"}
SUCCESS for jamstack
{"documentId": "jamstack"}
SUCCESS for dgs-framework
{"documentId": "dgs-framework"}
SUCCESS for streaming
{"documentId": "streaming"}
SUCCESS for reactive
{"documentId": "reactive"}
SUCCESS for webflux
{"documentId": "webflux"}
SUCCESS for ai
{"documentId": "ai"}
SUCCESS for nlp
{"documentId": "nlp"}
SUCCESS for websockets
{"documentId": "websockets"}
SUCCESS for pulsar
{"documentId": "pulsar"}
SUCCESS for event streaming
{"documentId": "event streaming"}
SUCCESS for real-time
{"documentId": "real-time"}
SUCCESS for astrastreaming
{"documentId": "astrastreaming"}
SUCCESS for gaming
{"documentId": "gaming"}
SUCCESS for game
{"documentId": "game"}
SUCCESS for spring-security-oauth2
{"documentId": "spring-security-oauth2"}
SUCCESS for change data capture
{"documentId": "change data capture"}
SUCCESS for data-engineering
{"documentId": "data-engineering"}
SUCCESS for data-science
{"documentId": "data-science"}
SUCCESS for etl
{"documentId": "etl"}
SUCCESS for etl-pipeline
{"documentId": "etl-pipeline"}
SUCCESS for graph
{"documentId": "graph"}
SUCCESS for c#
{"documentId": "c"}
SUCCESS for flask
{"documentId": "flask"}
SUCCESS for nodejs
{"documentId": "nodejs"}
SUCCESS for google-cloud
{"documentId": "google-cloud"}
SUCCESS for serverless-framework
{"documentId": "serverless-framework"}
SUCCESS for ds-bulk
{"documentId": "ds-bulk"}
SUCCESS for tools
{"documentId": "tools"}
SUCCESS for datastax-bulk-loader
{"documentId": "datastax-bulk-loader"}
SUCCESS for cassandra-cql
{"documentId": "cassandra-cql"}
SUCCESS for examples
{"documentId": "examples"}
SUCCESS for nextjs
{"documentId": "nextjs"}
SUCCESS for quarkus
{"documentId": "quarkus"}
SUCCESS for micronaut
{"documentId": "micronaut"}
SUCCESS for helidon
{"documentId": "helidon"}
SUCCESS for scala
{"documentId": "scala"}
SUCCESS for template
{"documentId": "template"}
SUCCESS for glitch
{"documentId": "glitch"}
SUCCESS for headless-cms
{"documentId": "headless-cms"}
SUCCESS for netflix-data-explorer
{"documentId": "netflix-data-explorer"}
SUCCESS for ios
{"documentId": "ios"}
SUCCESS for android
{"documentId": "android"}
SUCCESS for django
{"documentId": "django"}
SUCCESS for video
{"documentId": "video"}
SUCCESS for eddiehub
{"documentId": "eddiehub"}
SUCCESS for nuxtjs
{"documentId": "nuxtjs"}
SUCCESS for nestjs
{"documentId": "nestjs"}
SUCCESS for selenium
{"documentId": "selenium"}
SUCCESS for jetbrains
{"documentId": "jetbrains"}
SUCCESS for timeseries db
{"documentId": "timeseries db"}
SUCCESS for typescript
{"documentId": "typescript"}
SUCCESS for cli
{"documentId": "cli"}
SUCCESS for continuous integration
{"documentId": "continuous integration"}
SUCCESS for github
{"documentId": "github"}
SUCCESS for starter
{"documentId": "starter"}
SUCCESS for sppring
{"documentId": "sppring"}
